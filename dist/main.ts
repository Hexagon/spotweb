// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var P, d, $, S, F, B, T = {}, V = [], Z = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function k(e, t) {
    for(var _ in t)e[_] = t[_];
    return e;
}
function j(e) {
    var t = e.parentNode;
    t && t.removeChild(e);
}
function ee(e, t, _) {
    var r, l, o, s = {};
    for(o in t)o == "key" ? r = t[o] : o == "ref" ? l = t[o] : s[o] = t[o];
    if (arguments.length > 2 && (s.children = arguments.length > 3 ? P.call(arguments, 2) : _), typeof e == "function" && e.defaultProps != null) for(o in e.defaultProps)s[o] === void 0 && (s[o] = e.defaultProps[o]);
    return w(e, s, r, l, null);
}
function w(e, t, _, r, l) {
    var o = {
        type: e,
        props: t,
        key: _,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: l ?? ++$
    };
    return l == null && d.vnode != null && d.vnode(o), o;
}
function L(e) {
    return e.children;
}
function U(e, t) {
    this.props = e, this.context = t;
}
function C(e, t) {
    if (t == null) return e.__ ? C(e.__, e.__.__k.indexOf(e) + 1) : null;
    for(var _; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) return _.__e;
    return typeof e.type == "function" ? C(e) : null;
}
function z(e) {
    var t, _;
    if ((e = e.__) != null && e.__c != null) {
        for(e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) {
            e.__e = e.__c.base = _.__e;
            break;
        }
        return z(e);
    }
}
function M(e) {
    (!e.__d && (e.__d = !0) && S.push(e) && !D.__r++ || F !== d.debounceRendering) && ((F = d.debounceRendering) || setTimeout)(D);
}
function D() {
    for(var e; D.__r = S.length;)e = S.sort(function(t, _) {
        return t.__v.__b - _.__v.__b;
    }), S = [], e.some(function(t) {
        var _, r, l, o, s, f;
        t.__d && (s = (o = (_ = t).__v).__e, (f = _.__P) && (r = [], (l = k({}, o)).__v = o.__v + 1, W(f, o, l, _.__n, f.ownerSVGElement !== void 0, o.__h != null ? [
            s
        ] : null, r, s ?? C(o), o.__h), K(r, o), o.__e != s && z(o)));
    });
}
function G(e, t, _, r, l, o, s, f, p, a) {
    var n, h, c, i, u, b, v, y = r && r.__k || V, g = y.length;
    for(_.__k = [], n = 0; n < t.length; n++)if ((i = _.__k[n] = (i = t[n]) == null || typeof i == "boolean" ? null : typeof i == "string" || typeof i == "number" || typeof i == "bigint" ? w(null, i, null, null, i) : Array.isArray(i) ? w(L, {
        children: i
    }, null, null, null) : i.__b > 0 ? w(i.type, i.props, i.key, i.ref ? i.ref : null, i.__v) : i) != null) {
        if (i.__ = _, i.__b = _.__b + 1, (c = y[n]) === null || c && i.key == c.key && i.type === c.type) y[n] = void 0;
        else for(h = 0; h < g; h++){
            if ((c = y[h]) && i.key == c.key && i.type === c.type) {
                y[h] = void 0;
                break;
            }
            c = null;
        }
        W(e, i, c = c || T, l, o, s, f, p, a), u = i.__e, (h = i.ref) && c.ref != h && (v || (v = []), c.ref && v.push(c.ref, null, i), v.push(h, i.__c || u, i)), u != null ? (b == null && (b = u), typeof i.type == "function" && i.__k === c.__k ? i.__d = p = q(i, p, e) : p = J(e, i, c, y, u, p), typeof _.type == "function" && (_.__d = p)) : p && c.__e == p && p.parentNode != e && (p = C(c));
    }
    for(_.__e = b, n = g; n--;)y[n] != null && (typeof _.type == "function" && y[n].__e != null && y[n].__e == _.__d && (_.__d = C(r, n + 1)), X(y[n], y[n]));
    if (v) for(n = 0; n < v.length; n++)Q(v[n], v[++n], v[++n]);
}
function q(e, t, _) {
    for(var r, l = e.__k, o = 0; l && o < l.length; o++)(r = l[o]) && (r.__ = e, t = typeof r.type == "function" ? q(r, t, _) : J(_, r, r, l, r.__e, t));
    return t;
}
function J(e, t, _, r, l, o) {
    var s, f, p;
    if (t.__d !== void 0) s = t.__d, t.__d = void 0;
    else if (_ == null || l != o || l.parentNode == null) e: if (o == null || o.parentNode !== e) e.appendChild(l), s = null;
    else {
        for(f = o, p = 0; (f = f.nextSibling) && p < r.length; p += 2)if (f == l) break e;
        e.insertBefore(l, o), s = o;
    }
    return s !== void 0 ? s : l.nextSibling;
}
function _e(e, t, _, r, l) {
    var o;
    for(o in _)o === "children" || o === "key" || o in t || N(e, o, null, _[o], r);
    for(o in t)l && typeof t[o] != "function" || o === "children" || o === "key" || o === "value" || o === "checked" || _[o] === t[o] || N(e, o, t[o], _[o], r);
}
function I(e, t, _) {
    t[0] === "-" ? e.setProperty(t, _) : e[t] = _ == null ? "" : typeof _ != "number" || Z.test(t) ? _ : _ + "px";
}
function N(e, t, _, r, l) {
    var o;
    e: if (t === "style") if (typeof _ == "string") e.style.cssText = _;
    else {
        if (typeof r == "string" && (e.style.cssText = r = ""), r) for(t in r)_ && t in _ || I(e.style, t, "");
        if (_) for(t in _)r && _[t] === r[t] || I(e.style, t, _[t]);
    }
    else if (t[0] === "o" && t[1] === "n") o = t !== (t = t.replace(/Capture$/, "")), t = t.toLowerCase() in e ? t.toLowerCase().slice(2) : t.slice(2), e.l || (e.l = {}), e.l[t + o] = _, _ ? r || e.addEventListener(t, o ? R : O, o) : e.removeEventListener(t, o ? R : O, o);
    else if (t !== "dangerouslySetInnerHTML") {
        if (l) t = t.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if (t !== "href" && t !== "list" && t !== "form" && t !== "tabIndex" && t !== "download" && t in e) try {
            e[t] = _ ?? "";
            break e;
        } catch  {}
        typeof _ == "function" || (_ != null && (_ !== !1 || t[0] === "a" && t[1] === "r") ? e.setAttribute(t, _) : e.removeAttribute(t));
    }
}
function O(e) {
    this.l[e.type + !1](d.event ? d.event(e) : e);
}
function R(e) {
    this.l[e.type + !0](d.event ? d.event(e) : e);
}
function W(e, t, _, r, l, o, s, f, p) {
    var a, n, h, c, i, u, b, v, y, g, x, H, E, m = t.type;
    if (t.constructor !== void 0) return null;
    _.__h != null && (p = _.__h, f = t.__e = _.__e, t.__h = null, o = [
        f
    ]), (a = d.__b) && a(t);
    try {
        e: if (typeof m == "function") {
            if (v = t.props, y = (a = m.contextType) && r[a.__c], g = a ? y ? y.props.value : a.__ : r, _.__c ? b = (n = t.__c = _.__c).__ = n.__E : ("prototype" in m && m.prototype.render ? t.__c = n = new m(v, g) : (t.__c = n = new U(v, g), n.constructor = m, n.render = oe), y && y.sub(n), n.props = v, n.state || (n.state = {}), n.context = g, n.__n = r, h = n.__d = !0, n.__h = []), n.__s == null && (n.__s = n.state), m.getDerivedStateFromProps != null && (n.__s == n.state && (n.__s = k({}, n.__s)), k(n.__s, m.getDerivedStateFromProps(v, n.__s))), c = n.props, i = n.state, h) m.getDerivedStateFromProps == null && n.componentWillMount != null && n.componentWillMount(), n.componentDidMount != null && n.__h.push(n.componentDidMount);
            else {
                if (m.getDerivedStateFromProps == null && v !== c && n.componentWillReceiveProps != null && n.componentWillReceiveProps(v, g), !n.__e && n.shouldComponentUpdate != null && n.shouldComponentUpdate(v, n.__s, g) === !1 || t.__v === _.__v) {
                    n.props = v, n.state = n.__s, t.__v !== _.__v && (n.__d = !1), n.__v = t, t.__e = _.__e, t.__k = _.__k, t.__k.forEach(function(A) {
                        A && (A.__ = t);
                    }), n.__h.length && s.push(n);
                    break e;
                }
                n.componentWillUpdate != null && n.componentWillUpdate(v, n.__s, g), n.componentDidUpdate != null && n.__h.push(function() {
                    n.componentDidUpdate(c, i, u);
                });
            }
            if (n.context = g, n.props = v, n.__v = t, n.__P = e, x = d.__r, H = 0, "prototype" in m && m.prototype.render) n.state = n.__s, n.__d = !1, x && x(t), a = n.render(n.props, n.state, n.context);
            else do n.__d = !1, x && x(t), a = n.render(n.props, n.state, n.context), n.state = n.__s;
            while (n.__d && ++H < 25)
            n.state = n.__s, n.getChildContext != null && (r = k(k({}, r), n.getChildContext())), h || n.getSnapshotBeforeUpdate == null || (u = n.getSnapshotBeforeUpdate(c, i)), E = a != null && a.type === L && a.key == null ? a.props.children : a, G(e, Array.isArray(E) ? E : [
                E
            ], t, _, r, l, o, s, f, p), n.base = t.__e, t.__h = null, n.__h.length && s.push(n), b && (n.__E = n.__ = null), n.__e = !1;
        } else o == null && t.__v === _.__v ? (t.__k = _.__k, t.__e = _.__e) : t.__e = ne(_.__e, t, _, r, l, o, s, p);
        (a = d.diffed) && a(t);
    } catch (A) {
        t.__v = null, (p || o != null) && (t.__e = f, t.__h = !!p, o[o.indexOf(f)] = null), d.__e(A, t, _);
    }
}
function K(e, t) {
    d.__c && d.__c(t, e), e.some(function(_) {
        try {
            e = _.__h, _.__h = [], e.some(function(r) {
                r.call(_);
            });
        } catch (r) {
            d.__e(r, _.__v);
        }
    });
}
function ne(e, t, _, r, l, o, s, f) {
    var p, a, n, h = _.props, c = t.props, i = t.type, u = 0;
    if (i === "svg" && (l = !0), o != null) {
        for(; u < o.length; u++)if ((p = o[u]) && "setAttribute" in p == !!i && (i ? p.localName === i : p.nodeType === 3)) {
            e = p, o[u] = null;
            break;
        }
    }
    if (e == null) {
        if (i === null) return document.createTextNode(c);
        e = l ? document.createElementNS("http://www.w3.org/2000/svg", i) : document.createElement(i, c.is && c), o = null, f = !1;
    }
    if (i === null) h === c || f && e.data === c || (e.data = c);
    else {
        if (o = o && P.call(e.childNodes), a = (h = _.props || T).dangerouslySetInnerHTML, n = c.dangerouslySetInnerHTML, !f) {
            if (o != null) for(h = {}, u = 0; u < e.attributes.length; u++)h[e.attributes[u].name] = e.attributes[u].value;
            (n || a) && (n && (a && n.__html == a.__html || n.__html === e.innerHTML) || (e.innerHTML = n && n.__html || ""));
        }
        if (_e(e, c, h, l, f), n) t.__k = [];
        else if (u = t.props.children, G(e, Array.isArray(u) ? u : [
            u
        ], t, _, r, l && i !== "foreignObject", o, s, o ? o[0] : _.__k && C(_, 0), f), o != null) for(u = o.length; u--;)o[u] != null && j(o[u]);
        f || ("value" in c && (u = c.value) !== void 0 && (u !== e.value || i === "progress" && !u || i === "option" && u !== h.value) && N(e, "value", u, h.value, !1), "checked" in c && (u = c.checked) !== void 0 && u !== e.checked && N(e, "checked", u, h.checked, !1));
    }
    return e;
}
function Q(e, t, _) {
    try {
        typeof e == "function" ? e(t) : e.current = t;
    } catch (r) {
        d.__e(r, _);
    }
}
function X(e, t, _) {
    var r, l;
    if (d.unmount && d.unmount(e), (r = e.ref) && (r.current && r.current !== e.__e || Q(r, null, t)), (r = e.__c) != null) {
        if (r.componentWillUnmount) try {
            r.componentWillUnmount();
        } catch (o) {
            d.__e(o, t);
        }
        r.base = r.__P = null, e.__c = void 0;
    }
    if (r = e.__k) for(l = 0; l < r.length; l++)r[l] && X(r[l], t, typeof e.type != "function");
    _ || e.__e == null || j(e.__e), e.__ = e.__e = e.__d = void 0;
}
function oe(e, t, _) {
    return this.constructor(e, _);
}
function ce(e, t) {
    var _ = {
        __c: t = "__cC" + B++,
        __: e,
        Consumer: function(r, l) {
            return r.children(l);
        },
        Provider: function(r) {
            var l, o;
            return this.getChildContext || (l = [], (o = {})[t] = this, this.getChildContext = function() {
                return o;
            }, this.shouldComponentUpdate = function(s) {
                this.props.value !== s.value && l.some(M);
            }, this.sub = function(s) {
                l.push(s);
                var f = s.componentWillUnmount;
                s.componentWillUnmount = function() {
                    l.splice(l.indexOf(s), 1), f && f.call(s);
                };
            }), r.children;
        }
    };
    return _.Provider.__ = _.Consumer.contextType = _;
}
P = V.slice, d = {
    __e: function(e, t, _, r) {
        for(var l, o, s; t = t.__;)if ((l = t.__c) && !l.__) try {
            if ((o = l.constructor) && o.getDerivedStateFromError != null && (l.setState(o.getDerivedStateFromError(e)), s = l.__d), l.componentDidCatch != null && (l.componentDidCatch(e, r || {}), s = l.__d), s) return l.__E = l;
        } catch (f) {
            e = f;
        }
        throw e;
    }
}, $ = 0, U.prototype.setState = function(e, t) {
    var _;
    _ = this.__s != null && this.__s !== this.state ? this.__s : this.__s = k({}, this.state), typeof e == "function" && (e = e(k({}, _), this.props)), e && k(_, e), e != null && this.__v && (t && this.__h.push(t), M(this));
}, U.prototype.forceUpdate = function(e) {
    this.__v && (this.__e = !0, e && this.__h.push(e), M(this));
}, U.prototype.render = L, S = [], D.__r = 0, B = 0;
const flattenObject = (obj, cur_key = "")=>{
    const flattened = {};
    const handleTypes = (val, key = "")=>{
        if (Array.isArray(val)) {
            val.forEach((item, index)=>{
                handleTypes(item, `${key}.${index}`);
            });
        } else if (typeof val === "object") {
            Object.assign(flattened, flattenObject(val, key));
        } else {
            flattened[key] = val;
        }
    };
    Object.keys(obj).forEach((key)=>{
        const val = obj[key];
        handleTypes(val, `${cur_key}${cur_key ? "." : ""}${key}`);
    });
    return flattened;
};
const getNestedKeyValue = (obj, key)=>{
    const keys = key.split(".");
    let cur_obj = obj;
    for(let i = 0; i < keys.length; i++){
        const cur_key = keys[i];
        if (cur_obj[cur_key] === undefined) {
            return undefined;
        } else {
            cur_obj = cur_obj[cur_key];
        }
    }
    return cur_obj;
};
const DYN_ARG_REGEX = /(?<arg1>(?:str\s*:\s*\`(?<arg1_val_str>[^`]*)\`)|(?:key\s*:\s*(?:{(?<arg1_val_key>.*?)}))|(?:num\s*:\s*(?<arg1_val_num>[0-9]+(\.[0-9]+)?))|(?:bool\s*:\s*(?<arg1_val_bool>true|false|1|0)))(?:\s*,\s*(?<arg2>(?:str\s*:\s*\`(?<arg2_val_str>[^`]*)\`)|(?:key\s*:\s*(?:{(?<arg2_val_key>.*?)}))|(?:num\s*:\s*(?<arg2_val_num>[0-9]+(\.[0-9]+)?))|(?:bool\s*:\s*(?<arg2_val_bool>true|false|1|0))))?/s;
const funcGT = (a, b)=>a > b;
const funcGTE = (a, b)=>a >= b;
const funcNGT = (a, b)=>!funcGT(a, b);
const funcNGTE = (a, b)=>!funcGTE(a, b);
const funcLT = (a, b)=>a < b;
const funcLTE = (a, b)=>a <= b;
const funcNLT = (a, b)=>!funcLT(a, b);
const funcNLTE = (a, b)=>!funcLTE(a, b);
const funcEQ = (a, b)=>a === b;
const funcNEQ = (a, b)=>a !== b;
const funcAND = (a, b)=>a && b;
const funcBT = (a, b, c)=>funcGT(a, b) && funcLT(a, c);
const funcNBT = (a, b, c)=>!funcBT(a, b, c);
const funcIN = (a, b)=>b.includes(a);
const funcNIN = (a, b)=>!funcIN(a, b);
const funcOR = (a, b)=>a || b;
const funcXOR = (a, b)=>funcNEQ(a, b);
const FUNCS = {
    GT: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcGT
    },
    GTE: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcGTE
    },
    NGT: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcNGT
    },
    NGTE: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcNGTE
    },
    LT: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcLT
    },
    LTE: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcLTE
    },
    NLT: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcNLT
    },
    NLTE: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcNLTE
    },
    EQ: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key",
                "bool"
            ]
        ],
        func: funcEQ
    },
    NEQ: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key",
                "bool"
            ]
        ],
        func: funcNEQ
    },
    BT: {
        arg_count: 2,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ],
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcBT
    },
    NBT: {
        arg_count: 2,
        arg_types: [
            [
                "num",
                "str",
                "key"
            ],
            [
                "num",
                "str",
                "key"
            ]
        ],
        func: funcNBT
    },
    IN: {
        arg_count: 1,
        arg_types: [
            [
                "key"
            ]
        ],
        func: funcIN
    },
    NIN: {
        arg_count: 1,
        arg_types: [
            [
                "key"
            ]
        ],
        func: funcNIN
    },
    AND: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key",
                "bool"
            ]
        ],
        func: funcAND
    },
    OR: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key",
                "bool"
            ]
        ],
        func: funcOR
    },
    XOR: {
        arg_count: 1,
        arg_types: [
            [
                "num",
                "str",
                "key",
                "bool"
            ]
        ],
        func: funcXOR
    }
};
const FUNC_NAMES = Object.keys(FUNCS);
const getFunctionParameters = (str, opts = {})=>{
    const { arg1 , arg1_val_str , arg1_val_key , arg1_val_num , arg1_val_bool , arg2 , arg2_val_str , arg2_val_key , arg2_val_num , arg2_val_bool  } = (DYN_ARG_REGEX.exec(str) || {
        groups: {}
    }).groups;
    const args = [];
    if (arg1) {
        const type = arg1.split(":")[0];
        let arg = undefined;
        if (type === "str" && arg1_val_str !== undefined) {
            arg = arg1_val_str;
        } else if (type === "key" && arg1_val_key !== undefined) {
            arg = getNestedKeyValue(opts, arg1_val_key);
        } else if (type === "num" && arg1_val_num !== undefined) {
            const tmp_num = arg1_val_num.includes(".") ? Number.parseFloat(arg1_val_num) : Number.parseInt(arg1_val_num);
            if (Number.isNaN(tmp_num)) {
                arg = undefined;
            } else {
                arg = tmp_num;
            }
        } else if (type === "bool" && arg1_val_bool !== undefined) {
            switch(arg1_val_bool){
                case "true":
                case "1":
                    arg = true;
                    break;
                case "false":
                case "0":
                    arg = false;
                    break;
                default:
                    arg = undefined;
                    break;
            }
        }
        args.push(arg !== undefined ? {
            val: arg,
            type
        } : undefined);
    }
    if (arg2) {
        const type = arg2.split(":")[0];
        let arg = undefined;
        if (type === "str" && arg2_val_str !== undefined) {
            arg = arg2_val_str;
        } else if (type === "key" && arg2_val_key !== undefined) {
            arg = getNestedKeyValue(opts, arg2_val_key);
        } else if (type === "num" && arg2_val_num !== undefined) {
            arg = arg2_val_num.includes(".") ? Number.parseFloat(arg2_val_num) : Number.parseInt(arg2_val_num);
            if (Number.isNaN(arg)) {
                arg = undefined;
            }
        } else if (type === "bool" && arg2_val_bool !== undefined) {
            switch(arg2_val_bool){
                case "true":
                case "1":
                    arg = true;
                    break;
                case "false":
                case "0":
                    arg = false;
                    break;
                default:
                    arg = undefined;
                    break;
            }
        }
        args.push(arg ? {
            val: arg,
            type
        } : undefined);
    }
    return args;
};
const DYN_STR_REGEX = /\[\[~\s*(?:{(?<data_key>.*?)})\s*(?<cases>(?:\s*(?<case_key>(?:(?:[\w-])|(?:N?GTE?|N?LTE?|N?EQ|AND|N?BT|N?IN|X?OR)\((?:[^)]+)\))+)\s*:\s*(?:(?:`[^`]*`)|(?:;:(?:(?!:;).)*:;))\s*\|*\s*)+)+\]\]/gs;
const DYN_CASEKEY_REGEX = /(?<case_key>(?:(?:[\w-])|(?:N?GTE?|N?LTE?|N?EQ|AND|N?BT|N?IN|X?OR)\((?:[^)]+)\))+)\s*:\s*(?:(?:`(?<content_a>[^`]*)`)|(?:;:(?<content_b>(?:(?!:;).)*):;))/gs;
const DYN_FUNC_REGEX = /(?<func>N?GTE?|N?LTE?|N?EQ|AND|N?BT|N?IN|X?OR)\((?<args>[^)]+)\)/s;
const DYN_NESTED_REGEX = /\{\{(.*?)\}\}(?:\|\|(.*?)\|\|)?/gs;
class LocaleKit {
    languages = {};
    fallback_language = "en";
    fallback_key = "error.unknown";
    hydrated_languages = [];
    constructor({ languages ={} , fallback_language ="en" , fallback_key ="error.unknown"  } = {}){
        for(const key in languages){
            this.addLanguage(key, languages[key]);
        }
        this.fallback_key = fallback_key;
        this.fallback_language = fallback_language;
    }
    allSupported() {
        return Object.keys(this.languages);
    }
    addLanguage(code, lang) {
        this.languages[code] = flattenObject(lang);
    }
    hydrateLanguage(code, lang) {
        this.addLanguage(code, {
            ...this.languages[code],
            ...lang
        });
        this.setHydrated(code);
    }
    setHydrated(code) {
        this.hydrated_languages = Array.from(new Set([
            ...this.hydrated_languages,
            code
        ]));
    }
    isHydrated(code) {
        return this.hydrated_languages.includes(code);
    }
    isSupported(code) {
        return !!this.languages[code];
    }
    getKey(lang_code, key) {
        let lang = lang_code || this.fallback_language;
        if (!this.isSupported(lang)) {
            lang = this.fallback_language;
        }
        const found = this.languages[lang]?.[key] || this.languages[lang]?.[this.fallback_key] || this.languages?.[this.fallback_language]?.[key] || this.languages?.[this.fallback_language]?.[this.fallback_key] || "__NOT_FOUND__";
        return found;
    }
    t(key, opts = {}) {
        const found = this.getKey(opts.lang || this.fallback_language, key);
        const translated = found.replaceAll(DYN_STR_REGEX, (_matched_str, _key, _dyn_field, _case_key, _unk, _src_str, groups)=>{
            let cur_val = getNestedKeyValue(opts, groups["data_key"]);
            if (cur_val === undefined) {
                cur_val = "default";
            }
            const options = groups.cases.matchAll(DYN_CASEKEY_REGEX);
            const options_map = new Map();
            for (const option of options){
                options_map.set(option.groups?.case_key, option.groups?.content_a || option.groups?.content_b);
            }
            let func_case_val = undefined;
            options_map.forEach((val, key)=>{
                if (func_case_val !== undefined) return;
                if (DYN_FUNC_REGEX.test(key)) {
                    const func_name = key.substring(0, key.indexOf("(")).toUpperCase();
                    if (!FUNC_NAMES.includes(func_name)) {
                        return;
                    }
                    const [arg1_obj, arg2_obj] = getFunctionParameters(key, opts);
                    const arg1 = arg1_obj?.val;
                    const arg2 = arg2_obj?.val;
                    const arg1_type = arg1_obj?.type;
                    const arg2_type = arg2_obj?.type;
                    const func_obj = FUNCS[func_name];
                    if (func_obj.arg_count === 1 && arg1 === undefined || func_obj.arg_count === 2 && arg2 === undefined) {
                        return;
                    }
                    const [arg1_valid_types, arg2_valid_types = []] = func_obj.arg_types;
                    if (!arg1_type || !arg1_valid_types.includes(arg1_type)) {
                        return;
                    }
                    if (func_obj.arg_count !== 1 && (!arg2_type || !arg2_valid_types.includes(arg2_type))) {
                        return;
                    }
                    const result = func_obj.func(cur_val, arg1, arg2);
                    if (result === true) {
                        func_case_val = val;
                        return;
                    } else {
                        return;
                    }
                }
            });
            if (func_case_val !== undefined) {
                return func_case_val;
            }
            const val_str = new String(cur_val).toString();
            if (options_map.has(val_str)) {
                return options_map.get(val_str);
            } else if (options_map.has("default")) {
                return options_map.get("default");
            } else {
                return "[fallback_key_missing]";
            }
        });
        const formatted = translated.replaceAll(DYN_NESTED_REGEX, (_match, key, fallback)=>{
            const val = getNestedKeyValue(opts, key);
            if (val === undefined) {
                return fallback || "[no_value]";
            }
            return val;
        });
        return formatted;
    }
    getTranslationFunc(lang_code) {
        return (key, opts = {})=>{
            return this.t(key, {
                lang: lang_code,
                ...opts
            });
        };
    }
}
const lang_svc = new LocaleKit();
function setup(options, language) {
    for(const lang in options.languages){
        if (Object.prototype.hasOwnProperty.call(options.languages, lang)) {
            lang_svc.addLanguage(lang, options.languages[lang]);
        }
    }
    const originalHook = d.vnode;
    d.vnode = (vnode)=>{
        const { props  } = vnode;
        if (props?.["data-t-key"]) {
            const translate_props = props["data-t-key-params"] || {};
            if (language) {
                translate_props.lang = language;
            }
            if (props?.["lang"]) {
                translate_props.lang = props?.["lang"];
            }
            if (Array.isArray(props.children)) {
                props.children = props.children.map((child)=>{
                    if (typeof child === "string") {
                        return lang_svc.t(props["data-t-key"], translate_props);
                    } else {
                        return child;
                    }
                });
            } else if (typeof props.children === "string" || props.children === undefined) {
                props.children = lang_svc.t(props["data-t-key"], translate_props);
            }
        }
        if (lang_svc.getKey(language, props?.["data-t-key"]) !== "__NOT_FOUND__") {}
        originalHook?.(vnode);
    };
}
const importMeta = {
    url: "https://deno.land/x/localekit_fresh@0.5.0/mod.ts",
    main: false
};
function translate(options) {
    setup(options, undefined);
    const main = `data:application/javascript,import hydrate from "${new URL("./lib/main.ts", importMeta.url).href}";
import opts from "${options.selfURL}";
export default function(state) { hydrate(opts, state); }
`;
    return {
        name: "translate",
        entrypoints: {
            main: main
        },
        render: (ctx)=>{
            const res = ctx.render();
            const scripts = [];
            const languages = options.languages;
            if (res.requiresHydration) {
                scripts.push({
                    entrypoint: "main",
                    state: languages
                });
            }
            return {
                scripts
            };
        }
    };
}
const sv = {
    "common": {
        "page": {
            "title": "Elpriset just nu"
        },
        "months": {
            "0": "januari",
            "1": "februari",
            "2": "mars",
            "3": "april",
            "4": "maj",
            "5": "juni",
            "6": "juli",
            "7": "augusti",
            "8": "september",
            "9": "oktober",
            "10": "november",
            "11": "december"
        },
        "months_short": {
            "0": "jan",
            "1": "feb",
            "2": "mar",
            "3": "apr",
            "4": "maj",
            "5": "jun",
            "6": "jul",
            "7": "aug",
            "8": "sep",
            "9": "okt",
            "10": "nov",
            "11": "dec"
        },
        "header": {
            "title": "Aktuellt elpris, nu och historiskt",
            "avg_today": "Genomsnittligt spotpris idag",
            "avg_month": "Rörligt pris hittills i månaden",
            "avg_today_short": "Medelspotpris"
        },
        "warning": {
            "actual_price": "Faktiskt elpris",
            "actual_price_text": "Du har för närvarande faktiskt elpris aktiverat, men har inte gjort några inställningar för skatter och avgifter. Klicka på kugghjulet och fyll i Faktor (t.ex. 1.25 för 25% moms) och din avgift (t.ex. 0.095 för 9.5 öre/kWh innan moms)."
        },
        "information": {
            "title": "Information och användningsvillkor",
            "all_history": "All statistik hämtas från",
            "currency_fetched_from": "Aktuell valutakurs hämtas från",
            "all_values_from": "Alla värden, inklusive historiska, är konverterade från EUR med aktuell kurs",
            "disclaimer_and_private_use": "Siffrorna som visas bör stämma med verkligheten, men levereras utan garantier. Sidan och tillhörande tjänster tillhandahålls för privat bruk, på egen risk.",
            "open_source_software": "Källkoden till sidan är helt öppen och finns tillgänglig på ",
            "bugs_and_issues": "Buggar och problem rapporteras genom 'Issues' på GitHub. Kontakt kan även ske via mail till hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "30 dagars historik",
            "all_areas_today": "Alla elområden - Idag",
            "all_areas_tomorrow": "Alla elområden - Imorgon",
            "all_areas_longterm": "Alla elområden - Historik per månad",
            "average_today": "Snitt idag",
            "average_tomorrow": "imorgon",
            "right_now": "just nu",
            "more_about": "Mer om",
            "span": "Spann:",
            "so_far": "Hittills i"
        },
        "nav": {
            "actual_price_instead": "Faktiskt timpris i stället för spotpris",
            "all_of": "Hela",
            "index": "Översikt",
            "table": "Tabell",
            "country": "Land",
            "area": "Elområde",
            "help": "Hjälp"
        },
        "customize": {
            "title": "Anpassa faktiskt pris",
            "unit": "Enhet",
            "currency": "Valuta",
            "fees": "Avgifter",
            "factor": "Faktor",
            "decimals": "Decimaler"
        },
        "countries": {
            "sv": "Sverige",
            "no": "Norge",
            "fi": "Finland",
            "dk": "Danmark",
            "de": "Tyskland",
            "at": "Österrike",
            "ch": "Schweiz",
            "es": "Spanien",
            "fr": "Frankrike",
            "pl": "Polen"
        },
        "chart": {
            "today_and_tomorrow": "Idag och imorgon",
            "outstanding_hours": "Utmärkande timmar",
            "today": "Idag",
            "tomorrow": "Imorgon",
            "compare_to": "Jämför med",
            "net_production": "Nettoproduktion",
            "yesterday_and_today": "Igår och idag"
        },
        "generation": {
            "current_production": "Produktion och förbrukning",
            "production_method": "Metod",
            "production_share": "Andel",
            "production": "Produktion",
            "consumption": "Förbrukning",
            "last_updated": "Senast uppdaterat",
            "excess": "Överskott",
            "deficit": "Underskott",
            "psr_coal_0": "Kol",
            "psr_oil_0": "Olja",
            "psr_gas_0": "Gas",
            "psr_peat_0": "Torv",
            "psr_water_0": "Vatten",
            "psr_water_1": "Vatten - Förb.",
            "psr_nuclear_0": "Kärnkraft",
            "psr_solar_0": "Sol",
            "psr_wind_0": "Vind",
            "psr_wind_1": "Vind - Förb.",
            "psr_other_0": "Övrigt",
            "primary_source": "Huvudsaklig kraftkälla"
        },
        "outage": {
            "title_current": "Pågående driftstörningar",
            "title_planned": "Planerade driftstörningar",
            "resource": "Resurs",
            "status": "Status",
            "capacity_now": "Kapacitet just nu",
            "total_capacity": "Total kapacitet"
        }
    }
};
const no = {
    "common": {
        "page": {
            "title": "Strømprisen akkurat nå"
        },
        "months": {
            "0": "januar",
            "1": "februar",
            "2": "mars",
            "3": "april",
            "4": "mai",
            "5": "juni",
            "6": "juli",
            "7": "august",
            "8": "september",
            "9": "oktober",
            "10": "november",
            "11": "desember"
        },
        "months_short": {
            "0": "jan",
            "1": "feb",
            "2": "mar",
            "3": "apr",
            "4": "mai",
            "5": "jun",
            "6": "jul",
            "7": "aug",
            "8": "sep",
            "9": "okt",
            "10": "nov",
            "11": "des"
        },
        "header": {
            "title": "Gjeldende strømpris",
            "avg_today": "Gjennomsnittlig spotpris i dag",
            "avg_month": "Gjennomsnittlig spotpris så langt denne måneden",
            "avg_today_short": "Gjennomsnittlig spotpris"
        },
        "warning": {
            "actual_price": "Faktisk strømpris",
            "actual_price_text": "Du har for øyeblikket faktisk strømpris aktivert, men har ikke valgt noen innstillinger for skatter og avgifter. Klikk på tannhjulet og fyll inn faktoren (f.eks. 1,25 for 25 % mva) og kostnaden din (f.eks. 0,012 for 0,012 NOK/kWh før mva)."
        },
        "information": {
            "title": "Informasjon og vilkår for bruk",
            "all_history": "All statistikk er hentet fra",
            "currency_fetched_from": "Gjeldende valutakurs er hentet fra",
            "all_values_from": "Alle verdier, inkludert historiske, er konvertert fra EUR til gjeldende valutakurs",
            "disclaimer_and_private_use": "Tallene som vises skal samsvare med virkeligheten, men leveres uten garantier. Nettstedet og tilhørende tjenester tilbys for privat bruk, på egen risiko.",
            "open_source_software": "Kildekoden til siden er helt åpen og er tilgjengelig på ",
            "bugs_and_issues": "Feil og problemer rapporteres gjennom 'Issues' på GitHub. Kontakt kan også gjøres via e-post til hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "30 dagers historie",
            "all_areas_today": "Alle områder - I dag",
            "all_areas_tomorrow": "Alle områder - I morgen",
            "all_areas_longterm": "Alle områder - Historie per måned",
            "average_today": "Snitt i dag",
            "average_tomorrow": "i morgen",
            "right_now": "akkurat nå",
            "more_about": "Mer om",
            "span": "Spenn:",
            "so_far": "Så langt i"
        },
        "nav": {
            "actual_price_instead": "Faktisk timepris i stedet for spotpris",
            "all_of": "Hele",
            "index": "Oversikt",
            "table": "Tabell",
            "country": "Land",
            "area": "Område",
            "help": "Hjelp"
        },
        "customize": {
            "title": "Tilpass pris",
            "unit": "Enhet",
            "currency": "Valuta",
            "fees": "Avgifter",
            "factor": "Faktor",
            "decimals": "Desimaler"
        },
        "countries": {
            "sv": "Sverige",
            "no": "Norge",
            "fi": "Finland",
            "dk": "Danmark",
            "de": "Tyskland",
            "at": "Østerrike",
            "ch": "Sveits",
            "es": "Spania",
            "fr": "Frankrike",
            "pl": "Polen"
        },
        "chart": {
            "today_and_tomorrow": "I dag og i morgen",
            "outstanding_hours": "Utestående timer",
            "today": "I dag",
            "tomorrow": "I morgen",
            "compare_to": "Sammenlignet med",
            "net_production": "Netto produksjon",
            "yesterday_and_today": "I går og i dag"
        },
        "generation": {
            "current_production": "Produksjon og forbruk",
            "production_method": "Metode",
            "production_share": "Del",
            "production": "Produksjon",
            "consumption": "Forbruk",
            "last_updated": "Sist oppdatert",
            "excess": "Overflødig",
            "deficit": "Underskudd",
            "psr_coal_0": "Kull",
            "psr_oil_0": "Olje",
            "psr_gas_0": "Gass",
            "psr_peat_0": "Torv",
            "psr_water_0": "Vann",
            "psr_water_1": "Vann - Forb.",
            "psr_nuclear_0": "Atomkraft",
            "psr_solar_0": "Solar",
            "psr_wind_0": "Vind",
            "psr_wind_1": "Vind - Forb.",
            "psr_other_0": "Annet",
            "primary_source": "Primær strømkilde"
        },
        "outage": {
            "title_current": "Pågående driftsstans",
            "title_planned": "Planlagte driftsstans",
            "resource": "Ressurs",
            "status": "Status",
            "capacity_now": "Kapasitet akkurat nå",
            "total_capacity": "Total kapasitet"
        }
    }
};
const fi = {
    "common": {
        "page": {
            "title": "Sähkön hinta juuri nyt"
        },
        "months": {
            "0": "tammikuu",
            "1": "helmikuu",
            "2": "maaliskuu",
            "3": "huhtikuu",
            "4": "toukokuu",
            "5": "kesäkuu",
            "6": "heinäkuu",
            "7": "elokuu",
            "8": "syyskuu",
            "9": "lokakuu",
            "10": "marraskuu",
            "11": "joulukuu"
        },
        "months_short": {
            "0": "tam",
            "1": "hel",
            "2": "maa",
            "3": "huh",
            "4": "tou",
            "5": "kes",
            "6": "hei",
            "7": "elo",
            "8": "syy",
            "9": "lok",
            "10": "mar",
            "11": "jou"
        },
        "header": {
            "title": "Sähkön hinta nyt ja historiatieto.",
            "avg_today": "Keskimääräinen spot-hinta tänään",
            "avg_month": "Keskimääräinen spot-hinta tähän mennessä tässä kuussa",
            "avg_today_short": "Keskimääräinen spot-hinta"
        },
        "warning": {
            "actual_price": "Sähkön todellinen hinta",
            "actual_price_text": "Olet aktivoinut ´Sähkön todellinen hinta´, mutta et ole määrittänyt vielä `verot´ ja `maksut´. Napsauta oikea kohta valikosta ja täytä kerroin verolle (esim. 1,25 => 25 % ALV:lle) ja muut maksut (esim. 0,012 => 0,012 EUR/kWh ennen ALV)."
        },
        "information": {
            "title": "Tiedot ja palvelun käyttöehdot.",
            "all_history": "Kaikki tilastot on otettu",
            "currency_fetched_from": "Nykyinen valuuttakurssi on otettu",
            "all_values_from": "Kaikki arvot, mukaan lukien historialliset, muunnetaan EUR tämän hetken valuuttakurssin mukaan",
            "disclaimer_and_private_use": "Esitetyt luvut vastaavat todellisuutta, mutta niiden oikeellisuudesta ei anneta takuuta. Sivusto ja siihen liittyvät palvelut tarjotaan yksityiseen käyttöön ja sen käyttö on omalla vastuullasi.",
            "open_source_software": "Sivun lähdekoodi on täysin avoin ja saatavilla osoitteessa ",
            "bugs_and_issues": "Virheistä ja ongelmista ilmoitetaan GitHubin 'Issues'-osiossa. Voit myös ottaa yhteyttä sähköpostitse osoitteeseen hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "30 päivän historia",
            "all_areas_today": "Kaikki sähköalueet - Tänään",
            "all_areas_tomorrow": "Kaikki sähköalueet - Huomenna",
            "all_areas_longterm": "Kaikki sähköalueet - Historia kuukausittain",
            "average_today": "Ka. tänään",
            "average_tomorrow": "huomenna",
            "right_now": "juuri nyt",
            "more_about": "Lisää",
            "span": "Välillä:",
            "so_far": "Toistaiseksi"
        },
        "nav": {
            "actual_price_instead": "Todellinen tuntihinta spot-hinnan sijaan",
            "all_of": "Kaikki",
            "index": "Yleiskatsaus",
            "table": "Taulukko",
            "country": "Maa",
            "area": "Sähköalue",
            "help": "Apua"
        },
        "customize": {
            "title": "Säädä todellinen hinta",
            "unit": "Yksikkö",
            "currency": "Valuutta",
            "fees": "Maksut",
            "factor": "Tekijä",
            "decimals": "Desimaalit"
        },
        "countries": {
            "sv": "Ruotsi",
            "no": "Norja",
            "fi": "Suomi",
            "dk": "Tanska",
            "de": "Saksa",
            "at": "Itävalta",
            "ch": "Sveitsi",
            "es": "Espanja",
            "fr": "Ranska",
            "pl": "Puola"
        },
        "chart": {
            "today_and_tomorrow": "Tänään ja huomenna",
            "outstanding_hours": "Erinomaiset tunnit",
            "today": "Tänään",
            "tomorrow": "Huomenna",
            "compare_to": "Vertaile",
            "net_production": "Nettotuotanto",
            "yesterday_and_today": "Eilen ja tänään"
        },
        "generation": {
            "current_production": "Tuotanto ja kulutus",
            "production_method": "Menetelmä",
            "production_share": "Jaa",
            "production": "Tuotanto",
            "consumption": "Kulutus",
            "last_updated": "Viimeksi päivitetty",
            "excess": "Liika",
            "deficit": "alijäämä",
            "psr_coal_0": "Hiili",
            "psr_oil_0": "Öljy",
            "psr_gas_0": "Kaasu",
            "psr_peat_0": "Turve",
            "psr_water_0": "Vesi",
            "psr_water_1": "Vesi - Kulu.",
            "psr_nuclear_0": "Ydinvoima",
            "psr_solar_0": "Aurinkoenergia",
            "psr_wind_0": "Tuuli",
            "psr_wind_1": "Tuuli - Kulu.",
            "psr_other_0": "Muu",
            "primary_source": "Ensisijainen virtalähde"
        },
        "outage": {
            "title_current": "Jatkuvat käyttökatkot",
            "title_planned": "Suunnitellut käyttökatkot",
            "resource": "Resurssi",
            "status": "Tila",
            "capacity_now": "Kapasiteetti juuri nyt",
            "total_capacity": "Kokonaiskapasiteetti"
        }
    }
};
const dk = {
    "common": {
        "page": {
            "title": "Elprisen lige nu"
        },
        "months": {
            "0": "januar",
            "1": "februar",
            "2": "marts",
            "3": "april",
            "4": "maj",
            "5": "juni",
            "6": "juli",
            "7": "august",
            "8": "september",
            "9": "oktober",
            "10": "november",
            "11": "december"
        },
        "months_short": {
            "0": "jan",
            "1": "feb",
            "2": "mar",
            "3": "apr",
            "4": "maj",
            "5": "jun",
            "6": "jul",
            "7": "aug",
            "8": "sep",
            "9": "okt",
            "10": "nov",
            "11": "dec"
        },
        "header": {
            "title": "Aktuel elpris",
            "avg_today": "Gennemsnitlig spotpris i dag",
            "avg_month": "Gennemsnitlig spotpris indtil videre i denne måned",
            "avg_today_short": "Gennemsnitlig spotpris"
        },
        "warning": {
            "actual_price": "Faktisk elpris",
            "actual_price_text": "Du har i øjeblikket faktisk elprisen aktiveret, men har ikke foretaget nogen indstillinger for skatter og afgifter. Klicka på kugghjulet og udfyld faktoren (f.eks. 1,25 for 25 % moms) og din afgift (f.eks. 0,012 for 0,012 EUR/kWh før moms)."
        },
        "information": {
            "title": "Information og vilkår for brug",
            "all_history": "Al statistik er taget fra",
            "currency_fetched_from": "Aktuel valutakurs er taget fra",
            "all_values_from": "Alle værdier, inklusive historiske værdier, er omregnet fra EUR til den aktuelle valutakurs",
            "disclaimer_and_private_use": "De viste tal skal svare til virkeligheden, men leveres uden garantier. Siden og tilknyttede tjenester leveres til privat brug på egen risiko.",
            "open_source_software": "Kildekoden på siden er helt åben og er tilgængelig på ",
            "bugs_and_issues": "Bug og problemer rapporteres via 'Issues' på GitHub. Kontakt kan også tages via e-mail til hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "30 dages historie",
            "all_areas_today": "Alle elektriske områder - i dag",
            "all_areas_tomorrow": "Alle elektriske områder - i morgen",
            "all_areas_longterm": "Alle elektriske områder - Historik om måneden",
            "average_today": "Pris i dag",
            "average_tomorrow": "i morgen",
            "right_now": "lige nu",
            "more_about": "Mere om",
            "span": "Spændvidde:",
            "so_far": "Indtil videre"
        },
        "nav": {
            "actual_price_instead": "Faktisk timepris i stedet for spotpris",
            "all_of": "Hele",
            "index": "Oversigt",
            "table": "Tabel",
            "country": "Land",
            "area": "Område",
            "help": "Hjælp"
        },
        "customize": {
            "title": "Juster den faktiske pris",
            "unit": "Enhed",
            "currency": "Betalingsmiddel",
            "fees": "Afgifter",
            "factor": "Faktor",
            "decimals": "Decimaler"
        },
        "countries": {
            "sv": "Sverige",
            "no": "Norge",
            "fi": "Finland",
            "dk": "Danmark",
            "de": "Tyskland",
            "at": "Østrig",
            "ch": "Schweiz",
            "es": "Spanien",
            "fr": "Frankrig",
            "pl": "Polen"
        },
        "chart": {
            "today_and_tomorrow": "I dag og i morgen",
            "outstanding_hours": "Udestående timer",
            "today": "I dag",
            "tomorrow": "I morgen",
            "compare_to": "Sammenlign med",
            "net_production": "Nettoproduktion",
            "yesterday_and_today": "I går og i dag"
        },
        "generation": {
            "current_production": "Produktion og forbrug",
            "production_method": "Metode",
            "production_share": "Del",
            "production": "Produktion",
            "consumption": "Forbrug",
            "last_updated": "Sidst opdateret",
            "excess": "Overskydende",
            "deficit": "Underskud",
            "psr_coal_0": "Kul",
            "psr_oil_0": "Olie",
            "psr_gas_0": "Gas",
            "psr_peat_0": "Tørv",
            "psr_water_0": "Vand",
            "psr_water_1": "Vand - Forb.",
            "psr_nuclear_0": "Atomkraft",
            "psr_solar_0": "Solar",
            "psr_wind_0": "Vind",
            "psr_wind_1": "Vind - Forb.",
            "psr_other_0": "Andet",
            "primary_source": "Primær strømkilde"
        },
        "outage": {
            "title_current": "Igangværende driftsafbrydelser",
            "title_planned": "Planlagte udfald",
            "resource": "Ressource",
            "status": "Status",
            "capacity_now": "Kapacitet lige nu",
            "total_capacity": "Samlet kapacitet"
        }
    }
};
const de = {
    "common": {
        "page": {
            "title": "Strompreis aktuell"
        },
        "months": {
            "0": "januar",
            "1": "februar",
            "2": "märz",
            "3": "april",
            "4": "mai",
            "5": "juni",
            "6": "juli",
            "7": "august",
            "8": "september",
            "9": "oktober",
            "10": "november",
            "11": "dezember"
        },
        "months_short": {
            "0": "jan",
            "1": "feb",
            "2": "mär",
            "3": "apr",
            "4": "mai",
            "5": "jun",
            "6": "jul",
            "7": "aug",
            "8": "sep",
            "9": "okt",
            "10": "nov",
            "11": "dez"
        },
        "header": {
            "title": "Aktueller Strompreis",
            "avg_today": "Durchschnittlicher Spotpreis heute",
            "avg_month": "Durchschnittlicher Spotpreis in diesem Monat bisher",
            "avg_today_short": "Durchschnittlicher Spotpreis"
        },
        "warning": {
            "actual_price": "Aktueller Strompreis",
            "actual_price_text": "Sie haben den 'eigentlichen' Preis aktiviert, aber noch keine Anpassungen bei Steuern und Gebühren vorgenommen. Klicken Sie auf das Zahnrad und geben Sie dort den Faktor für den Steuerprozentsatz ein (z.B. 1,25 für 25% VAT) und Ihre Gebühren (z.B. 0,095 für 9,50€/kWh, ohne VAT)"
        },
        "information": {
            "title": "Informationen und Nutzungsbedingungen",
            "all_history": "Alle Statistiken stammen aus der",
            "currency_fetched_from": "Der aktuelle Wechselkurs wird übernommen",
            "all_values_from": "Alle Werte, auch historische, werden zum aktuellen Wechselkurs aus EUR umgerechnet",
            "disclaimer_and_private_use": "Die gezeigten Zahlen sollen der Realität entsprechen, werden aber ohne Gewähr geliefert. Die Website und die damit verbundenen Dienste werden für den privaten Gebrauch auf eigenes Risiko bereitgestellt.",
            "open_source_software": "Der Quellcode der Seite ist vollständig offen und verfügbar unter ",
            "bugs_and_issues": "Fehler und Probleme werden über 'Issues' auf GitHub gemeldet. Kontakt kann auch per E-Mail an hexagon{a}56k.guru hergestellt werden."
        },
        "overview": {
            "thirty_day_chart": "30 Tage Verlauf",
            "all_areas_today": "Alle Elektrobereiche - Heute",
            "all_areas_tomorrow": "Alle Elektrobereiche - Morgen",
            "all_areas_longterm": "Alle Elektrobereiche - Verlauf pro Monat",
            "average_today": "Durchs. heute",
            "average_tomorrow": "morgen",
            "right_now": "jetzt",
            "more_about": "Mehr über",
            "span": "Spanne:",
            "so_far": "Bisher im"
        },
        "nav": {
            "actual_price_instead": "Tatsächlicher Stundenpreis statt Spotpreis",
            "all_of": "Ganz",
            "index": "Übersicht",
            "table": "Tabelle",
            "country": "Land",
            "area": "Bereich",
            "help": "Hilfe"
        },
        "customize": {
            "title": "Passen Sie den tatsächlichen Preis an",
            "unit": "Einheit",
            "currency": "Währung",
            "fees": "Gebühren",
            "factor": "Faktor",
            "decimals": "Dezimalstellen"
        },
        "countries": {
            "sv": "Schweden",
            "no": "Norwegen",
            "fi": "Finnland",
            "dk": "Dänemark",
            "de": "Deutschland",
            "at": "Österreich",
            "ch": "Schweiz",
            "es": "Spanien",
            "fr": "Frankreich",
            "pl": "Polen"
        },
        "chart": {
            "today_and_tomorrow": "Heute und morgen",
            "outstanding_hours": "Ausstehende Stunden",
            "today": "Heute",
            "tomorrow": "Morgen",
            "compare_to": "Vergleichen mit",
            "net_production": "Nettoproduktion",
            "yesterday_and_today": "Gestern und heute"
        },
        "generation": {
            "current_production": "Produktion und Verbrauch",
            "production_method": "Methode",
            "production_share": "Beteiligung",
            "production": "Produktion",
            "consumption": "Verbrauch",
            "last_updated": "Zuletzt aktualisiert",
            "excess": "Überschuss",
            "deficit": "Defizit",
            "psr_coal_0": "Kohle",
            "psr_oil_0": "Öl",
            "psr_gas_0": "Gas",
            "psr_peat_0": "Torf",
            "psr_water_0": "Wasser",
            "psr_water_1": "Wasser - Verbr.",
            "psr_nuclear_0": "Atomkraft",
            "psr_solar_0": "Solar",
            "psr_wind_0": "Wind",
            "psr_wind_1": "Wind - Verbr.",
            "psr_other_0": "Andere",
            "primary_source": "Primäre Stromquelle"
        },
        "outage": {
            "title_current": "Laufende Betriebsausfälle",
            "title_planned": "Geplante Ausfälle",
            "resource": "Ressource",
            "status": "Status",
            "capacity_now": "Kapazität im Moment",
            "total_capacity": "Gesamtkapazität"
        }
    }
};
const en = {
    "common": {
        "page": {
            "title": "Electricity price right now"
        },
        "months": {
            "0": "january",
            "1": "february",
            "2": "march",
            "3": "april",
            "4": "may",
            "5": "june",
            "6": "july",
            "7": "august",
            "8": "september",
            "9": "october",
            "10": "november",
            "11": "december"
        },
        "months_short": {
            "0": "jan",
            "1": "feb",
            "2": "mar",
            "3": "apr",
            "4": "may",
            "5": "jun",
            "6": "jul",
            "7": "aug",
            "8": "sep",
            "9": "oct",
            "10": "nov",
            "11": "dec"
        },
        "header": {
            "title": "Current electricity price, now and historical",
            "avg_today": "Average spot price today",
            "avg_month": "Variable price current month",
            "avg_today_short": "Average spot price"
        },
        "warning": {
            "actual_price": "Actual price",
            "actual_price_text": "You have activated 'actual price', but have not made any customizations to taxes and fees. Click the settings-icon and enter Factor (e.g. 1.25 for 25% VAT) and your fees (e.g. 0.095 för 9.5 EUR/kWh, before VAT)."
        },
        "information": {
            "title": "Information and Terms of Use",
            "all_history": "All statistics are retrieved from",
            "currency_fetched_from": "Current exchange rate fetched from",
            "all_values_from": "All values, including historical ones, are converted from EUR at the current rate",
            "disclaimer_and_private_use": "The figures shown should be correct, but are supplied without guarantees. The site and related services are provided for private use, at your own risk.",
            "open_source_software": "The source code of the page is completely open and is available at ",
            "bugs_and_issues": "Bugs and issues are reported through 'Issues' on GitHub. Contact can also be made via email to hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "30 day history",
            "all_areas_today": "All electricity areas - Today",
            "all_areas_tomorrow": "All electricity areas - Tomorrow",
            "all_areas_longterm": "All electricity areas - History per month",
            "average_today": "Average today",
            "average_tomorrow": "tomorrow",
            "right_now": "right now",
            "more_about": "More about",
            "span": "Span:",
            "so_far": "So far in"
        },
        "nav": {
            "actual_price_instead": "Actual hourly price instead of spot price",
            "all_of": "All",
            "index": "Overview",
            "table": "Table",
            "country": "Country",
            "area": "Area",
            "help": "Help"
        },
        "customize": {
            "title": "Adjust actual price",
            "unit": "Unit",
            "currency": "Currency",
            "fees": "Fees",
            "factor": "Factor",
            "decimals": "Decimals"
        },
        "countries": {
            "sv": "Sweden",
            "no": "Norway",
            "fi": "Finland",
            "dk": "Denmark",
            "de": "Germany",
            "at": "Austria",
            "ch": "Schweiz",
            "es": "Spain",
            "fr": "France",
            "pl": "Poland"
        },
        "chart": {
            "today_and_tomorrow": "Today and tomorrow",
            "outstanding_hours": "Outstanding Hours",
            "today": "Today",
            "tomorrow": "Tomorrow",
            "compare_to": "Compare to",
            "net_production": "Net production",
            "yesterday_and_today": "Yesterday and today"
        },
        "generation": {
            "current_production": "Production and consumption",
            "production_method": "Method",
            "production_share": "Share",
            "production": "Production",
            "consumption": "Consumption",
            "primary_source": "Primary source",
            "last_updated": "Last Updated",
            "excess": "Excess",
            "deficit": "Deficit",
            "psr_coal_0": "Coal",
            "psr_oil_0": "Oil",
            "psr_gas_0": "Gas",
            "psr_peat_0": "Peat",
            "psr_water_0": "Water",
            "psr_water_1": "Water - Cons.",
            "psr_nuclear_0": "Nuclear Power",
            "psr_solar_0": "Solar",
            "psr_wind_0": "Wind",
            "psr_wind_1": "Wind - Cons.",
            "psr_other_0": "Other"
        },
        "outage": {
            "title_current": "Ongoing outages",
            "title_planned": "Planned outages",
            "resource": "Resource",
            "status": "Status",
            "capacity_now": "Capacity right now",
            "total_capacity": "Total capacity"
        }
    }
};
const fr = {
    "common": {
        "page": {
            "title": "Prix de l'électricité en ce moment"
        },
        "months": {
            "0": "janvier",
            "1": "février",
            "2": "marcher",
            "3": "avril",
            "4": "peut",
            "5": "juin",
            "6": "juillet",
            "7": "août",
            "8": "septembre",
            "9": "octobre",
            "10": "novembre",
            "11": "décembre"
        },
        "months_short": {
            "0": "jan",
            "1": "fév",
            "2": "mar",
            "3": "avril",
            "4": "peut",
            "5": "juin",
            "6": "juillet",
            "7": "août",
            "8": "sep",
            "9": "oct",
            "10": "nov",
            "11": "déc"
        },
        "header": {
            "title": "Prix actuel de l'électricité, actuel et historique",
            "avg_today": "Prix spot moyen aujourd'hui",
            "avg_month": "Prix variable du mois en cours",
            "avg_today_short": "Prix spot moyen"
        },
        "warning": {
            "actual_price": "Prix réel",
            "actual_price_text": "Vous avez activé le 'prix réel', mais vous n'avez effectué aucune personnalisation des taxes et des frais. Cliquez sur l'engrenage et entrez le facteur (par exemple, 1,25 pour 25 % de TVA) et vos frais (par exemple, 0,095 pour 9,5 EUR/kWh, avant TVA )."
        },
        "information": {
            "title": "Informations et conditions d'utilisation",
            "all_history": "Toutes les statistiques sont extraites de",
            "currency_fetched_from": "Taux de change actuel extrait de",
            "all_values_from": "Toutes les valeurs, y compris les valeurs historiques, sont converties à partir de l'EUR au taux actuel",
            "disclaimer_and_private_use": "Les chiffres indiqués doivent être corrects, mais sont fournis sans garantie. Le site et les services associés sont fournis pour un usage privé, à vos risques et périls.",
            "open_source_software": "Le code source de la page est complètement ouvert et est disponible sur ",
            "bugs_and_issues": "Les bogues et les problèmes sont signalés via 'Issues' sur GitHub. Le contact peut également être établi par e-mail à hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "Historique de 30 jours",
            "all_areas_today": "Toutes les zones électriques - Aujourd'hui",
            "all_areas_tomorrow": "Toutes les zones électriques - Demain",
            "all_areas_longterm": "Toutes les zones électriques - Historique par mois",
            "average_today": "Moyenne aujourd'hui",
            "average_tomorrow": "demain",
            "right_now": "maintenant",
            "more_about": "En savoir plus",
            "span": "Span :",
            "so_far": "Jusqu'à présent dans"
        },
        "nav": {
            "actual_price_instead": "Prix horaire réel au lieu du prix spot",
            "all_of": "Tous",
            "index": "Aperçu",
            "table": "Tableau",
            "country": "Pays",
            "area": "Zone",
            "help": "À l'aide"
        },
        "customize": {
            "title": "Ajuster le prix réel",
            "unit": "Unité",
            "currency": "Devise",
            "fees": "Frais",
            "factor": "Facteur",
            "decimals": "Décimales"
        },
        "countries": {
            "sv": "Suède",
            "no": "Norvège",
            "fi": "Finlande",
            "dk": "Danemark",
            "de": "Allemagne",
            "at": "Autriche",
            "ch": "Suisse",
            "es": "Espagne",
            "fr": "France",
            "pl": "Pologne"
        },
        "chart": {
            "today_and_tomorrow": "Aujourd'hui et demain",
            "outstanding_hours": "Heures exceptionnelles",
            "today": "Aujourd'hui",
            "tomorrow": "demain Demain",
            "compare_to": "Comparer à",
            "net_production": "Production nette",
            "yesterday_and_today": "Hier et aujourd'hui"
        },
        "generation": {
            "current_production": "Production et consommation",
            "production_method": "Méthode",
            "production_share": "Partager",
            "production": "Production",
            "consumption": "Consommation",
            "primary_source": "Source principale",
            "last_updated": "Dernière mise à jour",
            "excess": "Excès",
            "deficit": "Déficit",
            "psr_coal_0": "Charbon",
            "psr_oil_0": "Pétrole",
            "psr_gas_0": "Gaz",
            "psr_peat_0": "Tourbe",
            "psr_water_0": "Eau",
            "psr_water_1": "Eau - Cons.",
            "psr_nuclear_0": "Nucléaire",
            "psr_solar_0": "Solaire",
            "psr_wind_0": "Vent",
            "psr_wind_1": "Vent - Cons.",
            "psr_other_0": "Autre"
        },
        "outage": {
            "title_current": "Interruptions opérationnelles en cours",
            "title_planned": "Interruptions planifiées",
            "resource": "Ressource",
            "status": "Statut",
            "capacity_now": "Capacité actuelle",
            "total_capacity": "Capacité totale"
        }
    }
};
const es = {
    "common": {
        "page": {
            "title": "El precio de la electricidad ahora mismo"
        },
        "months": {
            "0": "enero",
            "1": "febrero",
            "2": "marzo",
            "3": "abril",
            "4": "mayo",
            "5": "junio",
            "6": "julio",
            "7": "agosto",
            "8": "septiembre",
            "9": "octubre",
            "10": "noviembre",
            "11": "diciembre"
        },
        "months_short": {
            "0": "ene",
            "1": "feb",
            "2": "mar",
            "3": "abr",
            "4": "may",
            "5": "jun",
            "6": "jul",
            "7": "ago",
            "8": "sep",
            "9": "oct",
            "10": "nov",
            "11": "dic"
        },
        "header": {
            "title": "Precio actual de la electricidad, ahora e históricamente",
            "avg_today": "Precio spot promedio hoy",
            "avg_month": "Precio variable en lo que va del mes",
            "avg_today_short": "Precio spot promedio"
        },
        "warning": {
            "actual_price": "Precio actual de la electricidad",
            "actual_price_text": "Actualmente tiene activado el precio de la electricidad, pero no ha realizado ninguna configuración para impuestos y tarifas. Haga clic en el engranaje y complete el Factor (por ejemplo, 1,25 para el 25 % de IVA) y su tarifa (por ejemplo, 0,095 para 9,5 öre/kWh antes del IVA )"
        },
        "information": {
            "title": "Información y Condiciones de Uso",
            "all_history": "Todas las estadísticas se recuperan de",
            "currency_fetched_from": "Tipo de cambio actual obtenido de",
            "all_values_from": "Todos los valores, incluidos los históricos, se convierten de EUR al tipo de cambio actual",
            "disclaimer_and_private_use": "Las cifras que se muestran deben ser correctas, pero se proporcionan sin garantías. El sitio y los servicios relacionados se proporcionan para uso privado, bajo su propio riesgo",
            "open_source_software": "El código fuente de la página es completamente abierto y está disponible en ",
            "bugs_and_issues": "Los errores y problemas se informan a través de 'Issues' en GitHub. También se puede contactar por correo electrónico a hexagon{a}56k.guru."
        },
        "overview": {
            "thirty_day_chart": "Historial de 30 días",
            "all_areas_today": "Todas las áreas de electricidad - Hoy",
            "all_areas_tomorrow": "Todas las áreas de electricidad - Mañana",
            "all_areas_longterm": "Todas las áreas de electricidad - Historial por mes",
            "average_today": "Promedio de hoy",
            "average_tomorrow": "mañana",
            "right_now": "ahora mismo",
            "more_about": "Más sobre",
            "span": "Intervalo:",
            "so_far": "Hasta ahora"
        },
        "nav": {
            "actual_price_instead": "Precio real por hora en lugar de precio al contado",
            "all_of": "Entero",
            "index": "Resumen",
            "table": "Mesa",
            "country": "País",
            "area": "Área",
            "help": "Ayuda"
        },
        "customize": {
            "title": "Ajustar precio actual",
            "unit": "Unidad",
            "currency": "Moneda",
            "fees": "Tarifas",
            "factor": "Factor",
            "decimals": "decimales"
        },
        "countries": {
            "sv": "Suecia",
            "no": "Noruega",
            "fi": "Finlandia",
            "dk": "Dinamarca",
            "de": "Alemania",
            "at": "Austria",
            "ch": "Suiza",
            "es": "España",
            "fr": "Francia",
            "pl": "Polonia"
        },
        "chart": {
            "today_and_tomorrow": "Hoy y mañana",
            "outstanding_hours": "Horas pendientes",
            "today": "Hoy",
            "tomorrow": "Mañana",
            "compare_to": "Comparar con",
            "net_production": "Producción neta",
            "yesterday_and_today": "Ayer y hoy"
        },
        "generation": {
            "current_production": "Producción y consumo",
            "production_method": "Método",
            "production_share": "Compartir",
            "production": "Producción",
            "consumption": "Consumo",
            "last_updated": "Última actualización",
            "excess": "Exceso",
            "deficit": "Déficit",
            "psr_coal_0": "Carbón",
            "psr_oil_0": "Aceite",
            "psr_gas_0": "Gasolina",
            "psr_peat_0": "Turba",
            "psr_water_0": "Agua",
            "psr_water_1": "Agua - Cons.",
            "psr_nuclear_0": "Nuclear",
            "psr_solar_0": "Solar",
            "psr_wind_0": "Viento",
            "psr_wind_1": "Viento - Cons.",
            "psr_other_0": "Otro",
            "primary_source": "Fuente de alimentación principal"
        },
        "outage": {
            "title_current": "Interrupciones operativas en curso",
            "title_planned": "Cortes planificados",
            "resource": "Recurso",
            "status": "Estado",
            "capacity_now": "Capacidad en este momento",
            "total_capacity": "Capacidad total"
        }
    }
};
const mod = {
    sv: sv,
    no: no,
    fi: fi,
    dk: dk,
    de: de,
    en: en,
    fr: fr,
    es: es
};
const importMeta1 = {
    url: "file:///C:/Users/robin/source/spotweb/config/translate.config.ts",
    main: false
};
const __default = {
    selfURL: importMeta1.url,
    languages: mod,
    fallback_language: "en"
};
const importMeta2 = {
    url: "https://deno.land/x/esbuild@v0.14.51/wasm.js",
    main: false
};
var __defProp = Object.defineProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var wasm_exports = {};
__export(wasm_exports, {
    analyzeMetafile: ()=>analyzeMetafile,
    analyzeMetafileSync: ()=>analyzeMetafileSync,
    build: ()=>build,
    buildSync: ()=>buildSync,
    formatMessages: ()=>formatMessages,
    formatMessagesSync: ()=>formatMessagesSync,
    initialize: ()=>initialize,
    serve: ()=>serve,
    stop: ()=>stop,
    transform: ()=>transform,
    transformSync: ()=>transformSync,
    version: ()=>version
});
function encodePacket(packet) {
    let visit = (value)=>{
        if (value === null) {
            bb.write8(0);
        } else if (typeof value === "boolean") {
            bb.write8(1);
            bb.write8(+value);
        } else if (typeof value === "number") {
            bb.write8(2);
            bb.write32(value | 0);
        } else if (typeof value === "string") {
            bb.write8(3);
            bb.write(encodeUTF8(value));
        } else if (value instanceof Uint8Array) {
            bb.write8(4);
            bb.write(value);
        } else if (value instanceof Array) {
            bb.write8(5);
            bb.write32(value.length);
            for (let item of value){
                visit(item);
            }
        } else {
            let keys = Object.keys(value);
            bb.write8(6);
            bb.write32(keys.length);
            for (let key of keys){
                bb.write(encodeUTF8(key));
                visit(value[key]);
            }
        }
    };
    let bb = new ByteBuffer();
    bb.write32(0);
    bb.write32(packet.id << 1 | +!packet.isRequest);
    visit(packet.value);
    writeUInt32LE(bb.buf, bb.len - 4, 0);
    return bb.buf.subarray(0, bb.len);
}
function decodePacket(bytes) {
    let visit = ()=>{
        switch(bb.read8()){
            case 0:
                return null;
            case 1:
                return !!bb.read8();
            case 2:
                return bb.read32();
            case 3:
                return decodeUTF8(bb.read());
            case 4:
                return bb.read();
            case 5:
                {
                    let count = bb.read32();
                    let value2 = [];
                    for(let i = 0; i < count; i++){
                        value2.push(visit());
                    }
                    return value2;
                }
            case 6:
                {
                    let count = bb.read32();
                    let value2 = {};
                    for(let i = 0; i < count; i++){
                        value2[decodeUTF8(bb.read())] = visit();
                    }
                    return value2;
                }
            default:
                throw new Error("Invalid packet");
        }
    };
    let bb = new ByteBuffer(bytes);
    let id = bb.read32();
    let isRequest = (id & 1) === 0;
    id >>>= 1;
    let value = visit();
    if (bb.ptr !== bytes.length) {
        throw new Error("Invalid packet");
    }
    return {
        id,
        isRequest,
        value
    };
}
var ByteBuffer = class {
    constructor(buf = new Uint8Array(1024)){
        this.buf = buf;
    }
    len = 0;
    ptr = 0;
    _write(delta) {
        if (this.len + delta > this.buf.length) {
            let clone = new Uint8Array((this.len + delta) * 2);
            clone.set(this.buf);
            this.buf = clone;
        }
        this.len += delta;
        return this.len - delta;
    }
    write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
    }
    write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
    }
    write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset);
        this.buf.set(bytes, offset + 4);
    }
    _read(delta) {
        if (this.ptr + delta > this.buf.length) {
            throw new Error("Invalid packet");
        }
        this.ptr += delta;
        return this.ptr - delta;
    }
    read8() {
        return this.buf[this._read(1)];
    }
    read32() {
        return readUInt32LE(this.buf, this._read(4));
    }
    read() {
        let length = this.read32();
        let bytes = new Uint8Array(length);
        let ptr = this._read(bytes.length);
        bytes.set(this.buf.subarray(ptr, ptr + length));
        return bytes;
    }
};
var encodeUTF8;
var decodeUTF8;
if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
    let encoder = new TextEncoder();
    let decoder = new TextDecoder();
    encodeUTF8 = (text)=>encoder.encode(text);
    decodeUTF8 = (bytes)=>decoder.decode(bytes);
} else if (typeof Buffer !== "undefined") {
    encodeUTF8 = (text)=>{
        let buffer = Buffer.from(text);
        if (!(buffer instanceof Uint8Array)) {
            buffer = new Uint8Array(buffer);
        }
        return buffer;
    };
    decodeUTF8 = (bytes)=>{
        let { buffer , byteOffset , byteLength  } = bytes;
        return Buffer.from(buffer, byteOffset, byteLength).toString();
    };
} else {
    throw new Error("No UTF-8 codec found");
}
function readUInt32LE(buffer, offset) {
    return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
}
function writeUInt32LE(buffer, value, offset) {
    buffer[offset++] = value;
    buffer[offset++] = value >> 8;
    buffer[offset++] = value >> 16;
    buffer[offset++] = value >> 24;
}
function validateTarget(target) {
    target += "";
    if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
    return target;
}
var canBeAnything = ()=>null;
var mustBeBoolean = (value)=>typeof value === "boolean" ? null : "a boolean";
var mustBeBooleanOrObject = (value)=>typeof value === "boolean" || typeof value === "object" && !Array.isArray(value) ? null : "a boolean or an object";
var mustBeString = (value)=>typeof value === "string" ? null : "a string";
var mustBeRegExp = (value)=>value instanceof RegExp ? null : "a RegExp object";
var mustBeInteger = (value)=>typeof value === "number" && value === (value | 0) ? null : "an integer";
var mustBeFunction = (value)=>typeof value === "function" ? null : "a function";
var mustBeArray = (value)=>Array.isArray(value) ? null : "an array";
var mustBeObject = (value)=>typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object";
var mustBeWebAssemblyModule = (value)=>value instanceof WebAssembly.Module ? null : "a WebAssembly.Module";
var mustBeArrayOrRecord = (value)=>typeof value === "object" && value !== null ? null : "an array or an object";
var mustBeObjectOrNull = (value)=>typeof value === "object" && !Array.isArray(value) ? null : "an object or null";
var mustBeStringOrBoolean = (value)=>typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean";
var mustBeStringOrObject = (value)=>typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object";
var mustBeStringOrArray = (value)=>typeof value === "string" || Array.isArray(value) ? null : "a string or an array";
var mustBeStringOrUint8Array = (value)=>typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
function getFlag(object, keys, key, mustBeFn) {
    let value = object[key];
    keys[key + ""] = true;
    if (value === void 0) return void 0;
    let mustBe = mustBeFn(value);
    if (mustBe !== null) throw new Error(`"${key}" must be ${mustBe}`);
    return value;
}
function checkForInvalidFlags(object, keys, where) {
    for(let key in object){
        if (!(key in keys)) {
            throw new Error(`Invalid option ${where}: "${key}"`);
        }
    }
}
function validateInitializeOptions(options) {
    let keys = Object.create(null);
    let wasmURL = getFlag(options, keys, "wasmURL", mustBeString);
    let wasmModule = getFlag(options, keys, "wasmModule", mustBeWebAssemblyModule);
    let worker = getFlag(options, keys, "worker", mustBeBoolean);
    checkForInvalidFlags(options, keys, "in initialize() call");
    return {
        wasmURL,
        wasmModule,
        worker
    };
}
function validateMangleCache(mangleCache) {
    let validated;
    if (mangleCache !== void 0) {
        validated = Object.create(null);
        for (let key of Object.keys(mangleCache)){
            let value = mangleCache[key];
            if (typeof value === "string" || value === false) {
                validated[key] = value;
            } else {
                throw new Error(`Expected ${JSON.stringify(key)} in mangle cache to map to either a string or false`);
            }
        }
    }
    return validated;
}
function pushLogFlags(flags, options, keys, isTTY, logLevelDefault) {
    let color = getFlag(options, keys, "color", mustBeBoolean);
    let logLevel = getFlag(options, keys, "logLevel", mustBeString);
    let logLimit = getFlag(options, keys, "logLimit", mustBeInteger);
    if (color !== void 0) flags.push(`--color=${color}`);
    else if (isTTY) flags.push(`--color=true`);
    flags.push(`--log-level=${logLevel || logLevelDefault}`);
    flags.push(`--log-limit=${logLimit || 0}`);
}
function pushCommonFlags(flags, options, keys) {
    let legalComments = getFlag(options, keys, "legalComments", mustBeString);
    let sourceRoot = getFlag(options, keys, "sourceRoot", mustBeString);
    let sourcesContent = getFlag(options, keys, "sourcesContent", mustBeBoolean);
    let target = getFlag(options, keys, "target", mustBeStringOrArray);
    let format = getFlag(options, keys, "format", mustBeString);
    let globalName = getFlag(options, keys, "globalName", mustBeString);
    let mangleProps = getFlag(options, keys, "mangleProps", mustBeRegExp);
    let reserveProps = getFlag(options, keys, "reserveProps", mustBeRegExp);
    let mangleQuoted = getFlag(options, keys, "mangleQuoted", mustBeBoolean);
    let minify = getFlag(options, keys, "minify", mustBeBoolean);
    let minifySyntax = getFlag(options, keys, "minifySyntax", mustBeBoolean);
    let minifyWhitespace = getFlag(options, keys, "minifyWhitespace", mustBeBoolean);
    let minifyIdentifiers = getFlag(options, keys, "minifyIdentifiers", mustBeBoolean);
    let drop = getFlag(options, keys, "drop", mustBeArray);
    let charset = getFlag(options, keys, "charset", mustBeString);
    let treeShaking = getFlag(options, keys, "treeShaking", mustBeBoolean);
    let ignoreAnnotations = getFlag(options, keys, "ignoreAnnotations", mustBeBoolean);
    let jsx = getFlag(options, keys, "jsx", mustBeString);
    let jsxFactory = getFlag(options, keys, "jsxFactory", mustBeString);
    let jsxFragment = getFlag(options, keys, "jsxFragment", mustBeString);
    let jsxImportSource = getFlag(options, keys, "jsxImportSource", mustBeString);
    let jsxDev = getFlag(options, keys, "jsxDev", mustBeBoolean);
    let define = getFlag(options, keys, "define", mustBeObject);
    let logOverride = getFlag(options, keys, "logOverride", mustBeObject);
    let supported = getFlag(options, keys, "supported", mustBeObject);
    let pure = getFlag(options, keys, "pure", mustBeArray);
    let keepNames = getFlag(options, keys, "keepNames", mustBeBoolean);
    let platform = getFlag(options, keys, "platform", mustBeString);
    if (legalComments) flags.push(`--legal-comments=${legalComments}`);
    if (sourceRoot !== void 0) flags.push(`--source-root=${sourceRoot}`);
    if (sourcesContent !== void 0) flags.push(`--sources-content=${sourcesContent}`);
    if (target) {
        if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
        else flags.push(`--target=${validateTarget(target)}`);
    }
    if (format) flags.push(`--format=${format}`);
    if (globalName) flags.push(`--global-name=${globalName}`);
    if (platform) flags.push(`--platform=${platform}`);
    if (minify) flags.push("--minify");
    if (minifySyntax) flags.push("--minify-syntax");
    if (minifyWhitespace) flags.push("--minify-whitespace");
    if (minifyIdentifiers) flags.push("--minify-identifiers");
    if (charset) flags.push(`--charset=${charset}`);
    if (treeShaking !== void 0) flags.push(`--tree-shaking=${treeShaking}`);
    if (ignoreAnnotations) flags.push(`--ignore-annotations`);
    if (drop) for (let what of drop)flags.push(`--drop:${what}`);
    if (mangleProps) flags.push(`--mangle-props=${mangleProps.source}`);
    if (reserveProps) flags.push(`--reserve-props=${reserveProps.source}`);
    if (mangleQuoted !== void 0) flags.push(`--mangle-quoted=${mangleQuoted}`);
    if (jsx) flags.push(`--jsx=${jsx}`);
    if (jsxFactory) flags.push(`--jsx-factory=${jsxFactory}`);
    if (jsxFragment) flags.push(`--jsx-fragment=${jsxFragment}`);
    if (jsxImportSource) flags.push(`--jsx-import-source=${jsxImportSource}`);
    if (jsxDev) flags.push(`--jsx-dev`);
    if (define) {
        for(let key in define){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
            flags.push(`--define:${key}=${define[key]}`);
        }
    }
    if (logOverride) {
        for(let key in logOverride){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid log override: ${key}`);
            flags.push(`--log-override:${key}=${logOverride[key]}`);
        }
    }
    if (supported) {
        for(let key in supported){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid supported: ${key}`);
            flags.push(`--supported:${key}=${supported[key]}`);
        }
    }
    if (pure) for (let fn of pure)flags.push(`--pure:${fn}`);
    if (keepNames) flags.push(`--keep-names`);
}
function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
    let flags = [];
    let entries = [];
    let keys = Object.create(null);
    let stdinContents = null;
    let stdinResolveDir = null;
    let watchMode = null;
    pushLogFlags(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags(flags, options, keys);
    let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
    let bundle = getFlag(options, keys, "bundle", mustBeBoolean);
    let watch = getFlag(options, keys, "watch", mustBeBooleanOrObject);
    let splitting = getFlag(options, keys, "splitting", mustBeBoolean);
    let preserveSymlinks = getFlag(options, keys, "preserveSymlinks", mustBeBoolean);
    let metafile = getFlag(options, keys, "metafile", mustBeBoolean);
    let outfile = getFlag(options, keys, "outfile", mustBeString);
    let outdir = getFlag(options, keys, "outdir", mustBeString);
    let outbase = getFlag(options, keys, "outbase", mustBeString);
    let tsconfig = getFlag(options, keys, "tsconfig", mustBeString);
    let resolveExtensions = getFlag(options, keys, "resolveExtensions", mustBeArray);
    let nodePathsInput = getFlag(options, keys, "nodePaths", mustBeArray);
    let mainFields = getFlag(options, keys, "mainFields", mustBeArray);
    let conditions = getFlag(options, keys, "conditions", mustBeArray);
    let external = getFlag(options, keys, "external", mustBeArray);
    let loader = getFlag(options, keys, "loader", mustBeObject);
    let outExtension = getFlag(options, keys, "outExtension", mustBeObject);
    let publicPath = getFlag(options, keys, "publicPath", mustBeString);
    let entryNames = getFlag(options, keys, "entryNames", mustBeString);
    let chunkNames = getFlag(options, keys, "chunkNames", mustBeString);
    let assetNames = getFlag(options, keys, "assetNames", mustBeString);
    let inject = getFlag(options, keys, "inject", mustBeArray);
    let banner = getFlag(options, keys, "banner", mustBeObject);
    let footer = getFlag(options, keys, "footer", mustBeObject);
    let entryPoints = getFlag(options, keys, "entryPoints", mustBeArrayOrRecord);
    let absWorkingDir = getFlag(options, keys, "absWorkingDir", mustBeString);
    let stdin = getFlag(options, keys, "stdin", mustBeObject);
    let write = getFlag(options, keys, "write", mustBeBoolean) ?? writeDefault;
    let allowOverwrite = getFlag(options, keys, "allowOverwrite", mustBeBoolean);
    let incremental = getFlag(options, keys, "incremental", mustBeBoolean) === true;
    let mangleCache = getFlag(options, keys, "mangleCache", mustBeObject);
    keys.plugins = true;
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
    if (bundle) flags.push("--bundle");
    if (allowOverwrite) flags.push("--allow-overwrite");
    if (watch) {
        flags.push("--watch");
        if (typeof watch === "boolean") {
            watchMode = {};
        } else {
            let watchKeys = Object.create(null);
            let onRebuild = getFlag(watch, watchKeys, "onRebuild", mustBeFunction);
            checkForInvalidFlags(watch, watchKeys, `on "watch" in ${callName}() call`);
            watchMode = {
                onRebuild
            };
        }
    }
    if (splitting) flags.push("--splitting");
    if (preserveSymlinks) flags.push("--preserve-symlinks");
    if (metafile) flags.push(`--metafile`);
    if (outfile) flags.push(`--outfile=${outfile}`);
    if (outdir) flags.push(`--outdir=${outdir}`);
    if (outbase) flags.push(`--outbase=${outbase}`);
    if (tsconfig) flags.push(`--tsconfig=${tsconfig}`);
    if (resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
            values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
    }
    if (publicPath) flags.push(`--public-path=${publicPath}`);
    if (entryNames) flags.push(`--entry-names=${entryNames}`);
    if (chunkNames) flags.push(`--chunk-names=${chunkNames}`);
    if (assetNames) flags.push(`--asset-names=${assetNames}`);
    if (mainFields) {
        let values = [];
        for (let value of mainFields){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
            values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
    }
    if (conditions) {
        let values = [];
        for (let value of conditions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
            values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
    }
    if (external) for (let name of external)flags.push(`--external:${name}`);
    if (banner) {
        for(let type in banner){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
            flags.push(`--banner:${type}=${banner[type]}`);
        }
    }
    if (footer) {
        for(let type in footer){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
            flags.push(`--footer:${type}=${footer[type]}`);
        }
    }
    if (inject) for (let path of inject)flags.push(`--inject:${path}`);
    if (loader) {
        for(let ext in loader){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
            flags.push(`--loader:${ext}=${loader[ext]}`);
        }
    }
    if (outExtension) {
        for(let ext in outExtension){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
            flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
    }
    if (entryPoints) {
        if (Array.isArray(entryPoints)) {
            for (let entryPoint of entryPoints){
                entries.push([
                    "",
                    entryPoint + ""
                ]);
            }
        } else {
            for (let [key, value] of Object.entries(entryPoints)){
                entries.push([
                    key + "",
                    value + ""
                ]);
            }
        }
    }
    if (stdin) {
        let stdinKeys = Object.create(null);
        let contents = getFlag(stdin, stdinKeys, "contents", mustBeString);
        let resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString);
        let sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString);
        let loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object');
        if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
        if (loader2) flags.push(`--loader=${loader2}`);
        if (resolveDir) stdinResolveDir = resolveDir + "";
        stdinContents = contents ? contents + "" : "";
    }
    let nodePaths = [];
    if (nodePathsInput) {
        for (let value of nodePathsInput){
            value += "";
            nodePaths.push(value);
        }
    }
    return {
        entries,
        flags,
        write,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode,
        mangleCache: validateMangleCache(mangleCache)
    };
}
function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
    let flags = [];
    let keys = Object.create(null);
    pushLogFlags(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags(flags, options, keys);
    let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
    let tsconfigRaw = getFlag(options, keys, "tsconfigRaw", mustBeStringOrObject);
    let sourcefile = getFlag(options, keys, "sourcefile", mustBeString);
    let loader = getFlag(options, keys, "loader", mustBeString);
    let banner = getFlag(options, keys, "banner", mustBeString);
    let footer = getFlag(options, keys, "footer", mustBeString);
    let mangleCache = getFlag(options, keys, "mangleCache", mustBeObject);
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
    if (tsconfigRaw) flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
    if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
    if (loader) flags.push(`--loader=${loader}`);
    if (banner) flags.push(`--banner=${banner}`);
    if (footer) flags.push(`--footer=${footer}`);
    return {
        flags,
        mangleCache: validateMangleCache(mangleCache)
    };
}
function createChannel(streamIn) {
    let responseCallbacks = new Map();
    let pluginCallbacks = new Map();
    let watchCallbacks = new Map();
    let serveCallbacks = new Map();
    let closeData = null;
    let nextRequestID = 0;
    let nextBuildKey = 0;
    let stdout = new Uint8Array(16 * 1024);
    let stdoutUsed = 0;
    let readFromStdout = (chunk)=>{
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
            let swap = new Uint8Array(limit * 2);
            swap.set(stdout);
            stdout = swap;
        }
        stdout.set(chunk, stdoutUsed);
        stdoutUsed += chunk.length;
        let offset = 0;
        while(offset + 4 <= stdoutUsed){
            let length = readUInt32LE(stdout, offset);
            if (offset + 4 + length > stdoutUsed) {
                break;
            }
            offset += 4;
            handleIncomingPacket(stdout.subarray(offset, offset + length));
            offset += length;
        }
        if (offset > 0) {
            stdout.copyWithin(0, offset, stdoutUsed);
            stdoutUsed -= offset;
        }
    };
    let afterClose = (error)=>{
        closeData = {
            reason: error ? ": " + (error.message || error) : ""
        };
        const text = "The service was stopped" + closeData.reason;
        for (let callback of responseCallbacks.values()){
            callback(text, null);
        }
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values()){
            callbacks.onWait(text);
        }
        serveCallbacks.clear();
        for (let callback of watchCallbacks.values()){
            try {
                callback(new Error(text), null);
            } catch (e) {
                console.error(e);
            }
        }
        watchCallbacks.clear();
    };
    let sendRequest = (refs, value, callback)=>{
        if (closeData) return callback("The service is no longer running" + closeData.reason, null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response)=>{
            try {
                callback(error, response);
            } finally{
                if (refs) refs.unref();
            }
        });
        if (refs) refs.ref();
        streamIn.writeToStdin(encodePacket({
            id,
            isRequest: true,
            value
        }));
    };
    let sendResponse = (id, value)=>{
        if (closeData) throw new Error("The service is no longer running" + closeData.reason);
        streamIn.writeToStdin(encodePacket({
            id,
            isRequest: false,
            value
        }));
    };
    let handleRequest = async (id, request)=>{
        try {
            switch(request.command){
                case "ping":
                    {
                        sendResponse(id, {});
                        break;
                    }
                case "on-start":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "on-resolve":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "on-load":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "serve-request":
                    {
                        let callbacks = serveCallbacks.get(request.key);
                        if (callbacks && callbacks.onRequest) callbacks.onRequest(request.args);
                        sendResponse(id, {});
                        break;
                    }
                case "serve-wait":
                    {
                        let callbacks = serveCallbacks.get(request.key);
                        if (callbacks) callbacks.onWait(request.error);
                        sendResponse(id, {});
                        break;
                    }
                case "watch-rebuild":
                    {
                        let callback = watchCallbacks.get(request.key);
                        try {
                            if (callback) callback(null, request.args);
                        } catch (err) {
                            console.error(err);
                        }
                        sendResponse(id, {});
                        break;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        } catch (e) {
            sendResponse(id, {
                errors: [
                    extractErrorMessageV8(e, streamIn, null, void 0, "")
                ]
            });
        }
    };
    let isFirstPacket = true;
    let handleIncomingPacket = (bytes)=>{
        if (isFirstPacket) {
            isFirstPacket = false;
            let binaryVersion = String.fromCharCode(...bytes);
            if (binaryVersion !== "0.14.51") {
                throw new Error(`Cannot start service: Host version "${"0.14.51"}" does not match binary version ${JSON.stringify(binaryVersion)}`);
            }
            return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest) {
            handleRequest(packet.id, packet.value);
        } else {
            let callback = responseCallbacks.get(packet.id);
            responseCallbacks.delete(packet.id);
            if (packet.value.error) callback(packet.value.error, {});
            else callback(null, packet.value);
        }
    };
    let handlePlugins = async (initialOptions, plugins, buildKey, stash, refs)=>{
        let onStartCallbacks = [];
        let onEndCallbacks = [];
        let onResolveCallbacks = {};
        let onLoadCallbacks = {};
        let nextCallbackID = 0;
        let i = 0;
        let requestPlugins = [];
        let isSetupDone = false;
        plugins = [
            ...plugins
        ];
        for (let item of plugins){
            let keys = {};
            if (typeof item !== "object") throw new Error(`Plugin at index ${i} must be an object`);
            const name = getFlag(item, keys, "name", mustBeString);
            if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i} is missing a name`);
            try {
                let setup = getFlag(item, keys, "setup", mustBeFunction);
                if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
                checkForInvalidFlags(item, keys, `on plugin ${JSON.stringify(name)}`);
                let plugin = {
                    name,
                    onResolve: [],
                    onLoad: []
                };
                i++;
                let resolve = (path, options = {})=>{
                    if (!isSetupDone) throw new Error('Cannot call "resolve" before plugin setup has completed');
                    if (typeof path !== "string") throw new Error(`The path to resolve must be a string`);
                    let keys2 = Object.create(null);
                    let pluginName = getFlag(options, keys2, "pluginName", mustBeString);
                    let importer = getFlag(options, keys2, "importer", mustBeString);
                    let namespace = getFlag(options, keys2, "namespace", mustBeString);
                    let resolveDir = getFlag(options, keys2, "resolveDir", mustBeString);
                    let kind = getFlag(options, keys2, "kind", mustBeString);
                    let pluginData = getFlag(options, keys2, "pluginData", canBeAnything);
                    checkForInvalidFlags(options, keys2, "in resolve() call");
                    return new Promise((resolve2, reject)=>{
                        const request = {
                            command: "resolve",
                            path,
                            key: buildKey,
                            pluginName: name
                        };
                        if (pluginName != null) request.pluginName = pluginName;
                        if (importer != null) request.importer = importer;
                        if (namespace != null) request.namespace = namespace;
                        if (resolveDir != null) request.resolveDir = resolveDir;
                        if (kind != null) request.kind = kind;
                        if (pluginData != null) request.pluginData = stash.store(pluginData);
                        sendRequest(refs, request, (error, response)=>{
                            if (error !== null) reject(new Error(error));
                            else resolve2({
                                errors: replaceDetailsInMessages(response.errors, stash),
                                warnings: replaceDetailsInMessages(response.warnings, stash),
                                path: response.path,
                                external: response.external,
                                sideEffects: response.sideEffects,
                                namespace: response.namespace,
                                suffix: response.suffix,
                                pluginData: stash.load(response.pluginData)
                            });
                        });
                    });
                };
                let promise = setup({
                    initialOptions,
                    resolve,
                    onStart (callback2) {
                        let registeredText = `This error came from the "onStart" callback registered here:`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onStart");
                        onStartCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onEnd (callback2) {
                        let registeredText = `This error came from the "onEnd" callback registered here:`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onEnd");
                        onEndCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onResolve (options, callback2) {
                        let registeredText = `This error came from the "onResolve" callback registered here:`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve");
                        let keys2 = {};
                        let filter = getFlag(options, keys2, "filter", mustBeRegExp);
                        let namespace = getFlag(options, keys2, "namespace", mustBeString);
                        checkForInvalidFlags(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onResolve() call is missing a filter`);
                        let id = nextCallbackID++;
                        onResolveCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onResolve.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    },
                    onLoad (options, callback2) {
                        let registeredText = `This error came from the "onLoad" callback registered here:`;
                        let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad");
                        let keys2 = {};
                        let filter = getFlag(options, keys2, "filter", mustBeRegExp);
                        let namespace = getFlag(options, keys2, "namespace", mustBeString);
                        checkForInvalidFlags(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onLoad() call is missing a filter`);
                        let id = nextCallbackID++;
                        onLoadCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onLoad.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    },
                    esbuild: streamIn.esbuild
                });
                if (promise) await promise;
                requestPlugins.push(plugin);
            } catch (e) {
                return {
                    ok: false,
                    error: e,
                    pluginName: name
                };
            }
        }
        const callback = async (request)=>{
            switch(request.command){
                case "on-start":
                    {
                        let response = {
                            errors: [],
                            warnings: []
                        };
                        await Promise.all(onStartCallbacks.map(async ({ name , callback: callback2 , note  })=>{
                            try {
                                let result = await callback2();
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);
                                    if (errors != null) response.errors.push(...sanitizeMessages(errors, "errors", stash, name));
                                    if (warnings != null) response.warnings.push(...sanitizeMessages(warnings, "warnings", stash, name));
                                }
                            } catch (e) {
                                response.errors.push(extractErrorMessageV8(e, streamIn, stash, note && note(), name));
                            }
                        }));
                        return response;
                    }
                case "on-resolve":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onResolveCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    importer: request.importer,
                                    namespace: request.namespace,
                                    resolveDir: request.resolveDir,
                                    kind: request.kind,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag(result, keys, "pluginName", mustBeString);
                                    let path = getFlag(result, keys, "path", mustBeString);
                                    let namespace = getFlag(result, keys, "namespace", mustBeString);
                                    let suffix = getFlag(result, keys, "suffix", mustBeString);
                                    let external = getFlag(result, keys, "external", mustBeBoolean);
                                    let sideEffects = getFlag(result, keys, "sideEffects", mustBeBoolean);
                                    let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
                                    let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (path != null) response.path = path;
                                    if (namespace != null) response.namespace = namespace;
                                    if (suffix != null) response.suffix = suffix;
                                    if (external != null) response.external = external;
                                    if (sideEffects != null) response.sideEffects = sideEffects;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (errors != null) response.errors = sanitizeMessages(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV8(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                case "on-load":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onLoadCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    namespace: request.namespace,
                                    suffix: request.suffix,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag(result, keys, "pluginName", mustBeString);
                                    let contents = getFlag(result, keys, "contents", mustBeStringOrUint8Array);
                                    let resolveDir = getFlag(result, keys, "resolveDir", mustBeString);
                                    let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
                                    let loader = getFlag(result, keys, "loader", mustBeString);
                                    let errors = getFlag(result, keys, "errors", mustBeArray);
                                    let warnings = getFlag(result, keys, "warnings", mustBeArray);
                                    let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
                                    let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
                                    checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (contents instanceof Uint8Array) response.contents = contents;
                                    else if (contents != null) response.contents = encodeUTF8(contents);
                                    if (resolveDir != null) response.resolveDir = resolveDir;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (loader != null) response.loader = loader;
                                    if (errors != null) response.errors = sanitizeMessages(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV8(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        };
        let runOnEndCallbacks = (result, logPluginError, done)=>done();
        if (onEndCallbacks.length > 0) {
            runOnEndCallbacks = (result, logPluginError, done)=>{
                (async ()=>{
                    for (const { name , callback: callback2 , note  } of onEndCallbacks){
                        try {
                            await callback2(result);
                        } catch (e) {
                            result.errors.push(await new Promise((resolve)=>logPluginError(e, name, note && note(), resolve)));
                        }
                    }
                })().then(done);
            };
        }
        isSetupDone = true;
        let refCount = 0;
        return {
            ok: true,
            requestPlugins,
            runOnEndCallbacks,
            pluginRefs: {
                ref () {
                    if (++refCount === 1) pluginCallbacks.set(buildKey, callback);
                },
                unref () {
                    if (--refCount === 0) pluginCallbacks.delete(buildKey);
                }
            }
        };
    };
    let buildServeData = (refs, options, request, key)=>{
        let keys = {};
        let port = getFlag(options, keys, "port", mustBeInteger);
        let host = getFlag(options, keys, "host", mustBeString);
        let servedir = getFlag(options, keys, "servedir", mustBeString);
        let onRequest = getFlag(options, keys, "onRequest", mustBeFunction);
        let onWait;
        let wait = new Promise((resolve, reject)=>{
            onWait = (error)=>{
                serveCallbacks.delete(key);
                if (error !== null) reject(new Error(error));
                else resolve();
            };
        });
        request.serve = {};
        checkForInvalidFlags(options, keys, `in serve() call`);
        if (port !== void 0) request.serve.port = port;
        if (host !== void 0) request.serve.host = host;
        if (servedir !== void 0) request.serve.servedir = servedir;
        serveCallbacks.set(key, {
            onRequest,
            onWait
        });
        return {
            wait,
            stop () {
                sendRequest(refs, {
                    command: "serve-stop",
                    key
                }, ()=>{});
            }
        };
    };
    const buildLogLevelDefault = "warning";
    const transformLogLevelDefault = "silent";
    let buildOrServe = (args)=>{
        let key = nextBuildKey++;
        const details = createObjectStash();
        let plugins;
        let { refs , options , isTTY , callback  } = args;
        if (typeof options === "object") {
            let value = options.plugins;
            if (value !== void 0) {
                if (!Array.isArray(value)) throw new Error(`"plugins" must be an array`);
                plugins = value;
            }
        }
        let logPluginError = (e, pluginName, note, done)=>{
            let flags = [];
            try {
                pushLogFlags(flags, options, {}, isTTY, buildLogLevelDefault);
            } catch  {}
            const message = extractErrorMessageV8(e, streamIn, details, note, pluginName);
            sendRequest(refs, {
                command: "error",
                flags,
                error: message
            }, ()=>{
                message.detail = details.load(message.detail);
                done(message);
            });
        };
        let handleError = (e, pluginName)=>{
            logPluginError(e, pluginName, void 0, (error)=>{
                callback(failureErrorWithLog("Build failed", [
                    error
                ], []), null);
            });
        };
        if (plugins && plugins.length > 0) {
            if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
            handlePlugins(options, plugins, key, details, refs).then((result)=>{
                if (!result.ok) {
                    handleError(result.error, result.pluginName);
                } else {
                    try {
                        buildOrServeContinue({
                            ...args,
                            key,
                            details,
                            logPluginError,
                            requestPlugins: result.requestPlugins,
                            runOnEndCallbacks: result.runOnEndCallbacks,
                            pluginRefs: result.pluginRefs
                        });
                    } catch (e) {
                        handleError(e, "");
                    }
                }
            }, (e)=>handleError(e, ""));
        } else {
            try {
                buildOrServeContinue({
                    ...args,
                    key,
                    details,
                    logPluginError,
                    requestPlugins: null,
                    runOnEndCallbacks: (result, logPluginError2, done)=>done(),
                    pluginRefs: null
                });
            } catch (e) {
                handleError(e, "");
            }
        }
    };
    let buildOrServeContinue = ({ callName , refs: callerRefs , serveOptions , options , isTTY , defaultWD , callback , key , details , logPluginError , requestPlugins , runOnEndCallbacks , pluginRefs  })=>{
        const refs = {
            ref () {
                if (pluginRefs) pluginRefs.ref();
                if (callerRefs) callerRefs.ref();
            },
            unref () {
                if (pluginRefs) pluginRefs.unref();
                if (callerRefs) callerRefs.unref();
            }
        };
        let writeDefault = !streamIn.isWriteUnavailable;
        let { entries , flags , write , stdinContents , stdinResolveDir , absWorkingDir , incremental , nodePaths , watch , mangleCache  } = flagsForBuildOptions(callName, options, isTTY, buildLogLevelDefault, writeDefault);
        let request = {
            command: "build",
            key,
            entries,
            flags,
            write,
            stdinContents,
            stdinResolveDir,
            absWorkingDir: absWorkingDir || defaultWD,
            incremental,
            nodePaths
        };
        if (requestPlugins) request.plugins = requestPlugins;
        if (mangleCache) request.mangleCache = mangleCache;
        let serve2 = serveOptions && buildServeData(refs, serveOptions, request, key);
        let rebuild;
        let stop2;
        let copyResponseToResult = (response, result)=>{
            if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles);
            if (response.metafile) result.metafile = JSON.parse(response.metafile);
            if (response.mangleCache) result.mangleCache = response.mangleCache;
            if (response.writeToStdout !== void 0) console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, ""));
        };
        let buildResponseToResult = (response, callback2)=>{
            let result = {
                errors: replaceDetailsInMessages(response.errors, details),
                warnings: replaceDetailsInMessages(response.warnings, details)
            };
            copyResponseToResult(response, result);
            runOnEndCallbacks(result, logPluginError, ()=>{
                if (result.errors.length > 0) {
                    return callback2(failureErrorWithLog("Build failed", result.errors, result.warnings), null);
                }
                if (response.rebuild) {
                    if (!rebuild) {
                        let isDisposed = false;
                        rebuild = ()=>new Promise((resolve, reject)=>{
                                if (isDisposed || closeData) throw new Error("Cannot rebuild");
                                sendRequest(refs, {
                                    command: "rebuild",
                                    key
                                }, (error2, response2)=>{
                                    if (error2) {
                                        const message = {
                                            id: "",
                                            pluginName: "",
                                            text: error2,
                                            location: null,
                                            notes: [],
                                            detail: void 0
                                        };
                                        return callback2(failureErrorWithLog("Build failed", [
                                            message
                                        ], []), null);
                                    }
                                    buildResponseToResult(response2, (error3, result3)=>{
                                        if (error3) reject(error3);
                                        else resolve(result3);
                                    });
                                });
                            });
                        refs.ref();
                        rebuild.dispose = ()=>{
                            if (isDisposed) return;
                            isDisposed = true;
                            sendRequest(refs, {
                                command: "rebuild-dispose",
                                key
                            }, ()=>{});
                            refs.unref();
                        };
                    }
                    result.rebuild = rebuild;
                }
                if (response.watch) {
                    if (!stop2) {
                        let isStopped = false;
                        refs.ref();
                        stop2 = ()=>{
                            if (isStopped) return;
                            isStopped = true;
                            watchCallbacks.delete(key);
                            sendRequest(refs, {
                                command: "watch-stop",
                                key
                            }, ()=>{});
                            refs.unref();
                        };
                        if (watch) {
                            watchCallbacks.set(key, (serviceStopError, watchResponse)=>{
                                if (serviceStopError) {
                                    if (watch.onRebuild) watch.onRebuild(serviceStopError, null);
                                    return;
                                }
                                let result2 = {
                                    errors: replaceDetailsInMessages(watchResponse.errors, details),
                                    warnings: replaceDetailsInMessages(watchResponse.warnings, details)
                                };
                                copyResponseToResult(watchResponse, result2);
                                runOnEndCallbacks(result2, logPluginError, ()=>{
                                    if (result2.errors.length > 0) {
                                        if (watch.onRebuild) watch.onRebuild(failureErrorWithLog("Build failed", result2.errors, result2.warnings), null);
                                        return;
                                    }
                                    if (watchResponse.rebuildID !== void 0) result2.rebuild = rebuild;
                                    result2.stop = stop2;
                                    if (watch.onRebuild) watch.onRebuild(null, result2);
                                });
                            });
                        }
                    }
                    result.stop = stop2;
                }
                callback2(null, result);
            });
        };
        if (write && streamIn.isWriteUnavailable) throw new Error(`The "write" option is unavailable in this environment`);
        if (incremental && streamIn.isSync) throw new Error(`Cannot use "incremental" with a synchronous build`);
        if (watch && streamIn.isSync) throw new Error(`Cannot use "watch" with a synchronous build`);
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            if (serve2) {
                let serveResponse = response;
                let isStopped = false;
                refs.ref();
                let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop () {
                        if (isStopped) return;
                        isStopped = true;
                        serve2.stop();
                        refs.unref();
                    }
                };
                refs.ref();
                serve2.wait.then(refs.unref, refs.unref);
                return callback(null, result);
            }
            return buildResponseToResult(response, callback);
        });
    };
    let transform2 = ({ callName , refs , input , options , isTTY , fs , callback  })=>{
        const details = createObjectStash();
        let start = (inputPath)=>{
            try {
                if (typeof input !== "string") throw new Error('The input to "transform" must be a string');
                let { flags , mangleCache  } = flagsForTransformOptions(callName, options, isTTY, transformLogLevelDefault);
                let request = {
                    command: "transform",
                    flags,
                    inputFS: inputPath !== null,
                    input: inputPath !== null ? inputPath : input
                };
                if (mangleCache) request.mangleCache = mangleCache;
                sendRequest(refs, request, (error, response)=>{
                    if (error) return callback(new Error(error), null);
                    let errors = replaceDetailsInMessages(response.errors, details);
                    let warnings = replaceDetailsInMessages(response.warnings, details);
                    let outstanding = 1;
                    let next = ()=>{
                        if (--outstanding === 0) {
                            let result = {
                                warnings,
                                code: response.code,
                                map: response.map
                            };
                            if (response.mangleCache) result.mangleCache = response?.mangleCache;
                            callback(null, result);
                        }
                    };
                    if (errors.length > 0) return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
                    if (response.codeFS) {
                        outstanding++;
                        fs.readFile(response.code, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.code = contents;
                                next();
                            }
                        });
                    }
                    if (response.mapFS) {
                        outstanding++;
                        fs.readFile(response.map, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.map = contents;
                                next();
                            }
                        });
                    }
                    next();
                });
            } catch (e) {
                let flags = [];
                try {
                    pushLogFlags(flags, options, {}, isTTY, transformLogLevelDefault);
                } catch  {}
                const error = extractErrorMessageV8(e, streamIn, details, void 0, "");
                sendRequest(refs, {
                    command: "error",
                    flags,
                    error
                }, ()=>{
                    error.detail = details.load(error.detail);
                    callback(failureErrorWithLog("Transform failed", [
                        error
                    ], []), null);
                });
            }
        };
        if (typeof input === "string" && input.length > 1024 * 1024) {
            let next = start;
            start = ()=>fs.writeFile(input, next);
        }
        start(null);
    };
    let formatMessages2 = ({ callName , refs , messages , options , callback  })=>{
        let result = sanitizeMessages(messages, "messages", null, "");
        if (!options) throw new Error(`Missing second argument in ${callName}() call`);
        let keys = {};
        let kind = getFlag(options, keys, "kind", mustBeString);
        let color = getFlag(options, keys, "color", mustBeBoolean);
        let terminalWidth = getFlag(options, keys, "terminalWidth", mustBeInteger);
        checkForInvalidFlags(options, keys, `in ${callName}() call`);
        if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
        if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
        let request = {
            command: "format-msgs",
            messages: result,
            isWarning: kind === "warning"
        };
        if (color !== void 0) request.color = color;
        if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.messages);
        });
    };
    let analyzeMetafile2 = ({ callName , refs , metafile , options , callback  })=>{
        if (options === void 0) options = {};
        let keys = {};
        let color = getFlag(options, keys, "color", mustBeBoolean);
        let verbose = getFlag(options, keys, "verbose", mustBeBoolean);
        checkForInvalidFlags(options, keys, `in ${callName}() call`);
        let request = {
            command: "analyze-metafile",
            metafile
        };
        if (color !== void 0) request.color = color;
        if (verbose !== void 0) request.verbose = verbose;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.result);
        });
    };
    return {
        readFromStdout,
        afterClose,
        service: {
            buildOrServe,
            transform: transform2,
            formatMessages: formatMessages2,
            analyzeMetafile: analyzeMetafile2
        }
    };
}
function createObjectStash() {
    const map = new Map();
    let nextID = 0;
    return {
        load (id) {
            return map.get(id);
        },
        store (value) {
            if (value === void 0) return -1;
            const id = nextID++;
            map.set(id, value);
            return id;
        }
    };
}
function extractCallerV8(e, streamIn, ident) {
    let note;
    let tried = false;
    return ()=>{
        if (tried) return note;
        tried = true;
        try {
            let lines = (e.stack + "").split("\n");
            lines.splice(1, 1);
            let location = parseStackLinesV8(streamIn, lines, ident);
            if (location) {
                note = {
                    text: e.message,
                    location
                };
                return note;
            }
        } catch  {}
    };
}
function extractErrorMessageV8(e, streamIn, stash, note, pluginName) {
    let text = "Internal error";
    let location = null;
    try {
        text = (e && e.message || e) + "";
    } catch  {}
    try {
        location = parseStackLinesV8(streamIn, (e.stack + "").split("\n"), "");
    } catch  {}
    return {
        id: "",
        pluginName,
        text,
        location,
        notes: note ? [
            note
        ] : [],
        detail: stash ? stash.store(e) : -1
    };
}
function parseStackLinesV8(streamIn, lines, ident) {
    let at = "    at ";
    if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
        for(let i = 1; i < lines.length; i++){
            let line = lines[i];
            if (!line.startsWith(at)) continue;
            line = line.slice(at.length);
            while(true){
                let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^(\S+):(\d+):(\d+)$/.exec(line);
                if (match) {
                    let contents;
                    try {
                        contents = streamIn.readFileSync(match[1], "utf8");
                    } catch  {
                        break;
                    }
                    let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
                    let column = +match[3] - 1;
                    let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                    return {
                        file: match[1],
                        namespace: "file",
                        line: +match[2],
                        column: encodeUTF8(lineText.slice(0, column)).length,
                        length: encodeUTF8(lineText.slice(column, column + length)).length,
                        lineText: lineText + "\n" + lines.slice(1).join("\n"),
                        suggestion: ""
                    };
                }
                break;
            }
        }
    }
    return null;
}
function failureErrorWithLog(text, errors, warnings) {
    let limit = 5;
    let summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i)=>{
        if (i === limit) return "\n...";
        if (!e.location) return `
error: ${e.text}`;
        let { file , line , column  } = e.location;
        let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : "";
        return `
${file}:${line}:${column}: ERROR: ${pluginText}${e.text}`;
    }).join("");
    let error = new Error(`${text}${summary}`);
    error.errors = errors;
    error.warnings = warnings;
    return error;
}
function replaceDetailsInMessages(messages, stash) {
    for (const message of messages){
        message.detail = stash.load(message.detail);
    }
    return messages;
}
function sanitizeLocation(location, where) {
    if (location == null) return null;
    let keys = {};
    let file = getFlag(location, keys, "file", mustBeString);
    let namespace = getFlag(location, keys, "namespace", mustBeString);
    let line = getFlag(location, keys, "line", mustBeInteger);
    let column = getFlag(location, keys, "column", mustBeInteger);
    let length = getFlag(location, keys, "length", mustBeInteger);
    let lineText = getFlag(location, keys, "lineText", mustBeString);
    let suggestion = getFlag(location, keys, "suggestion", mustBeString);
    checkForInvalidFlags(location, keys, where);
    return {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || "",
        suggestion: suggestion || ""
    };
}
function sanitizeMessages(messages, property, stash, fallbackPluginName) {
    let messagesClone = [];
    let index = 0;
    for (const message of messages){
        let keys = {};
        let id = getFlag(message, keys, "id", mustBeString);
        let pluginName = getFlag(message, keys, "pluginName", mustBeString);
        let text = getFlag(message, keys, "text", mustBeString);
        let location = getFlag(message, keys, "location", mustBeObjectOrNull);
        let notes = getFlag(message, keys, "notes", mustBeArray);
        let detail = getFlag(message, keys, "detail", canBeAnything);
        let where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys, where);
        let notesClone = [];
        if (notes) {
            for (const note of notes){
                let noteKeys = {};
                let noteText = getFlag(note, noteKeys, "text", mustBeString);
                let noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
                checkForInvalidFlags(note, noteKeys, where);
                notesClone.push({
                    text: noteText || "",
                    location: sanitizeLocation(noteLocation, where)
                });
            }
        }
        messagesClone.push({
            id: id || "",
            pluginName: pluginName || fallbackPluginName,
            text: text || "",
            location: sanitizeLocation(location, where),
            notes: notesClone,
            detail: stash ? stash.store(detail) : -1
        });
        index++;
    }
    return messagesClone;
}
function sanitizeStringArray(values, property) {
    const result = [];
    for (const value of values){
        if (typeof value !== "string") throw new Error(`${JSON.stringify(property)} must be an array of strings`);
        result.push(value);
    }
    return result;
}
function convertOutputFiles({ path , contents  }) {
    let text = null;
    return {
        path,
        contents,
        get text () {
            if (text === null) text = decodeUTF8(contents);
            return text;
        }
    };
}
var version = "0.14.51";
var build = (options)=>ensureServiceIsRunning().then((service)=>service.build(options));
var serve = ()=>{
    throw new Error(`The "serve" API does not work in Deno via WebAssembly`);
};
var transform = (input, options)=>ensureServiceIsRunning().then((service)=>service.transform(input, options));
var formatMessages = (messages, options)=>ensureServiceIsRunning().then((service)=>service.formatMessages(messages, options));
var analyzeMetafile = (metafile, options)=>ensureServiceIsRunning().then((service)=>service.analyzeMetafile(metafile, options));
var buildSync = ()=>{
    throw new Error(`The "buildSync" API does not work in Deno`);
};
var transformSync = ()=>{
    throw new Error(`The "transformSync" API does not work in Deno`);
};
var formatMessagesSync = ()=>{
    throw new Error(`The "formatMessagesSync" API does not work in Deno`);
};
var analyzeMetafileSync = ()=>{
    throw new Error(`The "analyzeMetafileSync" API does not work in Deno`);
};
var stop = ()=>{
    if (stopService) stopService();
};
var initializePromise;
var stopService;
var ensureServiceIsRunning = ()=>{
    return initializePromise || startRunningService("", void 0, true);
};
var initialize = async (options)=>{
    options = validateInitializeOptions(options || {});
    let wasmURL = options.wasmURL;
    let wasmModule = options.wasmModule;
    let useWorker = options.worker !== false;
    if (initializePromise) throw new Error('Cannot call "initialize" more than once');
    initializePromise = startRunningService(wasmURL || "", wasmModule, useWorker);
    initializePromise.catch(()=>{
        initializePromise = void 0;
    });
    await initializePromise;
};
var startRunningService = async (wasmURL, wasmModule, useWorker)=>{
    let wasm;
    if (wasmModule) {
        wasm = wasmModule;
    } else {
        if (!wasmURL) wasmURL = new URL("esbuild.wasm", importMeta2.url).href;
        wasm = await WebAssembly.compileStreaming(fetch(wasmURL));
    }
    let worker;
    if (useWorker) {
        let blob = new Blob([
            `onmessage=${'(postMessage=>{\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\nlet onmessage,globalThis={};for(let r=self;r;r=Object.getPrototypeOf(r))for(let f of Object.getOwnPropertyNames(r))f in globalThis||Object.defineProperty(globalThis,f,{get:()=>self[f]});return(()=>{const r=()=>{const c=new Error("not implemented");return c.code="ENOSYS",c};if(!globalThis.fs){let c="";globalThis.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1},writeSync(n,s){c+=g.decode(s);const i=c.lastIndexOf(`\n`);return i!=-1&&(console.log(c.substr(0,i)),c=c.substr(i+1)),s.length},write(n,s,i,a,h,u){if(i!==0||a!==s.length||h!==null){u(r());return}const d=this.writeSync(n,s);u(null,d)},chmod(n,s,i){i(r())},chown(n,s,i,a){a(r())},close(n,s){s(r())},fchmod(n,s,i){i(r())},fchown(n,s,i,a){a(r())},fstat(n,s){s(r())},fsync(n,s){s(null)},ftruncate(n,s,i){i(r())},lchown(n,s,i,a){a(r())},link(n,s,i){i(r())},lstat(n,s){s(r())},mkdir(n,s,i){i(r())},open(n,s,i,a){a(r())},read(n,s,i,a,h,u){u(r())},readdir(n,s){s(r())},readlink(n,s){s(r())},rename(n,s,i){i(r())},rmdir(n,s){s(r())},stat(n,s){s(r())},symlink(n,s,i){i(r())},truncate(n,s,i){i(r())},unlink(n,s){s(r())},utimes(n,s,i,a){a(r())}}}if(globalThis.process||(globalThis.process={getuid(){return-1},getgid(){return-1},geteuid(){return-1},getegid(){return-1},getgroups(){throw r()},pid:-1,ppid:-1,umask(){throw r()},cwd(){throw r()},chdir(){throw r()}}),!globalThis.crypto)throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");if(!globalThis.performance)throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");if(!globalThis.TextEncoder)throw new Error("globalThis.TextEncoder is not available, polyfill required");if(!globalThis.TextDecoder)throw new Error("globalThis.TextDecoder is not available, polyfill required");const f=new TextEncoder("utf-8"),g=new TextDecoder("utf-8");globalThis.Go=class{constructor(){this.argv=["js"],this.env={},this.exit=e=>{e!==0&&console.warn("exit code:",e)},this._exitPromise=new Promise(e=>{this._resolveExitPromise=e}),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;const c=(e,t)=>{this.mem.setUint32(e+0,t,!0),this.mem.setUint32(e+4,Math.floor(t/4294967296),!0)},n=e=>{const t=this.mem.getUint32(e+0,!0),o=this.mem.getInt32(e+4,!0);return t+o*4294967296},s=e=>{const t=this.mem.getFloat64(e,!0);if(t===0)return;if(!isNaN(t))return t;const o=this.mem.getUint32(e,!0);return this._values[o]},i=(e,t)=>{if(typeof t=="number"&&t!==0){if(isNaN(t)){this.mem.setUint32(e+4,2146959360,!0),this.mem.setUint32(e,0,!0);return}this.mem.setFloat64(e,t,!0);return}if(t===void 0){this.mem.setFloat64(e,0,!0);return}let l=this._ids.get(t);l===void 0&&(l=this._idPool.pop(),l===void 0&&(l=this._values.length),this._values[l]=t,this._goRefCounts[l]=0,this._ids.set(t,l)),this._goRefCounts[l]++;let m=0;switch(typeof t){case"object":t!==null&&(m=1);break;case"string":m=2;break;case"symbol":m=3;break;case"function":m=4;break}this.mem.setUint32(e+4,2146959360|m,!0),this.mem.setUint32(e,l,!0)},a=e=>{const t=n(e+0),o=n(e+8);return new Uint8Array(this._inst.exports.mem.buffer,t,o)},h=e=>{const t=n(e+0),o=n(e+8),l=new Array(o);for(let m=0;m<o;m++)l[m]=s(t+m*8);return l},u=e=>{const t=n(e+0),o=n(e+8);return g.decode(new DataView(this._inst.exports.mem.buffer,t,o))},d=Date.now()-performance.now();this.importObject={go:{"runtime.wasmExit":e=>{e>>>=0;const t=this.mem.getInt32(e+8,!0);this.exited=!0,delete this._inst,delete this._values,delete this._goRefCounts,delete this._ids,delete this._idPool,this.exit(t)},"runtime.wasmWrite":e=>{e>>>=0;const t=n(e+8),o=n(e+16),l=this.mem.getInt32(e+24,!0);globalThis.fs.writeSync(t,new Uint8Array(this._inst.exports.mem.buffer,o,l))},"runtime.resetMemoryDataView":e=>{e>>>=0,this.mem=new DataView(this._inst.exports.mem.buffer)},"runtime.nanotime1":e=>{e>>>=0,c(e+8,(d+performance.now())*1e6)},"runtime.walltime":e=>{e>>>=0;const t=new Date().getTime();c(e+8,t/1e3),this.mem.setInt32(e+16,t%1e3*1e6,!0)},"runtime.scheduleTimeoutEvent":e=>{e>>>=0;const t=this._nextCallbackTimeoutID;this._nextCallbackTimeoutID++,this._scheduledTimeouts.set(t,setTimeout(()=>{for(this._resume();this._scheduledTimeouts.has(t);)console.warn("scheduleTimeoutEvent: missed timeout event"),this._resume()},n(e+8)+1)),this.mem.setInt32(e+16,t,!0)},"runtime.clearTimeoutEvent":e=>{e>>>=0;const t=this.mem.getInt32(e+8,!0);clearTimeout(this._scheduledTimeouts.get(t)),this._scheduledTimeouts.delete(t)},"runtime.getRandomData":e=>{e>>>=0,crypto.getRandomValues(a(e+8))},"syscall/js.finalizeRef":e=>{e>>>=0;const t=this.mem.getUint32(e+8,!0);if(this._goRefCounts[t]--,this._goRefCounts[t]===0){const o=this._values[t];this._values[t]=null,this._ids.delete(o),this._idPool.push(t)}},"syscall/js.stringVal":e=>{e>>>=0,i(e+24,u(e+8))},"syscall/js.valueGet":e=>{e>>>=0;const t=Reflect.get(s(e+8),u(e+16));e=this._inst.exports.getsp()>>>0,i(e+32,t)},"syscall/js.valueSet":e=>{e>>>=0,Reflect.set(s(e+8),u(e+16),s(e+32))},"syscall/js.valueDelete":e=>{e>>>=0,Reflect.deleteProperty(s(e+8),u(e+16))},"syscall/js.valueIndex":e=>{e>>>=0,i(e+24,Reflect.get(s(e+8),n(e+16)))},"syscall/js.valueSetIndex":e=>{e>>>=0,Reflect.set(s(e+8),n(e+16),s(e+24))},"syscall/js.valueCall":e=>{e>>>=0;try{const t=s(e+8),o=Reflect.get(t,u(e+16)),l=h(e+32),m=Reflect.apply(o,t,l);e=this._inst.exports.getsp()>>>0,i(e+56,m),this.mem.setUint8(e+64,1)}catch(t){e=this._inst.exports.getsp()>>>0,i(e+56,t),this.mem.setUint8(e+64,0)}},"syscall/js.valueInvoke":e=>{e>>>=0;try{const t=s(e+8),o=h(e+16),l=Reflect.apply(t,void 0,o);e=this._inst.exports.getsp()>>>0,i(e+40,l),this.mem.setUint8(e+48,1)}catch(t){e=this._inst.exports.getsp()>>>0,i(e+40,t),this.mem.setUint8(e+48,0)}},"syscall/js.valueNew":e=>{e>>>=0;try{const t=s(e+8),o=h(e+16),l=Reflect.construct(t,o);e=this._inst.exports.getsp()>>>0,i(e+40,l),this.mem.setUint8(e+48,1)}catch(t){e=this._inst.exports.getsp()>>>0,i(e+40,t),this.mem.setUint8(e+48,0)}},"syscall/js.valueLength":e=>{e>>>=0,c(e+16,parseInt(s(e+8).length))},"syscall/js.valuePrepareString":e=>{e>>>=0;const t=f.encode(String(s(e+8)));i(e+16,t),c(e+24,t.length)},"syscall/js.valueLoadString":e=>{e>>>=0;const t=s(e+8);a(e+16).set(t)},"syscall/js.valueInstanceOf":e=>{e>>>=0,this.mem.setUint8(e+24,s(e+8)instanceof s(e+16)?1:0)},"syscall/js.copyBytesToGo":e=>{e>>>=0;const t=a(e+8),o=s(e+32);if(!(o instanceof Uint8Array||o instanceof Uint8ClampedArray)){this.mem.setUint8(e+48,0);return}const l=o.subarray(0,t.length);t.set(l),c(e+40,l.length),this.mem.setUint8(e+48,1)},"syscall/js.copyBytesToJS":e=>{e>>>=0;const t=s(e+8),o=a(e+16);if(!(t instanceof Uint8Array||t instanceof Uint8ClampedArray)){this.mem.setUint8(e+48,0);return}const l=o.subarray(0,t.length);t.set(l),c(e+40,l.length),this.mem.setUint8(e+48,1)},debug:e=>{console.log(e)}}}}async run(c){if(!(c instanceof WebAssembly.Instance))throw new Error("Go.run: WebAssembly.Instance expected");this._inst=c,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,!0,!1,globalThis,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[!0,3],[!1,4],[globalThis,5],[this,6]]),this._idPool=[],this.exited=!1;let n=4096;const s=e=>{const t=n,o=f.encode(e+"\\0");return new Uint8Array(this.mem.buffer,n,o.length).set(o),n+=o.length,n%8!==0&&(n+=8-n%8),t},i=this.argv.length,a=[];this.argv.forEach(e=>{a.push(s(e))}),a.push(0),Object.keys(this.env).sort().forEach(e=>{a.push(s(`${e}=${this.env[e]}`))}),a.push(0);const u=n;a.forEach(e=>{this.mem.setUint32(n,e,!0),this.mem.setUint32(n+4,0,!0),n+=8});const d=4096+8192;if(n>=d)throw new Error("total length of command line and environment variables exceeds limit");this._inst.exports.run(i,u),this.exited&&this._resolveExitPromise(),await this._exitPromise}_resume(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise()}_makeFuncWrapper(c){const n=this;return function(){const s={id:c,this:this,args:arguments};return n._pendingEvent=s,n._resume(),s.result}}}})(),onmessage=({data:r})=>{let f=new TextDecoder,g=globalThis.fs,c="";g.writeSync=(h,u)=>{if(h===1)postMessage(u);else if(h===2){c+=f.decode(u);let d=c.split(`\n`);d.length>1&&console.log(d.slice(0,-1).join(`\n`)),c=d[d.length-1]}else throw new Error("Bad write");return u.length};let n=[],s,i=0;onmessage=({data:h})=>{h.length>0&&(n.push(h),s&&s())},g.read=(h,u,d,e,t,o)=>{if(h!==0||d!==0||e!==u.length||t!==null)throw new Error("Bad read");if(n.length===0){s=()=>g.read(h,u,d,e,t,o);return}let l=n[0],m=Math.max(0,Math.min(e,l.length-i));u.set(l.subarray(i,i+m),d),i+=m,i===l.length&&(n.shift(),i=0),o(null,m)};let a=new globalThis.Go;a.argv=["","--service=0.14.51"],r instanceof WebAssembly.Module?WebAssembly.instantiate(r,a.importObject).then(h=>a.run(h)):WebAssembly.instantiate(r,a.importObject).then(({instance:h})=>a.run(h))},r=>onmessage(r);})'}(postMessage)`
        ], {
            type: "text/javascript"
        });
        worker = new Worker(URL.createObjectURL(blob), {
            type: "module"
        });
    } else {
        let onmessage = ((postMessage)=>{
            let onmessage, globalThis1 = {};
            for(let r = self; r; r = Object.getPrototypeOf(r))for (let f of Object.getOwnPropertyNames(r))f in globalThis1 || Object.defineProperty(globalThis1, f, {
                get: ()=>self[f]
            });
            return (()=>{
                const r = ()=>{
                    const c = new Error("not implemented");
                    return c.code = "ENOSYS", c;
                };
                if (!globalThis1.fs) {
                    let c = "";
                    globalThis1.fs = {
                        constants: {
                            O_WRONLY: -1,
                            O_RDWR: -1,
                            O_CREAT: -1,
                            O_TRUNC: -1,
                            O_APPEND: -1,
                            O_EXCL: -1
                        },
                        writeSync (n, s) {
                            c += g.decode(s);
                            const i = c.lastIndexOf(`
`);
                            return i != -1 && (console.log(c.substr(0, i)), c = c.substr(i + 1)), s.length;
                        },
                        write (n, s, i, a, h, u) {
                            if (i !== 0 || a !== s.length || h !== null) {
                                u(r());
                                return;
                            }
                            const d = this.writeSync(n, s);
                            u(null, d);
                        },
                        chmod (n, s, i) {
                            i(r());
                        },
                        chown (n, s, i, a) {
                            a(r());
                        },
                        close (n, s) {
                            s(r());
                        },
                        fchmod (n, s, i) {
                            i(r());
                        },
                        fchown (n, s, i, a) {
                            a(r());
                        },
                        fstat (n, s) {
                            s(r());
                        },
                        fsync (n, s) {
                            s(null);
                        },
                        ftruncate (n, s, i) {
                            i(r());
                        },
                        lchown (n, s, i, a) {
                            a(r());
                        },
                        link (n, s, i) {
                            i(r());
                        },
                        lstat (n, s) {
                            s(r());
                        },
                        mkdir (n, s, i) {
                            i(r());
                        },
                        open (n, s, i, a) {
                            a(r());
                        },
                        read (n, s, i, a, h, u) {
                            u(r());
                        },
                        readdir (n, s) {
                            s(r());
                        },
                        readlink (n, s) {
                            s(r());
                        },
                        rename (n, s, i) {
                            i(r());
                        },
                        rmdir (n, s) {
                            s(r());
                        },
                        stat (n, s) {
                            s(r());
                        },
                        symlink (n, s, i) {
                            i(r());
                        },
                        truncate (n, s, i) {
                            i(r());
                        },
                        unlink (n, s) {
                            s(r());
                        },
                        utimes (n, s, i, a) {
                            a(r());
                        }
                    };
                }
                if (globalThis1.process || (globalThis1.process = {
                    getuid () {
                        return -1;
                    },
                    getgid () {
                        return -1;
                    },
                    geteuid () {
                        return -1;
                    },
                    getegid () {
                        return -1;
                    },
                    getgroups () {
                        throw r();
                    },
                    pid: -1,
                    ppid: -1,
                    umask () {
                        throw r();
                    },
                    cwd () {
                        throw r();
                    },
                    chdir () {
                        throw r();
                    }
                }), !globalThis1.crypto) throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");
                if (!globalThis1.performance) throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");
                if (!globalThis1.TextEncoder) throw new Error("globalThis.TextEncoder is not available, polyfill required");
                if (!globalThis1.TextDecoder) throw new Error("globalThis.TextDecoder is not available, polyfill required");
                const f = new TextEncoder("utf-8"), g = new TextDecoder("utf-8");
                globalThis1.Go = class {
                    constructor(){
                        this.argv = [
                            "js"
                        ], this.env = {}, this.exit = (e)=>{
                            e !== 0 && console.warn("exit code:", e);
                        }, this._exitPromise = new Promise((e)=>{
                            this._resolveExitPromise = e;
                        }), this._pendingEvent = null, this._scheduledTimeouts = new Map, this._nextCallbackTimeoutID = 1;
                        const c = (e, t)=>{
                            this.mem.setUint32(e + 0, t, !0), this.mem.setUint32(e + 4, Math.floor(t / 4294967296), !0);
                        }, n = (e)=>{
                            const t = this.mem.getUint32(e + 0, !0), o = this.mem.getInt32(e + 4, !0);
                            return t + o * 4294967296;
                        }, s = (e)=>{
                            const t = this.mem.getFloat64(e, !0);
                            if (t === 0) return;
                            if (!isNaN(t)) return t;
                            const o = this.mem.getUint32(e, !0);
                            return this._values[o];
                        }, i = (e, t)=>{
                            if (typeof t == "number" && t !== 0) {
                                if (isNaN(t)) {
                                    this.mem.setUint32(e + 4, 2146959360, !0), this.mem.setUint32(e, 0, !0);
                                    return;
                                }
                                this.mem.setFloat64(e, t, !0);
                                return;
                            }
                            if (t === void 0) {
                                this.mem.setFloat64(e, 0, !0);
                                return;
                            }
                            let l = this._ids.get(t);
                            l === void 0 && (l = this._idPool.pop(), l === void 0 && (l = this._values.length), this._values[l] = t, this._goRefCounts[l] = 0, this._ids.set(t, l)), this._goRefCounts[l]++;
                            let m = 0;
                            switch(typeof t){
                                case "object":
                                    t !== null && (m = 1);
                                    break;
                                case "string":
                                    m = 2;
                                    break;
                                case "symbol":
                                    m = 3;
                                    break;
                                case "function":
                                    m = 4;
                                    break;
                            }
                            this.mem.setUint32(e + 4, 2146959360 | m, !0), this.mem.setUint32(e, l, !0);
                        }, a = (e)=>{
                            const t = n(e + 0), o = n(e + 8);
                            return new Uint8Array(this._inst.exports.mem.buffer, t, o);
                        }, h = (e)=>{
                            const t = n(e + 0), o = n(e + 8), l = new Array(o);
                            for(let m = 0; m < o; m++)l[m] = s(t + m * 8);
                            return l;
                        }, u = (e)=>{
                            const t = n(e + 0), o = n(e + 8);
                            return g.decode(new DataView(this._inst.exports.mem.buffer, t, o));
                        }, d = Date.now() - performance.now();
                        this.importObject = {
                            go: {
                                "runtime.wasmExit": (e)=>{
                                    e >>>= 0;
                                    const t = this.mem.getInt32(e + 8, !0);
                                    this.exited = !0, delete this._inst, delete this._values, delete this._goRefCounts, delete this._ids, delete this._idPool, this.exit(t);
                                },
                                "runtime.wasmWrite": (e)=>{
                                    e >>>= 0;
                                    const t = n(e + 8), o = n(e + 16), l = this.mem.getInt32(e + 24, !0);
                                    globalThis1.fs.writeSync(t, new Uint8Array(this._inst.exports.mem.buffer, o, l));
                                },
                                "runtime.resetMemoryDataView": (e)=>{
                                    e >>>= 0, this.mem = new DataView(this._inst.exports.mem.buffer);
                                },
                                "runtime.nanotime1": (e)=>{
                                    e >>>= 0, c(e + 8, (d + performance.now()) * 1e6);
                                },
                                "runtime.walltime": (e)=>{
                                    e >>>= 0;
                                    const t = new Date().getTime();
                                    c(e + 8, t / 1e3), this.mem.setInt32(e + 16, t % 1e3 * 1e6, !0);
                                },
                                "runtime.scheduleTimeoutEvent": (e)=>{
                                    e >>>= 0;
                                    const t = this._nextCallbackTimeoutID;
                                    this._nextCallbackTimeoutID++, this._scheduledTimeouts.set(t, setTimeout(()=>{
                                        for(this._resume(); this._scheduledTimeouts.has(t);)console.warn("scheduleTimeoutEvent: missed timeout event"), this._resume();
                                    }, n(e + 8) + 1)), this.mem.setInt32(e + 16, t, !0);
                                },
                                "runtime.clearTimeoutEvent": (e)=>{
                                    e >>>= 0;
                                    const t = this.mem.getInt32(e + 8, !0);
                                    clearTimeout(this._scheduledTimeouts.get(t)), this._scheduledTimeouts.delete(t);
                                },
                                "runtime.getRandomData": (e)=>{
                                    e >>>= 0, crypto.getRandomValues(a(e + 8));
                                },
                                "syscall/js.finalizeRef": (e)=>{
                                    e >>>= 0;
                                    const t = this.mem.getUint32(e + 8, !0);
                                    if (this._goRefCounts[t]--, this._goRefCounts[t] === 0) {
                                        const o = this._values[t];
                                        this._values[t] = null, this._ids.delete(o), this._idPool.push(t);
                                    }
                                },
                                "syscall/js.stringVal": (e)=>{
                                    e >>>= 0, i(e + 24, u(e + 8));
                                },
                                "syscall/js.valueGet": (e)=>{
                                    e >>>= 0;
                                    const t = Reflect.get(s(e + 8), u(e + 16));
                                    e = this._inst.exports.getsp() >>> 0, i(e + 32, t);
                                },
                                "syscall/js.valueSet": (e)=>{
                                    e >>>= 0, Reflect.set(s(e + 8), u(e + 16), s(e + 32));
                                },
                                "syscall/js.valueDelete": (e)=>{
                                    e >>>= 0, Reflect.deleteProperty(s(e + 8), u(e + 16));
                                },
                                "syscall/js.valueIndex": (e)=>{
                                    e >>>= 0, i(e + 24, Reflect.get(s(e + 8), n(e + 16)));
                                },
                                "syscall/js.valueSetIndex": (e)=>{
                                    e >>>= 0, Reflect.set(s(e + 8), n(e + 16), s(e + 24));
                                },
                                "syscall/js.valueCall": (e)=>{
                                    e >>>= 0;
                                    try {
                                        const t = s(e + 8), o = Reflect.get(t, u(e + 16)), l = h(e + 32), m = Reflect.apply(o, t, l);
                                        e = this._inst.exports.getsp() >>> 0, i(e + 56, m), this.mem.setUint8(e + 64, 1);
                                    } catch (t) {
                                        e = this._inst.exports.getsp() >>> 0, i(e + 56, t), this.mem.setUint8(e + 64, 0);
                                    }
                                },
                                "syscall/js.valueInvoke": (e)=>{
                                    e >>>= 0;
                                    try {
                                        const t = s(e + 8), o = h(e + 16), l = Reflect.apply(t, void 0, o);
                                        e = this._inst.exports.getsp() >>> 0, i(e + 40, l), this.mem.setUint8(e + 48, 1);
                                    } catch (t) {
                                        e = this._inst.exports.getsp() >>> 0, i(e + 40, t), this.mem.setUint8(e + 48, 0);
                                    }
                                },
                                "syscall/js.valueNew": (e)=>{
                                    e >>>= 0;
                                    try {
                                        const t = s(e + 8), o = h(e + 16), l = Reflect.construct(t, o);
                                        e = this._inst.exports.getsp() >>> 0, i(e + 40, l), this.mem.setUint8(e + 48, 1);
                                    } catch (t) {
                                        e = this._inst.exports.getsp() >>> 0, i(e + 40, t), this.mem.setUint8(e + 48, 0);
                                    }
                                },
                                "syscall/js.valueLength": (e)=>{
                                    e >>>= 0, c(e + 16, parseInt(s(e + 8).length));
                                },
                                "syscall/js.valuePrepareString": (e)=>{
                                    e >>>= 0;
                                    const t = f.encode(String(s(e + 8)));
                                    i(e + 16, t), c(e + 24, t.length);
                                },
                                "syscall/js.valueLoadString": (e)=>{
                                    e >>>= 0;
                                    const t = s(e + 8);
                                    a(e + 16).set(t);
                                },
                                "syscall/js.valueInstanceOf": (e)=>{
                                    e >>>= 0, this.mem.setUint8(e + 24, s(e + 8) instanceof s(e + 16) ? 1 : 0);
                                },
                                "syscall/js.copyBytesToGo": (e)=>{
                                    e >>>= 0;
                                    const t = a(e + 8), o = s(e + 32);
                                    if (!(o instanceof Uint8Array || o instanceof Uint8ClampedArray)) {
                                        this.mem.setUint8(e + 48, 0);
                                        return;
                                    }
                                    const l = o.subarray(0, t.length);
                                    t.set(l), c(e + 40, l.length), this.mem.setUint8(e + 48, 1);
                                },
                                "syscall/js.copyBytesToJS": (e)=>{
                                    e >>>= 0;
                                    const t = s(e + 8), o = a(e + 16);
                                    if (!(t instanceof Uint8Array || t instanceof Uint8ClampedArray)) {
                                        this.mem.setUint8(e + 48, 0);
                                        return;
                                    }
                                    const l = o.subarray(0, t.length);
                                    t.set(l), c(e + 40, l.length), this.mem.setUint8(e + 48, 1);
                                },
                                debug: (e)=>{
                                    console.log(e);
                                }
                            }
                        };
                    }
                    async run(c) {
                        if (!(c instanceof WebAssembly.Instance)) throw new Error("Go.run: WebAssembly.Instance expected");
                        this._inst = c, this.mem = new DataView(this._inst.exports.mem.buffer), this._values = [
                            NaN,
                            0,
                            null,
                            !0,
                            !1,
                            globalThis1,
                            this
                        ], this._goRefCounts = new Array(this._values.length).fill(1 / 0), this._ids = new Map([
                            [
                                0,
                                1
                            ],
                            [
                                null,
                                2
                            ],
                            [
                                !0,
                                3
                            ],
                            [
                                !1,
                                4
                            ],
                            [
                                globalThis1,
                                5
                            ],
                            [
                                this,
                                6
                            ]
                        ]), this._idPool = [], this.exited = !1;
                        let n = 4096;
                        const s = (e)=>{
                            const t = n, o = f.encode(e + "\0");
                            return new Uint8Array(this.mem.buffer, n, o.length).set(o), n += o.length, n % 8 !== 0 && (n += 8 - n % 8), t;
                        }, i = this.argv.length, a = [];
                        this.argv.forEach((e)=>{
                            a.push(s(e));
                        }), a.push(0), Object.keys(this.env).sort().forEach((e)=>{
                            a.push(s(`${e}=${this.env[e]}`));
                        }), a.push(0);
                        const u = n;
                        a.forEach((e)=>{
                            this.mem.setUint32(n, e, !0), this.mem.setUint32(n + 4, 0, !0), n += 8;
                        });
                        const d = 4096 + 8192;
                        if (n >= d) throw new Error("total length of command line and environment variables exceeds limit");
                        this._inst.exports.run(i, u), this.exited && this._resolveExitPromise(), await this._exitPromise;
                    }
                    _resume() {
                        if (this.exited) throw new Error("Go program has already exited");
                        this._inst.exports.resume(), this.exited && this._resolveExitPromise();
                    }
                    _makeFuncWrapper(c) {
                        const n = this;
                        return function() {
                            const s = {
                                id: c,
                                this: this,
                                args: arguments
                            };
                            return n._pendingEvent = s, n._resume(), s.result;
                        };
                    }
                };
            })(), onmessage = ({ data: r  })=>{
                let f = new TextDecoder, g = globalThis1.fs, c = "";
                g.writeSync = (h, u)=>{
                    if (h === 1) postMessage(u);
                    else if (h === 2) {
                        c += f.decode(u);
                        let d = c.split(`
`);
                        d.length > 1 && console.log(d.slice(0, -1).join(`
`)), c = d[d.length - 1];
                    } else throw new Error("Bad write");
                    return u.length;
                };
                let n = [], s, i = 0;
                onmessage = ({ data: h  })=>{
                    h.length > 0 && (n.push(h), s && s());
                }, g.read = (h, u, d, e, t, o)=>{
                    if (h !== 0 || d !== 0 || e !== u.length || t !== null) throw new Error("Bad read");
                    if (n.length === 0) {
                        s = ()=>g.read(h, u, d, e, t, o);
                        return;
                    }
                    let l = n[0], m = Math.max(0, Math.min(e, l.length - i));
                    u.set(l.subarray(i, i + m), d), i += m, i === l.length && (n.shift(), i = 0), o(null, m);
                };
                let a = new globalThis1.Go;
                a.argv = [
                    "",
                    "--service=0.14.51"
                ], r instanceof WebAssembly.Module ? WebAssembly.instantiate(r, a.importObject).then((h)=>a.run(h)) : WebAssembly.instantiate(r, a.importObject).then(({ instance: h  })=>a.run(h));
            }, (r)=>onmessage(r);
        })((data)=>worker.onmessage({
                data
            }));
        worker = {
            onmessage: null,
            postMessage: (data)=>setTimeout(()=>onmessage({
                        data
                    })),
            terminate () {}
        };
    }
    worker.postMessage(wasm);
    worker.onmessage = ({ data  })=>readFromStdout(data);
    let { readFromStdout , service  } = createChannel({
        writeToStdin (bytes) {
            worker.postMessage(bytes);
        },
        isSync: false,
        isWriteUnavailable: true,
        esbuild: wasm_exports
    });
    stopService = ()=>{
        worker.terminate();
        initializePromise = void 0;
        stopService = void 0;
    };
    return {
        build: (options)=>new Promise((resolve, reject)=>service.buildOrServe({
                    callName: "build",
                    refs: null,
                    serveOptions: null,
                    options,
                    isTTY: false,
                    defaultWD: "/",
                    callback: (err, res)=>err ? reject(err) : resolve(res)
                })),
        transform: (input, options)=>new Promise((resolve, reject)=>service.transform({
                    callName: "transform",
                    refs: null,
                    input,
                    options: options || {},
                    isTTY: false,
                    fs: {
                        readFile (_, callback) {
                            callback(new Error("Internal error"), null);
                        },
                        writeFile (_, callback) {
                            callback(null);
                        }
                    },
                    callback: (err, res)=>err ? reject(err) : resolve(res)
                })),
        formatMessages: (messages, options)=>new Promise((resolve, reject)=>service.formatMessages({
                    callName: "formatMessages",
                    refs: null,
                    messages,
                    options,
                    callback: (err, res)=>err ? reject(err) : resolve(res)
                })),
        analyzeMetafile: (metafile, options)=>new Promise((resolve, reject)=>service.analyzeMetafile({
                    callName: "analyzeMetafile",
                    refs: null,
                    metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
                    options,
                    callback: (err, res)=>err ? reject(err) : resolve(res)
                }))
    };
};
const mod1 = {
    analyzeMetafile: analyzeMetafile,
    analyzeMetafileSync: analyzeMetafileSync,
    build: build,
    buildSync: buildSync,
    formatMessages: formatMessages,
    formatMessagesSync: formatMessagesSync,
    initialize: initialize,
    serve: serve,
    stop: stop,
    transform: transform,
    transformSync: transformSync,
    version: version
};
const importMeta3 = {
    url: "https://deno.land/x/denoflate@1.2.1/pkg/denoflate.js",
    main: false
};
let wasm;
let cachedTextDecoder = new TextDecoder('utf-8', {
    ignoreBOM: true,
    fatal: true
});
cachedTextDecoder.decode();
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
const heap = new Array(32).fill(undefined);
heap.push(undefined, null, true, false);
let heap_next = heap.length;
function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
}
function getObject(idx) {
    return heap[idx];
}
function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}
function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}
let WASM_VECTOR_LEN = 0;
function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1);
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}
let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}
function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function gunzip(input) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.gunzip(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var v1 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v1;
    } finally{
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}
async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);
            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
                } else {
                    throw e;
                }
            }
        }
        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);
    } else {
        const instance = await WebAssembly.instantiate(module, imports);
        if (instance instanceof WebAssembly.Instance) {
            return {
                instance,
                module
            };
        } else {
            return instance;
        }
    }
}
async function init(input) {
    if (typeof input === 'undefined') {
        input = new URL('denoflate_bg.wasm', importMeta3.url);
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        var ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
        throw takeObject(arg0);
    };
    if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {
        input = fetch(input);
    }
    const { instance , module  } = await load(await input, imports);
    wasm = instance.exports;
    init.__wbindgen_wasm_module = module;
    return wasm;
}
const wasm1 = new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    142,
    1,
    21,
    96,
    2,
    127,
    127,
    1,
    127,
    96,
    3,
    127,
    127,
    127,
    1,
    127,
    96,
    1,
    127,
    0,
    96,
    3,
    127,
    127,
    127,
    0,
    96,
    2,
    127,
    127,
    0,
    96,
    4,
    127,
    127,
    127,
    127,
    0,
    96,
    1,
    127,
    1,
    127,
    96,
    1,
    127,
    1,
    126,
    96,
    3,
    127,
    127,
    127,
    1,
    126,
    96,
    5,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    6,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    7,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    0,
    1,
    126,
    96,
    0,
    0,
    96,
    8,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    0,
    1,
    127,
    96,
    5,
    127,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    6,
    127,
    127,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    3,
    126,
    127,
    127,
    1,
    127,
    96,
    2,
    127,
    127,
    1,
    126,
    2,
    54,
    2,
    3,
    119,
    98,
    103,
    21,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    95,
    110,
    101,
    119,
    0,
    0,
    3,
    119,
    98,
    103,
    18,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    114,
    101,
    116,
    104,
    114,
    111,
    119,
    0,
    2,
    3,
    180,
    1,
    178,
    1,
    15,
    12,
    5,
    5,
    9,
    11,
    3,
    0,
    8,
    3,
    9,
    4,
    1,
    1,
    3,
    3,
    3,
    9,
    9,
    6,
    11,
    9,
    3,
    10,
    8,
    18,
    5,
    5,
    3,
    1,
    17,
    0,
    7,
    5,
    0,
    4,
    0,
    1,
    6,
    8,
    8,
    8,
    8,
    8,
    4,
    5,
    0,
    3,
    2,
    4,
    19,
    2,
    4,
    11,
    0,
    7,
    7,
    16,
    4,
    4,
    3,
    3,
    0,
    10,
    3,
    3,
    0,
    0,
    4,
    10,
    5,
    4,
    5,
    3,
    5,
    2,
    7,
    13,
    3,
    3,
    7,
    0,
    0,
    3,
    6,
    0,
    2,
    5,
    13,
    2,
    5,
    9,
    0,
    6,
    3,
    2,
    3,
    3,
    3,
    3,
    0,
    4,
    0,
    0,
    0,
    8,
    0,
    0,
    10,
    12,
    0,
    6,
    3,
    0,
    0,
    0,
    4,
    4,
    2,
    1,
    0,
    1,
    2,
    6,
    3,
    5,
    20,
    2,
    4,
    1,
    0,
    6,
    2,
    2,
    4,
    7,
    2,
    6,
    2,
    3,
    0,
    1,
    4,
    1,
    4,
    6,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    3,
    0,
    14,
    0,
    0,
    1,
    6,
    7,
    0,
    4,
    1,
    4,
    2,
    7,
    6,
    0,
    6,
    0,
    7,
    7,
    7,
    7,
    2,
    4,
    4,
    5,
    1,
    112,
    1,
    75,
    75,
    5,
    3,
    1,
    0,
    17,
    6,
    9,
    1,
    127,
    1,
    65,
    128,
    128,
    192,
    0,
    11,
    7,
    136,
    1,
    10,
    6,
    109,
    101,
    109,
    111,
    114,
    121,
    2,
    0,
    7,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    0,
    19,
    7,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    0,
    17,
    4,
    103,
    122,
    105,
    112,
    0,
    23,
    6,
    103,
    117,
    110,
    122,
    105,
    112,
    0,
    11,
    4,
    122,
    108,
    105,
    98,
    0,
    20,
    6,
    117,
    110,
    122,
    108,
    105,
    98,
    0,
    18,
    31,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    97,
    100,
    100,
    95,
    116,
    111,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    0,
    162,
    1,
    17,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    109,
    97,
    108,
    108,
    111,
    99,
    0,
    125,
    15,
    95,
    95,
    119,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    95,
    102,
    114,
    101,
    101,
    0,
    144,
    1,
    9,
    129,
    1,
    1,
    0,
    65,
    1,
    11,
    74,
    122,
    140,
    1,
    167,
    1,
    169,
    1,
    170,
    1,
    146,
    1,
    152,
    1,
    153,
    1,
    33,
    64,
    178,
    1,
    92,
    171,
    1,
    172,
    1,
    74,
    173,
    1,
    170,
    1,
    178,
    1,
    178,
    1,
    117,
    109,
    112,
    164,
    1,
    178,
    1,
    167,
    1,
    174,
    1,
    170,
    1,
    150,
    1,
    115,
    116,
    178,
    1,
    122,
    178,
    1,
    87,
    140,
    1,
    167,
    1,
    169,
    1,
    170,
    1,
    151,
    1,
    132,
    1,
    152,
    1,
    179,
    1,
    178,
    1,
    145,
    1,
    36,
    104,
    176,
    1,
    135,
    1,
    60,
    73,
    118,
    154,
    1,
    134,
    1,
    177,
    1,
    175,
    1,
    178,
    1,
    145,
    1,
    157,
    1,
    105,
    142,
    1,
    160,
    1,
    155,
    1,
    94,
    38,
    159,
    1,
    148,
    1,
    178,
    1,
    176,
    1,
    39,
    69,
    108,
    161,
    1,
    68,
    106,
    10,
    226,
    186,
    4,
    178,
    1,
    217,
    68,
    1,
    36,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    8,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    5,
    32,
    6,
    79,
    4,
    64,
    65,
    127,
    65,
    0,
    32,
    5,
    65,
    127,
    106,
    34,
    9,
    32,
    9,
    32,
    5,
    75,
    27,
    32,
    7,
    65,
    4,
    113,
    34,
    32,
    27,
    34,
    29,
    65,
    1,
    106,
    34,
    38,
    32,
    29,
    113,
    69,
    13,
    1,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    253,
    1,
    58,
    0,
    4,
    12,
    1,
    11,
    32,
    8,
    32,
    2,
    54,
    2,
    0,
    32,
    8,
    32,
    2,
    32,
    3,
    106,
    34,
    39,
    54,
    2,
    4,
    32,
    1,
    45,
    0,
    152,
    82,
    33,
    10,
    32,
    8,
    32,
    1,
    40,
    2,
    36,
    54,
    2,
    24,
    32,
    8,
    32,
    1,
    41,
    2,
    28,
    55,
    3,
    16,
    32,
    8,
    32,
    1,
    40,
    2,
    0,
    54,
    2,
    12,
    32,
    8,
    32,
    1,
    40,
    2,
    52,
    54,
    2,
    8,
    65,
    1,
    65,
    3,
    32,
    7,
    65,
    1,
    113,
    34,
    35,
    27,
    33,
    40,
    65,
    1,
    65,
    124,
    32,
    7,
    65,
    2,
    113,
    34,
    9,
    27,
    33,
    26,
    65,
    130,
    2,
    65,
    130,
    120,
    32,
    9,
    27,
    33,
    22,
    32,
    1,
    65,
    248,
    207,
    0,
    106,
    33,
    41,
    32,
    1,
    65,
    184,
    25,
    106,
    33,
    36,
    32,
    1,
    65,
    157,
    210,
    0,
    106,
    33,
    42,
    32,
    1,
    65,
    216,
    52,
    106,
    33,
    31,
    32,
    1,
    65,
    184,
    27,
    106,
    33,
    33,
    32,
    1,
    65,
    200,
    26,
    106,
    33,
    43,
    32,
    1,
    65,
    248,
    54,
    106,
    33,
    37,
    32,
    1,
    65,
    56,
    106,
    33,
    30,
    32,
    1,
    65,
    216,
    27,
    106,
    33,
    34,
    32,
    6,
    33,
    15,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    65,
    255,
    1,
    33,
    16,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    34,
    11,
    65,
    255,
    1,
    113,
    14,
    25,
    26,
    25,
    27,
    24,
    23,
    22,
    17,
    16,
    15,
    14,
    13,
    12,
    0,
    10,
    8,
    7,
    6,
    21,
    18,
    4,
    3,
    9,
    5,
    2,
    1,
    30,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    20,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    107,
    34,
    10,
    65,
    4,
    73,
    13,
    10,
    32,
    9,
    33,
    17,
    2,
    64,
    3,
    64,
    32,
    5,
    32,
    15,
    107,
    34,
    12,
    65,
    1,
    77,
    13,
    12,
    32,
    12,
    65,
    131,
    2,
    73,
    32,
    10,
    65,
    13,
    77,
    114,
    69,
    4,
    64,
    32,
    8,
    40,
    2,
    24,
    33,
    27,
    32,
    8,
    40,
    2,
    20,
    33,
    19,
    32,
    8,
    40,
    2,
    16,
    33,
    28,
    32,
    8,
    40,
    2,
    12,
    33,
    17,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    2,
    64,
    3,
    64,
    65,
    12,
    33,
    10,
    32,
    20,
    32,
    9,
    107,
    65,
    14,
    73,
    13,
    1,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    21,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    45,
    32,
    21,
    47,
    0,
    0,
    32,
    8,
    32,
    21,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    47,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    0,
    65,
    34,
    33,
    11,
    12,
    1,
    11,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    13,
    65,
    128,
    2,
    33,
    19,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    128,
    2,
    113,
    69,
    4,
    64,
    2,
    64,
    2,
    64,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    25,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    52,
    32,
    25,
    47,
    0,
    0,
    32,
    8,
    32,
    25,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    14,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    14,
    65,
    127,
    115,
    106,
    34,
    14,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    14,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    14,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    14,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    11,
    32,
    12,
    33,
    19,
    12,
    8,
    11,
    32,
    14,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    15,
    32,
    5,
    79,
    13,
    51,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    13,
    32,
    4,
    32,
    15,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    11,
    32,
    14,
    65,
    128,
    2,
    113,
    69,
    13,
    1,
    32,
    11,
    33,
    15,
    32,
    14,
    33,
    12,
    11,
    32,
    12,
    65,
    255,
    3,
    113,
    34,
    14,
    65,
    128,
    2,
    71,
    13,
    1,
    65,
    20,
    33,
    10,
    12,
    9,
    11,
    32,
    11,
    32,
    5,
    79,
    13,
    1,
    32,
    4,
    32,
    11,
    106,
    32,
    14,
    58,
    0,
    0,
    32,
    5,
    32,
    15,
    65,
    2,
    106,
    34,
    15,
    107,
    65,
    131,
    2,
    79,
    13,
    5,
    32,
    12,
    33,
    19,
    12,
    8,
    11,
    32,
    14,
    65,
    157,
    2,
    75,
    4,
    64,
    32,
    14,
    33,
    19,
    65,
    32,
    12,
    3,
    11,
    32,
    17,
    65,
    14,
    77,
    4,
    64,
    32,
    20,
    32,
    24,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    47,
    32,
    24,
    47,
    0,
    0,
    32,
    8,
    32,
    24,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    13,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    33,
    17,
    11,
    32,
    12,
    65,
    127,
    106,
    65,
    31,
    113,
    34,
    12,
    65,
    1,
    116,
    65,
    216,
    181,
    192,
    0,
    106,
    47,
    1,
    0,
    33,
    19,
    2,
    64,
    32,
    12,
    65,
    184,
    181,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    27,
    69,
    13,
    0,
    32,
    13,
    32,
    27,
    65,
    31,
    113,
    34,
    12,
    118,
    33,
    11,
    32,
    13,
    65,
    127,
    32,
    12,
    116,
    65,
    127,
    115,
    113,
    32,
    19,
    106,
    33,
    19,
    32,
    17,
    32,
    27,
    107,
    34,
    12,
    65,
    14,
    75,
    4,
    64,
    32,
    12,
    33,
    17,
    32,
    11,
    33,
    13,
    12,
    1,
    11,
    32,
    20,
    32,
    23,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    47,
    32,
    23,
    47,
    0,
    0,
    32,
    8,
    32,
    23,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    12,
    65,
    16,
    106,
    33,
    17,
    32,
    12,
    116,
    32,
    11,
    114,
    33,
    13,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    11,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    49,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    11,
    12,
    3,
    11,
    32,
    11,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    17,
    32,
    11,
    107,
    33,
    17,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    33,
    14,
    2,
    64,
    32,
    12,
    65,
    255,
    3,
    113,
    34,
    12,
    65,
    29,
    77,
    4,
    64,
    32,
    12,
    65,
    1,
    116,
    65,
    184,
    182,
    192,
    0,
    106,
    47,
    1,
    0,
    33,
    28,
    2,
    64,
    32,
    12,
    65,
    152,
    182,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    27,
    69,
    4,
    64,
    32,
    14,
    33,
    13,
    12,
    1,
    11,
    32,
    17,
    65,
    14,
    75,
    4,
    127,
    32,
    17,
    5,
    32,
    20,
    32,
    18,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    48,
    32,
    18,
    47,
    0,
    0,
    32,
    8,
    32,
    18,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    17,
    116,
    32,
    14,
    114,
    33,
    14,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    17,
    65,
    16,
    106,
    11,
    32,
    27,
    107,
    33,
    17,
    32,
    14,
    32,
    27,
    65,
    31,
    113,
    34,
    12,
    118,
    33,
    13,
    32,
    14,
    65,
    127,
    32,
    12,
    116,
    65,
    127,
    115,
    113,
    32,
    28,
    106,
    33,
    28,
    11,
    32,
    32,
    65,
    0,
    32,
    28,
    32,
    15,
    75,
    27,
    13,
    1,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    28,
    32,
    19,
    32,
    29,
    16,
    71,
    32,
    5,
    32,
    15,
    32,
    19,
    106,
    34,
    15,
    107,
    65,
    131,
    2,
    79,
    13,
    6,
    12,
    7,
    11,
    65,
    33,
    33,
    11,
    32,
    14,
    33,
    13,
    12,
    2,
    11,
    65,
    29,
    11,
    33,
    11,
    11,
    32,
    8,
    32,
    27,
    54,
    2,
    24,
    32,
    8,
    32,
    19,
    54,
    2,
    20,
    32,
    8,
    32,
    28,
    54,
    2,
    16,
    32,
    8,
    32,
    17,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    54,
    2,
    8,
    12,
    36,
    11,
    32,
    9,
    33,
    18,
    32,
    9,
    33,
    23,
    32,
    9,
    33,
    24,
    32,
    9,
    33,
    25,
    32,
    9,
    33,
    21,
    32,
    12,
    33,
    19,
    32,
    20,
    32,
    9,
    107,
    65,
    14,
    79,
    13,
    0,
    11,
    11,
    11,
    32,
    8,
    32,
    27,
    54,
    2,
    24,
    32,
    8,
    32,
    19,
    54,
    2,
    20,
    32,
    8,
    32,
    28,
    54,
    2,
    16,
    32,
    8,
    32,
    17,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    54,
    2,
    8,
    12,
    30,
    11,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    14,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    12,
    12,
    1,
    11,
    32,
    20,
    32,
    17,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    39,
    32,
    17,
    47,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    17,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    8,
    32,
    14,
    65,
    16,
    106,
    34,
    10,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    12,
    32,
    14,
    116,
    114,
    34,
    12,
    54,
    2,
    8,
    32,
    9,
    33,
    17,
    32,
    10,
    33,
    14,
    11,
    2,
    64,
    32,
    30,
    32,
    12,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    13,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    12,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    13,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    13,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    13,
    65,
    9,
    118,
    34,
    11,
    13,
    1,
    65,
    34,
    33,
    10,
    12,
    31,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    14,
    32,
    11,
    107,
    34,
    18,
    54,
    2,
    12,
    32,
    8,
    32,
    12,
    32,
    11,
    65,
    31,
    113,
    118,
    34,
    14,
    54,
    2,
    8,
    32,
    8,
    32,
    13,
    54,
    2,
    20,
    65,
    21,
    33,
    10,
    32,
    13,
    65,
    128,
    2,
    113,
    13,
    29,
    2,
    64,
    2,
    64,
    32,
    18,
    65,
    14,
    75,
    4,
    64,
    32,
    18,
    33,
    21,
    12,
    1,
    11,
    32,
    20,
    32,
    17,
    107,
    34,
    9,
    65,
    1,
    77,
    13,
    39,
    32,
    17,
    47,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    18,
    65,
    16,
    106,
    34,
    21,
    54,
    2,
    12,
    32,
    8,
    32,
    17,
    65,
    2,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    8,
    32,
    12,
    32,
    18,
    116,
    32,
    14,
    114,
    34,
    14,
    54,
    2,
    8,
    32,
    9,
    33,
    17,
    11,
    32,
    30,
    32,
    14,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    14,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    12,
    65,
    127,
    115,
    106,
    34,
    12,
    65,
    191,
    4,
    75,
    13,
    41,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    12,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    12,
    65,
    127,
    76,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    12,
    65,
    9,
    118,
    34,
    11,
    13,
    0,
    65,
    34,
    33,
    10,
    12,
    30,
    11,
    32,
    8,
    32,
    21,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    14,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    13,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    11,
    32,
    12,
    65,
    128,
    2,
    113,
    4,
    64,
    32,
    8,
    32,
    12,
    54,
    2,
    20,
    32,
    11,
    33,
    15,
    12,
    31,
    11,
    32,
    11,
    32,
    5,
    79,
    13,
    2,
    32,
    4,
    32,
    11,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    15,
    65,
    2,
    106,
    33,
    15,
    32,
    20,
    32,
    17,
    107,
    34,
    10,
    65,
    4,
    79,
    13,
    1,
    12,
    13,
    11,
    11,
    12,
    38,
    11,
    32,
    11,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    16,
    12,
    28,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    14,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    14,
    65,
    3,
    75,
    4,
    64,
    65,
    24,
    33,
    10,
    12,
    27,
    11,
    2,
    127,
    32,
    8,
    2,
    127,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    4,
    64,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    255,
    1,
    113,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    116,
    114,
    54,
    2,
    12,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    32,
    14,
    65,
    1,
    106,
    12,
    3,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    2,
    11,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    4,
    64,
    65,
    23,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    30,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    116,
    114,
    54,
    2,
    12,
    32,
    14,
    65,
    1,
    106,
    11,
    34,
    14,
    54,
    2,
    20,
    65,
    0,
    33,
    13,
    65,
    0,
    11,
    33,
    10,
    65,
    23,
    33,
    11,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    26,
    27,
    0,
    11,
    0,
    11,
    65,
    3,
    33,
    10,
    32,
    1,
    40,
    2,
    16,
    69,
    13,
    24,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    65,
    7,
    113,
    33,
    16,
    32,
    8,
    40,
    2,
    4,
    33,
    9,
    3,
    64,
    2,
    64,
    32,
    11,
    32,
    16,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    16,
    107,
    34,
    11,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    16,
    118,
    54,
    2,
    8,
    32,
    8,
    40,
    2,
    0,
    33,
    14,
    12,
    1,
    11,
    2,
    127,
    32,
    9,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    4,
    64,
    32,
    9,
    33,
    14,
    32,
    22,
    12,
    1,
    11,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    34,
    14,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    12,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    12,
    33,
    11,
    65,
    0,
    11,
    65,
    2,
    113,
    69,
    13,
    1,
    11,
    11,
    32,
    8,
    32,
    11,
    32,
    14,
    32,
    9,
    107,
    32,
    3,
    106,
    34,
    9,
    32,
    11,
    65,
    3,
    118,
    34,
    10,
    32,
    10,
    32,
    9,
    75,
    27,
    34,
    10,
    65,
    3,
    116,
    107,
    34,
    12,
    54,
    2,
    12,
    32,
    9,
    32,
    10,
    107,
    34,
    9,
    32,
    3,
    77,
    4,
    64,
    32,
    8,
    32,
    39,
    54,
    2,
    4,
    32,
    8,
    32,
    2,
    32,
    9,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    65,
    127,
    32,
    12,
    65,
    31,
    113,
    116,
    65,
    127,
    115,
    113,
    54,
    2,
    8,
    65,
    24,
    33,
    10,
    32,
    35,
    69,
    13,
    25,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    23,
    33,
    10,
    12,
    25,
    11,
    32,
    9,
    32,
    3,
    65,
    248,
    182,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    8,
    40,
    2,
    16,
    33,
    12,
    3,
    64,
    32,
    5,
    32,
    15,
    107,
    34,
    9,
    69,
    4,
    64,
    65,
    19,
    33,
    11,
    65,
    2,
    33,
    16,
    12,
    27,
    11,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    12,
    107,
    32,
    29,
    113,
    32,
    15,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    9,
    32,
    9,
    32,
    10,
    75,
    27,
    34,
    9,
    32,
    29,
    16,
    25,
    32,
    8,
    32,
    10,
    32,
    9,
    107,
    34,
    11,
    54,
    2,
    20,
    32,
    9,
    32,
    15,
    106,
    33,
    15,
    65,
    12,
    33,
    10,
    32,
    11,
    13,
    0,
    11,
    12,
    23,
    11,
    32,
    8,
    40,
    2,
    16,
    33,
    12,
    32,
    32,
    4,
    64,
    65,
    29,
    33,
    10,
    32,
    15,
    32,
    12,
    73,
    13,
    23,
    11,
    2,
    64,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    15,
    106,
    34,
    9,
    32,
    5,
    75,
    13,
    0,
    32,
    15,
    32,
    12,
    107,
    32,
    29,
    113,
    34,
    11,
    32,
    15,
    79,
    65,
    0,
    32,
    11,
    32,
    15,
    107,
    32,
    10,
    73,
    27,
    13,
    0,
    32,
    4,
    32,
    5,
    32,
    15,
    32,
    12,
    32,
    10,
    32,
    29,
    16,
    71,
    65,
    12,
    33,
    10,
    32,
    9,
    33,
    15,
    12,
    23,
    11,
    65,
    19,
    65,
    12,
    32,
    10,
    27,
    33,
    10,
    12,
    22,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    32,
    12,
    65,
    31,
    113,
    34,
    10,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    8,
    40,
    2,
    16,
    32,
    9,
    65,
    127,
    32,
    10,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    16,
    65,
    22,
    33,
    10,
    12,
    23,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    16,
    33,
    11,
    12,
    22,
    11,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    16,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    1,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    17,
    32,
    8,
    40,
    2,
    0,
    34,
    14,
    107,
    65,
    1,
    77,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    16,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    16,
    12,
    5,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    16,
    12,
    6,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    14,
    32,
    17,
    70,
    4,
    64,
    65,
    15,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    26,
    11,
    32,
    8,
    32,
    14,
    65,
    1,
    106,
    34,
    9,
    54,
    2,
    0,
    32,
    14,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    16,
    54,
    2,
    12,
    32,
    8,
    32,
    10,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    14,
    32,
    16,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    9,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    14,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    14,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    16,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    16,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    16,
    11,
    2,
    64,
    32,
    34,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    34,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    216,
    43,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    1,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    65,
    34,
    33,
    10,
    32,
    11,
    69,
    13,
    20,
    32,
    8,
    32,
    16,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    65,
    33,
    33,
    10,
    32,
    12,
    65,
    29,
    74,
    13,
    20,
    32,
    8,
    32,
    12,
    65,
    31,
    113,
    34,
    9,
    65,
    1,
    116,
    65,
    184,
    182,
    192,
    0,
    106,
    47,
    1,
    0,
    54,
    2,
    16,
    32,
    8,
    32,
    9,
    65,
    152,
    182,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    24,
    65,
    16,
    65,
    22,
    32,
    9,
    27,
    33,
    10,
    12,
    20,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    32,
    12,
    65,
    31,
    113,
    34,
    10,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    32,
    9,
    65,
    127,
    32,
    10,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    20,
    65,
    15,
    33,
    10,
    12,
    21,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    14,
    33,
    11,
    12,
    20,
    11,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    34,
    12,
    65,
    255,
    3,
    113,
    34,
    9,
    54,
    2,
    20,
    65,
    20,
    33,
    10,
    32,
    9,
    65,
    128,
    2,
    70,
    13,
    18,
    65,
    32,
    33,
    10,
    32,
    9,
    65,
    157,
    2,
    75,
    13,
    18,
    32,
    8,
    32,
    12,
    65,
    127,
    106,
    65,
    31,
    113,
    34,
    9,
    65,
    1,
    116,
    65,
    216,
    181,
    192,
    0,
    106,
    47,
    1,
    0,
    54,
    2,
    20,
    32,
    8,
    32,
    9,
    65,
    184,
    181,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    24,
    65,
    14,
    65,
    15,
    32,
    9,
    27,
    33,
    10,
    12,
    18,
    11,
    65,
    21,
    33,
    10,
    32,
    8,
    40,
    2,
    20,
    34,
    9,
    65,
    255,
    1,
    75,
    13,
    17,
    32,
    5,
    32,
    15,
    70,
    13,
    8,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    15,
    65,
    1,
    106,
    33,
    15,
    65,
    12,
    33,
    10,
    12,
    18,
    11,
    12,
    27,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    16,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    1,
    11,
    32,
    10,
    65,
    1,
    77,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    16,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    16,
    12,
    5,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    16,
    12,
    6,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    9,
    32,
    20,
    70,
    4,
    64,
    65,
    12,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    25,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    10,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    9,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    16,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    10,
    33,
    9,
    32,
    16,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    20,
    32,
    9,
    107,
    34,
    10,
    65,
    1,
    77,
    13,
    1,
    32,
    9,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    9,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    16,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    16,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    16,
    11,
    32,
    30,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    13,
    1,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    31,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    2,
    11,
    65,
    2,
    32,
    10,
    65,
    136,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    65,
    34,
    33,
    10,
    32,
    11,
    69,
    13,
    16,
    32,
    8,
    32,
    12,
    54,
    2,
    20,
    32,
    8,
    32,
    16,
    32,
    11,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    65,
    13,
    33,
    10,
    12,
    16,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    32,
    8,
    40,
    2,
    24,
    33,
    12,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    11,
    32,
    12,
    65,
    31,
    113,
    34,
    14,
    118,
    54,
    2,
    8,
    32,
    8,
    65,
    11,
    54,
    2,
    40,
    32,
    8,
    66,
    131,
    128,
    128,
    128,
    48,
    55,
    2,
    32,
    2,
    64,
    32,
    8,
    40,
    2,
    16,
    34,
    10,
    65,
    3,
    113,
    34,
    9,
    65,
    3,
    71,
    4,
    64,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    33,
    16,
    65,
    0,
    33,
    12,
    32,
    8,
    40,
    2,
    20,
    33,
    9,
    32,
    10,
    65,
    16,
    70,
    4,
    64,
    32,
    9,
    65,
    127,
    106,
    34,
    10,
    65,
    200,
    3,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    106,
    65,
    157,
    210,
    0,
    106,
    45,
    0,
    0,
    33,
    12,
    11,
    32,
    9,
    32,
    16,
    32,
    11,
    65,
    127,
    32,
    14,
    116,
    65,
    127,
    115,
    113,
    106,
    34,
    11,
    106,
    34,
    10,
    32,
    9,
    73,
    13,
    4,
    32,
    10,
    65,
    202,
    3,
    79,
    13,
    5,
    32,
    11,
    4,
    64,
    32,
    1,
    32,
    9,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    12,
    32,
    11,
    16,
    131,
    1,
    26,
    11,
    32,
    8,
    32,
    10,
    54,
    2,
    20,
    65,
    10,
    33,
    10,
    12,
    21,
    11,
    65,
    3,
    65,
    3,
    65,
    164,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    65,
    201,
    3,
    65,
    180,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    11,
    33,
    11,
    12,
    18,
    11,
    32,
    9,
    32,
    10,
    65,
    196,
    184,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    10,
    65,
    201,
    3,
    65,
    196,
    184,
    192,
    0,
    16,
    99,
    0,
    11,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    40,
    2,
    20,
    34,
    16,
    32,
    1,
    40,
    2,
    44,
    34,
    10,
    32,
    1,
    40,
    2,
    40,
    34,
    9,
    106,
    34,
    12,
    73,
    4,
    64,
    32,
    8,
    40,
    2,
    12,
    34,
    14,
    65,
    15,
    79,
    4,
    64,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    12,
    7,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    17,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    107,
    65,
    1,
    75,
    13,
    1,
    32,
    8,
    40,
    2,
    8,
    33,
    13,
    32,
    14,
    33,
    12,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    37,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    0,
    78,
    4,
    64,
    32,
    10,
    65,
    9,
    118,
    65,
    127,
    106,
    32,
    12,
    79,
    13,
    1,
    32,
    12,
    33,
    14,
    12,
    10,
    11,
    65,
    11,
    33,
    11,
    32,
    12,
    65,
    11,
    73,
    13,
    0,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    127,
    106,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    10,
    65,
    191,
    4,
    75,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    1,
    116,
    106,
    65,
    248,
    198,
    0,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    74,
    4,
    64,
    32,
    12,
    33,
    14,
    12,
    11,
    11,
    32,
    12,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    79,
    13,
    0,
    11,
    11,
    32,
    9,
    32,
    17,
    70,
    4,
    64,
    65,
    10,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    27,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    10,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    9,
    32,
    8,
    32,
    12,
    65,
    8,
    106,
    34,
    14,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    32,
    12,
    65,
    31,
    113,
    116,
    32,
    13,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    10,
    33,
    9,
    32,
    14,
    34,
    12,
    65,
    15,
    73,
    13,
    1,
    12,
    8,
    11,
    11,
    32,
    10,
    65,
    192,
    4,
    65,
    152,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    16,
    71,
    4,
    64,
    65,
    26,
    33,
    10,
    12,
    23,
    11,
    32,
    9,
    65,
    161,
    2,
    79,
    13,
    1,
    32,
    36,
    32,
    42,
    32,
    9,
    16,
    121,
    26,
    32,
    10,
    65,
    161,
    2,
    79,
    13,
    2,
    32,
    16,
    32,
    9,
    73,
    13,
    3,
    32,
    16,
    65,
    202,
    3,
    79,
    13,
    4,
    32,
    31,
    32,
    1,
    32,
    9,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    10,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    20,
    65,
    127,
    106,
    54,
    2,
    20,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    11,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    12,
    6,
    11,
    32,
    9,
    47,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    9,
    65,
    2,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    14,
    65,
    16,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    14,
    116,
    114,
    34,
    13,
    54,
    2,
    8,
    32,
    9,
    33,
    14,
    12,
    4,
    11,
    32,
    9,
    65,
    160,
    2,
    65,
    136,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    65,
    160,
    2,
    65,
    152,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    9,
    32,
    16,
    65,
    168,
    183,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    16,
    65,
    201,
    3,
    65,
    168,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    2,
    64,
    32,
    37,
    32,
    13,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    4,
    64,
    65,
    10,
    33,
    11,
    3,
    64,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    65,
    1,
    113,
    32,
    10,
    65,
    127,
    115,
    106,
    34,
    9,
    65,
    191,
    4,
    75,
    13,
    30,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    32,
    9,
    65,
    1,
    116,
    106,
    65,
    248,
    198,
    0,
    106,
    46,
    1,
    0,
    34,
    10,
    65,
    127,
    76,
    13,
    0,
    11,
    32,
    10,
    33,
    12,
    12,
    1,
    11,
    32,
    10,
    65,
    255,
    3,
    113,
    33,
    12,
    32,
    10,
    65,
    9,
    118,
    33,
    11,
    12,
    0,
    11,
    32,
    11,
    69,
    4,
    64,
    65,
    34,
    33,
    10,
    12,
    17,
    11,
    32,
    8,
    32,
    14,
    32,
    11,
    107,
    54,
    2,
    12,
    65,
    31,
    33,
    10,
    32,
    8,
    32,
    13,
    32,
    11,
    65,
    31,
    113,
    118,
    54,
    2,
    8,
    32,
    8,
    32,
    12,
    54,
    2,
    16,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    15,
    77,
    4,
    64,
    32,
    16,
    65,
    201,
    3,
    79,
    13,
    1,
    32,
    1,
    32,
    16,
    106,
    65,
    157,
    210,
    0,
    106,
    32,
    12,
    58,
    0,
    0,
    32,
    8,
    32,
    16,
    65,
    1,
    106,
    54,
    2,
    20,
    65,
    0,
    33,
    11,
    12,
    3,
    11,
    65,
    0,
    32,
    12,
    65,
    16,
    70,
    32,
    16,
    27,
    13,
    18,
    32,
    8,
    65,
    7,
    54,
    2,
    40,
    32,
    8,
    66,
    130,
    128,
    128,
    128,
    48,
    55,
    2,
    32,
    32,
    12,
    65,
    112,
    106,
    34,
    9,
    65,
    2,
    75,
    13,
    1,
    32,
    8,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    54,
    2,
    24,
    65,
    11,
    33,
    10,
    12,
    18,
    11,
    32,
    16,
    65,
    201,
    3,
    65,
    132,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    3,
    65,
    148,
    184,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    64,
    32,
    11,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    16,
    0,
    1,
    11,
    11,
    65,
    10,
    33,
    11,
    12,
    15,
    11,
    3,
    64,
    2,
    127,
    32,
    8,
    40,
    2,
    20,
    34,
    10,
    32,
    1,
    40,
    2,
    48,
    73,
    4,
    64,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    64,
    3,
    64,
    32,
    11,
    65,
    3,
    79,
    4,
    64,
    32,
    8,
    32,
    11,
    65,
    125,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    3,
    118,
    54,
    2,
    8,
    32,
    10,
    65,
    19,
    79,
    13,
    2,
    32,
    1,
    32,
    10,
    65,
    222,
    183,
    192,
    0,
    106,
    45,
    0,
    0,
    106,
    65,
    248,
    207,
    0,
    106,
    32,
    9,
    65,
    7,
    113,
    58,
    0,
    0,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    20,
    65,
    0,
    33,
    13,
    65,
    0,
    12,
    4,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    14,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    14,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    2,
    11,
    32,
    10,
    65,
    19,
    65,
    244,
    183,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    65,
    19,
    54,
    2,
    48,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    15,
    0,
    1,
    11,
    11,
    65,
    9,
    33,
    11,
    12,
    14,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    9,
    32,
    8,
    40,
    2,
    4,
    33,
    14,
    3,
    64,
    32,
    9,
    65,
    3,
    79,
    4,
    64,
    32,
    41,
    65,
    0,
    65,
    160,
    2,
    16,
    131,
    1,
    26,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    9,
    33,
    10,
    12,
    14,
    11,
    32,
    8,
    65,
    4,
    54,
    2,
    40,
    32,
    8,
    66,
    133,
    128,
    128,
    128,
    208,
    0,
    55,
    2,
    32,
    32,
    8,
    65,
    32,
    106,
    32,
    9,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    33,
    12,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    127,
    3,
    64,
    32,
    11,
    32,
    12,
    79,
    4,
    64,
    32,
    1,
    32,
    9,
    65,
    2,
    116,
    106,
    65,
    40,
    106,
    32,
    9,
    65,
    1,
    116,
    65,
    216,
    183,
    192,
    0,
    106,
    47,
    1,
    0,
    32,
    8,
    40,
    2,
    8,
    34,
    10,
    65,
    127,
    32,
    12,
    65,
    31,
    113,
    34,
    16,
    116,
    65,
    127,
    115,
    113,
    106,
    54,
    2,
    0,
    32,
    8,
    32,
    11,
    32,
    12,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    54,
    2,
    20,
    32,
    8,
    32,
    10,
    32,
    16,
    118,
    54,
    2,
    8,
    65,
    0,
    33,
    13,
    65,
    0,
    12,
    2,
    11,
    2,
    127,
    32,
    22,
    32,
    14,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    16,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    10,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    16,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    10,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    14,
    0,
    1,
    11,
    11,
    65,
    8,
    33,
    11,
    12,
    13,
    11,
    32,
    8,
    40,
    2,
    4,
    34,
    16,
    32,
    8,
    40,
    2,
    0,
    34,
    11,
    107,
    34,
    12,
    69,
    4,
    64,
    65,
    7,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    13,
    11,
    2,
    64,
    2,
    64,
    32,
    12,
    32,
    8,
    40,
    2,
    20,
    34,
    14,
    32,
    12,
    32,
    5,
    32,
    15,
    107,
    34,
    9,
    32,
    9,
    32,
    12,
    75,
    27,
    34,
    9,
    32,
    9,
    32,
    14,
    75,
    27,
    34,
    10,
    79,
    4,
    64,
    32,
    10,
    32,
    15,
    106,
    34,
    9,
    32,
    10,
    73,
    13,
    1,
    32,
    9,
    32,
    5,
    75,
    13,
    2,
    32,
    4,
    32,
    15,
    106,
    32,
    11,
    32,
    10,
    16,
    121,
    26,
    2,
    64,
    32,
    12,
    32,
    10,
    65,
    127,
    106,
    77,
    4,
    64,
    32,
    8,
    32,
    16,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    8,
    32,
    10,
    32,
    11,
    106,
    54,
    2,
    0,
    11,
    32,
    8,
    32,
    14,
    32,
    10,
    107,
    54,
    2,
    20,
    65,
    6,
    33,
    10,
    32,
    9,
    33,
    15,
    12,
    14,
    11,
    32,
    10,
    32,
    12,
    65,
    184,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    32,
    9,
    65,
    212,
    185,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    9,
    32,
    5,
    65,
    212,
    185,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    20,
    33,
    10,
    32,
    8,
    40,
    2,
    20,
    69,
    13,
    10,
    65,
    7,
    33,
    10,
    32,
    5,
    32,
    15,
    71,
    13,
    10,
    12,
    1,
    11,
    32,
    5,
    32,
    15,
    71,
    13,
    1,
    11,
    65,
    2,
    33,
    16,
    32,
    5,
    33,
    15,
    12,
    10,
    11,
    32,
    15,
    32,
    5,
    73,
    4,
    64,
    32,
    4,
    32,
    15,
    106,
    32,
    8,
    40,
    2,
    16,
    58,
    0,
    0,
    32,
    8,
    40,
    2,
    12,
    33,
    9,
    32,
    8,
    32,
    8,
    40,
    2,
    20,
    65,
    127,
    106,
    34,
    10,
    54,
    2,
    20,
    65,
    17,
    65,
    6,
    32,
    9,
    27,
    65,
    6,
    32,
    10,
    27,
    33,
    10,
    32,
    15,
    65,
    1,
    106,
    33,
    15,
    12,
    8,
    11,
    12,
    17,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    255,
    1,
    113,
    54,
    2,
    16,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    65,
    18,
    33,
    10,
    12,
    8,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    114,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    17,
    33,
    11,
    12,
    7,
    11,
    32,
    8,
    40,
    2,
    20,
    33,
    14,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    2,
    64,
    32,
    14,
    65,
    3,
    77,
    4,
    64,
    32,
    8,
    2,
    127,
    32,
    8,
    40,
    2,
    12,
    34,
    11,
    4,
    64,
    3,
    64,
    32,
    11,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    32,
    14,
    106,
    65,
    153,
    210,
    0,
    106,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    58,
    0,
    0,
    32,
    8,
    32,
    11,
    65,
    120,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    8,
    118,
    54,
    2,
    8,
    32,
    14,
    65,
    1,
    106,
    12,
    3,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    12,
    3,
    11,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    4,
    64,
    65,
    5,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    11,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    14,
    106,
    65,
    153,
    210,
    0,
    106,
    32,
    9,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    14,
    65,
    1,
    106,
    11,
    34,
    14,
    54,
    2,
    20,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    13,
    12,
    1,
    11,
    32,
    8,
    32,
    1,
    47,
    0,
    153,
    82,
    34,
    9,
    54,
    2,
    20,
    65,
    30,
    33,
    10,
    32,
    9,
    32,
    1,
    47,
    0,
    155,
    82,
    65,
    255,
    255,
    3,
    115,
    71,
    13,
    7,
    65,
    20,
    33,
    10,
    32,
    9,
    69,
    13,
    7,
    65,
    17,
    65,
    6,
    32,
    8,
    40,
    2,
    12,
    27,
    33,
    10,
    12,
    7,
    11,
    65,
    5,
    33,
    11,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    6,
    7,
    0,
    11,
    0,
    11,
    32,
    8,
    40,
    2,
    12,
    33,
    13,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    3,
    64,
    32,
    13,
    65,
    7,
    113,
    33,
    9,
    32,
    13,
    33,
    11,
    3,
    64,
    32,
    11,
    32,
    9,
    79,
    4,
    64,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    32,
    8,
    32,
    11,
    32,
    9,
    107,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    9,
    118,
    54,
    2,
    8,
    65,
    5,
    33,
    10,
    12,
    7,
    11,
    2,
    127,
    32,
    22,
    32,
    12,
    32,
    8,
    40,
    2,
    0,
    34,
    10,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    10,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    10,
    45,
    0,
    0,
    33,
    10,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    13,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    10,
    32,
    11,
    65,
    31,
    113,
    116,
    114,
    54,
    2,
    8,
    32,
    13,
    33,
    11,
    65,
    0,
    11,
    34,
    10,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    10,
    65,
    255,
    1,
    113,
    69,
    13,
    0,
    11,
    32,
    10,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    10,
    65,
    4,
    33,
    11,
    12,
    5,
    11,
    2,
    64,
    3,
    64,
    32,
    8,
    40,
    2,
    4,
    33,
    10,
    32,
    8,
    40,
    2,
    12,
    33,
    11,
    2,
    127,
    3,
    64,
    32,
    11,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    34,
    9,
    65,
    1,
    113,
    54,
    2,
    16,
    32,
    1,
    32,
    9,
    65,
    1,
    118,
    65,
    3,
    113,
    34,
    12,
    54,
    2,
    20,
    32,
    8,
    32,
    11,
    65,
    125,
    106,
    54,
    2,
    12,
    32,
    8,
    32,
    9,
    65,
    3,
    118,
    54,
    2,
    8,
    65,
    4,
    33,
    10,
    2,
    64,
    2,
    64,
    32,
    12,
    65,
    1,
    107,
    14,
    3,
    0,
    1,
    6,
    10,
    11,
    32,
    1,
    66,
    160,
    130,
    128,
    128,
    128,
    4,
    55,
    2,
    40,
    32,
    36,
    65,
    8,
    65,
    144,
    1,
    16,
    131,
    1,
    26,
    32,
    43,
    65,
    9,
    65,
    240,
    0,
    16,
    131,
    1,
    26,
    32,
    33,
    65,
    16,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    33,
    65,
    8,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    33,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    2,
    0,
    32,
    1,
    66,
    136,
    144,
    160,
    192,
    128,
    129,
    130,
    132,
    8,
    55,
    2,
    208,
    27,
    32,
    31,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    8,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    16,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    31,
    65,
    24,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    2,
    0,
    32,
    1,
    32,
    8,
    65,
    8,
    106,
    16,
    9,
    34,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    12,
    3,
    11,
    32,
    8,
    65,
    0,
    54,
    2,
    20,
    65,
    8,
    33,
    10,
    12,
    8,
    11,
    2,
    127,
    32,
    22,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    70,
    13,
    0,
    26,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    9,
    45,
    0,
    0,
    33,
    12,
    32,
    8,
    32,
    11,
    65,
    8,
    106,
    34,
    9,
    54,
    2,
    12,
    32,
    8,
    32,
    8,
    40,
    2,
    8,
    32,
    12,
    32,
    11,
    116,
    114,
    54,
    2,
    8,
    32,
    9,
    33,
    11,
    65,
    0,
    11,
    34,
    13,
    65,
    2,
    113,
    69,
    13,
    0,
    11,
    32,
    13,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    11,
    33,
    10,
    2,
    64,
    32,
    13,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    2,
    6,
    0,
    1,
    11,
    11,
    65,
    3,
    33,
    11,
    12,
    5,
    11,
    65,
    25,
    33,
    10,
    12,
    3,
    11,
    32,
    8,
    40,
    2,
    0,
    34,
    9,
    32,
    8,
    40,
    2,
    4,
    70,
    4,
    64,
    65,
    1,
    33,
    11,
    32,
    26,
    33,
    10,
    12,
    4,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    54,
    2,
    4,
    65,
    2,
    33,
    10,
    12,
    2,
    11,
    32,
    1,
    65,
    1,
    54,
    2,
    24,
    32,
    1,
    65,
    1,
    54,
    2,
    12,
    32,
    1,
    66,
    0,
    55,
    2,
    4,
    32,
    8,
    65,
    24,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    8,
    65,
    16,
    106,
    66,
    0,
    55,
    3,
    0,
    32,
    8,
    66,
    0,
    55,
    3,
    8,
    32,
    40,
    33,
    10,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    4,
    34,
    9,
    65,
    15,
    113,
    33,
    11,
    32,
    9,
    65,
    8,
    116,
    33,
    14,
    32,
    9,
    65,
    4,
    118,
    65,
    8,
    106,
    65,
    31,
    113,
    33,
    10,
    32,
    8,
    40,
    2,
    0,
    33,
    9,
    32,
    8,
    40,
    2,
    4,
    33,
    12,
    2,
    64,
    2,
    64,
    32,
    32,
    69,
    4,
    64,
    32,
    9,
    32,
    12,
    71,
    13,
    1,
    12,
    2,
    11,
    32,
    10,
    65,
    16,
    79,
    4,
    64,
    32,
    9,
    32,
    12,
    70,
    13,
    2,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    54,
    2,
    8,
    65,
    28,
    33,
    10,
    12,
    3,
    11,
    32,
    9,
    32,
    12,
    70,
    13,
    1,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    8,
    65,
    28,
    65,
    28,
    65,
    3,
    32,
    9,
    32,
    14,
    114,
    65,
    31,
    112,
    32,
    9,
    65,
    32,
    113,
    114,
    27,
    32,
    11,
    65,
    8,
    71,
    27,
    33,
    10,
    12,
    2,
    11,
    32,
    8,
    32,
    9,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    32,
    9,
    45,
    0,
    0,
    34,
    9,
    54,
    2,
    8,
    65,
    28,
    65,
    28,
    65,
    28,
    65,
    3,
    32,
    9,
    32,
    14,
    114,
    65,
    31,
    112,
    32,
    9,
    65,
    32,
    113,
    114,
    27,
    32,
    11,
    65,
    8,
    71,
    27,
    65,
    28,
    32,
    38,
    32,
    10,
    118,
    27,
    32,
    10,
    65,
    15,
    75,
    27,
    33,
    10,
    12,
    1,
    11,
    11,
    65,
    2,
    33,
    11,
    32,
    26,
    33,
    10,
    11,
    65,
    0,
    33,
    2,
    32,
    10,
    65,
    255,
    1,
    113,
    34,
    9,
    65,
    1,
    70,
    13,
    1,
    32,
    10,
    33,
    16,
    32,
    9,
    65,
    252,
    1,
    70,
    13,
    2,
    11,
    32,
    8,
    32,
    8,
    40,
    2,
    12,
    34,
    2,
    32,
    8,
    40,
    2,
    0,
    32,
    8,
    40,
    2,
    4,
    107,
    32,
    3,
    106,
    34,
    9,
    32,
    2,
    65,
    3,
    118,
    34,
    2,
    32,
    2,
    32,
    9,
    75,
    27,
    34,
    2,
    65,
    3,
    116,
    107,
    54,
    2,
    12,
    12,
    1,
    11,
    65,
    2,
    65,
    1,
    32,
    5,
    32,
    15,
    70,
    27,
    33,
    16,
    11,
    32,
    1,
    32,
    11,
    58,
    0,
    152,
    82,
    32,
    1,
    32,
    8,
    40,
    2,
    12,
    34,
    9,
    54,
    2,
    0,
    32,
    1,
    32,
    8,
    40,
    2,
    16,
    54,
    2,
    28,
    32,
    1,
    32,
    8,
    41,
    2,
    20,
    55,
    2,
    32,
    32,
    1,
    32,
    8,
    40,
    2,
    8,
    65,
    127,
    32,
    9,
    65,
    31,
    113,
    116,
    65,
    127,
    115,
    113,
    54,
    2,
    52,
    2,
    64,
    32,
    7,
    65,
    9,
    113,
    65,
    0,
    32,
    16,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    127,
    74,
    27,
    69,
    4,
    64,
    32,
    15,
    32,
    6,
    107,
    33,
    15,
    12,
    1,
    11,
    32,
    15,
    32,
    6,
    73,
    13,
    2,
    32,
    15,
    32,
    5,
    75,
    13,
    3,
    32,
    8,
    32,
    1,
    40,
    2,
    24,
    34,
    5,
    59,
    1,
    32,
    32,
    8,
    32,
    5,
    65,
    16,
    118,
    59,
    1,
    34,
    32,
    8,
    65,
    32,
    106,
    32,
    4,
    32,
    6,
    106,
    32,
    15,
    32,
    6,
    107,
    34,
    15,
    16,
    30,
    32,
    1,
    32,
    8,
    40,
    2,
    32,
    34,
    4,
    54,
    2,
    24,
    32,
    35,
    69,
    32,
    16,
    65,
    255,
    1,
    113,
    114,
    13,
    0,
    65,
    0,
    65,
    126,
    32,
    4,
    32,
    1,
    40,
    2,
    12,
    70,
    27,
    33,
    16,
    11,
    32,
    0,
    32,
    16,
    58,
    0,
    4,
    32,
    0,
    32,
    15,
    54,
    2,
    8,
    32,
    0,
    32,
    8,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    2,
    32,
    8,
    40,
    2,
    4,
    106,
    107,
    54,
    2,
    0,
    11,
    32,
    8,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    6,
    32,
    15,
    65,
    200,
    183,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    15,
    32,
    5,
    65,
    200,
    183,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    2,
    32,
    9,
    65,
    136,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    12,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    15,
    32,
    5,
    65,
    196,
    185,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    192,
    4,
    65,
    248,
    176,
    192,
    0,
    16,
    98,
    0,
    11,
    183,
    45,
    2,
    13,
    127,
    2,
    126,
    35,
    0,
    65,
    144,
    5,
    107,
    34,
    9,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    4,
    64,
    32,
    0,
    65,
    128,
    27,
    106,
    65,
    8,
    65,
    144,
    1,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    144,
    28,
    106,
    65,
    9,
    65,
    240,
    0,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    144,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    136,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    128,
    29,
    106,
    66,
    135,
    142,
    156,
    184,
    240,
    224,
    193,
    131,
    7,
    55,
    1,
    0,
    32,
    0,
    65,
    160,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    152,
    29,
    106,
    66,
    136,
    144,
    160,
    192,
    128,
    129,
    130,
    132,
    8,
    55,
    1,
    0,
    32,
    0,
    65,
    168,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    176,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    184,
    29,
    106,
    66,
    133,
    138,
    148,
    168,
    208,
    160,
    193,
    130,
    5,
    55,
    1,
    0,
    32,
    0,
    65,
    0,
    65,
    160,
    2,
    65,
    15,
    65,
    1,
    16,
    6,
    32,
    0,
    65,
    1,
    65,
    32,
    65,
    15,
    65,
    1,
    16,
    6,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    34,
    3,
    65,
    2,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    1,
    32,
    3,
    65,
    31,
    113,
    116,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    73,
    13,
    1,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    73,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    1,
    12,
    3,
    11,
    11,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    59,
    1,
    128,
    4,
    32,
    9,
    32,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    65,
    160,
    2,
    65,
    15,
    65,
    0,
    16,
    6,
    32,
    0,
    65,
    1,
    65,
    32,
    65,
    15,
    65,
    0,
    16,
    6,
    65,
    158,
    2,
    2,
    127,
    65,
    0,
    32,
    0,
    65,
    157,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    1,
    32,
    0,
    65,
    156,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    2,
    32,
    0,
    65,
    155,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    3,
    32,
    0,
    65,
    154,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    4,
    32,
    0,
    65,
    153,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    5,
    32,
    0,
    65,
    152,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    6,
    32,
    0,
    65,
    151,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    7,
    32,
    0,
    65,
    150,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    8,
    32,
    0,
    65,
    149,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    9,
    32,
    0,
    65,
    148,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    10,
    32,
    0,
    65,
    147,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    11,
    32,
    0,
    65,
    146,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    12,
    32,
    0,
    65,
    145,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    13,
    32,
    0,
    65,
    144,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    14,
    32,
    0,
    65,
    143,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    15,
    32,
    0,
    65,
    142,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    16,
    32,
    0,
    65,
    141,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    17,
    32,
    0,
    65,
    140,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    18,
    32,
    0,
    65,
    139,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    19,
    32,
    0,
    65,
    138,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    20,
    32,
    0,
    65,
    137,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    21,
    32,
    0,
    65,
    136,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    22,
    32,
    0,
    65,
    135,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    23,
    32,
    0,
    65,
    134,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    24,
    32,
    0,
    65,
    133,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    25,
    32,
    0,
    65,
    132,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    26,
    32,
    0,
    65,
    131,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    27,
    32,
    0,
    65,
    130,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    26,
    65,
    28,
    65,
    29,
    32,
    0,
    65,
    129,
    29,
    106,
    45,
    0,
    0,
    27,
    11,
    34,
    14,
    107,
    33,
    3,
    2,
    64,
    32,
    0,
    65,
    189,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    1,
    33,
    8,
    32,
    0,
    65,
    188,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    2,
    33,
    8,
    32,
    0,
    65,
    187,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    3,
    33,
    8,
    32,
    0,
    65,
    186,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    4,
    33,
    8,
    32,
    0,
    65,
    185,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    5,
    33,
    8,
    32,
    0,
    65,
    184,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    6,
    33,
    8,
    32,
    0,
    65,
    183,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    7,
    33,
    8,
    32,
    0,
    65,
    182,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    8,
    33,
    8,
    32,
    0,
    65,
    181,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    9,
    33,
    8,
    32,
    0,
    65,
    180,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    10,
    33,
    8,
    32,
    0,
    65,
    179,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    11,
    33,
    8,
    32,
    0,
    65,
    178,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    12,
    33,
    8,
    32,
    0,
    65,
    177,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    13,
    33,
    8,
    32,
    0,
    65,
    176,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    14,
    33,
    8,
    32,
    0,
    65,
    175,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    15,
    33,
    8,
    32,
    0,
    65,
    174,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    16,
    33,
    8,
    32,
    0,
    65,
    173,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    17,
    33,
    8,
    32,
    0,
    65,
    172,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    18,
    33,
    8,
    32,
    0,
    65,
    171,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    19,
    33,
    8,
    32,
    0,
    65,
    170,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    20,
    33,
    8,
    32,
    0,
    65,
    169,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    21,
    33,
    8,
    32,
    0,
    65,
    168,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    22,
    33,
    8,
    32,
    0,
    65,
    167,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    23,
    33,
    8,
    32,
    0,
    65,
    166,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    24,
    33,
    8,
    32,
    0,
    65,
    165,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    25,
    33,
    8,
    32,
    0,
    65,
    164,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    26,
    33,
    8,
    32,
    0,
    65,
    163,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    27,
    33,
    8,
    32,
    0,
    65,
    162,
    29,
    106,
    45,
    0,
    0,
    13,
    0,
    65,
    28,
    65,
    29,
    32,
    0,
    65,
    161,
    29,
    106,
    45,
    0,
    0,
    27,
    33,
    8,
    11,
    32,
    9,
    65,
    4,
    106,
    65,
    0,
    65,
    192,
    2,
    16,
    131,
    1,
    26,
    32,
    9,
    65,
    196,
    2,
    106,
    65,
    0,
    65,
    192,
    2,
    16,
    131,
    1,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    65,
    193,
    2,
    73,
    4,
    64,
    32,
    3,
    65,
    161,
    2,
    79,
    13,
    1,
    32,
    9,
    65,
    4,
    106,
    32,
    0,
    65,
    128,
    27,
    106,
    32,
    3,
    16,
    121,
    26,
    65,
    30,
    32,
    8,
    107,
    34,
    6,
    32,
    3,
    106,
    34,
    4,
    32,
    3,
    73,
    13,
    2,
    32,
    4,
    65,
    193,
    2,
    79,
    13,
    3,
    32,
    6,
    65,
    161,
    2,
    79,
    13,
    4,
    32,
    9,
    65,
    4,
    106,
    32,
    3,
    106,
    32,
    0,
    65,
    160,
    29,
    106,
    32,
    6,
    16,
    121,
    26,
    32,
    0,
    65,
    128,
    9,
    106,
    65,
    0,
    65,
    38,
    16,
    131,
    1,
    26,
    32,
    0,
    33,
    6,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    69,
    13,
    0,
    65,
    188,
    2,
    32,
    8,
    32,
    14,
    106,
    107,
    33,
    15,
    32,
    9,
    40,
    2,
    0,
    33,
    11,
    32,
    9,
    65,
    4,
    106,
    33,
    13,
    32,
    0,
    33,
    10,
    65,
    0,
    33,
    3,
    65,
    255,
    1,
    33,
    7,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    7,
    33,
    12,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    13,
    45,
    0,
    0,
    34,
    7,
    69,
    4,
    64,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    4,
    33,
    6,
    12,
    1,
    11,
    32,
    5,
    65,
    2,
    77,
    4,
    64,
    32,
    10,
    32,
    12,
    65,
    255,
    1,
    113,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    12,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    132,
    5,
    32,
    4,
    32,
    5,
    106,
    34,
    6,
    32,
    4,
    73,
    32,
    6,
    65,
    192,
    2,
    75,
    114,
    13,
    11,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    10,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    16,
    58,
    0,
    0,
    11,
    65,
    0,
    33,
    5,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    65,
    138,
    1,
    70,
    13,
    1,
    32,
    6,
    33,
    4,
    12,
    6,
    11,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    32,
    4,
    33,
    6,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    77,
    4,
    64,
    32,
    10,
    32,
    10,
    47,
    1,
    128,
    9,
    32,
    3,
    106,
    59,
    1,
    128,
    9,
    32,
    3,
    32,
    4,
    106,
    34,
    6,
    32,
    4,
    73,
    32,
    6,
    65,
    192,
    2,
    75,
    114,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    65,
    0,
    32,
    3,
    16,
    131,
    1,
    26,
    12,
    1,
    11,
    32,
    3,
    65,
    10,
    77,
    4,
    64,
    32,
    10,
    65,
    162,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    10,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    10,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    17,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    10,
    65,
    164,
    9,
    106,
    34,
    6,
    32,
    6,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    9,
    32,
    4,
    65,
    2,
    106,
    34,
    6,
    65,
    192,
    2,
    75,
    13,
    9,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    117,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    18,
    58,
    0,
    0,
    11,
    32,
    7,
    32,
    12,
    65,
    255,
    1,
    113,
    34,
    3,
    70,
    13,
    3,
    32,
    5,
    69,
    13,
    2,
    32,
    5,
    65,
    2,
    75,
    13,
    1,
    32,
    10,
    32,
    3,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    12,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    12,
    58,
    0,
    132,
    5,
    32,
    5,
    32,
    6,
    106,
    34,
    3,
    32,
    6,
    73,
    32,
    3,
    65,
    192,
    2,
    75,
    114,
    13,
    8,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    32,
    3,
    33,
    6,
    32,
    11,
    33,
    10,
    12,
    2,
    11,
    32,
    11,
    32,
    11,
    47,
    1,
    164,
    9,
    65,
    1,
    106,
    59,
    1,
    164,
    9,
    32,
    6,
    65,
    125,
    75,
    13,
    7,
    32,
    6,
    65,
    2,
    106,
    34,
    4,
    65,
    192,
    2,
    75,
    13,
    7,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    65,
    146,
    254,
    1,
    59,
    0,
    0,
    12,
    3,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    125,
    75,
    13,
    6,
    32,
    6,
    65,
    2,
    106,
    34,
    3,
    65,
    192,
    2,
    75,
    13,
    6,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    34,
    6,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    6,
    65,
    16,
    58,
    0,
    0,
    32,
    3,
    33,
    6,
    11,
    32,
    10,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    1,
    106,
    34,
    4,
    32,
    6,
    73,
    32,
    4,
    65,
    192,
    2,
    75,
    114,
    13,
    5,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    32,
    7,
    58,
    0,
    0,
    12,
    1,
    11,
    65,
    0,
    33,
    3,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    65,
    6,
    71,
    4,
    64,
    32,
    6,
    33,
    4,
    12,
    2,
    11,
    32,
    10,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    125,
    75,
    13,
    4,
    32,
    6,
    65,
    2,
    106,
    34,
    4,
    65,
    192,
    2,
    75,
    13,
    4,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    65,
    144,
    6,
    59,
    0,
    0,
    11,
    65,
    0,
    33,
    3,
    65,
    0,
    33,
    5,
    11,
    32,
    13,
    65,
    1,
    106,
    33,
    13,
    32,
    11,
    33,
    10,
    32,
    15,
    65,
    127,
    106,
    34,
    15,
    13,
    0,
    11,
    32,
    9,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    4,
    64,
    32,
    5,
    65,
    2,
    77,
    4,
    64,
    32,
    6,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    128,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    32,
    5,
    106,
    59,
    1,
    0,
    32,
    9,
    32,
    7,
    58,
    0,
    134,
    5,
    32,
    9,
    32,
    7,
    58,
    0,
    133,
    5,
    32,
    9,
    32,
    7,
    58,
    0,
    132,
    5,
    32,
    4,
    32,
    5,
    106,
    34,
    10,
    32,
    4,
    73,
    32,
    10,
    65,
    192,
    2,
    75,
    114,
    13,
    3,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    16,
    121,
    26,
    32,
    9,
    40,
    2,
    0,
    33,
    6,
    12,
    2,
    11,
    32,
    6,
    65,
    160,
    9,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    2,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    3,
    32,
    5,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    3,
    65,
    16,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    69,
    4,
    64,
    32,
    4,
    33,
    10,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    77,
    4,
    64,
    32,
    6,
    32,
    6,
    47,
    1,
    128,
    9,
    32,
    3,
    106,
    59,
    1,
    128,
    9,
    32,
    3,
    32,
    4,
    106,
    34,
    10,
    32,
    4,
    73,
    32,
    10,
    65,
    192,
    2,
    75,
    114,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    65,
    0,
    32,
    3,
    16,
    131,
    1,
    26,
    12,
    1,
    11,
    32,
    3,
    65,
    10,
    77,
    4,
    64,
    32,
    6,
    65,
    162,
    9,
    106,
    34,
    7,
    32,
    7,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    2,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    2,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    125,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    17,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    6,
    65,
    164,
    9,
    106,
    34,
    7,
    32,
    7,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    4,
    65,
    125,
    75,
    13,
    1,
    32,
    4,
    65,
    2,
    106,
    34,
    10,
    65,
    192,
    2,
    75,
    13,
    1,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    4,
    106,
    34,
    4,
    32,
    3,
    65,
    117,
    106,
    58,
    0,
    1,
    32,
    4,
    65,
    18,
    58,
    0,
    0,
    11,
    32,
    6,
    65,
    2,
    65,
    19,
    65,
    7,
    65,
    0,
    16,
    6,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    34,
    3,
    65,
    2,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    2,
    32,
    3,
    65,
    31,
    113,
    116,
    114,
    34,
    7,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    9,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    29,
    32,
    14,
    107,
    34,
    3,
    65,
    32,
    79,
    13,
    14,
    32,
    1,
    32,
    5,
    65,
    5,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    5,
    116,
    32,
    7,
    114,
    34,
    6,
    54,
    2,
    12,
    32,
    5,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    79,
    13,
    10,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    29,
    32,
    8,
    107,
    34,
    3,
    65,
    32,
    79,
    13,
    14,
    32,
    1,
    32,
    4,
    65,
    5,
    106,
    34,
    7,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    4,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    12,
    32,
    4,
    65,
    3,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    79,
    13,
    11,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    16,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    3,
    32,
    9,
    40,
    2,
    0,
    34,
    5,
    65,
    207,
    31,
    106,
    45,
    0,
    0,
    13,
    10,
    65,
    1,
    33,
    3,
    32,
    5,
    65,
    193,
    31,
    106,
    45,
    0,
    0,
    69,
    13,
    1,
    12,
    10,
    11,
    65,
    2,
    33,
    5,
    12,
    11,
    11,
    65,
    2,
    33,
    3,
    32,
    5,
    65,
    206,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    3,
    33,
    3,
    32,
    5,
    65,
    194,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    4,
    33,
    3,
    32,
    5,
    65,
    205,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    5,
    33,
    3,
    32,
    5,
    65,
    195,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    6,
    33,
    3,
    32,
    5,
    65,
    204,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    7,
    33,
    3,
    32,
    5,
    65,
    196,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    8,
    33,
    3,
    32,
    5,
    65,
    203,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    9,
    33,
    3,
    32,
    5,
    65,
    197,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    10,
    33,
    3,
    32,
    5,
    65,
    202,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    11,
    33,
    3,
    32,
    5,
    65,
    198,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    12,
    33,
    3,
    32,
    5,
    65,
    201,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    13,
    33,
    3,
    32,
    5,
    65,
    199,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    14,
    33,
    3,
    32,
    5,
    65,
    200,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    15,
    33,
    3,
    32,
    5,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    16,
    33,
    3,
    32,
    5,
    65,
    210,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    17,
    33,
    3,
    32,
    5,
    65,
    209,
    31,
    106,
    45,
    0,
    0,
    13,
    8,
    65,
    18,
    65,
    19,
    32,
    5,
    65,
    208,
    31,
    106,
    45,
    0,
    0,
    27,
    33,
    3,
    12,
    8,
    11,
    32,
    3,
    65,
    192,
    2,
    65,
    132,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    65,
    160,
    2,
    65,
    148,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    152,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    4,
    65,
    192,
    2,
    65,
    164,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    180,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    4,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    4,
    33,
    13,
    2,
    64,
    2,
    64,
    65,
    19,
    32,
    3,
    107,
    34,
    5,
    65,
    5,
    79,
    4,
    64,
    32,
    5,
    33,
    13,
    65,
    15,
    32,
    3,
    107,
    34,
    4,
    65,
    16,
    79,
    13,
    6,
    11,
    32,
    1,
    32,
    7,
    65,
    4,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    4,
    32,
    7,
    65,
    31,
    113,
    116,
    32,
    6,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    6,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    13,
    65,
    20,
    79,
    13,
    1,
    11,
    32,
    13,
    69,
    13,
    1,
    65,
    196,
    152,
    192,
    0,
    33,
    7,
    32,
    13,
    65,
    196,
    152,
    192,
    0,
    106,
    33,
    11,
    32,
    9,
    40,
    2,
    0,
    33,
    8,
    3,
    64,
    32,
    8,
    32,
    7,
    45,
    0,
    0,
    106,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    248,
    1,
    113,
    13,
    6,
    32,
    1,
    32,
    5,
    65,
    3,
    106,
    34,
    6,
    54,
    2,
    16,
    32,
    1,
    32,
    4,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    2,
    64,
    32,
    6,
    65,
    8,
    73,
    4,
    64,
    32,
    6,
    33,
    5,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    7,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    1,
    106,
    34,
    7,
    32,
    11,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    13,
    65,
    19,
    65,
    216,
    152,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    69,
    13,
    0,
    65,
    0,
    33,
    7,
    32,
    9,
    40,
    2,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    7,
    65,
    191,
    2,
    77,
    4,
    64,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    7,
    106,
    45,
    0,
    0,
    34,
    11,
    65,
    19,
    79,
    13,
    4,
    32,
    8,
    32,
    11,
    65,
    1,
    116,
    106,
    65,
    192,
    22,
    106,
    47,
    1,
    0,
    34,
    6,
    32,
    8,
    32,
    11,
    106,
    65,
    192,
    31,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    31,
    113,
    118,
    13,
    10,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    1,
    32,
    6,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    4,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    7,
    32,
    1,
    40,
    2,
    0,
    32,
    5,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    1,
    106,
    33,
    6,
    2,
    127,
    32,
    11,
    65,
    16,
    73,
    4,
    64,
    32,
    4,
    33,
    5,
    32,
    6,
    12,
    1,
    11,
    32,
    7,
    65,
    190,
    2,
    75,
    13,
    3,
    32,
    9,
    65,
    196,
    2,
    106,
    32,
    6,
    106,
    45,
    0,
    0,
    33,
    6,
    32,
    9,
    65,
    7,
    54,
    2,
    140,
    5,
    32,
    9,
    66,
    130,
    128,
    128,
    128,
    48,
    55,
    2,
    132,
    5,
    32,
    11,
    65,
    112,
    106,
    34,
    5,
    65,
    2,
    75,
    13,
    4,
    32,
    6,
    32,
    9,
    65,
    132,
    5,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    34,
    5,
    65,
    31,
    113,
    118,
    13,
    11,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    1,
    32,
    6,
    32,
    4,
    116,
    32,
    3,
    114,
    34,
    3,
    54,
    2,
    12,
    32,
    5,
    65,
    8,
    79,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    79,
    13,
    9,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    3,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    5,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    7,
    65,
    2,
    106,
    11,
    34,
    7,
    32,
    10,
    73,
    13,
    1,
    12,
    7,
    11,
    11,
    32,
    7,
    65,
    192,
    2,
    65,
    232,
    152,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    192,
    2,
    65,
    192,
    2,
    65,
    180,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    3,
    65,
    196,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    248,
    152,
    192,
    0,
    65,
    43,
    65,
    164,
    153,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    11,
    65,
    129,
    128,
    4,
    73,
    4,
    64,
    32,
    3,
    173,
    33,
    17,
    32,
    11,
    69,
    13,
    5,
    32,
    2,
    65,
    16,
    106,
    33,
    13,
    65,
    1,
    33,
    6,
    65,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    6,
    65,
    1,
    71,
    4,
    64,
    32,
    8,
    33,
    10,
    32,
    6,
    12,
    1,
    11,
    32,
    8,
    65,
    1,
    106,
    33,
    10,
    32,
    2,
    32,
    8,
    106,
    65,
    16,
    106,
    45,
    0,
    0,
    65,
    128,
    2,
    114,
    11,
    34,
    7,
    65,
    1,
    113,
    4,
    64,
    32,
    10,
    32,
    11,
    79,
    13,
    4,
    32,
    10,
    65,
    1,
    106,
    34,
    6,
    32,
    11,
    79,
    13,
    10,
    32,
    10,
    65,
    2,
    106,
    34,
    8,
    32,
    11,
    79,
    13,
    11,
    32,
    2,
    32,
    10,
    106,
    65,
    16,
    106,
    45,
    0,
    0,
    34,
    14,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    3,
    65,
    159,
    2,
    75,
    13,
    5,
    32,
    14,
    65,
    248,
    158,
    192,
    0,
    106,
    45,
    0,
    0,
    34,
    4,
    65,
    16,
    75,
    13,
    6,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    27,
    106,
    45,
    0,
    0,
    33,
    16,
    32,
    0,
    32,
    3,
    65,
    1,
    116,
    106,
    65,
    192,
    13,
    106,
    51,
    1,
    0,
    2,
    127,
    32,
    6,
    32,
    13,
    106,
    45,
    0,
    0,
    32,
    8,
    32,
    13,
    106,
    45,
    0,
    0,
    34,
    8,
    65,
    8,
    116,
    114,
    34,
    3,
    65,
    255,
    3,
    77,
    4,
    64,
    32,
    3,
    65,
    136,
    161,
    192,
    0,
    106,
    33,
    15,
    32,
    3,
    65,
    136,
    165,
    192,
    0,
    106,
    12,
    1,
    11,
    32,
    3,
    65,
    16,
    116,
    65,
    16,
    117,
    65,
    0,
    72,
    13,
    8,
    32,
    8,
    65,
    136,
    169,
    192,
    0,
    106,
    33,
    15,
    32,
    8,
    65,
    152,
    170,
    192,
    0,
    106,
    11,
    45,
    0,
    0,
    34,
    12,
    65,
    16,
    75,
    13,
    8,
    32,
    7,
    65,
    1,
    118,
    33,
    6,
    32,
    10,
    65,
    3,
    106,
    33,
    8,
    32,
    5,
    65,
    63,
    113,
    173,
    134,
    32,
    17,
    132,
    32,
    4,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    53,
    2,
    0,
    32,
    14,
    173,
    131,
    32,
    5,
    32,
    16,
    106,
    34,
    7,
    65,
    63,
    113,
    173,
    134,
    132,
    32,
    0,
    32,
    15,
    45,
    0,
    0,
    34,
    10,
    65,
    1,
    116,
    106,
    65,
    128,
    18,
    106,
    51,
    1,
    0,
    32,
    4,
    32,
    7,
    106,
    34,
    4,
    65,
    63,
    113,
    173,
    134,
    132,
    32,
    12,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    53,
    2,
    0,
    32,
    3,
    173,
    131,
    32,
    4,
    32,
    0,
    32,
    10,
    106,
    65,
    160,
    29,
    106,
    45,
    0,
    0,
    106,
    34,
    3,
    65,
    63,
    113,
    173,
    134,
    132,
    33,
    17,
    32,
    3,
    32,
    12,
    106,
    33,
    4,
    12,
    1,
    11,
    32,
    10,
    32,
    13,
    106,
    33,
    12,
    32,
    10,
    65,
    3,
    106,
    33,
    8,
    32,
    10,
    32,
    10,
    32,
    11,
    32,
    10,
    32,
    11,
    75,
    27,
    34,
    14,
    107,
    33,
    15,
    65,
    0,
    33,
    3,
    32,
    5,
    33,
    4,
    3,
    64,
    32,
    3,
    65,
    3,
    70,
    4,
    64,
    32,
    7,
    33,
    6,
    12,
    2,
    11,
    32,
    3,
    32,
    15,
    106,
    69,
    13,
    2,
    32,
    7,
    65,
    1,
    118,
    33,
    6,
    32,
    0,
    32,
    3,
    32,
    12,
    106,
    45,
    0,
    0,
    34,
    16,
    65,
    1,
    116,
    106,
    65,
    192,
    13,
    106,
    51,
    1,
    0,
    32,
    4,
    65,
    63,
    113,
    173,
    134,
    32,
    17,
    132,
    33,
    17,
    32,
    3,
    65,
    1,
    106,
    33,
    5,
    32,
    4,
    32,
    0,
    32,
    16,
    106,
    65,
    128,
    27,
    106,
    45,
    0,
    0,
    106,
    33,
    4,
    32,
    3,
    32,
    10,
    106,
    65,
    1,
    106,
    32,
    11,
    73,
    4,
    64,
    32,
    7,
    65,
    2,
    113,
    32,
    5,
    33,
    3,
    32,
    6,
    33,
    7,
    69,
    13,
    1,
    11,
    11,
    32,
    5,
    32,
    10,
    106,
    33,
    8,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    3,
    65,
    8,
    106,
    33,
    7,
    32,
    3,
    65,
    120,
    79,
    13,
    10,
    32,
    1,
    40,
    2,
    4,
    34,
    10,
    32,
    7,
    73,
    13,
    11,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    17,
    55,
    0,
    0,
    65,
    2,
    33,
    5,
    32,
    1,
    40,
    2,
    8,
    34,
    7,
    32,
    4,
    65,
    3,
    118,
    106,
    34,
    3,
    32,
    7,
    73,
    13,
    13,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    75,
    13,
    13,
    32,
    1,
    32,
    3,
    54,
    2,
    8,
    32,
    4,
    65,
    7,
    113,
    33,
    5,
    32,
    17,
    32,
    4,
    65,
    56,
    113,
    173,
    136,
    33,
    17,
    32,
    8,
    32,
    11,
    73,
    13,
    1,
    12,
    12,
    11,
    11,
    32,
    14,
    32,
    11,
    65,
    132,
    154,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    32,
    11,
    65,
    148,
    154,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    65,
    160,
    2,
    65,
    164,
    158,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    17,
    65,
    248,
    160,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    1,
    65,
    136,
    170,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    65,
    17,
    65,
    152,
    171,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    128,
    128,
    4,
    65,
    168,
    171,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    11,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    11,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    7,
    65,
    180,
    148,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    7,
    32,
    10,
    65,
    180,
    148,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    66,
    0,
    55,
    2,
    12,
    65,
    0,
    33,
    7,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    65,
    0,
    33,
    4,
    12,
    1,
    11,
    65,
    0,
    33,
    4,
    2,
    64,
    3,
    64,
    32,
    5,
    65,
    16,
    32,
    5,
    65,
    16,
    73,
    27,
    34,
    6,
    65,
    2,
    116,
    65,
    180,
    158,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    17,
    167,
    113,
    34,
    3,
    32,
    6,
    118,
    69,
    4,
    64,
    32,
    1,
    32,
    4,
    32,
    6,
    106,
    34,
    2,
    54,
    2,
    16,
    32,
    1,
    32,
    3,
    32,
    4,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    12,
    2,
    64,
    32,
    2,
    65,
    8,
    73,
    4,
    64,
    32,
    2,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    79,
    13,
    4,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    4,
    54,
    2,
    16,
    32,
    4,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    17,
    32,
    6,
    173,
    136,
    33,
    17,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    13,
    1,
    12,
    3,
    11,
    11,
    12,
    4,
    11,
    32,
    3,
    32,
    2,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    65,
    192,
    17,
    106,
    47,
    1,
    0,
    34,
    2,
    32,
    0,
    65,
    128,
    29,
    106,
    45,
    0,
    0,
    34,
    0,
    65,
    31,
    113,
    118,
    13,
    2,
    32,
    1,
    32,
    0,
    32,
    4,
    106,
    34,
    0,
    54,
    2,
    16,
    32,
    1,
    32,
    2,
    32,
    4,
    116,
    32,
    7,
    114,
    34,
    4,
    54,
    2,
    12,
    65,
    1,
    33,
    5,
    32,
    0,
    65,
    8,
    73,
    13,
    0,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    34,
    0,
    73,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    34,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    8,
    118,
    34,
    4,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    16,
    65,
    120,
    106,
    34,
    0,
    54,
    2,
    16,
    32,
    0,
    65,
    7,
    75,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    3,
    32,
    0,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    9,
    65,
    144,
    5,
    106,
    36,
    0,
    32,
    5,
    15,
    11,
    32,
    4,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    228,
    147,
    192,
    0,
    65,
    48,
    65,
    148,
    148,
    192,
    0,
    16,
    114,
    0,
    11,
    187,
    43,
    2,
    34,
    127,
    1,
    126,
    35,
    0,
    65,
    48,
    107,
    34,
    13,
    36,
    0,
    32,
    1,
    65,
    172,
    128,
    4,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    198,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    4,
    70,
    4,
    64,
    32,
    1,
    32,
    3,
    58,
    0,
    198,
    128,
    4,
    32,
    3,
    65,
    255,
    1,
    113,
    65,
    4,
    71,
    32,
    5,
    114,
    13,
    1,
    12,
    2,
    11,
    32,
    1,
    32,
    3,
    58,
    0,
    198,
    128,
    4,
    32,
    5,
    69,
    13,
    1,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    66,
    254,
    255,
    255,
    255,
    15,
    55,
    2,
    0,
    32,
    1,
    65,
    126,
    54,
    2,
    180,
    128,
    4,
    12,
    1,
    11,
    32,
    1,
    65,
    144,
    128,
    4,
    106,
    33,
    24,
    2,
    64,
    32,
    1,
    65,
    164,
    128,
    4,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    1,
    65,
    199,
    128,
    4,
    106,
    45,
    0,
    0,
    69,
    13,
    1,
    11,
    32,
    13,
    65,
    32,
    106,
    32,
    2,
    32,
    24,
    16,
    67,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    32,
    13,
    41,
    3,
    32,
    55,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    13,
    65,
    40,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    24,
    40,
    2,
    0,
    65,
    255,
    159,
    45,
    113,
    65,
    129,
    128,
    1,
    71,
    4,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    26,
    69,
    13,
    2,
    32,
    1,
    65,
    204,
    128,
    4,
    106,
    33,
    31,
    32,
    1,
    65,
    156,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    1,
    65,
    152,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    17,
    32,
    1,
    65,
    197,
    128,
    4,
    106,
    45,
    0,
    0,
    33,
    19,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    16,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    10,
    32,
    2,
    40,
    2,
    4,
    33,
    18,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    33,
    14,
    2,
    64,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    18,
    32,
    11,
    77,
    4,
    64,
    32,
    10,
    69,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    2,
    127,
    2,
    64,
    65,
    130,
    2,
    32,
    10,
    107,
    34,
    5,
    32,
    18,
    32,
    11,
    107,
    34,
    4,
    32,
    4,
    32,
    5,
    75,
    27,
    34,
    6,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    10,
    106,
    65,
    2,
    73,
    13,
    0,
    32,
    6,
    32,
    11,
    106,
    34,
    7,
    32,
    6,
    79,
    4,
    64,
    32,
    18,
    32,
    7,
    79,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    34,
    5,
    65,
    128,
    128,
    8,
    106,
    34,
    8,
    32,
    10,
    32,
    16,
    106,
    34,
    9,
    65,
    126,
    106,
    34,
    4,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    65,
    5,
    116,
    32,
    8,
    32,
    9,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    115,
    33,
    12,
    32,
    6,
    32,
    10,
    106,
    33,
    10,
    32,
    6,
    65,
    127,
    106,
    33,
    6,
    32,
    11,
    32,
    26,
    106,
    33,
    8,
    3,
    64,
    32,
    5,
    32,
    9,
    65,
    255,
    255,
    1,
    113,
    34,
    9,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    8,
    45,
    0,
    0,
    34,
    5,
    58,
    0,
    0,
    32,
    9,
    65,
    128,
    2,
    77,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    32,
    9,
    65,
    128,
    128,
    2,
    114,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    5,
    58,
    0,
    0,
    11,
    32,
    14,
    40,
    2,
    0,
    34,
    11,
    32,
    4,
    65,
    255,
    255,
    1,
    113,
    65,
    1,
    116,
    106,
    32,
    11,
    32,
    12,
    65,
    5,
    116,
    65,
    224,
    255,
    1,
    113,
    32,
    5,
    115,
    34,
    12,
    65,
    1,
    116,
    34,
    5,
    106,
    65,
    128,
    128,
    4,
    106,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    14,
    40,
    2,
    0,
    32,
    5,
    106,
    65,
    128,
    128,
    4,
    106,
    32,
    4,
    59,
    1,
    0,
    32,
    7,
    32,
    6,
    69,
    13,
    4,
    26,
    32,
    8,
    65,
    1,
    106,
    33,
    8,
    32,
    6,
    65,
    127,
    106,
    33,
    6,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    14,
    40,
    2,
    0,
    33,
    5,
    12,
    0,
    11,
    0,
    11,
    32,
    7,
    32,
    18,
    65,
    216,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    11,
    32,
    7,
    65,
    216,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    6,
    32,
    11,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    2,
    32,
    18,
    32,
    5,
    73,
    13,
    3,
    32,
    6,
    4,
    64,
    32,
    11,
    32,
    26,
    106,
    33,
    12,
    32,
    10,
    32,
    16,
    106,
    33,
    7,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    4,
    32,
    7,
    106,
    34,
    9,
    65,
    255,
    255,
    1,
    113,
    34,
    8,
    32,
    14,
    40,
    2,
    0,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    4,
    32,
    12,
    106,
    45,
    0,
    0,
    34,
    11,
    58,
    0,
    0,
    32,
    8,
    65,
    128,
    2,
    77,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    32,
    8,
    65,
    128,
    128,
    2,
    114,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    11,
    58,
    0,
    0,
    11,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    4,
    32,
    10,
    106,
    106,
    65,
    1,
    106,
    65,
    3,
    79,
    4,
    64,
    32,
    14,
    40,
    2,
    0,
    34,
    8,
    32,
    9,
    65,
    126,
    106,
    34,
    15,
    65,
    255,
    255,
    1,
    113,
    34,
    20,
    65,
    1,
    116,
    106,
    32,
    8,
    32,
    11,
    32,
    8,
    65,
    128,
    128,
    8,
    106,
    34,
    11,
    32,
    9,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    45,
    0,
    0,
    65,
    5,
    116,
    115,
    32,
    11,
    32,
    20,
    106,
    45,
    0,
    0,
    65,
    10,
    116,
    65,
    128,
    248,
    1,
    113,
    115,
    65,
    1,
    116,
    34,
    9,
    106,
    65,
    128,
    128,
    4,
    106,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    14,
    40,
    2,
    0,
    32,
    9,
    106,
    65,
    128,
    128,
    4,
    106,
    32,
    15,
    59,
    1,
    0,
    11,
    32,
    6,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    32,
    4,
    32,
    10,
    106,
    33,
    10,
    11,
    32,
    5,
    11,
    33,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    34,
    5,
    65,
    128,
    128,
    2,
    32,
    10,
    107,
    34,
    4,
    32,
    4,
    32,
    5,
    75,
    27,
    34,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    10,
    65,
    129,
    2,
    77,
    4,
    64,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    33,
    7,
    32,
    3,
    65,
    2,
    32,
    3,
    27,
    33,
    9,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    34,
    23,
    65,
    128,
    128,
    36,
    113,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    27,
    69,
    32,
    23,
    65,
    128,
    128,
    32,
    113,
    114,
    13,
    17,
    32,
    7,
    32,
    10,
    106,
    34,
    5,
    32,
    10,
    73,
    13,
    14,
    32,
    5,
    65,
    131,
    130,
    2,
    79,
    13,
    15,
    32,
    10,
    13,
    1,
    12,
    2,
    11,
    65,
    0,
    33,
    4,
    32,
    10,
    65,
    130,
    2,
    32,
    10,
    65,
    130,
    2,
    73,
    27,
    34,
    15,
    32,
    9,
    65,
    1,
    32,
    9,
    65,
    1,
    75,
    27,
    34,
    9,
    77,
    13,
    16,
    32,
    7,
    32,
    9,
    106,
    34,
    6,
    65,
    127,
    106,
    34,
    5,
    65,
    129,
    130,
    2,
    75,
    13,
    5,
    32,
    5,
    65,
    129,
    130,
    2,
    70,
    13,
    6,
    32,
    31,
    32,
    9,
    65,
    31,
    75,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    65,
    127,
    106,
    34,
    28,
    69,
    13,
    16,
    32,
    14,
    40,
    2,
    0,
    34,
    20,
    32,
    7,
    106,
    34,
    29,
    65,
    128,
    128,
    8,
    106,
    47,
    0,
    0,
    33,
    32,
    32,
    20,
    65,
    128,
    128,
    8,
    106,
    34,
    25,
    32,
    6,
    106,
    45,
    0,
    0,
    65,
    8,
    116,
    32,
    5,
    32,
    25,
    106,
    45,
    0,
    0,
    114,
    33,
    30,
    32,
    20,
    65,
    130,
    128,
    8,
    106,
    33,
    33,
    65,
    128,
    130,
    2,
    32,
    7,
    107,
    65,
    248,
    255,
    3,
    113,
    33,
    34,
    32,
    7,
    33,
    5,
    3,
    64,
    65,
    4,
    33,
    8,
    2,
    64,
    3,
    64,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    69,
    13,
    1,
    32,
    20,
    32,
    5,
    65,
    1,
    116,
    106,
    47,
    1,
    0,
    34,
    22,
    69,
    13,
    19,
    32,
    16,
    32,
    22,
    107,
    65,
    255,
    255,
    3,
    113,
    34,
    12,
    32,
    27,
    75,
    13,
    19,
    32,
    22,
    65,
    255,
    255,
    1,
    113,
    34,
    5,
    32,
    9,
    106,
    34,
    21,
    65,
    127,
    106,
    34,
    6,
    65,
    129,
    130,
    2,
    75,
    13,
    10,
    32,
    6,
    65,
    129,
    130,
    2,
    70,
    13,
    11,
    32,
    6,
    32,
    25,
    106,
    45,
    0,
    0,
    32,
    21,
    32,
    25,
    106,
    45,
    0,
    0,
    65,
    8,
    116,
    114,
    32,
    30,
    71,
    13,
    0,
    11,
    32,
    12,
    69,
    13,
    18,
    32,
    5,
    32,
    20,
    106,
    65,
    128,
    128,
    8,
    106,
    47,
    0,
    0,
    32,
    32,
    71,
    13,
    0,
    32,
    5,
    32,
    33,
    106,
    33,
    21,
    65,
    128,
    130,
    2,
    32,
    5,
    107,
    65,
    248,
    255,
    3,
    113,
    65,
    8,
    106,
    33,
    35,
    65,
    0,
    33,
    6,
    3,
    64,
    32,
    6,
    65,
    128,
    2,
    70,
    13,
    18,
    32,
    6,
    32,
    34,
    70,
    13,
    12,
    32,
    35,
    32,
    6,
    65,
    8,
    106,
    34,
    8,
    70,
    13,
    13,
    32,
    6,
    32,
    21,
    106,
    32,
    6,
    32,
    29,
    106,
    33,
    37,
    32,
    8,
    33,
    6,
    41,
    0,
    0,
    32,
    37,
    65,
    130,
    128,
    8,
    106,
    41,
    0,
    0,
    133,
    34,
    38,
    80,
    13,
    0,
    11,
    32,
    38,
    122,
    167,
    34,
    22,
    65,
    3,
    118,
    34,
    21,
    32,
    8,
    106,
    65,
    122,
    106,
    34,
    6,
    32,
    9,
    77,
    13,
    0,
    32,
    15,
    32,
    6,
    77,
    13,
    17,
    32,
    7,
    32,
    21,
    106,
    32,
    8,
    106,
    34,
    4,
    65,
    121,
    106,
    65,
    129,
    130,
    2,
    75,
    13,
    13,
    32,
    4,
    65,
    248,
    253,
    125,
    106,
    69,
    13,
    14,
    32,
    21,
    32,
    29,
    106,
    32,
    8,
    106,
    65,
    249,
    255,
    7,
    106,
    47,
    0,
    0,
    33,
    30,
    32,
    6,
    33,
    9,
    32,
    12,
    33,
    4,
    11,
    32,
    28,
    65,
    127,
    106,
    34,
    28,
    13,
    0,
    11,
    12,
    16,
    11,
    32,
    14,
    40,
    2,
    0,
    34,
    5,
    32,
    16,
    65,
    127,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    9,
    32,
    5,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    5,
    106,
    45,
    0,
    0,
    32,
    9,
    71,
    13,
    1,
    32,
    10,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    32,
    10,
    33,
    4,
    11,
    65,
    0,
    32,
    4,
    32,
    4,
    65,
    3,
    73,
    27,
    33,
    9,
    32,
    4,
    65,
    2,
    75,
    33,
    4,
    12,
    14,
    11,
    32,
    1,
    32,
    16,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    10,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    11,
    54,
    2,
    172,
    128,
    4,
    32,
    1,
    32,
    19,
    58,
    0,
    197,
    128,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    156,
    128,
    4,
    32,
    1,
    32,
    17,
    54,
    2,
    152,
    128,
    4,
    12,
    17,
    11,
    32,
    11,
    32,
    5,
    65,
    232,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    18,
    65,
    232,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    5,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    21,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    6,
    106,
    65,
    10,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    22,
    65,
    255,
    255,
    1,
    113,
    32,
    6,
    106,
    65,
    10,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    22,
    65,
    3,
    118,
    106,
    32,
    8,
    106,
    65,
    121,
    106,
    65,
    130,
    130,
    2,
    65,
    132,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    16,
    65,
    255,
    255,
    1,
    113,
    32,
    22,
    65,
    3,
    118,
    106,
    32,
    8,
    106,
    65,
    122,
    106,
    65,
    130,
    130,
    2,
    65,
    148,
    147,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    5,
    65,
    248,
    173,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    130,
    130,
    2,
    65,
    248,
    173,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    33,
    9,
    32,
    12,
    33,
    4,
    11,
    65,
    0,
    32,
    4,
    32,
    9,
    65,
    3,
    70,
    32,
    4,
    65,
    255,
    63,
    75,
    113,
    32,
    23,
    65,
    128,
    128,
    8,
    113,
    65,
    17,
    118,
    32,
    9,
    65,
    6,
    73,
    113,
    114,
    32,
    4,
    32,
    7,
    70,
    114,
    34,
    5,
    27,
    33,
    6,
    65,
    0,
    32,
    9,
    32,
    5,
    27,
    33,
    5,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    33,
    4,
    32,
    5,
    32,
    3,
    77,
    13,
    3,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    26,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    19,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    34,
    3,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    3,
    54,
    2,
    12,
    32,
    3,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    4,
    32,
    19,
    65,
    1,
    116,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    5,
    65,
    255,
    0,
    75,
    4,
    64,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    12,
    1,
    11,
    2,
    64,
    32,
    6,
    4,
    64,
    32,
    23,
    65,
    128,
    128,
    4,
    113,
    32,
    5,
    65,
    255,
    0,
    75,
    114,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    196,
    128,
    4,
    69,
    13,
    2,
    11,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    3,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    32,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    34,
    5,
    32,
    5,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    5,
    54,
    2,
    12,
    32,
    5,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    5,
    54,
    2,
    4,
    32,
    1,
    32,
    5,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    65,
    1,
    33,
    4,
    32,
    3,
    65,
    1,
    116,
    106,
    34,
    3,
    32,
    3,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    65,
    0,
    12,
    7,
    11,
    32,
    14,
    40,
    2,
    0,
    32,
    7,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    11,
    33,
    19,
    65,
    1,
    33,
    4,
    32,
    6,
    33,
    17,
    32,
    5,
    12,
    5,
    11,
    32,
    3,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    32,
    3,
    32,
    17,
    16,
    35,
    32,
    3,
    65,
    127,
    106,
    33,
    4,
    65,
    0,
    12,
    3,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    1,
    32,
    5,
    32,
    6,
    16,
    35,
    32,
    5,
    33,
    4,
    65,
    0,
    11,
    33,
    3,
    32,
    10,
    32,
    4,
    73,
    13,
    1,
    32,
    4,
    32,
    16,
    106,
    33,
    16,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    4,
    106,
    34,
    5,
    65,
    128,
    128,
    2,
    32,
    5,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    10,
    32,
    4,
    107,
    33,
    10,
    32,
    1,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    8,
    34,
    4,
    65,
    129,
    248,
    1,
    79,
    4,
    64,
    32,
    5,
    65,
    248,
    255,
    3,
    75,
    32,
    5,
    65,
    243,
    0,
    108,
    65,
    7,
    118,
    32,
    4,
    79,
    114,
    13,
    1,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    65,
    128,
    128,
    32,
    113,
    69,
    13,
    2,
    12,
    1,
    11,
    32,
    5,
    65,
    249,
    255,
    3,
    73,
    13,
    1,
    11,
    32,
    1,
    32,
    16,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    10,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    11,
    54,
    2,
    172,
    128,
    4,
    32,
    13,
    65,
    24,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    65,
    127,
    32,
    13,
    40,
    2,
    28,
    32,
    13,
    40,
    2,
    24,
    27,
    34,
    5,
    69,
    13,
    0,
    11,
    32,
    1,
    32,
    3,
    54,
    2,
    156,
    128,
    4,
    32,
    1,
    32,
    17,
    54,
    2,
    152,
    128,
    4,
    32,
    1,
    32,
    19,
    58,
    0,
    197,
    128,
    4,
    32,
    5,
    65,
    0,
    74,
    13,
    2,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    33,
    5,
    12,
    15,
    11,
    65,
    136,
    174,
    192,
    0,
    65,
    47,
    65,
    184,
    174,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    2,
    40,
    2,
    0,
    34,
    16,
    69,
    13,
    1,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    11,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    2,
    40,
    2,
    4,
    33,
    10,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    3,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    33,
    17,
    65,
    0,
    33,
    5,
    3,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    32,
    5,
    77,
    4,
    64,
    32,
    3,
    69,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    69,
    13,
    1,
    11,
    65,
    128,
    32,
    32,
    3,
    107,
    34,
    4,
    32,
    10,
    32,
    5,
    107,
    34,
    6,
    32,
    6,
    32,
    4,
    75,
    27,
    34,
    4,
    4,
    64,
    32,
    3,
    32,
    11,
    106,
    33,
    12,
    32,
    5,
    33,
    8,
    32,
    4,
    33,
    6,
    3,
    64,
    32,
    6,
    65,
    128,
    128,
    2,
    32,
    12,
    65,
    255,
    255,
    1,
    113,
    34,
    15,
    107,
    34,
    5,
    32,
    5,
    32,
    6,
    75,
    27,
    34,
    7,
    32,
    15,
    106,
    34,
    12,
    65,
    131,
    130,
    2,
    79,
    13,
    17,
    32,
    7,
    32,
    8,
    106,
    34,
    5,
    32,
    7,
    73,
    13,
    16,
    32,
    10,
    32,
    5,
    73,
    13,
    15,
    32,
    17,
    40,
    2,
    0,
    32,
    15,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    8,
    32,
    16,
    106,
    34,
    19,
    32,
    7,
    16,
    121,
    26,
    32,
    15,
    65,
    128,
    2,
    77,
    4,
    64,
    65,
    129,
    2,
    32,
    15,
    107,
    34,
    14,
    32,
    7,
    32,
    7,
    32,
    14,
    75,
    27,
    34,
    14,
    32,
    15,
    65,
    128,
    128,
    2,
    114,
    34,
    18,
    106,
    34,
    15,
    65,
    131,
    130,
    2,
    79,
    13,
    15,
    32,
    8,
    32,
    14,
    106,
    34,
    15,
    32,
    14,
    73,
    13,
    14,
    32,
    10,
    32,
    15,
    73,
    13,
    13,
    32,
    17,
    40,
    2,
    0,
    32,
    18,
    106,
    65,
    128,
    128,
    8,
    106,
    32,
    19,
    32,
    14,
    16,
    121,
    26,
    11,
    32,
    5,
    33,
    8,
    32,
    6,
    32,
    7,
    107,
    34,
    6,
    13,
    0,
    11,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    34,
    6,
    65,
    128,
    128,
    2,
    32,
    3,
    32,
    4,
    106,
    34,
    12,
    107,
    34,
    3,
    32,
    3,
    32,
    6,
    75,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    65,
    255,
    31,
    75,
    13,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    13,
    1,
    32,
    12,
    33,
    3,
    11,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    220,
    128,
    4,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    12,
    2,
    11,
    2,
    64,
    32,
    12,
    65,
    4,
    79,
    4,
    64,
    3,
    64,
    32,
    17,
    40,
    2,
    0,
    34,
    3,
    32,
    3,
    32,
    9,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    40,
    0,
    0,
    34,
    6,
    65,
    255,
    255,
    255,
    7,
    113,
    34,
    3,
    65,
    17,
    118,
    32,
    6,
    65,
    255,
    31,
    113,
    115,
    65,
    1,
    116,
    106,
    65,
    128,
    128,
    4,
    106,
    34,
    4,
    47,
    1,
    0,
    33,
    8,
    32,
    4,
    32,
    11,
    59,
    1,
    0,
    2,
    64,
    32,
    11,
    32,
    8,
    107,
    34,
    15,
    65,
    255,
    255,
    3,
    113,
    34,
    7,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    75,
    13,
    0,
    2,
    64,
    2,
    64,
    32,
    3,
    32,
    17,
    40,
    2,
    0,
    34,
    4,
    32,
    8,
    65,
    255,
    255,
    1,
    113,
    34,
    3,
    106,
    65,
    128,
    128,
    8,
    106,
    40,
    0,
    0,
    65,
    255,
    255,
    255,
    7,
    113,
    70,
    4,
    64,
    32,
    4,
    65,
    131,
    128,
    8,
    106,
    34,
    4,
    32,
    3,
    106,
    33,
    14,
    32,
    4,
    32,
    9,
    106,
    33,
    19,
    65,
    255,
    129,
    2,
    32,
    3,
    107,
    65,
    248,
    255,
    3,
    113,
    65,
    8,
    106,
    33,
    18,
    65,
    0,
    33,
    3,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    3,
    65,
    128,
    2,
    70,
    4,
    64,
    65,
    130,
    2,
    33,
    3,
    32,
    7,
    13,
    6,
    12,
    2,
    11,
    32,
    3,
    32,
    9,
    106,
    34,
    4,
    65,
    3,
    106,
    65,
    120,
    79,
    13,
    2,
    32,
    4,
    65,
    11,
    106,
    65,
    131,
    130,
    2,
    79,
    13,
    3,
    32,
    18,
    32,
    3,
    65,
    8,
    106,
    34,
    4,
    70,
    13,
    4,
    32,
    3,
    32,
    19,
    106,
    33,
    20,
    32,
    3,
    32,
    14,
    106,
    32,
    4,
    33,
    3,
    41,
    0,
    0,
    32,
    20,
    41,
    0,
    0,
    133,
    34,
    38,
    80,
    13,
    0,
    11,
    32,
    38,
    122,
    167,
    65,
    3,
    118,
    32,
    4,
    106,
    34,
    4,
    65,
    123,
    106,
    34,
    3,
    65,
    3,
    73,
    13,
    0,
    32,
    4,
    65,
    120,
    106,
    32,
    7,
    65,
    128,
    192,
    0,
    73,
    114,
    13,
    4,
    11,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    27,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    13,
    5,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    3,
    106,
    32,
    4,
    65,
    11,
    106,
    65,
    212,
    153,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    4,
    65,
    11,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    65,
    255,
    255,
    1,
    113,
    32,
    3,
    106,
    65,
    11,
    106,
    65,
    130,
    130,
    2,
    65,
    212,
    153,
    192,
    0,
    16,
    99,
    0,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    12,
    32,
    3,
    32,
    3,
    32,
    12,
    75,
    27,
    34,
    3,
    65,
    125,
    106,
    34,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    1,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    15,
    65,
    127,
    106,
    34,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    8,
    54,
    2,
    0,
    32,
    8,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    1,
    32,
    8,
    106,
    65,
    16,
    106,
    32,
    4,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    34,
    8,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    7,
    65,
    128,
    128,
    4,
    79,
    13,
    3,
    32,
    1,
    32,
    7,
    106,
    65,
    16,
    106,
    34,
    7,
    32,
    7,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    7,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    32,
    7,
    106,
    65,
    16,
    106,
    34,
    7,
    32,
    7,
    45,
    0,
    0,
    65,
    128,
    1,
    114,
    58,
    0,
    0,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    4,
    65,
    255,
    255,
    3,
    113,
    34,
    7,
    65,
    128,
    4,
    79,
    4,
    64,
    32,
    4,
    65,
    16,
    116,
    65,
    16,
    117,
    65,
    127,
    76,
    13,
    2,
    32,
    8,
    65,
    136,
    169,
    192,
    0,
    106,
    12,
    1,
    11,
    32,
    7,
    65,
    136,
    161,
    192,
    0,
    106,
    11,
    33,
    4,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    116,
    106,
    65,
    192,
    4,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    6,
    65,
    255,
    1,
    75,
    13,
    1,
    32,
    6,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    4,
    65,
    160,
    2,
    73,
    13,
    9,
    32,
    4,
    65,
    160,
    2,
    65,
    168,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    1,
    65,
    136,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    128,
    2,
    65,
    152,
    175,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    128,
    128,
    4,
    79,
    13,
    22,
    32,
    1,
    32,
    3,
    106,
    65,
    16,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    73,
    13,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    1,
    33,
    3,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    6,
    65,
    255,
    1,
    113,
    33,
    4,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    1,
    116,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    32,
    3,
    106,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    32,
    3,
    106,
    34,
    6,
    65,
    128,
    128,
    2,
    32,
    6,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    32,
    3,
    107,
    33,
    12,
    32,
    3,
    32,
    11,
    106,
    33,
    11,
    32,
    3,
    32,
    9,
    106,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    4,
    65,
    249,
    255,
    3,
    73,
    13,
    0,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    12,
    54,
    2,
    220,
    128,
    4,
    32,
    13,
    65,
    16,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    32,
    13,
    40,
    2,
    16,
    13,
    7,
    32,
    13,
    40,
    2,
    20,
    34,
    3,
    13,
    3,
    32,
    1,
    40,
    2,
    224,
    128,
    4,
    33,
    11,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    12,
    11,
    32,
    12,
    65,
    3,
    75,
    13,
    0,
    11,
    11,
    65,
    0,
    33,
    3,
    32,
    12,
    69,
    13,
    1,
    3,
    64,
    32,
    17,
    40,
    2,
    0,
    32,
    9,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    4,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    65,
    128,
    128,
    4,
    79,
    13,
    6,
    32,
    1,
    32,
    6,
    106,
    65,
    16,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    65,
    128,
    128,
    4,
    79,
    13,
    7,
    32,
    1,
    32,
    6,
    106,
    65,
    16,
    106,
    34,
    6,
    32,
    6,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    6,
    54,
    2,
    12,
    32,
    6,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    54,
    2,
    4,
    32,
    1,
    32,
    6,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    1,
    116,
    106,
    34,
    4,
    32,
    4,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    228,
    128,
    4,
    65,
    1,
    106,
    34,
    4,
    65,
    128,
    128,
    2,
    32,
    4,
    65,
    128,
    128,
    2,
    73,
    27,
    54,
    2,
    228,
    128,
    4,
    32,
    12,
    65,
    127,
    106,
    33,
    12,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    1,
    40,
    2,
    0,
    65,
    249,
    255,
    3,
    79,
    4,
    64,
    32,
    1,
    32,
    11,
    54,
    2,
    224,
    128,
    4,
    32,
    1,
    32,
    12,
    54,
    2,
    220,
    128,
    4,
    32,
    13,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    65,
    0,
    16,
    5,
    32,
    13,
    40,
    2,
    8,
    13,
    9,
    32,
    13,
    40,
    2,
    12,
    34,
    4,
    4,
    64,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    4,
    65,
    0,
    76,
    13,
    18,
    12,
    5,
    11,
    32,
    1,
    40,
    2,
    220,
    128,
    4,
    33,
    12,
    32,
    1,
    40,
    2,
    224,
    128,
    4,
    33,
    11,
    11,
    32,
    9,
    65,
    1,
    106,
    65,
    255,
    255,
    1,
    113,
    33,
    9,
    32,
    12,
    13,
    0,
    11,
    12,
    1,
    11,
    11,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    3,
    65,
    0,
    76,
    13,
    13,
    11,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    24,
    65,
    1,
    106,
    45,
    0,
    0,
    65,
    48,
    113,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    4,
    34,
    4,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    34,
    3,
    73,
    13,
    5,
    32,
    13,
    32,
    1,
    40,
    2,
    168,
    128,
    4,
    34,
    4,
    65,
    16,
    118,
    59,
    1,
    34,
    32,
    13,
    32,
    4,
    59,
    1,
    32,
    32,
    13,
    65,
    32,
    106,
    32,
    5,
    32,
    3,
    16,
    30,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    168,
    128,
    4,
    11,
    2,
    64,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    34,
    3,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    32,
    2,
    40,
    2,
    4,
    65,
    0,
    32,
    2,
    40,
    2,
    0,
    27,
    71,
    13,
    0,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    114,
    13,
    0,
    32,
    13,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    5,
    32,
    13,
    40,
    2,
    0,
    4,
    64,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    65,
    127,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    41,
    2,
    172,
    128,
    4,
    55,
    2,
    4,
    12,
    14,
    11,
    32,
    13,
    40,
    2,
    4,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    54,
    2,
    8,
    32,
    0,
    32,
    1,
    40,
    2,
    172,
    128,
    4,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    180,
    128,
    4,
    54,
    2,
    0,
    12,
    14,
    11,
    32,
    1,
    32,
    1,
    45,
    0,
    198,
    128,
    4,
    34,
    3,
    65,
    4,
    70,
    58,
    0,
    199,
    128,
    4,
    32,
    3,
    65,
    3,
    71,
    13,
    0,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    34,
    3,
    40,
    2,
    0,
    65,
    128,
    128,
    4,
    106,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    3,
    40,
    2,
    0,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    13,
    65,
    32,
    106,
    32,
    2,
    32,
    24,
    16,
    67,
    32,
    1,
    32,
    13,
    40,
    2,
    32,
    54,
    2,
    180,
    128,
    4,
    32,
    0,
    32,
    13,
    41,
    3,
    32,
    55,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    13,
    65,
    40,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    12,
    11,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    12,
    10,
    11,
    32,
    6,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    32,
    5,
    54,
    2,
    172,
    128,
    4,
    32,
    1,
    65,
    127,
    54,
    2,
    180,
    128,
    4,
    12,
    7,
    11,
    32,
    3,
    32,
    4,
    65,
    216,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    15,
    32,
    10,
    65,
    248,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    32,
    15,
    65,
    248,
    174,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    15,
    65,
    130,
    130,
    2,
    65,
    232,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    5,
    32,
    10,
    65,
    216,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    32,
    5,
    65,
    216,
    174,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    12,
    65,
    130,
    130,
    2,
    65,
    200,
    174,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    54,
    2,
    8,
    32,
    0,
    32,
    1,
    40,
    2,
    180,
    128,
    4,
    54,
    2,
    0,
    11,
    32,
    13,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    3,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    220,
    26,
    1,
    9,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    4,
    36,
    0,
    65,
    1,
    33,
    5,
    32,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    71,
    13,
    0,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    7,
    32,
    1,
    65,
    176,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    6,
    107,
    65,
    204,
    153,
    5,
    73,
    13,
    0,
    32,
    6,
    65,
    188,
    153,
    5,
    106,
    33,
    8,
    32,
    6,
    65,
    196,
    230,
    122,
    79,
    13,
    1,
    32,
    7,
    32,
    8,
    73,
    13,
    2,
    32,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    32,
    6,
    106,
    33,
    8,
    65,
    0,
    33,
    5,
    11,
    32,
    4,
    32,
    5,
    58,
    0,
    28,
    32,
    4,
    66,
    188,
    153,
    5,
    55,
    2,
    12,
    32,
    4,
    32,
    8,
    54,
    2,
    8,
    32,
    4,
    32,
    1,
    65,
    184,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    1,
    65,
    188,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    6,
    54,
    2,
    24,
    32,
    1,
    65,
    146,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    8,
    113,
    69,
    13,
    2,
    65,
    1,
    33,
    11,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    40,
    2,
    0,
    107,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    40,
    2,
    0,
    75,
    13,
    2,
    12,
    3,
    11,
    32,
    6,
    32,
    8,
    65,
    212,
    147,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    8,
    32,
    7,
    65,
    212,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    11,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    164,
    128,
    4,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    1,
    65,
    160,
    128,
    4,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    65,
    128,
    128,
    4,
    79,
    13,
    1,
    32,
    1,
    32,
    5,
    106,
    65,
    16,
    106,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    12,
    34,
    7,
    65,
    8,
    70,
    4,
    64,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    127,
    106,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    5,
    32,
    5,
    45,
    0,
    0,
    32,
    7,
    65,
    7,
    113,
    118,
    58,
    0,
    0,
    11,
    65,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    34,
    10,
    65,
    128,
    32,
    113,
    69,
    13,
    0,
    32,
    1,
    65,
    148,
    128,
    4,
    106,
    40,
    2,
    0,
    13,
    0,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    65,
    248,
    0,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    9,
    54,
    2,
    20,
    32,
    10,
    65,
    255,
    31,
    113,
    34,
    5,
    65,
    1,
    75,
    65,
    3,
    65,
    2,
    32,
    5,
    65,
    255,
    5,
    75,
    27,
    32,
    10,
    65,
    128,
    128,
    1,
    113,
    27,
    65,
    6,
    116,
    34,
    10,
    65,
    128,
    240,
    1,
    114,
    65,
    31,
    112,
    33,
    12,
    65,
    0,
    33,
    5,
    2,
    64,
    32,
    6,
    65,
    119,
    75,
    13,
    0,
    32,
    8,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    8,
    73,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    21,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    32,
    7,
    65,
    8,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    4,
    32,
    10,
    32,
    12,
    114,
    65,
    31,
    115,
    32,
    7,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    9,
    54,
    2,
    20,
    32,
    7,
    65,
    119,
    75,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    20,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    9,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    65,
    1,
    33,
    8,
    32,
    4,
    32,
    6,
    65,
    1,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    255,
    1,
    113,
    65,
    4,
    70,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    9,
    114,
    34,
    6,
    54,
    2,
    20,
    32,
    7,
    65,
    8,
    79,
    4,
    64,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    7,
    79,
    13,
    4,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    45,
    0,
    28,
    33,
    9,
    32,
    11,
    69,
    4,
    64,
    65,
    0,
    33,
    8,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    32,
    1,
    40,
    2,
    144,
    128,
    4,
    65,
    128,
    128,
    16,
    113,
    65,
    18,
    118,
    32,
    1,
    40,
    2,
    8,
    65,
    48,
    73,
    114,
    16,
    3,
    65,
    255,
    1,
    113,
    65,
    2,
    70,
    13,
    6,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    10,
    65,
    32,
    77,
    13,
    3,
    32,
    4,
    40,
    2,
    16,
    32,
    5,
    107,
    65,
    1,
    106,
    32,
    10,
    73,
    13,
    3,
    32,
    11,
    32,
    1,
    65,
    224,
    128,
    4,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    40,
    2,
    0,
    107,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    40,
    2,
    0,
    77,
    114,
    69,
    13,
    4,
    12,
    6,
    11,
    65,
    184,
    171,
    192,
    0,
    65,
    47,
    65,
    232,
    171,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    13,
    2,
    11,
    32,
    8,
    69,
    13,
    2,
    32,
    4,
    32,
    9,
    58,
    0,
    28,
    32,
    4,
    32,
    7,
    54,
    2,
    24,
    32,
    4,
    32,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    5,
    54,
    2,
    16,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    65,
    1,
    16,
    3,
    65,
    255,
    1,
    113,
    65,
    2,
    71,
    13,
    2,
    11,
    65,
    1,
    33,
    5,
    12,
    11,
    11,
    32,
    4,
    32,
    9,
    58,
    0,
    28,
    32,
    4,
    32,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    7,
    65,
    2,
    106,
    54,
    2,
    24,
    2,
    64,
    2,
    64,
    32,
    7,
    65,
    6,
    73,
    13,
    0,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    15,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    8,
    13,
    0,
    65,
    0,
    33,
    7,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    32,
    7,
    65,
    16,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    1,
    47,
    1,
    8,
    32,
    7,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    8,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    7,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    7,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    1,
    47,
    1,
    8,
    65,
    255,
    255,
    3,
    115,
    32,
    8,
    116,
    32,
    6,
    114,
    34,
    7,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    12,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    11,
    69,
    13,
    0,
    65,
    0,
    33,
    9,
    3,
    64,
    32,
    1,
    40,
    2,
    212,
    128,
    4,
    32,
    1,
    40,
    2,
    216,
    128,
    4,
    32,
    9,
    106,
    65,
    255,
    255,
    1,
    113,
    106,
    65,
    128,
    128,
    8,
    106,
    45,
    0,
    0,
    33,
    10,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    4,
    32,
    10,
    32,
    6,
    65,
    31,
    113,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    2,
    64,
    32,
    6,
    65,
    119,
    75,
    4,
    64,
    32,
    8,
    33,
    6,
    12,
    1,
    11,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    11,
    71,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    255,
    1,
    113,
    34,
    6,
    69,
    13,
    1,
    32,
    4,
    40,
    2,
    24,
    33,
    3,
    32,
    6,
    65,
    4,
    71,
    13,
    0,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    65,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    32,
    4,
    40,
    2,
    20,
    33,
    7,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    14,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    1,
    65,
    145,
    128,
    4,
    106,
    45,
    0,
    0,
    65,
    16,
    113,
    69,
    13,
    1,
    32,
    4,
    32,
    6,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    32,
    1,
    65,
    168,
    128,
    4,
    106,
    40,
    2,
    0,
    34,
    3,
    65,
    24,
    118,
    32,
    6,
    116,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    8,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    8,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    32,
    6,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    3,
    65,
    255,
    1,
    113,
    33,
    8,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    9,
    65,
    120,
    106,
    34,
    6,
    54,
    2,
    24,
    32,
    6,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    9,
    54,
    2,
    24,
    32,
    4,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    32,
    6,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    6,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    6,
    54,
    2,
    24,
    32,
    4,
    32,
    8,
    32,
    3,
    116,
    32,
    7,
    114,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    11,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    7,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    7,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    4,
    32,
    3,
    65,
    3,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    20,
    33,
    6,
    32,
    7,
    65,
    8,
    79,
    4,
    64,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    7,
    54,
    2,
    24,
    32,
    7,
    65,
    7,
    75,
    13,
    0,
    11,
    11,
    32,
    4,
    2,
    127,
    32,
    7,
    69,
    4,
    64,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    65,
    16,
    12,
    1,
    11,
    32,
    4,
    65,
    8,
    54,
    2,
    24,
    32,
    4,
    40,
    2,
    16,
    33,
    5,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    13,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    3,
    65,
    120,
    106,
    34,
    8,
    54,
    2,
    24,
    32,
    8,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    3,
    65,
    8,
    106,
    11,
    54,
    2,
    24,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    79,
    13,
    12,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    34,
    8,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    0,
    11,
    32,
    4,
    32,
    8,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    4,
    65,
    255,
    255,
    3,
    32,
    3,
    116,
    32,
    6,
    114,
    34,
    6,
    54,
    2,
    20,
    3,
    64,
    32,
    5,
    32,
    4,
    40,
    2,
    12,
    34,
    3,
    73,
    4,
    64,
    32,
    4,
    40,
    2,
    8,
    32,
    5,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    16,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    16,
    32,
    4,
    32,
    4,
    40,
    2,
    20,
    65,
    8,
    118,
    34,
    6,
    54,
    2,
    20,
    32,
    4,
    32,
    4,
    40,
    2,
    24,
    65,
    120,
    106,
    34,
    3,
    54,
    2,
    24,
    32,
    3,
    65,
    7,
    75,
    13,
    1,
    12,
    2,
    11,
    11,
    12,
    11,
    11,
    65,
    0,
    33,
    5,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    0,
    65,
    192,
    4,
    16,
    131,
    1,
    26,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    192,
    4,
    106,
    65,
    0,
    65,
    192,
    0,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    66,
    1,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    32,
    1,
    65,
    0,
    54,
    2,
    8,
    32,
    1,
    32,
    4,
    41,
    2,
    20,
    55,
    2,
    184,
    128,
    4,
    32,
    1,
    65,
    216,
    128,
    4,
    106,
    34,
    6,
    32,
    3,
    32,
    6,
    40,
    2,
    0,
    106,
    54,
    2,
    0,
    32,
    1,
    65,
    148,
    128,
    4,
    106,
    34,
    3,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    16,
    34,
    3,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    33,
    6,
    12,
    8,
    11,
    32,
    4,
    45,
    0,
    28,
    33,
    6,
    32,
    2,
    40,
    2,
    8,
    34,
    8,
    4,
    64,
    32,
    8,
    32,
    1,
    65,
    172,
    128,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    6,
    69,
    13,
    4,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    7,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    34,
    8,
    107,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    34,
    9,
    27,
    34,
    6,
    32,
    8,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    1,
    32,
    7,
    32,
    5,
    73,
    13,
    2,
    32,
    6,
    65,
    205,
    153,
    5,
    79,
    13,
    3,
    32,
    2,
    40,
    2,
    20,
    32,
    8,
    106,
    32,
    1,
    40,
    2,
    192,
    128,
    4,
    32,
    6,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    32,
    6,
    106,
    54,
    2,
    176,
    128,
    4,
    32,
    9,
    69,
    13,
    6,
    32,
    1,
    32,
    6,
    54,
    2,
    160,
    128,
    4,
    32,
    1,
    32,
    3,
    32,
    6,
    107,
    54,
    2,
    164,
    128,
    4,
    12,
    6,
    11,
    32,
    3,
    65,
    205,
    153,
    5,
    79,
    13,
    4,
    32,
    2,
    40,
    2,
    20,
    32,
    1,
    40,
    2,
    192,
    128,
    4,
    32,
    3,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    5,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    65,
    127,
    54,
    2,
    0,
    65,
    127,
    12,
    6,
    11,
    32,
    8,
    32,
    5,
    65,
    180,
    147,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    180,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    65,
    204,
    153,
    5,
    65,
    196,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    176,
    128,
    4,
    32,
    3,
    106,
    54,
    2,
    176,
    128,
    4,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    204,
    153,
    5,
    65,
    164,
    147,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    40,
    2,
    164,
    128,
    4,
    11,
    33,
    6,
    65,
    0,
    33,
    5,
    11,
    32,
    0,
    32,
    6,
    54,
    2,
    4,
    32,
    0,
    32,
    5,
    54,
    2,
    0,
    32,
    4,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    5,
    32,
    6,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    8,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    3,
    65,
    164,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    130,
    22,
    1,
    14,
    127,
    35,
    0,
    65,
    144,
    44,
    107,
    34,
    10,
    36,
    0,
    32,
    10,
    65,
    8,
    106,
    65,
    0,
    65,
    132,
    1,
    16,
    131,
    1,
    26,
    32,
    10,
    65,
    140,
    1,
    106,
    65,
    0,
    65,
    132,
    1,
    16,
    131,
    1,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    1,
    65,
    2,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    32,
    10,
    65,
    144,
    2,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    32,
    10,
    65,
    144,
    11,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    32,
    2,
    13,
    1,
    32,
    10,
    65,
    144,
    20,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    26,
    65,
    0,
    12,
    6,
    11,
    32,
    2,
    69,
    13,
    14,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    65,
    128,
    27,
    106,
    33,
    4,
    32,
    2,
    33,
    5,
    3,
    64,
    32,
    4,
    45,
    0,
    0,
    34,
    6,
    65,
    32,
    75,
    13,
    2,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    34,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    12,
    14,
    11,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    33,
    5,
    65,
    0,
    33,
    4,
    3,
    64,
    32,
    4,
    65,
    160,
    2,
    70,
    13,
    2,
    32,
    5,
    47,
    1,
    0,
    34,
    8,
    4,
    64,
    32,
    6,
    65,
    159,
    2,
    75,
    13,
    4,
    32,
    10,
    65,
    144,
    2,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    34,
    14,
    32,
    4,
    59,
    1,
    2,
    32,
    14,
    32,
    8,
    59,
    1,
    0,
    32,
    6,
    65,
    1,
    106,
    33,
    6,
    11,
    32,
    5,
    65,
    2,
    106,
    33,
    5,
    32,
    4,
    65,
    1,
    106,
    34,
    4,
    32,
    2,
    71,
    13,
    0,
    11,
    12,
    3,
    11,
    32,
    6,
    65,
    33,
    65,
    212,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    160,
    2,
    65,
    160,
    2,
    65,
    228,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    244,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    161,
    2,
    79,
    13,
    1,
    65,
    0,
    33,
    14,
    32,
    10,
    65,
    144,
    20,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    26,
    65,
    0,
    32,
    6,
    69,
    13,
    0,
    26,
    32,
    6,
    65,
    2,
    116,
    33,
    5,
    32,
    10,
    65,
    144,
    2,
    106,
    33,
    4,
    3,
    64,
    32,
    10,
    65,
    144,
    20,
    106,
    32,
    4,
    45,
    0,
    0,
    65,
    2,
    116,
    106,
    34,
    8,
    32,
    8,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    45,
    0,
    1,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    144,
    28,
    106,
    34,
    8,
    32,
    8,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    33,
    4,
    32,
    5,
    65,
    124,
    106,
    34,
    5,
    13,
    0,
    11,
    32,
    6,
    33,
    14,
    32,
    10,
    40,
    2,
    144,
    28,
    11,
    32,
    14,
    70,
    27,
    33,
    15,
    32,
    10,
    65,
    144,
    20,
    106,
    33,
    9,
    32,
    10,
    65,
    144,
    11,
    106,
    33,
    11,
    32,
    10,
    65,
    144,
    2,
    106,
    33,
    4,
    32,
    14,
    34,
    5,
    33,
    12,
    65,
    0,
    33,
    6,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    12,
    33,
    7,
    32,
    11,
    33,
    8,
    32,
    5,
    33,
    12,
    32,
    4,
    33,
    11,
    32,
    10,
    65,
    144,
    36,
    106,
    65,
    0,
    65,
    128,
    8,
    16,
    131,
    1,
    26,
    32,
    6,
    65,
    2,
    70,
    13,
    2,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    10,
    65,
    144,
    36,
    106,
    32,
    4,
    106,
    32,
    5,
    54,
    2,
    0,
    32,
    4,
    32,
    9,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    33,
    5,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    65,
    128,
    8,
    71,
    13,
    0,
    11,
    32,
    12,
    4,
    64,
    32,
    11,
    32,
    12,
    65,
    2,
    116,
    106,
    33,
    16,
    32,
    6,
    65,
    3,
    116,
    65,
    8,
    113,
    33,
    17,
    32,
    11,
    33,
    4,
    3,
    64,
    32,
    10,
    65,
    144,
    36,
    106,
    32,
    4,
    47,
    1,
    0,
    34,
    18,
    32,
    17,
    118,
    65,
    255,
    1,
    113,
    65,
    2,
    116,
    106,
    34,
    5,
    40,
    2,
    0,
    34,
    13,
    32,
    7,
    79,
    13,
    3,
    32,
    8,
    32,
    13,
    65,
    2,
    116,
    106,
    34,
    13,
    32,
    4,
    65,
    2,
    106,
    47,
    1,
    0,
    59,
    1,
    2,
    32,
    13,
    32,
    18,
    59,
    1,
    0,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    32,
    16,
    71,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    128,
    8,
    106,
    33,
    9,
    32,
    8,
    33,
    4,
    32,
    7,
    33,
    5,
    32,
    6,
    65,
    1,
    106,
    34,
    13,
    33,
    6,
    32,
    13,
    32,
    15,
    71,
    13,
    0,
    11,
    2,
    64,
    32,
    7,
    14,
    2,
    7,
    4,
    0,
    11,
    32,
    8,
    32,
    8,
    47,
    1,
    0,
    32,
    8,
    47,
    1,
    4,
    106,
    59,
    1,
    0,
    32,
    7,
    65,
    127,
    106,
    34,
    4,
    65,
    2,
    79,
    4,
    64,
    32,
    8,
    65,
    4,
    106,
    33,
    6,
    65,
    0,
    33,
    5,
    65,
    2,
    33,
    11,
    65,
    2,
    33,
    9,
    3,
    64,
    32,
    11,
    65,
    127,
    106,
    33,
    12,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    9,
    32,
    7,
    73,
    4,
    64,
    32,
    5,
    32,
    7,
    79,
    13,
    3,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    34,
    13,
    79,
    13,
    1,
    11,
    32,
    5,
    32,
    7,
    79,
    13,
    3,
    32,
    12,
    32,
    7,
    79,
    13,
    4,
    32,
    6,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    13,
    47,
    1,
    0,
    59,
    1,
    0,
    32,
    13,
    32,
    12,
    59,
    1,
    0,
    32,
    5,
    65,
    1,
    106,
    33,
    5,
    12,
    1,
    11,
    32,
    12,
    32,
    7,
    79,
    13,
    4,
    32,
    6,
    32,
    13,
    59,
    1,
    0,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    11,
    2,
    64,
    32,
    9,
    32,
    7,
    79,
    4,
    64,
    32,
    12,
    32,
    7,
    73,
    13,
    1,
    12,
    21,
    11,
    32,
    5,
    32,
    12,
    79,
    13,
    7,
    32,
    5,
    32,
    7,
    79,
    13,
    5,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    79,
    13,
    7,
    32,
    12,
    32,
    7,
    79,
    13,
    20,
    11,
    32,
    5,
    32,
    7,
    79,
    13,
    5,
    32,
    6,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    13,
    47,
    1,
    0,
    32,
    6,
    47,
    1,
    0,
    106,
    59,
    1,
    0,
    32,
    13,
    32,
    12,
    59,
    1,
    0,
    32,
    5,
    65,
    1,
    106,
    33,
    5,
    12,
    7,
    11,
    32,
    5,
    32,
    7,
    65,
    228,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    244,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    132,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    148,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    164,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    196,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    7,
    79,
    4,
    64,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    212,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    32,
    6,
    47,
    1,
    0,
    106,
    59,
    1,
    0,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    11,
    32,
    6,
    65,
    4,
    106,
    33,
    6,
    32,
    7,
    32,
    11,
    65,
    1,
    106,
    34,
    11,
    71,
    13,
    0,
    11,
    32,
    7,
    65,
    126,
    106,
    33,
    11,
    2,
    64,
    2,
    64,
    32,
    7,
    65,
    1,
    75,
    4,
    64,
    65,
    0,
    33,
    9,
    32,
    8,
    32,
    11,
    65,
    2,
    116,
    106,
    65,
    0,
    59,
    1,
    0,
    32,
    11,
    69,
    13,
    8,
    32,
    7,
    65,
    125,
    106,
    33,
    6,
    32,
    8,
    32,
    7,
    65,
    2,
    116,
    106,
    65,
    116,
    106,
    33,
    5,
    3,
    64,
    32,
    6,
    32,
    7,
    79,
    13,
    2,
    32,
    7,
    32,
    5,
    47,
    1,
    0,
    34,
    12,
    77,
    13,
    3,
    32,
    5,
    32,
    8,
    32,
    12,
    65,
    2,
    116,
    106,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    65,
    127,
    71,
    13,
    0,
    11,
    32,
    11,
    33,
    9,
    12,
    8,
    11,
    32,
    11,
    32,
    7,
    65,
    228,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    7,
    65,
    244,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    32,
    7,
    65,
    132,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    9,
    32,
    7,
    65,
    2,
    116,
    32,
    8,
    106,
    65,
    120,
    106,
    65,
    0,
    59,
    1,
    0,
    12,
    4,
    11,
    32,
    13,
    32,
    7,
    65,
    212,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    2,
    65,
    2,
    65,
    196,
    148,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    65,
    160,
    2,
    65,
    132,
    151,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    65,
    1,
    59,
    1,
    0,
    32,
    8,
    65,
    4,
    106,
    33,
    6,
    12,
    1,
    11,
    65,
    0,
    33,
    11,
    65,
    1,
    33,
    13,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    9,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    9,
    65,
    1,
    106,
    33,
    12,
    32,
    8,
    32,
    9,
    65,
    2,
    116,
    106,
    33,
    5,
    65,
    0,
    33,
    6,
    2,
    64,
    3,
    64,
    32,
    9,
    32,
    7,
    79,
    13,
    1,
    32,
    5,
    47,
    1,
    0,
    32,
    11,
    65,
    255,
    255,
    3,
    113,
    71,
    13,
    2,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    6,
    65,
    1,
    106,
    33,
    6,
    32,
    9,
    65,
    127,
    106,
    34,
    9,
    65,
    127,
    71,
    13,
    0,
    11,
    32,
    12,
    33,
    6,
    65,
    127,
    33,
    9,
    12,
    1,
    11,
    32,
    9,
    32,
    7,
    65,
    148,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    13,
    32,
    6,
    74,
    4,
    64,
    32,
    8,
    32,
    4,
    65,
    2,
    116,
    106,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    7,
    79,
    13,
    3,
    32,
    5,
    32,
    11,
    59,
    1,
    0,
    32,
    5,
    65,
    124,
    106,
    33,
    5,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    13,
    65,
    127,
    106,
    34,
    13,
    32,
    6,
    74,
    13,
    0,
    11,
    11,
    32,
    11,
    65,
    1,
    106,
    33,
    11,
    32,
    6,
    65,
    1,
    116,
    34,
    13,
    65,
    0,
    74,
    13,
    0,
    11,
    32,
    7,
    69,
    13,
    2,
    32,
    8,
    32,
    7,
    65,
    2,
    116,
    106,
    33,
    6,
    12,
    1,
    11,
    32,
    4,
    32,
    7,
    65,
    164,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    33,
    4,
    3,
    64,
    32,
    4,
    47,
    1,
    0,
    34,
    5,
    65,
    33,
    79,
    13,
    3,
    32,
    10,
    65,
    8,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    6,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    65,
    0,
    33,
    7,
    11,
    2,
    64,
    32,
    14,
    65,
    2,
    73,
    13,
    0,
    2,
    64,
    32,
    3,
    65,
    32,
    70,
    4,
    64,
    32,
    10,
    65,
    8,
    106,
    32,
    3,
    65,
    2,
    116,
    106,
    34,
    12,
    40,
    2,
    0,
    33,
    6,
    12,
    1,
    11,
    32,
    3,
    65,
    2,
    116,
    33,
    4,
    32,
    10,
    65,
    12,
    106,
    33,
    6,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    4,
    32,
    6,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    33,
    5,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    65,
    128,
    1,
    71,
    13,
    0,
    11,
    32,
    10,
    65,
    8,
    106,
    32,
    3,
    65,
    2,
    116,
    106,
    34,
    12,
    32,
    12,
    40,
    2,
    0,
    32,
    5,
    106,
    34,
    6,
    54,
    2,
    0,
    32,
    3,
    69,
    13,
    1,
    11,
    32,
    6,
    33,
    11,
    32,
    3,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    4,
    106,
    33,
    4,
    65,
    1,
    33,
    5,
    3,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    5,
    65,
    31,
    113,
    116,
    32,
    11,
    106,
    33,
    11,
    32,
    4,
    65,
    124,
    106,
    33,
    4,
    32,
    3,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    71,
    13,
    0,
    11,
    11,
    65,
    1,
    32,
    3,
    65,
    31,
    113,
    116,
    34,
    13,
    32,
    11,
    79,
    13,
    0,
    32,
    3,
    65,
    2,
    116,
    32,
    10,
    106,
    65,
    12,
    106,
    33,
    9,
    2,
    64,
    3,
    64,
    32,
    12,
    32,
    6,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    13,
    65,
    1,
    106,
    33,
    13,
    32,
    9,
    33,
    5,
    32,
    3,
    33,
    4,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    4,
    65,
    2,
    73,
    13,
    1,
    32,
    4,
    65,
    127,
    106,
    34,
    6,
    65,
    32,
    75,
    13,
    2,
    32,
    5,
    65,
    120,
    106,
    32,
    5,
    65,
    124,
    106,
    34,
    15,
    33,
    5,
    32,
    6,
    33,
    4,
    40,
    2,
    0,
    34,
    16,
    69,
    13,
    0,
    11,
    32,
    15,
    65,
    124,
    106,
    32,
    16,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    6,
    65,
    1,
    106,
    65,
    32,
    75,
    13,
    3,
    32,
    15,
    32,
    15,
    40,
    2,
    0,
    65,
    2,
    106,
    54,
    2,
    0,
    11,
    32,
    11,
    32,
    13,
    70,
    13,
    3,
    32,
    12,
    40,
    2,
    0,
    33,
    6,
    12,
    1,
    11,
    11,
    32,
    4,
    65,
    127,
    106,
    65,
    33,
    65,
    180,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    33,
    65,
    33,
    65,
    196,
    150,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    34,
    11,
    65,
    128,
    27,
    106,
    65,
    0,
    65,
    160,
    2,
    16,
    131,
    1,
    26,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    65,
    192,
    13,
    106,
    65,
    0,
    65,
    192,
    4,
    16,
    131,
    1,
    26,
    32,
    3,
    69,
    13,
    2,
    32,
    8,
    65,
    2,
    106,
    33,
    8,
    65,
    1,
    33,
    6,
    3,
    64,
    32,
    14,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    33,
    73,
    4,
    64,
    32,
    5,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    34,
    4,
    107,
    33,
    14,
    32,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    32,
    5,
    73,
    13,
    3,
    32,
    4,
    69,
    13,
    4,
    65,
    0,
    32,
    4,
    65,
    2,
    116,
    107,
    33,
    4,
    32,
    8,
    32,
    5,
    65,
    2,
    116,
    106,
    33,
    12,
    3,
    64,
    32,
    4,
    32,
    12,
    106,
    47,
    1,
    0,
    34,
    5,
    65,
    159,
    2,
    75,
    13,
    2,
    32,
    5,
    32,
    11,
    106,
    65,
    128,
    27,
    106,
    32,
    6,
    58,
    0,
    0,
    32,
    4,
    65,
    4,
    106,
    34,
    4,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    6,
    65,
    33,
    65,
    164,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    160,
    2,
    65,
    196,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    14,
    32,
    5,
    65,
    180,
    151,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    7,
    65,
    180,
    151,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    3,
    79,
    32,
    6,
    32,
    6,
    32,
    3,
    73,
    106,
    34,
    6,
    32,
    3,
    75,
    114,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    5,
    65,
    33,
    65,
    148,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    11,
    65,
    127,
    106,
    32,
    7,
    65,
    180,
    149,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    33,
    5,
    32,
    10,
    65,
    0,
    54,
    2,
    144,
    1,
    2,
    64,
    32,
    3,
    65,
    2,
    73,
    13,
    0,
    65,
    2,
    33,
    4,
    3,
    64,
    32,
    4,
    65,
    127,
    106,
    34,
    6,
    65,
    33,
    79,
    4,
    64,
    32,
    6,
    65,
    33,
    65,
    212,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    32,
    77,
    4,
    64,
    32,
    4,
    32,
    3,
    79,
    32,
    10,
    65,
    140,
    1,
    106,
    32,
    4,
    65,
    2,
    116,
    106,
    32,
    10,
    65,
    8,
    106,
    32,
    6,
    65,
    2,
    116,
    106,
    40,
    2,
    0,
    32,
    5,
    106,
    65,
    1,
    116,
    34,
    5,
    54,
    2,
    0,
    32,
    4,
    32,
    4,
    32,
    3,
    73,
    106,
    34,
    6,
    33,
    4,
    32,
    6,
    32,
    3,
    75,
    114,
    69,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    4,
    65,
    33,
    65,
    228,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    32,
    1,
    65,
    160,
    2,
    108,
    106,
    34,
    3,
    65,
    160,
    29,
    106,
    33,
    8,
    32,
    3,
    65,
    128,
    27,
    106,
    33,
    9,
    32,
    0,
    32,
    1,
    65,
    192,
    4,
    108,
    106,
    65,
    192,
    13,
    106,
    33,
    7,
    3,
    64,
    32,
    8,
    32,
    9,
    70,
    13,
    1,
    2,
    64,
    32,
    9,
    45,
    0,
    0,
    34,
    0,
    4,
    64,
    32,
    0,
    65,
    32,
    75,
    13,
    1,
    32,
    10,
    65,
    140,
    1,
    106,
    32,
    0,
    65,
    2,
    116,
    106,
    34,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    1,
    106,
    54,
    2,
    0,
    65,
    0,
    33,
    5,
    65,
    0,
    33,
    6,
    3,
    64,
    32,
    4,
    65,
    1,
    113,
    32,
    5,
    65,
    1,
    116,
    114,
    33,
    5,
    32,
    4,
    65,
    1,
    118,
    33,
    4,
    32,
    6,
    65,
    1,
    106,
    34,
    6,
    65,
    255,
    1,
    113,
    32,
    0,
    73,
    13,
    0,
    11,
    32,
    7,
    32,
    5,
    59,
    1,
    0,
    11,
    32,
    7,
    65,
    2,
    106,
    33,
    7,
    32,
    9,
    65,
    1,
    106,
    33,
    9,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    0,
    65,
    33,
    65,
    244,
    151,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    10,
    65,
    144,
    44,
    106,
    36,
    0,
    11,
    154,
    13,
    1,
    11,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    8,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    3,
    70,
    4,
    64,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    96,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    45,
    0,
    240,
    213,
    2,
    33,
    11,
    32,
    1,
    65,
    0,
    58,
    0,
    240,
    213,
    2,
    32,
    1,
    44,
    0,
    243,
    213,
    2,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    80,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    45,
    0,
    242,
    213,
    2,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    4,
    70,
    34,
    10,
    69,
    65,
    0,
    32,
    1,
    45,
    0,
    241,
    213,
    2,
    34,
    9,
    27,
    69,
    4,
    64,
    65,
    8,
    65,
    9,
    32,
    7,
    27,
    33,
    7,
    32,
    1,
    32,
    10,
    32,
    9,
    65,
    0,
    71,
    114,
    58,
    0,
    241,
    213,
    2,
    2,
    64,
    32,
    11,
    65,
    0,
    32,
    6,
    65,
    4,
    70,
    27,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    236,
    85,
    34,
    9,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    3,
    32,
    5,
    32,
    9,
    32,
    9,
    32,
    5,
    75,
    27,
    34,
    2,
    106,
    34,
    5,
    32,
    3,
    73,
    13,
    3,
    32,
    5,
    65,
    129,
    128,
    2,
    79,
    13,
    4,
    32,
    4,
    32,
    1,
    32,
    3,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    2,
    16,
    121,
    26,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    2,
    107,
    34,
    3,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    2,
    106,
    65,
    255,
    255,
    1,
    113,
    54,
    2,
    232,
    85,
    32,
    0,
    65,
    12,
    106,
    32,
    3,
    32,
    1,
    45,
    0,
    243,
    213,
    2,
    114,
    69,
    54,
    2,
    0,
    12,
    16,
    11,
    65,
    0,
    33,
    6,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    65,
    0,
    32,
    7,
    65,
    4,
    114,
    16,
    2,
    32,
    1,
    32,
    8,
    44,
    0,
    4,
    34,
    2,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    3,
    32,
    8,
    40,
    2,
    0,
    33,
    4,
    2,
    64,
    32,
    2,
    65,
    0,
    72,
    4,
    127,
    65,
    125,
    5,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    12,
    2,
    11,
    32,
    1,
    65,
    255,
    1,
    58,
    0,
    243,
    213,
    2,
    65,
    123,
    11,
    33,
    1,
    65,
    1,
    33,
    6,
    11,
    32,
    0,
    32,
    6,
    54,
    2,
    8,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    1,
    54,
    2,
    0,
    12,
    15,
    11,
    32,
    7,
    32,
    7,
    65,
    2,
    114,
    32,
    6,
    65,
    4,
    70,
    27,
    33,
    14,
    32,
    1,
    65,
    240,
    213,
    0,
    106,
    33,
    15,
    32,
    1,
    40,
    2,
    232,
    85,
    33,
    7,
    32,
    3,
    69,
    13,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    7,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    32,
    3,
    75,
    13,
    11,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    6,
    65,
    4,
    70,
    13,
    10,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    10,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    6,
    106,
    34,
    7,
    32,
    10,
    73,
    13,
    17,
    32,
    7,
    65,
    129,
    128,
    2,
    79,
    13,
    16,
    32,
    12,
    32,
    13,
    106,
    33,
    13,
    32,
    4,
    32,
    1,
    32,
    10,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    6,
    16,
    121,
    33,
    10,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    6,
    107,
    34,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    6,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    16,
    54,
    2,
    232,
    85,
    32,
    6,
    32,
    11,
    106,
    33,
    11,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    13,
    5,
    32,
    9,
    65,
    255,
    1,
    113,
    34,
    17,
    69,
    33,
    4,
    32,
    7,
    69,
    33,
    9,
    32,
    7,
    32,
    17,
    69,
    114,
    13,
    7,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    69,
    13,
    7,
    32,
    3,
    32,
    12,
    107,
    34,
    3,
    69,
    13,
    7,
    32,
    6,
    32,
    10,
    106,
    33,
    4,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    12,
    106,
    34,
    2,
    32,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    16,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    3,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    79,
    13,
    0,
    11,
    12,
    11,
    11,
    32,
    0,
    66,
    129,
    128,
    128,
    128,
    96,
    55,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    12,
    13,
    11,
    32,
    3,
    32,
    5,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    7,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    44,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    13,
    7,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    6,
    65,
    4,
    70,
    4,
    64,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    6,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    3,
    106,
    34,
    7,
    32,
    6,
    73,
    13,
    6,
    32,
    7,
    65,
    128,
    128,
    2,
    75,
    13,
    7,
    32,
    4,
    32,
    1,
    32,
    6,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    3,
    16,
    121,
    33,
    7,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    3,
    107,
    34,
    4,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    3,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    12,
    54,
    2,
    232,
    85,
    32,
    3,
    32,
    11,
    106,
    33,
    11,
    65,
    1,
    33,
    10,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    4,
    64,
    65,
    125,
    33,
    6,
    12,
    12,
    11,
    65,
    123,
    33,
    6,
    2,
    64,
    32,
    9,
    65,
    255,
    1,
    113,
    14,
    2,
    6,
    12,
    0,
    11,
    32,
    5,
    32,
    3,
    107,
    34,
    5,
    69,
    13,
    11,
    32,
    3,
    32,
    7,
    106,
    33,
    4,
    65,
    0,
    33,
    3,
    32,
    8,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    12,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    11,
    12,
    8,
    11,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    6,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    11,
    106,
    34,
    7,
    32,
    6,
    73,
    13,
    4,
    32,
    7,
    65,
    129,
    128,
    2,
    79,
    13,
    5,
    32,
    4,
    32,
    1,
    32,
    6,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    11,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    11,
    107,
    34,
    2,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    11,
    106,
    65,
    255,
    255,
    1,
    113,
    54,
    2,
    232,
    85,
    32,
    9,
    65,
    0,
    78,
    13,
    1,
    11,
    65,
    1,
    33,
    10,
    65,
    125,
    33,
    6,
    12,
    8,
    11,
    65,
    1,
    33,
    10,
    65,
    123,
    33,
    6,
    32,
    9,
    65,
    1,
    70,
    13,
    7,
    32,
    9,
    69,
    33,
    4,
    32,
    2,
    69,
    33,
    9,
    11,
    32,
    4,
    32,
    9,
    113,
    33,
    6,
    65,
    0,
    33,
    10,
    12,
    6,
    11,
    12,
    4,
    11,
    32,
    6,
    32,
    7,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    7,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    0,
    33,
    11,
    3,
    64,
    32,
    1,
    32,
    7,
    54,
    2,
    236,
    85,
    32,
    1,
    40,
    2,
    232,
    85,
    34,
    10,
    32,
    5,
    32,
    7,
    32,
    7,
    32,
    5,
    75,
    27,
    34,
    6,
    106,
    34,
    7,
    32,
    10,
    73,
    13,
    6,
    32,
    7,
    65,
    128,
    128,
    2,
    75,
    13,
    5,
    32,
    12,
    32,
    13,
    106,
    33,
    13,
    32,
    4,
    32,
    1,
    32,
    10,
    106,
    65,
    240,
    213,
    0,
    106,
    32,
    6,
    16,
    121,
    33,
    7,
    32,
    1,
    32,
    1,
    40,
    2,
    236,
    85,
    32,
    6,
    107,
    34,
    4,
    54,
    2,
    236,
    85,
    32,
    1,
    32,
    1,
    40,
    2,
    232,
    85,
    32,
    6,
    106,
    65,
    255,
    255,
    1,
    113,
    34,
    16,
    54,
    2,
    232,
    85,
    32,
    6,
    32,
    11,
    106,
    33,
    11,
    65,
    1,
    33,
    10,
    32,
    9,
    65,
    24,
    116,
    65,
    24,
    117,
    65,
    0,
    72,
    4,
    64,
    65,
    125,
    33,
    6,
    12,
    4,
    11,
    32,
    9,
    65,
    255,
    1,
    113,
    69,
    13,
    2,
    32,
    5,
    32,
    6,
    107,
    34,
    5,
    69,
    4,
    64,
    65,
    123,
    33,
    6,
    12,
    4,
    11,
    32,
    6,
    32,
    7,
    106,
    33,
    4,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    12,
    106,
    34,
    2,
    32,
    3,
    32,
    12,
    107,
    34,
    3,
    32,
    15,
    65,
    128,
    128,
    2,
    32,
    16,
    32,
    14,
    16,
    2,
    32,
    1,
    32,
    8,
    45,
    0,
    4,
    34,
    9,
    58,
    0,
    243,
    213,
    2,
    32,
    8,
    40,
    2,
    8,
    33,
    7,
    32,
    3,
    32,
    8,
    40,
    2,
    0,
    34,
    12,
    79,
    13,
    0,
    11,
    11,
    32,
    12,
    32,
    3,
    65,
    204,
    186,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    123,
    65,
    1,
    32,
    4,
    27,
    33,
    6,
    32,
    4,
    65,
    0,
    71,
    33,
    10,
    11,
    32,
    0,
    32,
    10,
    54,
    2,
    8,
    32,
    0,
    32,
    11,
    54,
    2,
    4,
    32,
    0,
    32,
    13,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    6,
    54,
    2,
    0,
    11,
    32,
    8,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    7,
    65,
    128,
    128,
    2,
    65,
    220,
    186,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    10,
    32,
    7,
    65,
    220,
    186,
    192,
    0,
    16,
    100,
    0,
    11,
    174,
    12,
    1,
    1,
    127,
    32,
    0,
    40,
    2,
    0,
    65,
    127,
    115,
    33,
    3,
    32,
    2,
    65,
    192,
    0,
    79,
    4,
    64,
    3,
    64,
    32,
    1,
    65,
    51,
    106,
    45,
    0,
    0,
    32,
    1,
    65,
    35,
    106,
    45,
    0,
    0,
    32,
    1,
    65,
    19,
    106,
    45,
    0,
    0,
    32,
    1,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    1,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    2,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    3,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    4,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    5,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    6,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    7,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    9,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    10,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    11,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    12,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    13,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    14,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    15,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    20,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    21,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    22,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    23,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    24,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    25,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    26,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    27,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    28,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    29,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    30,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    31,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    18,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    17,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    16,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    36,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    37,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    38,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    39,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    40,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    41,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    42,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    43,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    44,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    45,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    46,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    47,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    34,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    33,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    32,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    34,
    3,
    65,
    24,
    118,
    115,
    65,
    2,
    116,
    65,
    172,
    156,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    52,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    148,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    53,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    140,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    54,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    132,
    193,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    55,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    252,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    56,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    244,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    57,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    236,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    58,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    228,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    59,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    220,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    60,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    212,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    61,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    204,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    62,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    196,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    1,
    65,
    63,
    106,
    45,
    0,
    0,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    32,
    1,
    65,
    50,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    16,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    164,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    49,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    8,
    118,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    172,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    32,
    1,
    65,
    48,
    106,
    45,
    0,
    0,
    32,
    3,
    65,
    255,
    1,
    113,
    115,
    65,
    2,
    116,
    65,
    172,
    180,
    193,
    0,
    106,
    40,
    2,
    0,
    115,
    33,
    3,
    32,
    1,
    65,
    64,
    107,
    33,
    1,
    32,
    2,
    65,
    64,
    106,
    34,
    2,
    65,
    63,
    75,
    13,
    0,
    11,
    11,
    32,
    2,
    4,
    64,
    3,
    64,
    32,
    1,
    45,
    0,
    0,
    32,
    3,
    115,
    65,
    255,
    1,
    113,
    65,
    2,
    116,
    65,
    172,
    188,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    118,
    115,
    33,
    3,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    32,
    3,
    65,
    127,
    115,
    54,
    2,
    0,
    11,
    151,
    11,
    1,
    27,
    127,
    35,
    0,
    65,
    144,
    1,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    20,
    34,
    4,
    65,
    2,
    77,
    4,
    64,
    32,
    0,
    65,
    56,
    106,
    33,
    21,
    32,
    2,
    65,
    56,
    106,
    33,
    22,
    32,
    2,
    65,
    40,
    106,
    33,
    23,
    32,
    2,
    65,
    32,
    106,
    33,
    24,
    32,
    2,
    65,
    24,
    106,
    33,
    25,
    32,
    2,
    65,
    16,
    106,
    33,
    26,
    3,
    64,
    32,
    0,
    32,
    4,
    65,
    2,
    116,
    106,
    65,
    40,
    106,
    40,
    2,
    0,
    33,
    12,
    32,
    2,
    65,
    64,
    107,
    66,
    0,
    55,
    3,
    0,
    32,
    22,
    66,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    66,
    0,
    55,
    3,
    0,
    32,
    23,
    66,
    0,
    55,
    3,
    0,
    32,
    24,
    66,
    0,
    55,
    3,
    0,
    32,
    25,
    66,
    0,
    55,
    3,
    0,
    32,
    26,
    66,
    0,
    55,
    3,
    0,
    32,
    2,
    66,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    204,
    0,
    106,
    65,
    0,
    65,
    196,
    0,
    16,
    131,
    1,
    26,
    32,
    0,
    32,
    4,
    65,
    160,
    27,
    108,
    34,
    27,
    106,
    34,
    14,
    65,
    56,
    106,
    65,
    0,
    65,
    128,
    16,
    16,
    131,
    1,
    33,
    28,
    32,
    14,
    65,
    184,
    16,
    106,
    65,
    0,
    65,
    128,
    9,
    16,
    131,
    1,
    26,
    2,
    127,
    2,
    64,
    32,
    12,
    65,
    161,
    2,
    73,
    4,
    64,
    32,
    12,
    69,
    4,
    64,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    6,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    9,
    65,
    0,
    33,
    8,
    65,
    0,
    33,
    11,
    65,
    0,
    33,
    13,
    65,
    0,
    33,
    7,
    65,
    0,
    33,
    15,
    65,
    0,
    33,
    16,
    65,
    0,
    33,
    17,
    65,
    0,
    33,
    18,
    65,
    0,
    33,
    19,
    65,
    0,
    33,
    20,
    65,
    0,
    12,
    3,
    11,
    32,
    14,
    65,
    184,
    25,
    106,
    33,
    4,
    32,
    12,
    33,
    6,
    3,
    64,
    32,
    4,
    45,
    0,
    0,
    34,
    5,
    65,
    15,
    77,
    4,
    64,
    32,
    2,
    65,
    8,
    106,
    32,
    5,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    5,
    65,
    16,
    65,
    200,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    12,
    65,
    160,
    2,
    65,
    184,
    177,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    2,
    40,
    2,
    68,
    33,
    4,
    32,
    2,
    40,
    2,
    64,
    33,
    6,
    32,
    2,
    40,
    2,
    56,
    33,
    10,
    32,
    2,
    40,
    2,
    52,
    33,
    9,
    32,
    2,
    40,
    2,
    48,
    33,
    8,
    32,
    2,
    40,
    2,
    44,
    33,
    11,
    32,
    2,
    40,
    2,
    40,
    33,
    13,
    32,
    2,
    40,
    2,
    36,
    33,
    7,
    32,
    2,
    40,
    2,
    32,
    33,
    15,
    32,
    2,
    40,
    2,
    28,
    33,
    16,
    32,
    2,
    40,
    2,
    24,
    33,
    17,
    32,
    2,
    40,
    2,
    20,
    33,
    18,
    32,
    2,
    40,
    2,
    16,
    33,
    19,
    32,
    2,
    40,
    2,
    12,
    33,
    20,
    32,
    2,
    40,
    2,
    60,
    11,
    33,
    5,
    32,
    2,
    32,
    20,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    84,
    32,
    2,
    32,
    3,
    32,
    19,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    88,
    32,
    2,
    32,
    3,
    32,
    18,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    92,
    32,
    2,
    32,
    3,
    32,
    17,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    96,
    32,
    2,
    32,
    3,
    32,
    16,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    100,
    32,
    2,
    32,
    3,
    32,
    15,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    104,
    32,
    2,
    32,
    3,
    32,
    7,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    108,
    32,
    2,
    32,
    3,
    32,
    13,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    112,
    32,
    2,
    32,
    3,
    32,
    11,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    116,
    32,
    2,
    32,
    3,
    32,
    8,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    120,
    32,
    2,
    32,
    3,
    32,
    9,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    124,
    32,
    2,
    32,
    3,
    32,
    10,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    128,
    1,
    32,
    2,
    32,
    3,
    32,
    5,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    132,
    1,
    32,
    2,
    32,
    3,
    32,
    6,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    136,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    106,
    65,
    1,
    116,
    34,
    3,
    54,
    2,
    140,
    1,
    2,
    64,
    2,
    127,
    65,
    27,
    32,
    3,
    65,
    128,
    128,
    4,
    70,
    32,
    4,
    32,
    6,
    32,
    5,
    32,
    10,
    32,
    9,
    32,
    8,
    32,
    11,
    32,
    13,
    32,
    7,
    32,
    15,
    32,
    16,
    32,
    17,
    32,
    18,
    32,
    19,
    32,
    20,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    65,
    2,
    73,
    114,
    69,
    13,
    0,
    26,
    2,
    64,
    32,
    12,
    69,
    13,
    0,
    32,
    21,
    32,
    27,
    106,
    33,
    15,
    65,
    0,
    33,
    11,
    65,
    255,
    255,
    3,
    33,
    7,
    3,
    64,
    32,
    11,
    65,
    160,
    2,
    32,
    11,
    65,
    160,
    2,
    75,
    27,
    33,
    13,
    3,
    64,
    32,
    11,
    34,
    10,
    32,
    13,
    70,
    13,
    7,
    32,
    10,
    65,
    1,
    106,
    33,
    11,
    2,
    64,
    2,
    64,
    32,
    10,
    32,
    14,
    106,
    65,
    184,
    25,
    106,
    45,
    0,
    0,
    34,
    8,
    69,
    13,
    0,
    32,
    8,
    65,
    16,
    75,
    13,
    10,
    32,
    2,
    65,
    204,
    0,
    106,
    32,
    8,
    65,
    2,
    116,
    106,
    34,
    5,
    32,
    5,
    40,
    2,
    0,
    34,
    6,
    65,
    1,
    106,
    54,
    2,
    0,
    65,
    0,
    33,
    4,
    65,
    0,
    33,
    5,
    3,
    64,
    32,
    6,
    65,
    1,
    113,
    32,
    4,
    34,
    9,
    65,
    1,
    116,
    114,
    33,
    4,
    32,
    6,
    65,
    1,
    118,
    33,
    6,
    32,
    5,
    65,
    1,
    106,
    34,
    5,
    65,
    255,
    1,
    113,
    32,
    8,
    73,
    13,
    0,
    11,
    32,
    8,
    65,
    11,
    79,
    13,
    1,
    32,
    4,
    65,
    255,
    7,
    75,
    13,
    0,
    32,
    8,
    65,
    9,
    116,
    32,
    10,
    114,
    33,
    5,
    32,
    15,
    32,
    4,
    65,
    1,
    116,
    106,
    33,
    6,
    65,
    1,
    32,
    8,
    65,
    31,
    113,
    116,
    34,
    10,
    65,
    1,
    116,
    33,
    9,
    3,
    64,
    32,
    6,
    32,
    5,
    59,
    1,
    0,
    32,
    6,
    32,
    9,
    106,
    33,
    6,
    32,
    4,
    32,
    10,
    106,
    34,
    4,
    65,
    128,
    8,
    73,
    13,
    0,
    11,
    11,
    32,
    11,
    32,
    12,
    73,
    13,
    1,
    12,
    3,
    11,
    11,
    2,
    127,
    32,
    7,
    32,
    28,
    32,
    4,
    65,
    255,
    7,
    113,
    65,
    1,
    116,
    106,
    34,
    5,
    47,
    1,
    0,
    34,
    6,
    13,
    0,
    26,
    32,
    5,
    32,
    7,
    59,
    1,
    0,
    32,
    7,
    34,
    6,
    65,
    126,
    106,
    11,
    33,
    5,
    32,
    9,
    65,
    8,
    118,
    65,
    255,
    255,
    255,
    3,
    113,
    33,
    9,
    2,
    64,
    32,
    8,
    65,
    12,
    73,
    4,
    64,
    32,
    5,
    33,
    7,
    12,
    1,
    11,
    65,
    11,
    33,
    4,
    3,
    64,
    32,
    9,
    65,
    1,
    118,
    34,
    9,
    65,
    1,
    113,
    32,
    6,
    65,
    127,
    115,
    106,
    34,
    6,
    65,
    16,
    116,
    65,
    16,
    117,
    33,
    7,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    192,
    4,
    79,
    13,
    10,
    32,
    4,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    14,
    32,
    7,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    34,
    7,
    47,
    1,
    0,
    34,
    6,
    4,
    64,
    32,
    5,
    33,
    7,
    12,
    1,
    11,
    32,
    7,
    32,
    5,
    59,
    1,
    0,
    32,
    5,
    34,
    6,
    65,
    126,
    106,
    34,
    7,
    33,
    5,
    11,
    32,
    4,
    65,
    255,
    1,
    113,
    32,
    8,
    73,
    13,
    0,
    11,
    11,
    32,
    9,
    65,
    1,
    118,
    65,
    1,
    113,
    32,
    6,
    65,
    127,
    115,
    106,
    34,
    6,
    65,
    16,
    116,
    65,
    16,
    117,
    33,
    5,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    192,
    4,
    79,
    13,
    9,
    32,
    14,
    32,
    5,
    65,
    1,
    116,
    106,
    65,
    184,
    16,
    106,
    32,
    10,
    59,
    1,
    0,
    32,
    11,
    32,
    12,
    73,
    13,
    0,
    11,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    20,
    34,
    5,
    14,
    3,
    0,
    3,
    1,
    3,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    12,
    65,
    12,
    12,
    1,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    12,
    65,
    10,
    11,
    32,
    2,
    65,
    144,
    1,
    106,
    36,
    0,
    65,
    8,
    116,
    65,
    1,
    114,
    15,
    11,
    32,
    0,
    32,
    5,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    20,
    32,
    4,
    65,
    3,
    73,
    13,
    0,
    11,
    11,
    32,
    4,
    65,
    3,
    65,
    168,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    13,
    65,
    160,
    2,
    65,
    216,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    17,
    65,
    232,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    65,
    192,
    4,
    65,
    248,
    177,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    192,
    4,
    65,
    136,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    164,
    11,
    2,
    19,
    127,
    5,
    126,
    35,
    0,
    65,
    144,
    1,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    14,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    65,
    208,
    0,
    106,
    33,
    16,
    32,
    0,
    65,
    232,
    0,
    106,
    33,
    10,
    32,
    0,
    65,
    140,
    1,
    106,
    33,
    17,
    32,
    3,
    65,
    4,
    114,
    33,
    18,
    32,
    3,
    65,
    236,
    0,
    106,
    33,
    11,
    32,
    0,
    65,
    216,
    0,
    106,
    33,
    13,
    32,
    0,
    65,
    148,
    1,
    106,
    33,
    7,
    32,
    0,
    65,
    252,
    0,
    106,
    33,
    19,
    32,
    0,
    65,
    240,
    0,
    106,
    33,
    20,
    32,
    0,
    65,
    228,
    0,
    106,
    33,
    21,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    36,
    32,
    3,
    65,
    0,
    58,
    0,
    32,
    32,
    3,
    32,
    2,
    54,
    2,
    28,
    32,
    3,
    32,
    1,
    54,
    2,
    24,
    32,
    3,
    32,
    7,
    40,
    2,
    0,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    140,
    1,
    54,
    2,
    16,
    32,
    3,
    65,
    224,
    0,
    106,
    32,
    3,
    65,
    16,
    106,
    16,
    13,
    32,
    3,
    65,
    216,
    0,
    106,
    32,
    11,
    65,
    32,
    106,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    32,
    11,
    65,
    24,
    106,
    41,
    2,
    0,
    34,
    23,
    55,
    3,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    32,
    11,
    65,
    16,
    106,
    41,
    2,
    0,
    34,
    24,
    55,
    3,
    0,
    32,
    3,
    65,
    64,
    107,
    32,
    11,
    65,
    8,
    106,
    41,
    2,
    0,
    34,
    25,
    55,
    3,
    0,
    32,
    3,
    32,
    11,
    41,
    2,
    0,
    34,
    26,
    55,
    3,
    56,
    32,
    3,
    41,
    2,
    100,
    33,
    22,
    32,
    3,
    40,
    2,
    96,
    32,
    3,
    40,
    2,
    36,
    33,
    6,
    32,
    3,
    65,
    48,
    106,
    34,
    9,
    32,
    4,
    54,
    2,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    4,
    32,
    23,
    55,
    3,
    0,
    32,
    3,
    65,
    32,
    106,
    34,
    15,
    32,
    24,
    55,
    3,
    0,
    32,
    3,
    65,
    24,
    106,
    34,
    8,
    32,
    25,
    55,
    3,
    0,
    32,
    3,
    32,
    26,
    55,
    3,
    16,
    69,
    4,
    64,
    32,
    3,
    65,
    128,
    1,
    106,
    34,
    5,
    32,
    9,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    248,
    0,
    106,
    34,
    9,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    15,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    15,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    16,
    55,
    3,
    96,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    69,
    13,
    0,
    2,
    64,
    32,
    0,
    40,
    2,
    96,
    34,
    8,
    69,
    13,
    0,
    32,
    21,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    40,
    2,
    108,
    34,
    8,
    69,
    13,
    0,
    32,
    20,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    120,
    34,
    8,
    69,
    13,
    0,
    32,
    19,
    40,
    2,
    0,
    34,
    12,
    69,
    13,
    0,
    32,
    8,
    32,
    12,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    32,
    22,
    55,
    2,
    96,
    32,
    0,
    65,
    1,
    54,
    2,
    92,
    32,
    10,
    32,
    3,
    41,
    3,
    96,
    55,
    2,
    0,
    32,
    10,
    65,
    8,
    106,
    32,
    15,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    16,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    24,
    106,
    32,
    9,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    10,
    65,
    32,
    106,
    32,
    5,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    33,
    4,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    4,
    107,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    32,
    22,
    55,
    3,
    96,
    32,
    3,
    65,
    224,
    0,
    106,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    17,
    71,
    13,
    3,
    32,
    17,
    32,
    7,
    40,
    2,
    0,
    32,
    2,
    16,
    75,
    32,
    0,
    40,
    2,
    140,
    1,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    2,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    2,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    2,
    54,
    2,
    4,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    45,
    0,
    96,
    65,
    1,
    77,
    4,
    64,
    32,
    2,
    33,
    4,
    12,
    3,
    11,
    32,
    3,
    40,
    2,
    100,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    100,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    70,
    13,
    10,
    32,
    3,
    40,
    2,
    4,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    224,
    0,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    47,
    32,
    3,
    41,
    2,
    100,
    33,
    22,
    32,
    3,
    40,
    2,
    96,
    65,
    1,
    70,
    13,
    3,
    2,
    64,
    32,
    2,
    32,
    22,
    167,
    34,
    4,
    77,
    32,
    22,
    66,
    128,
    128,
    128,
    128,
    240,
    31,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    82,
    114,
    13,
    0,
    32,
    13,
    40,
    2,
    0,
    34,
    9,
    65,
    7,
    75,
    13,
    0,
    65,
    8,
    32,
    9,
    107,
    34,
    5,
    32,
    2,
    32,
    4,
    107,
    34,
    6,
    32,
    6,
    32,
    5,
    75,
    27,
    34,
    6,
    32,
    4,
    106,
    34,
    5,
    32,
    6,
    73,
    13,
    5,
    32,
    5,
    32,
    2,
    75,
    13,
    6,
    32,
    16,
    32,
    9,
    32,
    6,
    16,
    75,
    32,
    0,
    40,
    2,
    80,
    32,
    13,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    4,
    106,
    32,
    6,
    16,
    121,
    26,
    32,
    13,
    32,
    13,
    40,
    2,
    0,
    32,
    6,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    5,
    54,
    2,
    4,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    3,
    32,
    4,
    54,
    2,
    4,
    11,
    32,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    5,
    32,
    0,
    65,
    24,
    106,
    65,
    244,
    128,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    236,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    228,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    220,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    6,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    23,
    66,
    8,
    136,
    33,
    22,
    32,
    23,
    167,
    33,
    14,
    12,
    11,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    6,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    8,
    11,
    32,
    3,
    32,
    3,
    41,
    3,
    96,
    55,
    2,
    4,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    12,
    6,
    11,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    22,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    22,
    167,
    32,
    5,
    65,
    228,
    129,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    32,
    2,
    65,
    228,
    129,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    204,
    128,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    18,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    22,
    32,
    3,
    45,
    0,
    4,
    33,
    14,
    12,
    3,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    0,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    73,
    13,
    0,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    144,
    1,
    106,
    36,
    0,
    32,
    14,
    173,
    66,
    255,
    1,
    131,
    32,
    22,
    66,
    8,
    134,
    132,
    11,
    165,
    9,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    240,
    3,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    124,
    32,
    3,
    65,
    248,
    2,
    106,
    34,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    66,
    1,
    55,
    3,
    240,
    2,
    32,
    3,
    65,
    168,
    1,
    106,
    65,
    0,
    16,
    136,
    1,
    32,
    3,
    65,
    32,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    24,
    106,
    32,
    3,
    41,
    3,
    240,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    16,
    106,
    32,
    3,
    65,
    232,
    2,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    3,
    65,
    224,
    2,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    216,
    2,
    55,
    3,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    196,
    0,
    106,
    66,
    128,
    128,
    2,
    55,
    2,
    0,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    184,
    1,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    48,
    106,
    32,
    3,
    65,
    176,
    1,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    168,
    1,
    55,
    3,
    40,
    32,
    3,
    32,
    4,
    54,
    2,
    64,
    65,
    8,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    69,
    13,
    1,
    32,
    3,
    65,
    148,
    1,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    212,
    0,
    106,
    66,
    8,
    55,
    2,
    0,
    32,
    3,
    66,
    1,
    55,
    2,
    140,
    1,
    32,
    3,
    65,
    0,
    54,
    2,
    92,
    32,
    3,
    32,
    4,
    54,
    2,
    80,
    32,
    3,
    32,
    1,
    32,
    2,
    16,
    10,
    33,
    8,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    3,
    65,
    152,
    1,
    16,
    121,
    26,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    8,
    167,
    34,
    4,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    163,
    1,
    106,
    32,
    8,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    161,
    1,
    106,
    32,
    8,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    4,
    58,
    0,
    156,
    1,
    32,
    3,
    65,
    1,
    54,
    2,
    152,
    1,
    32,
    3,
    32,
    8,
    66,
    8,
    136,
    62,
    0,
    157,
    1,
    2,
    64,
    32,
    3,
    40,
    2,
    192,
    1,
    69,
    13,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    16,
    82,
    34,
    8,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    192,
    1,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    40,
    2,
    196,
    1,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    224,
    1,
    106,
    40,
    2,
    0,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    236,
    1,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    232,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    252,
    1,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    248,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    40,
    2,
    132,
    2,
    69,
    13,
    0,
    2,
    64,
    32,
    3,
    65,
    136,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    140,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    65,
    148,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    152,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    160,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    164,
    2,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    184,
    2,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    180,
    2,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    152,
    1,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    216,
    2,
    106,
    32,
    3,
    65,
    168,
    1,
    106,
    65,
    152,
    1,
    16,
    121,
    26,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    54,
    32,
    3,
    40,
    2,
    152,
    1,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    152,
    1,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    192,
    2,
    32,
    3,
    65,
    192,
    2,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    180,
    1,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    236,
    2,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    172,
    1,
    32,
    3,
    66,
    2,
    55,
    2,
    220,
    2,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    216,
    2,
    32,
    3,
    32,
    4,
    58,
    0,
    215,
    2,
    32,
    3,
    32,
    3,
    65,
    192,
    2,
    106,
    54,
    2,
    176,
    1,
    32,
    3,
    32,
    3,
    65,
    215,
    2,
    106,
    54,
    2,
    168,
    1,
    32,
    3,
    32,
    3,
    65,
    168,
    1,
    106,
    54,
    2,
    232,
    2,
    32,
    3,
    65,
    200,
    2,
    106,
    32,
    3,
    65,
    216,
    2,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    200,
    2,
    34,
    5,
    32,
    3,
    40,
    2,
    208,
    2,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    204,
    2,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    192,
    2,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    196,
    2,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    196,
    2,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    160,
    1,
    106,
    41,
    3,
    0,
    33,
    8,
    32,
    3,
    40,
    2,
    156,
    1,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    2,
    2,
    64,
    32,
    8,
    167,
    34,
    5,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    4,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    240,
    3,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    8,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    169,
    8,
    1,
    6,
    127,
    35,
    0,
    65,
    240,
    0,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    65,
    1,
    33,
    6,
    32,
    1,
    33,
    7,
    2,
    64,
    32,
    1,
    65,
    129,
    2,
    73,
    13,
    0,
    65,
    0,
    32,
    1,
    107,
    33,
    9,
    65,
    128,
    2,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    8,
    32,
    1,
    79,
    13,
    0,
    65,
    0,
    33,
    6,
    32,
    0,
    32,
    8,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    0,
    32,
    8,
    33,
    7,
    12,
    2,
    11,
    32,
    8,
    65,
    127,
    106,
    33,
    7,
    65,
    0,
    33,
    6,
    32,
    8,
    65,
    1,
    70,
    13,
    1,
    32,
    8,
    32,
    9,
    106,
    32,
    7,
    33,
    8,
    65,
    1,
    71,
    13,
    0,
    11,
    11,
    32,
    5,
    32,
    7,
    54,
    2,
    20,
    32,
    5,
    32,
    0,
    54,
    2,
    16,
    32,
    5,
    65,
    0,
    65,
    5,
    32,
    6,
    27,
    54,
    2,
    28,
    32,
    5,
    65,
    228,
    196,
    193,
    0,
    65,
    136,
    203,
    193,
    0,
    32,
    6,
    27,
    54,
    2,
    24,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    1,
    75,
    34,
    6,
    32,
    3,
    32,
    1,
    75,
    114,
    69,
    4,
    64,
    32,
    2,
    32,
    3,
    75,
    13,
    1,
    2,
    64,
    32,
    2,
    69,
    32,
    1,
    32,
    2,
    70,
    114,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    77,
    13,
    1,
    32,
    0,
    32,
    2,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    1,
    11,
    32,
    3,
    33,
    2,
    11,
    32,
    5,
    32,
    2,
    54,
    2,
    32,
    32,
    2,
    65,
    0,
    32,
    1,
    32,
    2,
    71,
    27,
    69,
    4,
    64,
    32,
    2,
    33,
    6,
    12,
    3,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    3,
    3,
    64,
    2,
    64,
    32,
    2,
    32,
    1,
    79,
    13,
    0,
    32,
    0,
    32,
    2,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    0,
    32,
    2,
    33,
    6,
    32,
    5,
    65,
    36,
    106,
    12,
    5,
    11,
    32,
    2,
    65,
    127,
    106,
    33,
    6,
    32,
    2,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    32,
    3,
    70,
    32,
    6,
    33,
    2,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    5,
    32,
    2,
    32,
    3,
    32,
    6,
    27,
    54,
    2,
    40,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    3,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    66,
    3,
    55,
    2,
    52,
    32,
    5,
    65,
    176,
    203,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    88,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    40,
    106,
    54,
    2,
    72,
    12,
    3,
    11,
    32,
    5,
    65,
    228,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    4,
    54,
    2,
    0,
    32,
    5,
    66,
    4,
    55,
    2,
    52,
    32,
    5,
    65,
    236,
    203,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    96,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    88,
    32,
    5,
    32,
    5,
    65,
    12,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    8,
    106,
    54,
    2,
    72,
    12,
    2,
    11,
    32,
    5,
    65,
    36,
    106,
    11,
    33,
    8,
    2,
    64,
    32,
    1,
    32,
    6,
    70,
    13,
    0,
    65,
    1,
    33,
    3,
    65,
    0,
    33,
    9,
    2,
    64,
    32,
    0,
    32,
    6,
    106,
    34,
    7,
    44,
    0,
    0,
    34,
    2,
    65,
    0,
    78,
    4,
    64,
    32,
    5,
    32,
    2,
    65,
    255,
    1,
    113,
    54,
    2,
    36,
    32,
    5,
    65,
    40,
    106,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    1,
    106,
    34,
    1,
    33,
    3,
    32,
    1,
    32,
    7,
    65,
    1,
    106,
    71,
    4,
    64,
    32,
    7,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    9,
    32,
    7,
    65,
    2,
    106,
    33,
    3,
    11,
    32,
    2,
    65,
    31,
    113,
    33,
    10,
    2,
    64,
    32,
    2,
    65,
    255,
    1,
    113,
    65,
    224,
    1,
    73,
    4,
    64,
    32,
    9,
    32,
    10,
    65,
    6,
    116,
    114,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    0,
    32,
    1,
    33,
    7,
    32,
    1,
    32,
    3,
    71,
    4,
    127,
    32,
    3,
    65,
    1,
    106,
    33,
    7,
    32,
    3,
    45,
    0,
    0,
    65,
    63,
    113,
    5,
    32,
    0,
    11,
    32,
    9,
    65,
    6,
    116,
    114,
    33,
    0,
    32,
    2,
    65,
    255,
    1,
    113,
    65,
    240,
    1,
    73,
    4,
    64,
    32,
    0,
    32,
    10,
    65,
    12,
    116,
    114,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    2,
    32,
    1,
    32,
    7,
    71,
    4,
    127,
    32,
    7,
    45,
    0,
    0,
    65,
    63,
    113,
    5,
    32,
    2,
    11,
    32,
    10,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    0,
    65,
    6,
    116,
    114,
    114,
    34,
    2,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    2,
    11,
    32,
    5,
    32,
    2,
    54,
    2,
    36,
    65,
    1,
    33,
    3,
    32,
    5,
    65,
    40,
    106,
    33,
    1,
    32,
    2,
    65,
    128,
    1,
    73,
    13,
    0,
    65,
    2,
    33,
    3,
    32,
    2,
    65,
    128,
    16,
    73,
    13,
    0,
    65,
    3,
    65,
    4,
    32,
    2,
    65,
    128,
    128,
    4,
    73,
    27,
    33,
    3,
    11,
    32,
    5,
    32,
    6,
    54,
    2,
    40,
    32,
    5,
    32,
    3,
    32,
    6,
    106,
    54,
    2,
    44,
    32,
    5,
    65,
    196,
    0,
    106,
    65,
    5,
    54,
    2,
    0,
    32,
    5,
    65,
    236,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    228,
    0,
    106,
    65,
    62,
    54,
    2,
    0,
    32,
    5,
    65,
    220,
    0,
    106,
    65,
    63,
    54,
    2,
    0,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    192,
    0,
    54,
    2,
    0,
    32,
    5,
    66,
    5,
    55,
    2,
    52,
    32,
    5,
    65,
    192,
    204,
    193,
    0,
    54,
    2,
    48,
    32,
    5,
    32,
    1,
    54,
    2,
    88,
    32,
    5,
    32,
    8,
    54,
    2,
    80,
    32,
    5,
    65,
    61,
    54,
    2,
    76,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    64,
    32,
    5,
    32,
    5,
    65,
    24,
    106,
    54,
    2,
    104,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    96,
    32,
    5,
    32,
    5,
    65,
    32,
    106,
    54,
    2,
    72,
    12,
    1,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    32,
    4,
    16,
    114,
    0,
    11,
    32,
    5,
    65,
    48,
    106,
    32,
    4,
    16,
    130,
    1,
    0,
    11,
    176,
    8,
    2,
    11,
    127,
    1,
    126,
    35,
    0,
    65,
    208,
    0,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    16,
    124,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    32,
    2,
    65,
    40,
    106,
    65,
    0,
    59,
    1,
    0,
    32,
    2,
    66,
    0,
    55,
    3,
    32,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    2,
    65,
    32,
    106,
    65,
    10,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    32,
    2,
    45,
    0,
    32,
    65,
    31,
    70,
    4,
    64,
    32,
    2,
    45,
    0,
    33,
    65,
    139,
    1,
    70,
    13,
    1,
    11,
    16,
    90,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    2,
    45,
    0,
    34,
    65,
    8,
    71,
    4,
    64,
    16,
    90,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    5,
    11,
    32,
    2,
    45,
    0,
    41,
    33,
    9,
    32,
    2,
    40,
    2,
    36,
    33,
    10,
    32,
    2,
    45,
    0,
    35,
    34,
    6,
    65,
    4,
    113,
    69,
    13,
    3,
    32,
    2,
    65,
    0,
    59,
    1,
    64,
    32,
    2,
    32,
    2,
    65,
    64,
    107,
    65,
    2,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    2,
    2,
    64,
    32,
    2,
    47,
    1,
    64,
    34,
    3,
    69,
    4,
    64,
    65,
    1,
    33,
    5,
    12,
    1,
    11,
    32,
    3,
    16,
    139,
    1,
    34,
    5,
    69,
    13,
    2,
    11,
    32,
    2,
    32,
    5,
    32,
    3,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    3,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    3,
    69,
    13,
    4,
    32,
    5,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    4,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    3,
    11,
    32,
    3,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    6,
    65,
    8,
    113,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    56,
    32,
    2,
    66,
    1,
    55,
    3,
    48,
    32,
    2,
    32,
    2,
    54,
    2,
    60,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    2,
    64,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    70,
    13,
    0,
    3,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    45,
    0,
    65,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    56,
    34,
    1,
    32,
    2,
    40,
    2,
    52,
    70,
    4,
    127,
    32,
    2,
    65,
    48,
    106,
    32,
    1,
    65,
    1,
    16,
    75,
    32,
    2,
    40,
    2,
    56,
    5,
    32,
    1,
    11,
    32,
    2,
    40,
    2,
    48,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    2,
    32,
    2,
    40,
    2,
    56,
    65,
    1,
    106,
    54,
    2,
    56,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    56,
    33,
    11,
    32,
    2,
    40,
    2,
    48,
    33,
    8,
    32,
    2,
    40,
    2,
    52,
    33,
    7,
    11,
    32,
    6,
    65,
    16,
    113,
    13,
    1,
    65,
    0,
    12,
    2,
    11,
    32,
    2,
    41,
    2,
    68,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    2,
    40,
    2,
    52,
    34,
    0,
    69,
    13,
    4,
    32,
    2,
    40,
    2,
    48,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    12,
    4,
    11,
    32,
    2,
    65,
    0,
    54,
    2,
    56,
    32,
    2,
    66,
    1,
    55,
    3,
    48,
    32,
    2,
    32,
    2,
    54,
    2,
    60,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    2,
    64,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    70,
    13,
    0,
    3,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    13,
    3,
    32,
    2,
    45,
    0,
    65,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    56,
    34,
    1,
    32,
    2,
    40,
    2,
    52,
    70,
    4,
    127,
    32,
    2,
    65,
    48,
    106,
    32,
    1,
    65,
    1,
    16,
    75,
    32,
    2,
    40,
    2,
    56,
    5,
    32,
    1,
    11,
    32,
    2,
    40,
    2,
    48,
    106,
    32,
    4,
    58,
    0,
    0,
    32,
    2,
    32,
    2,
    40,
    2,
    56,
    65,
    1,
    106,
    54,
    2,
    56,
    32,
    2,
    65,
    64,
    107,
    32,
    2,
    65,
    60,
    106,
    16,
    70,
    32,
    2,
    45,
    0,
    64,
    34,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    52,
    33,
    4,
    32,
    2,
    40,
    2,
    56,
    33,
    12,
    32,
    2,
    40,
    2,
    48,
    11,
    33,
    1,
    32,
    6,
    65,
    2,
    113,
    69,
    13,
    3,
    32,
    2,
    16,
    147,
    1,
    33,
    6,
    32,
    2,
    65,
    0,
    59,
    1,
    64,
    32,
    2,
    32,
    2,
    65,
    64,
    107,
    65,
    2,
    16,
    41,
    34,
    13,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    2,
    47,
    1,
    64,
    32,
    6,
    65,
    255,
    255,
    3,
    113,
    70,
    13,
    4,
    16,
    79,
    33,
    13,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    1,
    69,
    32,
    4,
    69,
    114,
    13,
    1,
    32,
    1,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    2,
    41,
    2,
    68,
    33,
    13,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    13,
    55,
    2,
    4,
    32,
    2,
    40,
    2,
    52,
    34,
    0,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    48,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    7,
    69,
    32,
    8,
    69,
    114,
    13,
    0,
    32,
    8,
    32,
    7,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    69,
    32,
    5,
    69,
    114,
    13,
    1,
    32,
    5,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    44,
    106,
    32,
    9,
    58,
    0,
    0,
    32,
    0,
    65,
    40,
    106,
    32,
    10,
    54,
    2,
    0,
    32,
    0,
    65,
    36,
    106,
    32,
    12,
    54,
    2,
    0,
    32,
    0,
    65,
    32,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    28,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    24,
    106,
    32,
    11,
    54,
    2,
    0,
    32,
    0,
    65,
    20,
    106,
    32,
    7,
    54,
    2,
    0,
    32,
    0,
    65,
    16,
    106,
    32,
    8,
    54,
    2,
    0,
    32,
    0,
    65,
    12,
    106,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    3,
    54,
    2,
    0,
    11,
    32,
    2,
    65,
    208,
    0,
    106,
    36,
    0,
    11,
    152,
    7,
    1,
    10,
    127,
    32,
    0,
    40,
    2,
    16,
    33,
    3,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    34,
    12,
    65,
    1,
    70,
    4,
    64,
    32,
    3,
    65,
    1,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    65,
    1,
    70,
    13,
    0,
    12,
    2,
    11,
    32,
    1,
    32,
    2,
    106,
    33,
    3,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    20,
    106,
    40,
    2,
    0,
    34,
    8,
    69,
    4,
    64,
    32,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    1,
    33,
    4,
    3,
    64,
    32,
    3,
    32,
    4,
    34,
    7,
    70,
    13,
    2,
    32,
    7,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    7,
    44,
    0,
    0,
    34,
    6,
    65,
    127,
    74,
    13,
    0,
    32,
    6,
    65,
    255,
    1,
    113,
    33,
    9,
    2,
    127,
    32,
    3,
    32,
    4,
    70,
    4,
    64,
    65,
    0,
    33,
    10,
    32,
    3,
    12,
    1,
    11,
    32,
    7,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    10,
    32,
    7,
    65,
    2,
    106,
    34,
    4,
    11,
    33,
    6,
    32,
    9,
    65,
    224,
    1,
    73,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    6,
    70,
    4,
    64,
    65,
    0,
    33,
    11,
    32,
    3,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    33,
    11,
    32,
    6,
    65,
    1,
    106,
    34,
    4,
    11,
    33,
    6,
    32,
    9,
    65,
    240,
    1,
    73,
    13,
    0,
    32,
    3,
    32,
    6,
    70,
    4,
    127,
    65,
    0,
    5,
    32,
    6,
    65,
    1,
    106,
    33,
    4,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    9,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    10,
    65,
    12,
    116,
    114,
    32,
    11,
    65,
    6,
    116,
    114,
    114,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    3,
    11,
    32,
    4,
    32,
    7,
    107,
    32,
    5,
    106,
    33,
    5,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    13,
    0,
    11,
    11,
    32,
    3,
    32,
    4,
    70,
    13,
    0,
    2,
    64,
    32,
    4,
    44,
    0,
    0,
    34,
    7,
    65,
    127,
    74,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    4,
    65,
    1,
    106,
    70,
    4,
    64,
    32,
    3,
    33,
    8,
    65,
    0,
    12,
    1,
    11,
    32,
    4,
    65,
    2,
    106,
    33,
    8,
    32,
    4,
    45,
    0,
    1,
    65,
    63,
    113,
    65,
    6,
    116,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    65,
    224,
    1,
    73,
    13,
    0,
    2,
    127,
    32,
    3,
    32,
    8,
    70,
    4,
    64,
    32,
    3,
    33,
    6,
    65,
    0,
    12,
    1,
    11,
    32,
    8,
    65,
    1,
    106,
    33,
    6,
    32,
    8,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    65,
    240,
    1,
    73,
    13,
    0,
    32,
    7,
    65,
    255,
    1,
    113,
    33,
    7,
    114,
    33,
    4,
    32,
    3,
    32,
    6,
    70,
    4,
    127,
    65,
    0,
    5,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    7,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    4,
    65,
    6,
    116,
    114,
    114,
    65,
    128,
    128,
    196,
    0,
    70,
    13,
    1,
    11,
    2,
    64,
    32,
    5,
    69,
    32,
    2,
    32,
    5,
    70,
    114,
    69,
    4,
    64,
    65,
    0,
    33,
    3,
    32,
    5,
    32,
    2,
    79,
    13,
    1,
    32,
    1,
    32,
    5,
    106,
    44,
    0,
    0,
    65,
    64,
    72,
    13,
    1,
    11,
    32,
    1,
    33,
    3,
    11,
    32,
    5,
    32,
    2,
    32,
    3,
    27,
    33,
    2,
    32,
    3,
    32,
    1,
    32,
    3,
    27,
    33,
    1,
    11,
    32,
    12,
    65,
    1,
    70,
    13,
    0,
    12,
    1,
    11,
    2,
    64,
    32,
    2,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    5,
    32,
    1,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    3,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    32,
    4,
    32,
    0,
    40,
    2,
    12,
    34,
    6,
    79,
    13,
    2,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    5,
    32,
    1,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    3,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    5,
    65,
    127,
    106,
    34,
    5,
    13,
    0,
    11,
    12,
    1,
    11,
    65,
    0,
    33,
    4,
    32,
    0,
    40,
    2,
    12,
    34,
    6,
    13,
    0,
    12,
    1,
    11,
    65,
    0,
    33,
    3,
    32,
    6,
    32,
    4,
    107,
    34,
    4,
    33,
    5,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    0,
    32,
    0,
    45,
    0,
    32,
    34,
    6,
    32,
    6,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    1,
    0,
    1,
    2,
    11,
    32,
    4,
    65,
    1,
    118,
    33,
    3,
    32,
    4,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    5,
    12,
    1,
    11,
    65,
    0,
    33,
    5,
    32,
    4,
    33,
    3,
    11,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    2,
    127,
    2,
    64,
    3,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    4,
    64,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    4,
    65,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    2,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    26,
    32,
    5,
    65,
    1,
    106,
    33,
    3,
    32,
    0,
    40,
    2,
    28,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    33,
    0,
    3,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    32,
    4,
    32,
    1,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    65,
    1,
    11,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    2,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    153,
    8,
    2,
    11,
    127,
    1,
    126,
    65,
    1,
    33,
    9,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    24,
    65,
    34,
    32,
    2,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    13,
    0,
    2,
    64,
    32,
    1,
    69,
    4,
    64,
    12,
    1,
    11,
    32,
    0,
    32,
    1,
    106,
    33,
    10,
    32,
    0,
    34,
    6,
    33,
    12,
    3,
    64,
    2,
    64,
    32,
    6,
    65,
    1,
    106,
    33,
    5,
    2,
    64,
    2,
    64,
    32,
    6,
    44,
    0,
    0,
    34,
    7,
    65,
    0,
    78,
    4,
    64,
    32,
    7,
    65,
    255,
    1,
    113,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    5,
    32,
    10,
    70,
    4,
    64,
    65,
    0,
    33,
    4,
    32,
    10,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    1,
    65,
    63,
    113,
    33,
    4,
    32,
    6,
    65,
    2,
    106,
    34,
    5,
    11,
    33,
    6,
    32,
    7,
    65,
    31,
    113,
    33,
    11,
    32,
    7,
    65,
    255,
    1,
    113,
    34,
    13,
    65,
    224,
    1,
    73,
    4,
    64,
    32,
    4,
    32,
    11,
    65,
    6,
    116,
    114,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    6,
    32,
    10,
    70,
    4,
    64,
    65,
    0,
    33,
    9,
    32,
    10,
    12,
    1,
    11,
    32,
    6,
    45,
    0,
    0,
    65,
    63,
    113,
    33,
    9,
    32,
    6,
    65,
    1,
    106,
    34,
    5,
    11,
    33,
    7,
    32,
    9,
    32,
    4,
    65,
    6,
    116,
    114,
    33,
    4,
    32,
    13,
    65,
    240,
    1,
    73,
    4,
    64,
    32,
    4,
    32,
    11,
    65,
    12,
    116,
    114,
    33,
    4,
    12,
    1,
    11,
    2,
    127,
    32,
    7,
    32,
    10,
    70,
    4,
    64,
    32,
    5,
    33,
    6,
    65,
    0,
    12,
    1,
    11,
    32,
    7,
    65,
    1,
    106,
    33,
    6,
    32,
    7,
    45,
    0,
    0,
    65,
    63,
    113,
    11,
    32,
    11,
    65,
    18,
    116,
    65,
    128,
    128,
    240,
    0,
    113,
    32,
    4,
    65,
    6,
    116,
    114,
    114,
    34,
    4,
    65,
    128,
    128,
    196,
    0,
    71,
    13,
    1,
    12,
    2,
    11,
    32,
    5,
    33,
    6,
    11,
    65,
    2,
    33,
    5,
    65,
    244,
    0,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    119,
    106,
    14,
    31,
    5,
    1,
    3,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    3,
    3,
    4,
    2,
    11,
    65,
    242,
    0,
    33,
    7,
    12,
    4,
    11,
    65,
    238,
    0,
    33,
    7,
    12,
    3,
    11,
    32,
    4,
    65,
    220,
    0,
    70,
    13,
    1,
    11,
    32,
    4,
    16,
    40,
    69,
    4,
    64,
    32,
    4,
    16,
    21,
    13,
    3,
    11,
    32,
    4,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    11,
    32,
    4,
    33,
    7,
    11,
    2,
    64,
    2,
    64,
    32,
    8,
    32,
    3,
    73,
    13,
    0,
    32,
    3,
    69,
    32,
    1,
    32,
    3,
    70,
    114,
    69,
    4,
    64,
    32,
    3,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    3,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    1,
    11,
    32,
    8,
    69,
    32,
    1,
    32,
    8,
    70,
    114,
    69,
    4,
    64,
    32,
    8,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    8,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    1,
    11,
    32,
    2,
    40,
    2,
    24,
    32,
    0,
    32,
    3,
    106,
    32,
    8,
    32,
    3,
    107,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    1,
    65,
    1,
    15,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    8,
    65,
    160,
    201,
    193,
    0,
    16,
    12,
    0,
    11,
    3,
    64,
    32,
    5,
    33,
    11,
    65,
    1,
    33,
    9,
    65,
    220,
    0,
    33,
    3,
    65,
    1,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    11,
    65,
    1,
    107,
    14,
    3,
    1,
    5,
    0,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    14,
    66,
    32,
    136,
    167,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    5,
    3,
    2,
    1,
    0,
    6,
    5,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    48,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    245,
    0,
    33,
    3,
    12,
    7,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    132,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    251,
    0,
    33,
    3,
    12,
    6,
    11,
    65,
    48,
    65,
    215,
    0,
    32,
    7,
    32,
    14,
    167,
    34,
    5,
    65,
    2,
    116,
    65,
    28,
    113,
    118,
    65,
    15,
    113,
    34,
    3,
    65,
    10,
    73,
    27,
    32,
    3,
    106,
    33,
    3,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    16,
    132,
    32,
    5,
    69,
    13,
    4,
    26,
    32,
    14,
    66,
    127,
    124,
    66,
    255,
    255,
    255,
    255,
    15,
    131,
    32,
    14,
    66,
    128,
    128,
    128,
    128,
    112,
    131,
    132,
    12,
    4,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    33,
    14,
    65,
    3,
    33,
    5,
    65,
    253,
    0,
    33,
    3,
    12,
    4,
    11,
    65,
    0,
    33,
    5,
    32,
    7,
    33,
    3,
    12,
    3,
    11,
    2,
    127,
    65,
    1,
    32,
    4,
    65,
    128,
    1,
    73,
    13,
    0,
    26,
    65,
    2,
    32,
    4,
    65,
    128,
    16,
    73,
    13,
    0,
    26,
    65,
    3,
    65,
    4,
    32,
    4,
    65,
    128,
    128,
    4,
    73,
    27,
    11,
    32,
    8,
    106,
    33,
    3,
    12,
    4,
    11,
    32,
    14,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    192,
    0,
    132,
    11,
    33,
    14,
    65,
    3,
    33,
    5,
    11,
    32,
    2,
    40,
    2,
    24,
    32,
    3,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    8,
    32,
    12,
    107,
    32,
    6,
    106,
    33,
    8,
    32,
    6,
    33,
    12,
    32,
    6,
    32,
    10,
    71,
    13,
    1,
    11,
    11,
    32,
    3,
    69,
    32,
    1,
    32,
    3,
    70,
    114,
    13,
    0,
    32,
    3,
    32,
    1,
    79,
    13,
    2,
    32,
    0,
    32,
    3,
    106,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    2,
    11,
    65,
    1,
    33,
    9,
    32,
    2,
    40,
    2,
    24,
    32,
    0,
    32,
    3,
    106,
    32,
    1,
    32,
    3,
    107,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    2,
    40,
    2,
    24,
    65,
    34,
    32,
    2,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    33,
    9,
    11,
    32,
    9,
    15,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    1,
    65,
    176,
    201,
    193,
    0,
    16,
    12,
    0,
    11,
    229,
    7,
    2,
    11,
    127,
    2,
    126,
    32,
    1,
    65,
    33,
    106,
    45,
    0,
    0,
    33,
    11,
    32,
    1,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    8,
    32,
    1,
    65,
    16,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    1,
    40,
    2,
    28,
    33,
    9,
    32,
    1,
    45,
    0,
    32,
    33,
    12,
    32,
    1,
    40,
    2,
    20,
    33,
    3,
    32,
    1,
    40,
    2,
    12,
    33,
    5,
    32,
    1,
    41,
    2,
    4,
    33,
    14,
    32,
    1,
    40,
    2,
    0,
    33,
    7,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    10,
    16,
    139,
    1,
    34,
    1,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    34,
    10,
    66,
    138,
    128,
    128,
    128,
    160,
    1,
    55,
    2,
    0,
    2,
    64,
    32,
    7,
    69,
    13,
    0,
    32,
    0,
    65,
    10,
    65,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    106,
    32,
    14,
    66,
    32,
    136,
    34,
    15,
    60,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    10,
    40,
    2,
    0,
    32,
    4,
    70,
    4,
    127,
    32,
    0,
    32,
    4,
    65,
    1,
    16,
    75,
    32,
    1,
    40,
    2,
    0,
    5,
    32,
    4,
    11,
    32,
    0,
    40,
    2,
    0,
    106,
    32,
    14,
    66,
    40,
    136,
    60,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    32,
    15,
    167,
    34,
    4,
    16,
    75,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    0,
    106,
    32,
    7,
    32,
    4,
    16,
    121,
    26,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    65,
    4,
    33,
    4,
    32,
    14,
    167,
    34,
    1,
    69,
    13,
    0,
    32,
    7,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    5,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    6,
    16,
    75,
    32,
    4,
    65,
    8,
    114,
    33,
    4,
    32,
    6,
    69,
    4,
    64,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    5,
    32,
    6,
    106,
    33,
    7,
    32,
    1,
    40,
    2,
    0,
    34,
    10,
    32,
    0,
    40,
    2,
    0,
    106,
    33,
    13,
    65,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    13,
    106,
    32,
    1,
    32,
    5,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    6,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    71,
    13,
    0,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    7,
    32,
    10,
    32,
    5,
    107,
    106,
    54,
    2,
    0,
    32,
    5,
    65,
    0,
    58,
    0,
    0,
    32,
    6,
    69,
    13,
    0,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    3,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    8,
    16,
    75,
    32,
    4,
    65,
    16,
    114,
    33,
    4,
    32,
    8,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    32,
    8,
    106,
    33,
    5,
    32,
    1,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    40,
    2,
    0,
    106,
    33,
    7,
    65,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    7,
    106,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    8,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    71,
    13,
    0,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    5,
    32,
    6,
    32,
    3,
    107,
    106,
    54,
    2,
    0,
    32,
    3,
    65,
    0,
    58,
    0,
    0,
    32,
    8,
    69,
    13,
    0,
    32,
    3,
    32,
    8,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    69,
    13,
    1,
    32,
    0,
    40,
    2,
    0,
    65,
    31,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    1,
    77,
    13,
    2,
    32,
    0,
    40,
    2,
    0,
    65,
    139,
    1,
    58,
    0,
    1,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    2,
    77,
    13,
    3,
    32,
    0,
    40,
    2,
    0,
    65,
    8,
    58,
    0,
    2,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    3,
    77,
    13,
    4,
    32,
    0,
    40,
    2,
    0,
    32,
    4,
    58,
    0,
    3,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    4,
    77,
    13,
    5,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    58,
    0,
    4,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    5,
    77,
    13,
    6,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    8,
    118,
    58,
    0,
    5,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    6,
    77,
    13,
    7,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    16,
    118,
    58,
    0,
    6,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    7,
    77,
    13,
    8,
    32,
    0,
    40,
    2,
    0,
    32,
    9,
    65,
    24,
    118,
    58,
    0,
    7,
    32,
    0,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    8,
    77,
    13,
    9,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    65,
    2,
    73,
    65,
    2,
    116,
    65,
    2,
    32,
    2,
    65,
    9,
    73,
    27,
    58,
    0,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    65,
    9,
    77,
    13,
    10,
    32,
    0,
    40,
    2,
    0,
    32,
    11,
    65,
    127,
    32,
    12,
    27,
    58,
    0,
    9,
    15,
    11,
    65,
    10,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    1,
    32,
    1,
    65,
    164,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    2,
    32,
    3,
    65,
    180,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    3,
    32,
    1,
    65,
    196,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    4,
    32,
    3,
    65,
    212,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    5,
    32,
    1,
    65,
    228,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    6,
    32,
    3,
    65,
    244,
    142,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    7,
    32,
    1,
    65,
    132,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    8,
    32,
    3,
    65,
    148,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    9,
    32,
    1,
    65,
    164,
    143,
    192,
    0,
    16,
    98,
    0,
    11,
    172,
    7,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    8,
    106,
    65,
    0,
    16,
    136,
    1,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    48,
    106,
    34,
    5,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    44,
    32,
    3,
    66,
    1,
    55,
    3,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    44,
    33,
    10,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    5,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    3,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    3,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    195,
    0,
    106,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    193,
    0,
    106,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    9,
    58,
    0,
    60,
    32,
    3,
    65,
    1,
    54,
    2,
    56,
    32,
    3,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    61,
    2,
    64,
    32,
    3,
    40,
    2,
    96,
    69,
    13,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    16,
    58,
    34,
    10,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    96,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    88,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    108,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    184,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    176,
    1,
    106,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    61,
    32,
    3,
    40,
    2,
    56,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    120,
    32,
    3,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    76,
    32,
    3,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    3,
    32,
    4,
    58,
    0,
    143,
    1,
    32,
    3,
    32,
    3,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    3,
    32,
    3,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    3,
    32,
    3,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    3,
    65,
    128,
    1,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    128,
    1,
    34,
    5,
    32,
    3,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    124,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    64,
    107,
    41,
    3,
    0,
    33,
    10,
    32,
    3,
    40,
    2,
    60,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    5,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    172,
    7,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    8,
    106,
    65,
    1,
    16,
    136,
    1,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    4,
    4,
    64,
    32,
    3,
    65,
    48,
    106,
    34,
    5,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    3,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    44,
    32,
    3,
    66,
    1,
    55,
    3,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    43,
    33,
    10,
    32,
    3,
    65,
    240,
    0,
    106,
    34,
    4,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    232,
    0,
    106,
    34,
    5,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    3,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    3,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    127,
    2,
    64,
    32,
    3,
    2,
    127,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    3,
    65,
    195,
    0,
    106,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    0,
    32,
    3,
    65,
    193,
    0,
    106,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    0,
    32,
    3,
    32,
    9,
    58,
    0,
    60,
    32,
    3,
    65,
    1,
    54,
    2,
    56,
    32,
    3,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    61,
    2,
    64,
    32,
    3,
    40,
    2,
    96,
    69,
    13,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    16,
    58,
    34,
    10,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    4,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    96,
    34,
    4,
    69,
    13,
    0,
    32,
    3,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    5,
    69,
    13,
    0,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    88,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    3,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    32,
    3,
    40,
    2,
    108,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    12,
    1,
    11,
    32,
    3,
    65,
    184,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    176,
    1,
    106,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    3,
    65,
    56,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    61,
    32,
    3,
    40,
    2,
    56,
    65,
    1,
    71,
    13,
    1,
    32,
    3,
    65,
    56,
    106,
    65,
    4,
    114,
    11,
    41,
    2,
    0,
    55,
    3,
    120,
    32,
    3,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    4,
    32,
    3,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    3,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    10,
    54,
    2,
    76,
    32,
    3,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    3,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    3,
    32,
    4,
    58,
    0,
    143,
    1,
    32,
    3,
    32,
    3,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    3,
    32,
    3,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    3,
    32,
    3,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    3,
    65,
    128,
    1,
    106,
    32,
    3,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    3,
    40,
    2,
    128,
    1,
    34,
    5,
    32,
    3,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    3,
    40,
    2,
    124,
    34,
    5,
    40,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    3,
    65,
    64,
    107,
    41,
    3,
    0,
    33,
    10,
    32,
    3,
    40,
    2,
    60,
    33,
    4,
    65,
    0,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    5,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    4,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    4,
    32,
    5,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    4,
    32,
    5,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    218,
    6,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    8,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    65,
    0,
    16,
    126,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    3,
    4,
    64,
    32,
    5,
    65,
    48,
    106,
    34,
    4,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    5,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    44,
    32,
    5,
    66,
    1,
    55,
    3,
    32,
    32,
    5,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    45,
    33,
    10,
    32,
    5,
    65,
    240,
    0,
    106,
    34,
    3,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    34,
    4,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    5,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    5,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    5,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    5,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    9,
    58,
    0,
    56,
    32,
    5,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    63,
    32,
    5,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    61,
    32,
    5,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    57,
    32,
    5,
    65,
    200,
    0,
    106,
    16,
    77,
    32,
    5,
    41,
    3,
    56,
    33,
    10,
    12,
    1,
    11,
    32,
    5,
    65,
    184,
    1,
    106,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    176,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    57,
    34,
    10,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    168,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    168,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    120,
    32,
    5,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    76,
    32,
    5,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    143,
    1,
    32,
    5,
    32,
    5,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    5,
    65,
    128,
    1,
    106,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    128,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    124,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    172,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    176,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    64,
    32,
    5,
    32,
    6,
    54,
    2,
    60,
    32,
    5,
    32,
    3,
    54,
    2,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    32,
    5,
    41,
    2,
    60,
    33,
    10,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    4,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    218,
    6,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    192,
    1,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    8,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    65,
    1,
    16,
    126,
    2,
    64,
    2,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    3,
    4,
    64,
    32,
    5,
    65,
    48,
    106,
    34,
    4,
    66,
    128,
    128,
    2,
    55,
    3,
    0,
    32,
    5,
    65,
    40,
    106,
    34,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    3,
    54,
    2,
    44,
    32,
    5,
    66,
    1,
    55,
    3,
    32,
    32,
    5,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    42,
    33,
    10,
    32,
    5,
    65,
    240,
    0,
    106,
    34,
    3,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    34,
    4,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    224,
    0,
    106,
    34,
    6,
    32,
    5,
    41,
    3,
    32,
    55,
    3,
    0,
    32,
    5,
    65,
    216,
    0,
    106,
    34,
    7,
    32,
    5,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    208,
    0,
    106,
    34,
    8,
    32,
    5,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    8,
    55,
    3,
    72,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    10,
    167,
    34,
    9,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    9,
    58,
    0,
    56,
    32,
    5,
    32,
    10,
    66,
    56,
    136,
    60,
    0,
    63,
    32,
    5,
    32,
    10,
    66,
    40,
    136,
    61,
    0,
    61,
    32,
    5,
    32,
    10,
    66,
    8,
    136,
    62,
    0,
    57,
    32,
    5,
    65,
    200,
    0,
    106,
    16,
    77,
    32,
    5,
    41,
    3,
    56,
    33,
    10,
    12,
    1,
    11,
    32,
    5,
    65,
    184,
    1,
    106,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    176,
    1,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    168,
    1,
    106,
    32,
    6,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    160,
    1,
    106,
    32,
    7,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    65,
    152,
    1,
    106,
    32,
    8,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    5,
    32,
    5,
    41,
    3,
    72,
    55,
    3,
    144,
    1,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    57,
    34,
    10,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    168,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    168,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    11,
    32,
    5,
    32,
    10,
    55,
    3,
    120,
    32,
    5,
    65,
    248,
    0,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    212,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    164,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    76,
    32,
    5,
    66,
    2,
    55,
    2,
    148,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    144,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    143,
    1,
    32,
    5,
    32,
    5,
    65,
    248,
    0,
    106,
    54,
    2,
    80,
    32,
    5,
    32,
    5,
    65,
    143,
    1,
    106,
    54,
    2,
    72,
    32,
    5,
    32,
    5,
    65,
    200,
    0,
    106,
    54,
    2,
    160,
    1,
    32,
    5,
    65,
    128,
    1,
    106,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    128,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    136,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    132,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    120,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    124,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    124,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    172,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    176,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    64,
    32,
    5,
    32,
    6,
    54,
    2,
    60,
    32,
    5,
    32,
    3,
    54,
    2,
    56,
    32,
    5,
    65,
    144,
    1,
    106,
    16,
    77,
    32,
    5,
    41,
    2,
    60,
    33,
    10,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    13,
    1,
    2,
    64,
    32,
    10,
    167,
    34,
    4,
    32,
    10,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    3,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    192,
    1,
    106,
    36,
    0,
    15,
    11,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    177,
    6,
    1,
    7,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    255,
    255,
    3,
    77,
    4,
    64,
    32,
    0,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    6,
    65,
    176,
    205,
    193,
    0,
    33,
    1,
    32,
    0,
    65,
    255,
    1,
    113,
    33,
    7,
    3,
    64,
    2,
    64,
    32,
    1,
    65,
    2,
    106,
    33,
    5,
    32,
    2,
    32,
    1,
    45,
    0,
    1,
    34,
    4,
    106,
    33,
    3,
    2,
    64,
    32,
    6,
    32,
    1,
    45,
    0,
    0,
    34,
    1,
    70,
    4,
    64,
    32,
    3,
    32,
    2,
    73,
    13,
    6,
    32,
    3,
    65,
    163,
    2,
    79,
    13,
    7,
    32,
    2,
    65,
    130,
    206,
    193,
    0,
    106,
    33,
    1,
    3,
    64,
    32,
    4,
    69,
    13,
    2,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    1,
    45,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    7,
    71,
    13,
    0,
    11,
    65,
    0,
    33,
    4,
    12,
    5,
    11,
    32,
    1,
    32,
    6,
    75,
    13,
    1,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    130,
    206,
    193,
    0,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    130,
    206,
    193,
    0,
    71,
    13,
    1,
    11,
    11,
    32,
    0,
    65,
    255,
    255,
    3,
    113,
    33,
    3,
    65,
    164,
    208,
    193,
    0,
    33,
    1,
    65,
    1,
    33,
    4,
    3,
    64,
    32,
    1,
    65,
    1,
    106,
    33,
    0,
    2,
    127,
    32,
    1,
    45,
    0,
    0,
    34,
    2,
    65,
    24,
    116,
    65,
    24,
    117,
    34,
    5,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    65,
    217,
    210,
    193,
    0,
    70,
    13,
    7,
    32,
    1,
    45,
    0,
    1,
    32,
    5,
    65,
    255,
    0,
    113,
    65,
    8,
    116,
    114,
    33,
    2,
    32,
    1,
    65,
    2,
    106,
    12,
    1,
    11,
    32,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    2,
    107,
    34,
    3,
    65,
    0,
    72,
    13,
    2,
    32,
    4,
    65,
    1,
    115,
    33,
    4,
    32,
    1,
    65,
    217,
    210,
    193,
    0,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    0,
    65,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    0,
    65,
    128,
    254,
    3,
    113,
    65,
    8,
    118,
    33,
    6,
    65,
    217,
    210,
    193,
    0,
    33,
    1,
    32,
    0,
    65,
    255,
    1,
    113,
    33,
    7,
    3,
    64,
    2,
    64,
    32,
    1,
    65,
    2,
    106,
    33,
    5,
    32,
    2,
    32,
    1,
    45,
    0,
    1,
    34,
    4,
    106,
    33,
    3,
    2,
    64,
    32,
    6,
    32,
    1,
    45,
    0,
    0,
    34,
    1,
    70,
    4,
    64,
    32,
    3,
    32,
    2,
    73,
    13,
    9,
    32,
    3,
    65,
    176,
    1,
    79,
    13,
    10,
    32,
    2,
    65,
    165,
    211,
    193,
    0,
    106,
    33,
    1,
    3,
    64,
    32,
    4,
    69,
    13,
    2,
    32,
    4,
    65,
    127,
    106,
    33,
    4,
    32,
    1,
    45,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    7,
    71,
    13,
    0,
    11,
    65,
    0,
    33,
    4,
    12,
    5,
    11,
    32,
    1,
    32,
    6,
    75,
    13,
    1,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    165,
    211,
    193,
    0,
    71,
    13,
    2,
    12,
    1,
    11,
    32,
    3,
    33,
    2,
    32,
    5,
    34,
    1,
    65,
    165,
    211,
    193,
    0,
    71,
    13,
    1,
    11,
    11,
    32,
    0,
    65,
    255,
    255,
    3,
    113,
    33,
    3,
    65,
    212,
    212,
    193,
    0,
    33,
    1,
    65,
    1,
    33,
    4,
    3,
    64,
    32,
    1,
    65,
    1,
    106,
    33,
    0,
    2,
    127,
    32,
    1,
    45,
    0,
    0,
    34,
    2,
    65,
    24,
    116,
    65,
    24,
    117,
    34,
    5,
    65,
    127,
    76,
    4,
    64,
    32,
    0,
    65,
    247,
    215,
    193,
    0,
    70,
    13,
    10,
    32,
    1,
    45,
    0,
    1,
    32,
    5,
    65,
    255,
    0,
    113,
    65,
    8,
    116,
    114,
    33,
    2,
    32,
    1,
    65,
    2,
    106,
    12,
    1,
    11,
    32,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    2,
    107,
    34,
    3,
    65,
    0,
    72,
    13,
    2,
    32,
    4,
    65,
    1,
    115,
    33,
    4,
    32,
    1,
    65,
    247,
    215,
    193,
    0,
    71,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    0,
    65,
    181,
    217,
    115,
    106,
    65,
    181,
    219,
    43,
    73,
    32,
    0,
    65,
    226,
    139,
    116,
    106,
    65,
    226,
    11,
    73,
    114,
    32,
    0,
    65,
    159,
    168,
    116,
    106,
    65,
    159,
    24,
    73,
    32,
    0,
    65,
    222,
    226,
    116,
    106,
    65,
    14,
    73,
    114,
    114,
    32,
    0,
    65,
    254,
    255,
    255,
    0,
    113,
    65,
    158,
    240,
    10,
    70,
    32,
    0,
    65,
    162,
    178,
    117,
    106,
    65,
    34,
    73,
    114,
    114,
    13,
    0,
    32,
    0,
    65,
    203,
    145,
    117,
    106,
    65,
    11,
    79,
    13,
    7,
    11,
    32,
    4,
    65,
    1,
    113,
    15,
    11,
    32,
    2,
    32,
    3,
    65,
    144,
    205,
    193,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    65,
    162,
    2,
    65,
    144,
    205,
    193,
    0,
    16,
    99,
    0,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    65,
    160,
    205,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    2,
    32,
    3,
    65,
    144,
    205,
    193,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    65,
    175,
    1,
    65,
    144,
    205,
    193,
    0,
    16,
    99,
    0,
    11,
    65,
    240,
    196,
    193,
    0,
    65,
    43,
    65,
    160,
    205,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    65,
    240,
    131,
    56,
    73,
    11,
    254,
    5,
    1,
    8,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    7,
    36,
    0,
    2,
    64,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    0,
    65,
    1,
    54,
    2,
    8,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    65,
    123,
    33,
    10,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    180,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    1,
    70,
    4,
    64,
    32,
    0,
    66,
    0,
    55,
    2,
    0,
    32,
    6,
    65,
    4,
    71,
    13,
    1,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    65,
    1,
    33,
    10,
    12,
    8,
    11,
    32,
    6,
    65,
    4,
    71,
    13,
    1,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    65,
    4,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    9,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    5,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    8,
    4,
    0,
    5,
    0,
    11,
    32,
    3,
    32,
    9,
    107,
    33,
    3,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    13,
    0,
    11,
    12,
    5,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    8,
    65,
    123,
    33,
    10,
    12,
    6,
    11,
    65,
    3,
    32,
    6,
    65,
    2,
    70,
    65,
    1,
    116,
    32,
    6,
    65,
    3,
    70,
    34,
    14,
    27,
    33,
    8,
    2,
    64,
    32,
    6,
    65,
    2,
    70,
    4,
    64,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    32,
    8,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    9,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    5,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    8,
    4,
    0,
    5,
    0,
    11,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    69,
    13,
    6,
    32,
    3,
    32,
    9,
    107,
    34,
    3,
    69,
    13,
    2,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    65,
    2,
    33,
    8,
    12,
    0,
    11,
    0,
    11,
    65,
    3,
    65,
    0,
    32,
    14,
    27,
    33,
    14,
    3,
    64,
    32,
    7,
    32,
    5,
    54,
    2,
    40,
    32,
    7,
    32,
    4,
    54,
    2,
    36,
    32,
    7,
    65,
    1,
    54,
    2,
    32,
    32,
    7,
    66,
    0,
    55,
    3,
    24,
    32,
    7,
    32,
    2,
    54,
    2,
    16,
    32,
    7,
    32,
    3,
    54,
    2,
    20,
    32,
    7,
    32,
    1,
    32,
    7,
    65,
    16,
    106,
    32,
    8,
    16,
    4,
    32,
    3,
    32,
    7,
    40,
    2,
    4,
    34,
    9,
    73,
    13,
    8,
    32,
    5,
    32,
    7,
    40,
    2,
    8,
    34,
    8,
    73,
    13,
    4,
    32,
    8,
    32,
    12,
    106,
    33,
    12,
    32,
    9,
    32,
    11,
    106,
    33,
    11,
    65,
    240,
    177,
    127,
    33,
    10,
    65,
    1,
    33,
    13,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    65,
    2,
    106,
    14,
    4,
    7,
    3,
    0,
    4,
    0,
    11,
    32,
    5,
    32,
    8,
    107,
    34,
    5,
    69,
    13,
    5,
    32,
    3,
    32,
    9,
    107,
    34,
    3,
    69,
    13,
    1,
    32,
    2,
    32,
    9,
    106,
    33,
    2,
    32,
    4,
    32,
    8,
    106,
    33,
    4,
    32,
    14,
    33,
    8,
    12,
    0,
    11,
    0,
    11,
    65,
    0,
    65,
    123,
    32,
    6,
    32,
    11,
    114,
    32,
    12,
    114,
    34,
    1,
    27,
    33,
    10,
    32,
    1,
    69,
    33,
    13,
    12,
    4,
    11,
    65,
    126,
    33,
    10,
    12,
    3,
    11,
    65,
    1,
    33,
    10,
    65,
    0,
    33,
    13,
    12,
    2,
    11,
    32,
    8,
    32,
    5,
    65,
    156,
    188,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    0,
    33,
    13,
    65,
    0,
    33,
    10,
    11,
    32,
    0,
    32,
    13,
    54,
    2,
    8,
    32,
    0,
    32,
    12,
    54,
    2,
    4,
    32,
    0,
    32,
    11,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    12,
    106,
    32,
    10,
    54,
    2,
    0,
    32,
    7,
    65,
    48,
    106,
    36,
    0,
    15,
    11,
    32,
    9,
    32,
    3,
    65,
    140,
    188,
    192,
    0,
    16,
    101,
    0,
    11,
    145,
    6,
    2,
    3,
    127,
    1,
    126,
    35,
    0,
    65,
    176,
    2,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    65,
    0,
    54,
    2,
    224,
    1,
    32,
    5,
    66,
    1,
    55,
    3,
    216,
    1,
    32,
    5,
    32,
    5,
    65,
    216,
    1,
    106,
    32,
    3,
    4,
    127,
    32,
    4,
    5,
    65,
    6,
    11,
    16,
    62,
    32,
    5,
    32,
    1,
    32,
    2,
    16,
    26,
    33,
    8,
    32,
    5,
    65,
    232,
    0,
    106,
    32,
    5,
    65,
    216,
    0,
    16,
    121,
    26,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    8,
    167,
    34,
    3,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    4,
    64,
    32,
    5,
    32,
    3,
    58,
    0,
    88,
    32,
    5,
    32,
    8,
    66,
    56,
    136,
    60,
    0,
    95,
    32,
    5,
    32,
    8,
    66,
    40,
    136,
    61,
    0,
    93,
    32,
    5,
    32,
    8,
    66,
    8,
    136,
    62,
    0,
    89,
    2,
    64,
    32,
    5,
    40,
    2,
    128,
    1,
    69,
    13,
    0,
    32,
    5,
    65,
    232,
    0,
    106,
    16,
    34,
    34,
    8,
    167,
    65,
    3,
    113,
    65,
    2,
    71,
    13,
    0,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    3,
    40,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    3,
    40,
    2,
    0,
    32,
    6,
    32,
    4,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    5,
    65,
    232,
    0,
    106,
    16,
    77,
    32,
    5,
    65,
    184,
    1,
    106,
    40,
    2,
    0,
    34,
    3,
    4,
    64,
    32,
    5,
    40,
    2,
    180,
    1,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    41,
    3,
    88,
    33,
    8,
    12,
    1,
    11,
    32,
    5,
    65,
    216,
    1,
    106,
    32,
    5,
    65,
    232,
    0,
    106,
    65,
    216,
    0,
    16,
    121,
    26,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    34,
    34,
    8,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    5,
    40,
    2,
    240,
    1,
    33,
    3,
    65,
    0,
    33,
    4,
    32,
    5,
    65,
    0,
    54,
    2,
    240,
    1,
    32,
    3,
    13,
    2,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    5,
    32,
    8,
    55,
    3,
    88,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    53,
    11,
    32,
    5,
    32,
    8,
    55,
    3,
    192,
    1,
    32,
    5,
    65,
    192,
    1,
    106,
    16,
    133,
    1,
    33,
    3,
    32,
    5,
    65,
    244,
    0,
    106,
    65,
    9,
    54,
    2,
    0,
    32,
    5,
    65,
    236,
    1,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    10,
    54,
    2,
    108,
    32,
    5,
    66,
    2,
    55,
    2,
    220,
    1,
    32,
    5,
    65,
    244,
    132,
    192,
    0,
    54,
    2,
    216,
    1,
    32,
    5,
    32,
    3,
    58,
    0,
    215,
    1,
    32,
    5,
    32,
    5,
    65,
    192,
    1,
    106,
    54,
    2,
    112,
    32,
    5,
    32,
    5,
    65,
    215,
    1,
    106,
    54,
    2,
    104,
    32,
    5,
    32,
    5,
    65,
    232,
    0,
    106,
    54,
    2,
    232,
    1,
    32,
    5,
    65,
    200,
    1,
    106,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    51,
    32,
    5,
    40,
    2,
    200,
    1,
    34,
    4,
    32,
    5,
    40,
    2,
    208,
    1,
    16,
    0,
    33,
    3,
    32,
    5,
    40,
    2,
    204,
    1,
    34,
    6,
    4,
    64,
    32,
    4,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    5,
    45,
    0,
    192,
    1,
    65,
    2,
    79,
    4,
    64,
    32,
    5,
    40,
    2,
    196,
    1,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    6,
    40,
    2,
    4,
    34,
    7,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    7,
    32,
    6,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    5,
    40,
    2,
    196,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    65,
    1,
    33,
    4,
    12,
    1,
    11,
    32,
    5,
    65,
    244,
    1,
    106,
    40,
    2,
    0,
    33,
    6,
    32,
    5,
    32,
    5,
    65,
    248,
    1,
    106,
    40,
    2,
    0,
    54,
    2,
    96,
    32,
    5,
    32,
    6,
    54,
    2,
    92,
    32,
    5,
    32,
    3,
    54,
    2,
    88,
    32,
    5,
    65,
    216,
    1,
    106,
    16,
    53,
    32,
    5,
    41,
    2,
    92,
    33,
    8,
    11,
    32,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    2,
    64,
    32,
    8,
    167,
    34,
    4,
    32,
    8,
    66,
    32,
    136,
    167,
    34,
    2,
    77,
    4,
    64,
    32,
    3,
    33,
    1,
    12,
    1,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    1,
    33,
    1,
    32,
    3,
    32,
    4,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    3,
    32,
    4,
    32,
    2,
    16,
    143,
    1,
    34,
    1,
    69,
    13,
    2,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    5,
    65,
    176,
    2,
    106,
    36,
    0,
    15,
    11,
    32,
    3,
    16,
    168,
    1,
    0,
    11,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    201,
    3,
    1,
    7,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    9,
    36,
    0,
    2,
    64,
    32,
    0,
    69,
    32,
    1,
    69,
    114,
    13,
    0,
    2,
    64,
    32,
    2,
    65,
    4,
    75,
    13,
    0,
    32,
    1,
    65,
    3,
    106,
    65,
    2,
    118,
    65,
    127,
    106,
    34,
    1,
    65,
    255,
    1,
    75,
    13,
    0,
    32,
    1,
    65,
    2,
    116,
    65,
    140,
    223,
    193,
    0,
    106,
    34,
    6,
    40,
    2,
    0,
    33,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    120,
    106,
    34,
    7,
    32,
    7,
    40,
    2,
    0,
    65,
    126,
    113,
    54,
    2,
    0,
    32,
    9,
    65,
    136,
    223,
    193,
    0,
    54,
    2,
    12,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    6,
    32,
    7,
    54,
    2,
    0,
    12,
    1,
    11,
    65,
    136,
    223,
    193,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    120,
    106,
    34,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    126,
    113,
    54,
    2,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    124,
    106,
    34,
    6,
    40,
    2,
    0,
    65,
    124,
    113,
    34,
    5,
    4,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    8,
    65,
    1,
    113,
    69,
    13,
    1,
    11,
    32,
    4,
    65,
    124,
    113,
    34,
    3,
    69,
    13,
    1,
    65,
    0,
    32,
    3,
    32,
    4,
    65,
    2,
    113,
    27,
    34,
    3,
    69,
    13,
    1,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    113,
    13,
    1,
    32,
    0,
    32,
    3,
    40,
    2,
    8,
    65,
    124,
    113,
    54,
    2,
    0,
    32,
    3,
    32,
    1,
    65,
    1,
    114,
    54,
    2,
    8,
    32,
    2,
    33,
    1,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    124,
    113,
    34,
    0,
    69,
    4,
    64,
    32,
    5,
    33,
    3,
    12,
    1,
    11,
    32,
    5,
    33,
    3,
    65,
    0,
    32,
    0,
    32,
    4,
    65,
    2,
    113,
    27,
    34,
    4,
    69,
    13,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    5,
    114,
    54,
    2,
    4,
    32,
    6,
    40,
    2,
    0,
    34,
    0,
    65,
    124,
    113,
    34,
    3,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    124,
    113,
    33,
    0,
    32,
    3,
    40,
    2,
    0,
    33,
    8,
    11,
    32,
    3,
    32,
    8,
    65,
    3,
    113,
    32,
    0,
    114,
    54,
    2,
    0,
    32,
    6,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    6,
    32,
    0,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    0,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    0,
    65,
    2,
    113,
    69,
    4,
    64,
    32,
    2,
    33,
    1,
    12,
    2,
    11,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    11,
    65,
    136,
    223,
    193,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    32,
    9,
    65,
    16,
    106,
    36,
    0,
    11,
    251,
    5,
    1,
    7,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    2,
    118,
    34,
    11,
    4,
    64,
    32,
    0,
    32,
    3,
    106,
    33,
    12,
    3,
    64,
    32,
    2,
    32,
    6,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    2,
    32,
    3,
    32,
    6,
    106,
    34,
    8,
    32,
    1,
    79,
    13,
    3,
    32,
    6,
    32,
    12,
    106,
    34,
    10,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    4,
    32,
    8,
    65,
    1,
    106,
    32,
    1,
    79,
    13,
    5,
    32,
    10,
    65,
    1,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    34,
    9,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    6,
    32,
    8,
    65,
    2,
    106,
    32,
    1,
    79,
    13,
    7,
    32,
    10,
    65,
    2,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    9,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    7,
    32,
    1,
    79,
    13,
    8,
    32,
    8,
    65,
    3,
    106,
    32,
    1,
    79,
    13,
    9,
    32,
    10,
    65,
    3,
    106,
    32,
    0,
    32,
    7,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    6,
    65,
    4,
    106,
    33,
    6,
    32,
    11,
    65,
    127,
    106,
    34,
    11,
    13,
    0,
    11,
    32,
    3,
    32,
    6,
    106,
    33,
    3,
    32,
    2,
    32,
    6,
    106,
    33,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    0,
    1,
    2,
    4,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    21,
    32,
    3,
    32,
    1,
    73,
    13,
    2,
    32,
    3,
    32,
    1,
    65,
    200,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    17,
    32,
    3,
    32,
    1,
    79,
    13,
    18,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    19,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    32,
    1,
    73,
    13,
    1,
    32,
    3,
    32,
    1,
    65,
    168,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    10,
    32,
    3,
    32,
    1,
    79,
    13,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    12,
    32,
    3,
    65,
    1,
    106,
    34,
    6,
    32,
    1,
    79,
    13,
    13,
    32,
    0,
    32,
    6,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    2,
    106,
    32,
    5,
    113,
    34,
    6,
    32,
    1,
    79,
    13,
    14,
    32,
    3,
    65,
    2,
    106,
    34,
    3,
    32,
    1,
    79,
    13,
    15,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    32,
    6,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    15,
    11,
    32,
    7,
    32,
    1,
    65,
    152,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    32,
    1,
    65,
    168,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    184,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    1,
    106,
    32,
    1,
    65,
    200,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    216,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    2,
    106,
    32,
    1,
    65,
    232,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    7,
    32,
    1,
    65,
    248,
    178,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    8,
    65,
    3,
    106,
    32,
    1,
    65,
    136,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    152,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    168,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    184,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    200,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    216,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    232,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    248,
    179,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    136,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    152,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    184,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    153,
    6,
    2,
    11,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    8,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    10,
    32,
    0,
    65,
    48,
    106,
    33,
    12,
    32,
    0,
    65,
    200,
    0,
    106,
    33,
    11,
    32,
    3,
    65,
    4,
    114,
    33,
    13,
    32,
    0,
    65,
    212,
    0,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    7,
    3,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    11,
    40,
    2,
    0,
    69,
    4,
    64,
    2,
    64,
    32,
    6,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    76,
    33,
    5,
    32,
    10,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    6,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    4,
    32,
    6,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    76,
    34,
    9,
    32,
    4,
    32,
    9,
    106,
    32,
    5,
    16,
    96,
    32,
    6,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    3,
    65,
    16,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    32,
    3,
    41,
    2,
    20,
    33,
    14,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    14,
    167,
    34,
    4,
    73,
    13,
    5,
    32,
    12,
    32,
    1,
    32,
    4,
    16,
    141,
    1,
    32,
    3,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    4,
    32,
    4,
    13,
    1,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    6,
    32,
    0,
    65,
    24,
    106,
    65,
    244,
    128,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    236,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    228,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    220,
    128,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    7,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    15,
    66,
    8,
    136,
    33,
    14,
    32,
    15,
    167,
    33,
    8,
    12,
    11,
    11,
    32,
    3,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    14,
    55,
    2,
    4,
    32,
    13,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    70,
    13,
    1,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    14,
    32,
    3,
    45,
    0,
    4,
    33,
    8,
    12,
    10,
    11,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    6,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    5,
    12,
    6,
    11,
    32,
    3,
    65,
    52,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    36,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    32,
    11,
    54,
    2,
    56,
    32,
    3,
    66,
    3,
    55,
    2,
    20,
    32,
    3,
    65,
    180,
    130,
    192,
    0,
    54,
    2,
    16,
    32,
    3,
    65,
    1,
    54,
    2,
    44,
    32,
    3,
    65,
    244,
    129,
    192,
    0,
    54,
    2,
    60,
    32,
    3,
    32,
    3,
    65,
    40,
    106,
    54,
    2,
    32,
    32,
    3,
    32,
    3,
    65,
    60,
    106,
    54,
    2,
    48,
    32,
    3,
    32,
    3,
    65,
    56,
    106,
    54,
    2,
    40,
    32,
    3,
    65,
    16,
    106,
    65,
    204,
    130,
    192,
    0,
    16,
    130,
    1,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    220,
    130,
    192,
    0,
    16,
    99,
    0,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    9,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    9,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    64,
    107,
    36,
    0,
    32,
    8,
    173,
    66,
    255,
    1,
    131,
    32,
    14,
    66,
    8,
    134,
    132,
    11,
    213,
    5,
    1,
    6,
    127,
    2,
    127,
    32,
    1,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    9,
    65,
    45,
    33,
    10,
    32,
    5,
    65,
    1,
    106,
    12,
    1,
    11,
    65,
    43,
    65,
    128,
    128,
    196,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    9,
    65,
    1,
    113,
    34,
    1,
    27,
    33,
    10,
    32,
    1,
    32,
    5,
    106,
    11,
    33,
    8,
    2,
    64,
    32,
    9,
    65,
    4,
    113,
    69,
    4,
    64,
    65,
    0,
    33,
    2,
    12,
    1,
    11,
    32,
    3,
    4,
    64,
    32,
    3,
    33,
    6,
    32,
    2,
    33,
    1,
    3,
    64,
    32,
    7,
    32,
    1,
    45,
    0,
    0,
    65,
    192,
    1,
    113,
    65,
    128,
    1,
    71,
    106,
    33,
    7,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    6,
    65,
    127,
    106,
    34,
    6,
    13,
    0,
    11,
    11,
    32,
    7,
    32,
    8,
    106,
    33,
    8,
    11,
    65,
    1,
    33,
    1,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    1,
    12,
    2,
    11,
    32,
    0,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    6,
    32,
    8,
    77,
    4,
    64,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    1,
    12,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    9,
    65,
    8,
    113,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    33,
    9,
    32,
    0,
    65,
    48,
    54,
    2,
    4,
    32,
    0,
    45,
    0,
    32,
    33,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    32,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    5,
    65,
    0,
    33,
    1,
    32,
    6,
    32,
    8,
    107,
    34,
    3,
    33,
    2,
    65,
    1,
    32,
    0,
    45,
    0,
    32,
    34,
    6,
    32,
    6,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    2,
    1,
    2,
    3,
    11,
    65,
    0,
    33,
    1,
    32,
    6,
    32,
    8,
    107,
    34,
    6,
    33,
    8,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    1,
    32,
    0,
    45,
    0,
    32,
    34,
    7,
    32,
    7,
    65,
    3,
    70,
    27,
    65,
    3,
    113,
    65,
    1,
    107,
    14,
    3,
    1,
    0,
    1,
    2,
    11,
    32,
    6,
    65,
    1,
    118,
    33,
    1,
    32,
    6,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    8,
    12,
    1,
    11,
    65,
    0,
    33,
    8,
    32,
    6,
    33,
    1,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    3,
    64,
    32,
    1,
    65,
    127,
    106,
    34,
    1,
    69,
    13,
    4,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    65,
    1,
    15,
    11,
    32,
    3,
    65,
    1,
    118,
    33,
    1,
    32,
    3,
    65,
    1,
    106,
    65,
    1,
    118,
    33,
    2,
    12,
    1,
    11,
    65,
    0,
    33,
    2,
    32,
    3,
    33,
    1,
    11,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    2,
    64,
    3,
    64,
    32,
    1,
    65,
    127,
    106,
    34,
    1,
    69,
    13,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    65,
    1,
    15,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    3,
    65,
    1,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    32,
    2,
    65,
    1,
    106,
    33,
    7,
    32,
    0,
    40,
    2,
    28,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    33,
    4,
    3,
    64,
    32,
    7,
    65,
    127,
    106,
    34,
    7,
    4,
    64,
    32,
    4,
    32,
    3,
    32,
    2,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    1,
    12,
    3,
    11,
    11,
    32,
    0,
    32,
    11,
    58,
    0,
    32,
    32,
    0,
    32,
    9,
    54,
    2,
    4,
    65,
    0,
    15,
    11,
    32,
    0,
    40,
    2,
    4,
    33,
    6,
    65,
    1,
    33,
    1,
    32,
    0,
    32,
    10,
    32,
    2,
    32,
    3,
    16,
    111,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    40,
    2,
    28,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    8,
    65,
    1,
    106,
    33,
    7,
    32,
    0,
    40,
    2,
    28,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    33,
    0,
    3,
    64,
    32,
    7,
    65,
    127,
    106,
    34,
    7,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    32,
    6,
    32,
    2,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    32,
    1,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    4,
    32,
    5,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    205,
    5,
    2,
    8,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    44,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    4,
    64,
    32,
    1,
    65,
    24,
    106,
    33,
    9,
    32,
    1,
    65,
    32,
    106,
    33,
    7,
    32,
    1,
    65,
    44,
    106,
    33,
    8,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    9,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    8,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    3,
    32,
    8,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    1,
    40,
    2,
    36,
    34,
    10,
    32,
    4,
    32,
    10,
    106,
    32,
    5,
    16,
    96,
    32,
    8,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    36,
    106,
    33,
    9,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    3,
    69,
    13,
    1,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    2,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    70,
    13,
    2,
    32,
    1,
    65,
    24,
    106,
    33,
    10,
    32,
    1,
    65,
    44,
    106,
    33,
    7,
    32,
    1,
    65,
    32,
    106,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    2,
    64,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    8,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    8,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    3,
    32,
    1,
    40,
    2,
    36,
    34,
    11,
    32,
    4,
    32,
    11,
    106,
    32,
    5,
    16,
    96,
    32,
    7,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    3,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    9,
    65,
    0,
    16,
    110,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    33,
    12,
    32,
    6,
    45,
    0,
    0,
    33,
    4,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    2,
    127,
    32,
    4,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    3,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    12,
    62,
    2,
    4,
    65,
    0,
    11,
    54,
    2,
    0,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    205,
    5,
    2,
    8,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    44,
    106,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    4,
    64,
    32,
    1,
    65,
    24,
    106,
    33,
    9,
    32,
    1,
    65,
    32,
    106,
    33,
    7,
    32,
    1,
    65,
    44,
    106,
    33,
    8,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    9,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    7,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    7,
    32,
    7,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    8,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    3,
    32,
    8,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    2,
    32,
    1,
    40,
    2,
    36,
    34,
    10,
    32,
    4,
    32,
    10,
    106,
    32,
    5,
    16,
    96,
    32,
    8,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    36,
    106,
    33,
    9,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    3,
    69,
    13,
    1,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    2,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    70,
    13,
    2,
    32,
    1,
    65,
    24,
    106,
    33,
    10,
    32,
    1,
    65,
    44,
    106,
    33,
    7,
    32,
    1,
    65,
    32,
    106,
    33,
    8,
    3,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    0,
    34,
    4,
    69,
    13,
    0,
    2,
    64,
    32,
    10,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    1,
    40,
    2,
    36,
    33,
    5,
    32,
    10,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    16,
    75,
    32,
    1,
    40,
    2,
    24,
    32,
    8,
    40,
    2,
    0,
    106,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    32,
    8,
    32,
    8,
    40,
    2,
    0,
    32,
    4,
    106,
    54,
    2,
    0,
    32,
    7,
    40,
    2,
    0,
    34,
    5,
    32,
    4,
    73,
    13,
    2,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    107,
    34,
    5,
    69,
    13,
    3,
    32,
    1,
    40,
    2,
    36,
    34,
    11,
    32,
    4,
    32,
    11,
    106,
    32,
    5,
    16,
    96,
    32,
    7,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    33,
    4,
    32,
    1,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    1,
    41,
    3,
    0,
    33,
    12,
    32,
    6,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    6,
    45,
    0,
    0,
    34,
    4,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    34,
    12,
    167,
    114,
    13,
    3,
    32,
    6,
    45,
    0,
    1,
    65,
    2,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    4,
    32,
    5,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    6,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    9,
    65,
    0,
    16,
    65,
    32,
    1,
    41,
    3,
    0,
    32,
    12,
    125,
    33,
    12,
    32,
    6,
    45,
    0,
    0,
    33,
    4,
    11,
    2,
    64,
    2,
    64,
    32,
    0,
    2,
    127,
    32,
    4,
    65,
    255,
    1,
    113,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    3,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    12,
    62,
    2,
    4,
    65,
    0,
    11,
    54,
    2,
    0,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    201,
    4,
    1,
    18,
    127,
    32,
    0,
    47,
    1,
    2,
    33,
    14,
    32,
    0,
    47,
    1,
    0,
    33,
    15,
    2,
    64,
    32,
    2,
    65,
    124,
    113,
    34,
    17,
    32,
    17,
    65,
    192,
    173,
    1,
    112,
    34,
    18,
    107,
    34,
    19,
    65,
    192,
    173,
    1,
    73,
    4,
    64,
    12,
    1,
    11,
    32,
    15,
    65,
    192,
    173,
    1,
    108,
    33,
    20,
    32,
    1,
    33,
    12,
    32,
    19,
    33,
    16,
    3,
    64,
    65,
    192,
    210,
    126,
    33,
    13,
    32,
    16,
    65,
    192,
    210,
    126,
    106,
    33,
    16,
    32,
    12,
    33,
    3,
    3,
    64,
    32,
    4,
    32,
    8,
    32,
    3,
    45,
    0,
    3,
    106,
    34,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    9,
    32,
    3,
    45,
    0,
    2,
    106,
    34,
    9,
    106,
    33,
    5,
    32,
    6,
    32,
    10,
    32,
    3,
    45,
    0,
    1,
    106,
    34,
    10,
    106,
    33,
    6,
    32,
    7,
    32,
    11,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    11,
    106,
    33,
    7,
    32,
    3,
    65,
    4,
    106,
    33,
    3,
    32,
    13,
    65,
    4,
    106,
    34,
    13,
    13,
    0,
    11,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    33,
    4,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    33,
    5,
    32,
    6,
    65,
    241,
    255,
    3,
    112,
    33,
    6,
    32,
    7,
    65,
    241,
    255,
    3,
    112,
    33,
    7,
    32,
    8,
    65,
    241,
    255,
    3,
    112,
    33,
    8,
    32,
    9,
    65,
    241,
    255,
    3,
    112,
    33,
    9,
    32,
    10,
    65,
    241,
    255,
    3,
    112,
    33,
    10,
    32,
    11,
    65,
    241,
    255,
    3,
    112,
    33,
    11,
    32,
    12,
    65,
    192,
    173,
    1,
    106,
    33,
    12,
    32,
    14,
    32,
    20,
    106,
    65,
    241,
    255,
    3,
    112,
    33,
    14,
    32,
    16,
    65,
    192,
    173,
    1,
    79,
    13,
    0,
    11,
    11,
    32,
    2,
    65,
    3,
    113,
    33,
    13,
    32,
    18,
    65,
    252,
    255,
    1,
    113,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    19,
    106,
    33,
    3,
    65,
    0,
    32,
    2,
    107,
    33,
    12,
    3,
    64,
    32,
    7,
    32,
    11,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    11,
    106,
    33,
    7,
    32,
    4,
    32,
    8,
    32,
    3,
    65,
    3,
    106,
    45,
    0,
    0,
    106,
    34,
    8,
    106,
    33,
    4,
    32,
    5,
    32,
    9,
    32,
    3,
    65,
    2,
    106,
    45,
    0,
    0,
    106,
    34,
    9,
    106,
    33,
    5,
    32,
    6,
    32,
    10,
    32,
    3,
    65,
    1,
    106,
    45,
    0,
    0,
    106,
    34,
    10,
    106,
    33,
    6,
    32,
    3,
    65,
    4,
    106,
    33,
    3,
    32,
    12,
    65,
    4,
    106,
    34,
    12,
    13,
    0,
    11,
    11,
    32,
    14,
    32,
    15,
    32,
    18,
    108,
    106,
    65,
    241,
    255,
    3,
    112,
    32,
    7,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    106,
    32,
    6,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    32,
    10,
    65,
    241,
    255,
    3,
    112,
    34,
    2,
    107,
    106,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    32,
    9,
    65,
    241,
    255,
    3,
    112,
    34,
    12,
    65,
    1,
    116,
    107,
    106,
    65,
    0,
    32,
    8,
    65,
    241,
    255,
    3,
    112,
    34,
    3,
    107,
    65,
    3,
    108,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    65,
    2,
    116,
    106,
    106,
    65,
    166,
    255,
    23,
    106,
    33,
    4,
    32,
    3,
    32,
    12,
    32,
    2,
    32,
    11,
    65,
    241,
    255,
    3,
    112,
    32,
    15,
    106,
    106,
    106,
    106,
    33,
    5,
    32,
    13,
    4,
    64,
    32,
    1,
    32,
    17,
    106,
    33,
    3,
    3,
    64,
    32,
    5,
    32,
    3,
    45,
    0,
    0,
    106,
    34,
    5,
    32,
    4,
    106,
    33,
    4,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    13,
    65,
    127,
    106,
    34,
    13,
    13,
    0,
    11,
    11,
    32,
    0,
    32,
    4,
    65,
    241,
    255,
    3,
    112,
    59,
    1,
    2,
    32,
    0,
    32,
    5,
    65,
    241,
    255,
    3,
    112,
    59,
    1,
    0,
    11,
    177,
    5,
    1,
    9,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    36,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    3,
    58,
    0,
    40,
    32,
    3,
    66,
    128,
    128,
    128,
    128,
    128,
    4,
    55,
    3,
    8,
    32,
    3,
    32,
    0,
    54,
    2,
    32,
    32,
    3,
    65,
    0,
    54,
    2,
    24,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    8,
    34,
    4,
    4,
    64,
    32,
    2,
    40,
    2,
    0,
    33,
    6,
    32,
    2,
    40,
    2,
    4,
    34,
    7,
    32,
    2,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    5,
    32,
    7,
    75,
    27,
    34,
    5,
    69,
    13,
    1,
    32,
    0,
    32,
    6,
    40,
    2,
    0,
    32,
    6,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    3,
    32,
    6,
    65,
    12,
    106,
    33,
    0,
    32,
    2,
    40,
    2,
    16,
    33,
    9,
    32,
    5,
    33,
    8,
    3,
    64,
    32,
    3,
    32,
    4,
    65,
    28,
    106,
    45,
    0,
    0,
    58,
    0,
    40,
    32,
    3,
    32,
    4,
    65,
    4,
    106,
    41,
    2,
    0,
    66,
    32,
    137,
    55,
    3,
    8,
    32,
    4,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    1,
    65,
    0,
    33,
    10,
    65,
    0,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    20,
    106,
    40,
    2,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    32,
    1,
    65,
    3,
    116,
    32,
    9,
    106,
    34,
    11,
    40,
    2,
    4,
    65,
    193,
    0,
    71,
    13,
    1,
    32,
    11,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    1,
    11,
    65,
    1,
    33,
    2,
    11,
    32,
    3,
    32,
    1,
    54,
    2,
    20,
    32,
    3,
    32,
    2,
    54,
    2,
    16,
    32,
    4,
    65,
    16,
    106,
    40,
    2,
    0,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    12,
    106,
    40,
    2,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    32,
    2,
    65,
    3,
    116,
    32,
    9,
    106,
    34,
    1,
    40,
    2,
    4,
    65,
    193,
    0,
    71,
    13,
    1,
    32,
    1,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    2,
    11,
    65,
    1,
    33,
    10,
    11,
    32,
    3,
    32,
    2,
    54,
    2,
    28,
    32,
    3,
    32,
    10,
    54,
    2,
    24,
    32,
    9,
    32,
    4,
    40,
    2,
    0,
    65,
    3,
    116,
    106,
    34,
    1,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    1,
    40,
    2,
    4,
    17,
    0,
    0,
    13,
    4,
    32,
    8,
    65,
    127,
    106,
    34,
    8,
    69,
    13,
    3,
    32,
    4,
    65,
    32,
    106,
    33,
    4,
    32,
    0,
    65,
    124,
    106,
    33,
    1,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    65,
    8,
    106,
    33,
    0,
    32,
    3,
    40,
    2,
    32,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    11,
    12,
    3,
    11,
    32,
    2,
    40,
    2,
    0,
    33,
    6,
    32,
    2,
    40,
    2,
    4,
    34,
    7,
    32,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    5,
    32,
    7,
    75,
    27,
    34,
    5,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    16,
    33,
    4,
    32,
    0,
    32,
    6,
    40,
    2,
    0,
    32,
    6,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    32,
    6,
    65,
    12,
    106,
    33,
    0,
    32,
    5,
    33,
    2,
    3,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    17,
    0,
    0,
    13,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    69,
    13,
    2,
    32,
    4,
    65,
    8,
    106,
    33,
    4,
    32,
    0,
    65,
    124,
    106,
    33,
    1,
    32,
    0,
    40,
    2,
    0,
    33,
    8,
    32,
    0,
    65,
    8,
    106,
    33,
    0,
    32,
    3,
    40,
    2,
    32,
    32,
    1,
    40,
    2,
    0,
    32,
    8,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    11,
    12,
    2,
    11,
    65,
    0,
    33,
    5,
    11,
    32,
    7,
    32,
    5,
    75,
    4,
    64,
    32,
    3,
    40,
    2,
    32,
    32,
    6,
    32,
    5,
    65,
    3,
    116,
    106,
    34,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    36,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    11,
    65,
    0,
    12,
    1,
    11,
    65,
    1,
    11,
    32,
    3,
    65,
    48,
    106,
    36,
    0,
    11,
    177,
    4,
    1,
    8,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    4,
    64,
    32,
    1,
    65,
    127,
    106,
    33,
    10,
    32,
    0,
    65,
    2,
    116,
    33,
    9,
    65,
    0,
    32,
    1,
    107,
    33,
    11,
    3,
    64,
    32,
    5,
    65,
    8,
    106,
    33,
    6,
    32,
    5,
    40,
    2,
    8,
    34,
    7,
    65,
    1,
    113,
    4,
    64,
    3,
    64,
    32,
    6,
    32,
    7,
    65,
    126,
    113,
    54,
    2,
    0,
    2,
    127,
    65,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    7,
    65,
    124,
    113,
    34,
    6,
    69,
    13,
    0,
    26,
    65,
    0,
    32,
    6,
    32,
    6,
    45,
    0,
    0,
    65,
    1,
    113,
    27,
    11,
    33,
    1,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    8,
    65,
    124,
    113,
    34,
    12,
    69,
    13,
    0,
    65,
    0,
    32,
    12,
    32,
    8,
    65,
    2,
    113,
    27,
    34,
    8,
    69,
    13,
    0,
    32,
    8,
    32,
    8,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    6,
    114,
    54,
    2,
    4,
    32,
    5,
    40,
    2,
    4,
    34,
    7,
    65,
    124,
    113,
    33,
    6,
    11,
    32,
    5,
    32,
    6,
    4,
    127,
    32,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    3,
    113,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    114,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    4,
    5,
    32,
    7,
    11,
    65,
    3,
    113,
    54,
    2,
    4,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    34,
    5,
    65,
    3,
    113,
    54,
    2,
    0,
    32,
    5,
    65,
    2,
    113,
    4,
    64,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    33,
    6,
    32,
    1,
    34,
    5,
    40,
    2,
    8,
    34,
    7,
    65,
    1,
    113,
    13,
    0,
    11,
    11,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    34,
    1,
    32,
    6,
    107,
    32,
    9,
    79,
    4,
    64,
    32,
    6,
    32,
    3,
    32,
    0,
    32,
    4,
    40,
    2,
    16,
    17,
    0,
    0,
    65,
    2,
    116,
    106,
    65,
    8,
    106,
    32,
    1,
    32,
    9,
    107,
    32,
    11,
    113,
    34,
    1,
    77,
    4,
    64,
    32,
    1,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    120,
    106,
    34,
    1,
    66,
    0,
    55,
    2,
    0,
    32,
    1,
    32,
    5,
    40,
    2,
    0,
    65,
    124,
    113,
    54,
    2,
    0,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    34,
    0,
    65,
    124,
    113,
    34,
    2,
    69,
    13,
    0,
    65,
    0,
    32,
    2,
    32,
    0,
    65,
    2,
    113,
    27,
    34,
    0,
    69,
    13,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    1,
    114,
    54,
    2,
    4,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    4,
    65,
    3,
    113,
    32,
    5,
    114,
    54,
    2,
    4,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    65,
    3,
    113,
    32,
    1,
    114,
    54,
    2,
    0,
    32,
    6,
    32,
    6,
    40,
    2,
    0,
    65,
    126,
    113,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    0,
    34,
    0,
    65,
    2,
    113,
    69,
    13,
    5,
    32,
    5,
    32,
    0,
    65,
    125,
    113,
    54,
    2,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    2,
    114,
    54,
    2,
    0,
    12,
    5,
    11,
    32,
    6,
    32,
    10,
    113,
    69,
    13,
    3,
    11,
    32,
    2,
    32,
    5,
    40,
    2,
    8,
    34,
    5,
    54,
    2,
    0,
    32,
    5,
    13,
    0,
    11,
    11,
    65,
    0,
    15,
    11,
    32,
    2,
    32,
    6,
    40,
    2,
    0,
    65,
    124,
    113,
    54,
    2,
    0,
    32,
    5,
    33,
    1,
    11,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    114,
    54,
    2,
    0,
    32,
    1,
    65,
    8,
    106,
    11,
    170,
    5,
    1,
    3,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    2,
    1,
    11,
    65,
    136,
    189,
    193,
    0,
    33,
    3,
    65,
    22,
    33,
    4,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    1,
    65,
    1,
    107,
    14,
    17,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    18,
    0,
    11,
    65,
    161,
    191,
    193,
    0,
    33,
    3,
    65,
    16,
    33,
    4,
    12,
    17,
    11,
    65,
    144,
    191,
    193,
    0,
    33,
    3,
    65,
    17,
    33,
    4,
    12,
    16,
    11,
    65,
    254,
    190,
    193,
    0,
    33,
    3,
    65,
    18,
    33,
    4,
    12,
    15,
    11,
    65,
    238,
    190,
    193,
    0,
    33,
    3,
    65,
    16,
    33,
    4,
    12,
    14,
    11,
    65,
    220,
    190,
    193,
    0,
    33,
    3,
    65,
    18,
    33,
    4,
    12,
    13,
    11,
    65,
    207,
    190,
    193,
    0,
    33,
    3,
    65,
    13,
    33,
    4,
    12,
    12,
    11,
    65,
    193,
    190,
    193,
    0,
    12,
    10,
    11,
    65,
    172,
    190,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    10,
    11,
    65,
    161,
    190,
    193,
    0,
    33,
    3,
    65,
    11,
    33,
    4,
    12,
    9,
    11,
    65,
    140,
    190,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    8,
    11,
    65,
    247,
    189,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    7,
    11,
    65,
    224,
    189,
    193,
    0,
    33,
    3,
    65,
    23,
    33,
    4,
    12,
    6,
    11,
    65,
    212,
    189,
    193,
    0,
    33,
    3,
    65,
    12,
    33,
    4,
    12,
    5,
    11,
    65,
    203,
    189,
    193,
    0,
    33,
    3,
    65,
    9,
    33,
    4,
    12,
    4,
    11,
    65,
    193,
    189,
    193,
    0,
    33,
    3,
    65,
    10,
    33,
    4,
    12,
    3,
    11,
    65,
    172,
    189,
    193,
    0,
    33,
    3,
    65,
    21,
    33,
    4,
    12,
    2,
    11,
    65,
    158,
    189,
    193,
    0,
    11,
    33,
    3,
    65,
    14,
    33,
    4,
    11,
    32,
    2,
    65,
    60,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    4,
    54,
    2,
    28,
    32,
    2,
    32,
    3,
    54,
    2,
    24,
    32,
    2,
    65,
    39,
    54,
    2,
    12,
    32,
    2,
    66,
    1,
    55,
    2,
    44,
    32,
    2,
    65,
    128,
    189,
    193,
    0,
    54,
    2,
    40,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    8,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    56,
    32,
    1,
    32,
    2,
    65,
    40,
    106,
    16,
    102,
    33,
    0,
    12,
    2,
    11,
    32,
    2,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    4,
    65,
    20,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    16,
    106,
    65,
    192,
    194,
    193,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    184,
    194,
    193,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    176,
    194,
    193,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    2,
    66,
    148,
    128,
    128,
    128,
    192,
    2,
    55,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    32,
    2,
    65,
    60,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    2,
    65,
    36,
    106,
    65,
    40,
    54,
    2,
    0,
    32,
    2,
    66,
    3,
    55,
    2,
    44,
    32,
    2,
    65,
    192,
    191,
    193,
    0,
    54,
    2,
    40,
    32,
    2,
    65,
    41,
    54,
    2,
    28,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    56,
    32,
    2,
    32,
    2,
    65,
    4,
    106,
    54,
    2,
    32,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    24,
    32,
    1,
    32,
    2,
    65,
    40,
    106,
    16,
    102,
    33,
    0,
    32,
    2,
    40,
    2,
    8,
    34,
    1,
    69,
    13,
    1,
    32,
    2,
    40,
    2,
    12,
    34,
    3,
    69,
    13,
    1,
    32,
    1,
    32,
    3,
    65,
    1,
    16,
    156,
    1,
    12,
    1,
    11,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    32,
    17,
    0,
    0,
    33,
    0,
    11,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    32,
    0,
    15,
    11,
    65,
    20,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    133,
    4,
    2,
    7,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    212,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    4,
    64,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    3,
    32,
    0,
    65,
    212,
    0,
    106,
    33,
    5,
    3,
    64,
    32,
    0,
    40,
    2,
    76,
    33,
    1,
    32,
    6,
    32,
    3,
    40,
    2,
    0,
    32,
    2,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    3,
    40,
    2,
    0,
    106,
    32,
    1,
    32,
    2,
    16,
    121,
    26,
    32,
    3,
    32,
    3,
    40,
    2,
    0,
    32,
    2,
    106,
    54,
    2,
    0,
    32,
    5,
    40,
    2,
    0,
    34,
    1,
    32,
    2,
    73,
    13,
    3,
    32,
    5,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    107,
    34,
    1,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    76,
    34,
    7,
    32,
    2,
    32,
    7,
    106,
    32,
    1,
    16,
    96,
    32,
    5,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    33,
    2,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    57,
    34,
    8,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    1,
    66,
    3,
    33,
    9,
    66,
    0,
    33,
    8,
    32,
    0,
    40,
    2,
    72,
    65,
    7,
    75,
    13,
    4,
    32,
    0,
    65,
    24,
    106,
    33,
    5,
    32,
    0,
    65,
    48,
    106,
    33,
    6,
    32,
    0,
    65,
    32,
    106,
    33,
    2,
    3,
    64,
    32,
    6,
    16,
    147,
    1,
    33,
    1,
    32,
    4,
    32,
    6,
    40,
    2,
    16,
    34,
    3,
    65,
    24,
    118,
    58,
    0,
    15,
    32,
    4,
    32,
    3,
    65,
    16,
    118,
    58,
    0,
    14,
    32,
    4,
    32,
    3,
    65,
    8,
    118,
    58,
    0,
    13,
    32,
    4,
    32,
    3,
    58,
    0,
    12,
    32,
    4,
    32,
    1,
    65,
    24,
    118,
    58,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    16,
    118,
    58,
    0,
    10,
    32,
    4,
    32,
    1,
    65,
    8,
    118,
    58,
    0,
    9,
    32,
    4,
    32,
    1,
    58,
    0,
    8,
    32,
    5,
    40,
    2,
    0,
    69,
    13,
    3,
    32,
    0,
    40,
    2,
    72,
    34,
    1,
    65,
    9,
    79,
    13,
    4,
    32,
    5,
    32,
    2,
    40,
    2,
    0,
    65,
    8,
    32,
    1,
    107,
    34,
    3,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    40,
    2,
    0,
    106,
    32,
    4,
    65,
    8,
    106,
    32,
    1,
    106,
    32,
    3,
    16,
    121,
    26,
    32,
    2,
    32,
    2,
    40,
    2,
    0,
    32,
    3,
    106,
    54,
    2,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    72,
    32,
    3,
    106,
    34,
    1,
    54,
    2,
    72,
    32,
    1,
    65,
    8,
    73,
    13,
    0,
    11,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    8,
    66,
    255,
    1,
    131,
    33,
    9,
    32,
    8,
    66,
    128,
    126,
    131,
    33,
    8,
    12,
    2,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    168,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    65,
    8,
    65,
    212,
    129,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    32,
    8,
    32,
    9,
    132,
    11,
    138,
    4,
    1,
    2,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    65,
    2,
    75,
    4,
    64,
    32,
    3,
    69,
    13,
    1,
    32,
    3,
    65,
    129,
    128,
    2,
    79,
    13,
    2,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    32,
    2,
    106,
    54,
    2,
    8,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    2,
    65,
    125,
    106,
    34,
    2,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    5,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    32,
    3,
    65,
    8,
    118,
    34,
    5,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    1,
    118,
    58,
    0,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    4,
    65,
    128,
    128,
    4,
    79,
    13,
    4,
    32,
    1,
    32,
    4,
    106,
    65,
    16,
    106,
    34,
    4,
    32,
    4,
    45,
    0,
    0,
    65,
    128,
    1,
    114,
    58,
    0,
    0,
    32,
    1,
    32,
    1,
    40,
    2,
    12,
    65,
    127,
    106,
    34,
    4,
    54,
    2,
    12,
    32,
    4,
    69,
    4,
    64,
    32,
    1,
    65,
    8,
    54,
    2,
    12,
    32,
    1,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    65,
    1,
    106,
    54,
    2,
    0,
    11,
    32,
    0,
    32,
    3,
    65,
    136,
    161,
    192,
    0,
    106,
    32,
    5,
    65,
    136,
    169,
    192,
    0,
    106,
    32,
    3,
    65,
    128,
    4,
    73,
    27,
    45,
    0,
    0,
    65,
    1,
    116,
    106,
    65,
    192,
    4,
    106,
    34,
    1,
    32,
    1,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    2,
    64,
    32,
    2,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    2,
    65,
    1,
    116,
    65,
    164,
    154,
    192,
    0,
    106,
    47,
    1,
    0,
    34,
    1,
    65,
    159,
    2,
    75,
    13,
    1,
    32,
    0,
    32,
    1,
    65,
    1,
    116,
    106,
    34,
    0,
    32,
    0,
    47,
    1,
    0,
    65,
    1,
    106,
    59,
    1,
    0,
    15,
    11,
    32,
    2,
    65,
    128,
    2,
    65,
    184,
    173,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    1,
    65,
    160,
    2,
    65,
    200,
    173,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    248,
    171,
    192,
    0,
    65,
    51,
    65,
    172,
    172,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    188,
    172,
    192,
    0,
    65,
    33,
    65,
    224,
    172,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    240,
    172,
    192,
    0,
    65,
    53,
    65,
    168,
    173,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    244,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    65,
    128,
    128,
    4,
    65,
    228,
    153,
    192,
    0,
    16,
    98,
    0,
    11,
    219,
    3,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    16,
    106,
    33,
    0,
    32,
    1,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    3,
    33,
    1,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    19,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    4,
    33,
    1,
    12,
    4,
    11,
    32,
    4,
    40,
    2,
    8,
    34,
    0,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    33,
    3,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    106,
    34,
    3,
    32,
    0,
    73,
    13,
    1,
    32,
    0,
    65,
    1,
    116,
    34,
    5,
    32,
    3,
    32,
    5,
    32,
    3,
    75,
    27,
    34,
    3,
    65,
    8,
    32,
    3,
    65,
    8,
    75,
    27,
    33,
    3,
    2,
    64,
    32,
    0,
    69,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    2,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    20,
    32,
    2,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    2,
    32,
    3,
    32,
    2,
    65,
    16,
    106,
    16,
    80,
    32,
    2,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    0,
    32,
    2,
    40,
    2,
    4,
    33,
    3,
    32,
    2,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    4,
    32,
    3,
    54,
    2,
    0,
    32,
    4,
    65,
    4,
    106,
    32,
    0,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    8,
    33,
    0,
    12,
    3,
    11,
    32,
    0,
    69,
    13,
    1,
    32,
    3,
    32,
    0,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    65,
    16,
    106,
    33,
    0,
    65,
    2,
    33,
    1,
    12,
    2,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    0,
    32,
    3,
    106,
    32,
    1,
    58,
    0,
    0,
    32,
    4,
    32,
    4,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    4,
    32,
    0,
    32,
    0,
    32,
    1,
    106,
    16,
    66,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    65,
    0,
    11,
    202,
    3,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    1,
    65,
    128,
    128,
    4,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    3,
    33,
    1,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    19,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    16,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    18,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    65,
    4,
    33,
    1,
    12,
    4,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    3,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    12,
    3,
    11,
    32,
    3,
    65,
    1,
    106,
    34,
    4,
    32,
    3,
    73,
    13,
    1,
    32,
    3,
    65,
    1,
    116,
    34,
    5,
    32,
    4,
    32,
    5,
    32,
    4,
    75,
    27,
    34,
    4,
    65,
    8,
    32,
    4,
    65,
    8,
    75,
    27,
    33,
    4,
    2,
    64,
    32,
    3,
    69,
    4,
    64,
    32,
    2,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    2,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    54,
    2,
    20,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    2,
    32,
    4,
    32,
    2,
    65,
    16,
    106,
    16,
    80,
    32,
    2,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    2,
    40,
    2,
    4,
    33,
    4,
    32,
    2,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    33,
    3,
    12,
    3,
    11,
    32,
    3,
    69,
    13,
    1,
    32,
    4,
    32,
    3,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    17,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    16,
    65,
    2,
    33,
    1,
    12,
    2,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    3,
    32,
    4,
    106,
    32,
    1,
    58,
    0,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    8,
    65,
    1,
    106,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    106,
    16,
    66,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    255,
    3,
    2,
    4,
    127,
    1,
    126,
    65,
    1,
    32,
    1,
    40,
    2,
    24,
    65,
    39,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    4,
    64,
    65,
    244,
    0,
    33,
    3,
    65,
    2,
    33,
    2,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    65,
    119,
    106,
    14,
    31,
    5,
    1,
    3,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    3,
    3,
    3,
    3,
    4,
    2,
    11,
    65,
    242,
    0,
    33,
    3,
    12,
    4,
    11,
    65,
    238,
    0,
    33,
    3,
    12,
    3,
    11,
    32,
    0,
    65,
    220,
    0,
    70,
    13,
    1,
    11,
    2,
    127,
    2,
    126,
    2,
    64,
    32,
    0,
    16,
    40,
    69,
    4,
    64,
    32,
    0,
    16,
    21,
    69,
    13,
    1,
    65,
    1,
    12,
    3,
    11,
    32,
    0,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    114,
    103,
    65,
    2,
    118,
    65,
    7,
    115,
    173,
    66,
    128,
    128,
    128,
    128,
    208,
    0,
    132,
    11,
    33,
    6,
    65,
    3,
    11,
    33,
    2,
    32,
    0,
    33,
    3,
    12,
    1,
    11,
    32,
    0,
    33,
    3,
    11,
    3,
    64,
    32,
    2,
    33,
    4,
    65,
    220,
    0,
    33,
    0,
    65,
    1,
    33,
    2,
    2,
    64,
    2,
    126,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    4,
    65,
    1,
    107,
    14,
    3,
    1,
    5,
    0,
    2,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    6,
    66,
    32,
    136,
    167,
    65,
    255,
    1,
    113,
    65,
    1,
    107,
    14,
    5,
    3,
    2,
    1,
    0,
    6,
    5,
    11,
    65,
    245,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    48,
    132,
    12,
    6,
    11,
    65,
    251,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    32,
    132,
    12,
    5,
    11,
    65,
    48,
    65,
    215,
    0,
    32,
    3,
    32,
    6,
    167,
    34,
    4,
    65,
    2,
    116,
    65,
    28,
    113,
    118,
    65,
    15,
    113,
    34,
    0,
    65,
    10,
    73,
    27,
    32,
    0,
    106,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    16,
    132,
    32,
    4,
    69,
    13,
    4,
    26,
    32,
    6,
    66,
    127,
    124,
    66,
    255,
    255,
    255,
    255,
    15,
    131,
    32,
    6,
    66,
    128,
    128,
    128,
    128,
    112,
    131,
    132,
    12,
    4,
    11,
    65,
    253,
    0,
    33,
    0,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    12,
    3,
    11,
    65,
    0,
    33,
    2,
    32,
    3,
    33,
    0,
    12,
    3,
    11,
    32,
    1,
    40,
    2,
    24,
    65,
    39,
    32,
    1,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    15,
    11,
    32,
    6,
    66,
    255,
    255,
    255,
    255,
    143,
    96,
    131,
    66,
    128,
    128,
    128,
    128,
    192,
    0,
    132,
    11,
    33,
    6,
    65,
    3,
    33,
    2,
    11,
    32,
    1,
    40,
    2,
    24,
    32,
    0,
    32,
    1,
    40,
    2,
    28,
    40,
    2,
    16,
    17,
    0,
    0,
    69,
    13,
    0,
    11,
    11,
    11,
    156,
    3,
    1,
    5,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    6,
    36,
    0,
    2,
    64,
    2,
    127,
    32,
    2,
    4,
    64,
    3,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    8,
    45,
    0,
    0,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    65,
    188,
    198,
    193,
    0,
    65,
    4,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    0,
    65,
    1,
    12,
    3,
    11,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    3,
    2,
    127,
    3,
    64,
    2,
    64,
    32,
    1,
    32,
    4,
    106,
    33,
    5,
    2,
    64,
    32,
    3,
    65,
    7,
    77,
    4,
    64,
    32,
    3,
    69,
    13,
    2,
    32,
    2,
    32,
    4,
    107,
    33,
    7,
    65,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    5,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    2,
    32,
    7,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    6,
    65,
    8,
    106,
    32,
    5,
    32,
    3,
    16,
    49,
    32,
    6,
    40,
    2,
    8,
    65,
    1,
    71,
    13,
    1,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    11,
    32,
    3,
    32,
    4,
    106,
    34,
    3,
    65,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    3,
    32,
    2,
    79,
    13,
    0,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    65,
    10,
    71,
    13,
    0,
    65,
    1,
    12,
    3,
    11,
    32,
    2,
    32,
    4,
    107,
    33,
    3,
    32,
    2,
    32,
    4,
    79,
    13,
    1,
    11,
    11,
    32,
    2,
    33,
    4,
    65,
    0,
    11,
    33,
    3,
    32,
    0,
    40,
    2,
    8,
    32,
    3,
    58,
    0,
    0,
    32,
    0,
    40,
    2,
    4,
    33,
    3,
    32,
    0,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    2,
    64,
    32,
    2,
    32,
    4,
    71,
    4,
    64,
    32,
    2,
    32,
    4,
    75,
    4,
    64,
    32,
    1,
    32,
    4,
    106,
    34,
    7,
    44,
    0,
    0,
    65,
    191,
    127,
    74,
    13,
    2,
    11,
    32,
    1,
    32,
    2,
    65,
    0,
    32,
    4,
    65,
    192,
    198,
    193,
    0,
    16,
    12,
    0,
    11,
    32,
    5,
    32,
    1,
    32,
    4,
    32,
    3,
    40,
    2,
    12,
    17,
    1,
    0,
    69,
    13,
    1,
    65,
    1,
    12,
    4,
    11,
    65,
    1,
    32,
    5,
    32,
    1,
    32,
    4,
    32,
    3,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    3,
    26,
    32,
    7,
    44,
    0,
    0,
    65,
    191,
    127,
    76,
    13,
    4,
    11,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    34,
    2,
    13,
    0,
    11,
    11,
    65,
    0,
    11,
    32,
    6,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    1,
    32,
    2,
    32,
    4,
    32,
    2,
    65,
    208,
    198,
    193,
    0,
    16,
    12,
    0,
    11,
    160,
    3,
    1,
    5,
    127,
    2,
    64,
    2,
    64,
    65,
    0,
    65,
    15,
    32,
    0,
    65,
    164,
    154,
    4,
    73,
    27,
    34,
    1,
    32,
    1,
    65,
    8,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    0,
    65,
    11,
    116,
    34,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    4,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    2,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    1,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    32,
    1,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    32,
    2,
    75,
    27,
    34,
    3,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    11,
    116,
    34,
    1,
    32,
    2,
    70,
    32,
    1,
    32,
    2,
    73,
    106,
    32,
    3,
    106,
    34,
    2,
    65,
    30,
    77,
    4,
    64,
    65,
    177,
    5,
    33,
    4,
    32,
    2,
    65,
    30,
    71,
    4,
    64,
    32,
    2,
    65,
    2,
    116,
    65,
    220,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    21,
    118,
    33,
    4,
    11,
    65,
    0,
    33,
    1,
    32,
    2,
    65,
    127,
    106,
    34,
    3,
    32,
    2,
    77,
    4,
    64,
    32,
    3,
    65,
    31,
    79,
    13,
    3,
    32,
    3,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    255,
    255,
    255,
    0,
    113,
    33,
    1,
    11,
    2,
    64,
    32,
    4,
    32,
    2,
    65,
    2,
    116,
    65,
    216,
    216,
    193,
    0,
    106,
    40,
    2,
    0,
    65,
    21,
    118,
    34,
    3,
    65,
    1,
    106,
    70,
    13,
    0,
    32,
    0,
    32,
    1,
    107,
    33,
    2,
    32,
    3,
    65,
    177,
    5,
    32,
    3,
    65,
    177,
    5,
    75,
    27,
    33,
    5,
    32,
    4,
    65,
    127,
    106,
    33,
    1,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    3,
    32,
    5,
    70,
    13,
    3,
    32,
    0,
    32,
    3,
    65,
    212,
    217,
    193,
    0,
    106,
    45,
    0,
    0,
    106,
    34,
    0,
    32,
    2,
    75,
    13,
    1,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    1,
    33,
    3,
    11,
    32,
    3,
    65,
    1,
    113,
    15,
    11,
    32,
    2,
    65,
    31,
    65,
    160,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    5,
    65,
    177,
    5,
    65,
    176,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    65,
    31,
    65,
    192,
    216,
    193,
    0,
    16,
    98,
    0,
    11,
    182,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    16,
    106,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    65,
    16,
    106,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    89,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    20,
    34,
    4,
    69,
    13,
    1,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    6,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    70,
    13,
    1,
    32,
    3,
    53,
    0,
    21,
    32,
    3,
    65,
    25,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    27,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    20,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    65,
    8,
    106,
    65,
    27,
    16,
    103,
    32,
    3,
    40,
    2,
    12,
    33,
    2,
    32,
    3,
    40,
    2,
    8,
    34,
    0,
    65,
    172,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    23,
    106,
    65,
    195,
    136,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    188,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    180,
    136,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    2,
    32,
    1,
    65,
    27,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    65,
    17,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    6,
    11,
    32,
    3,
    40,
    2,
    16,
    65,
    1,
    71,
    13,
    3,
    32,
    3,
    45,
    0,
    20,
    65,
    2,
    79,
    13,
    2,
    12,
    3,
    11,
    32,
    4,
    32,
    2,
    65,
    156,
    136,
    192,
    0,
    16,
    101,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    40,
    2,
    24,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    24,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    212,
    134,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    204,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    196,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    188,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    172,
    134,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    28,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    212,
    134,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    204,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    196,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    188,
    134,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    172,
    134,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    28,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    204,
    135,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    196,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    188,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    180,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    164,
    135,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    172,
    3,
    2,
    6,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    65,
    3,
    33,
    5,
    2,
    64,
    32,
    2,
    69,
    13,
    0,
    32,
    3,
    65,
    4,
    114,
    33,
    6,
    3,
    64,
    32,
    3,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    29,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    4,
    34,
    4,
    69,
    4,
    64,
    65,
    28,
    65,
    1,
    16,
    149,
    1,
    34,
    0,
    69,
    13,
    2,
    32,
    0,
    65,
    24,
    106,
    65,
    204,
    135,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    196,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    188,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    180,
    135,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    66,
    156,
    128,
    128,
    128,
    192,
    3,
    55,
    2,
    4,
    32,
    1,
    32,
    0,
    54,
    2,
    0,
    65,
    14,
    32,
    1,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    34,
    10,
    66,
    8,
    136,
    33,
    9,
    32,
    10,
    167,
    33,
    5,
    12,
    8,
    11,
    32,
    2,
    32,
    4,
    73,
    13,
    3,
    32,
    1,
    32,
    4,
    106,
    33,
    1,
    32,
    2,
    32,
    4,
    107,
    33,
    2,
    12,
    5,
    11,
    32,
    6,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    4,
    64,
    32,
    3,
    53,
    0,
    5,
    32,
    3,
    65,
    9,
    106,
    51,
    0,
    0,
    32,
    3,
    65,
    11,
    106,
    49,
    0,
    0,
    66,
    16,
    134,
    132,
    66,
    32,
    134,
    132,
    33,
    9,
    32,
    3,
    45,
    0,
    4,
    33,
    5,
    12,
    7,
    11,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    13,
    4,
    32,
    3,
    45,
    0,
    4,
    65,
    2,
    79,
    13,
    3,
    12,
    4,
    11,
    65,
    28,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    164,
    135,
    192,
    0,
    16,
    101,
    0,
    11,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    40,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    4,
    40,
    2,
    4,
    34,
    7,
    40,
    2,
    4,
    34,
    8,
    4,
    64,
    32,
    4,
    40,
    2,
    0,
    32,
    8,
    32,
    7,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    5,
    173,
    66,
    255,
    1,
    131,
    32,
    9,
    66,
    8,
    134,
    132,
    11,
    162,
    3,
    2,
    4,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    65,
    1,
    33,
    4,
    2,
    64,
    32,
    0,
    45,
    0,
    4,
    13,
    0,
    32,
    0,
    45,
    0,
    5,
    33,
    5,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    3,
    40,
    2,
    24,
    65,
    224,
    198,
    193,
    0,
    65,
    3,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    32,
    0,
    40,
    2,
    0,
    33,
    3,
    11,
    32,
    2,
    65,
    1,
    58,
    0,
    23,
    32,
    2,
    65,
    52,
    106,
    65,
    164,
    198,
    193,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    41,
    2,
    24,
    55,
    3,
    8,
    32,
    2,
    32,
    2,
    65,
    23,
    106,
    54,
    2,
    16,
    32,
    3,
    41,
    2,
    8,
    33,
    6,
    32,
    3,
    41,
    2,
    16,
    33,
    7,
    32,
    2,
    32,
    3,
    45,
    0,
    32,
    58,
    0,
    56,
    32,
    2,
    32,
    7,
    55,
    3,
    40,
    32,
    2,
    32,
    6,
    55,
    3,
    32,
    32,
    2,
    32,
    3,
    41,
    2,
    0,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    48,
    32,
    2,
    65,
    8,
    106,
    65,
    216,
    140,
    192,
    0,
    65,
    16,
    16,
    39,
    13,
    1,
    32,
    2,
    65,
    8,
    106,
    65,
    155,
    197,
    193,
    0,
    65,
    2,
    16,
    39,
    13,
    1,
    32,
    1,
    32,
    2,
    65,
    24,
    106,
    65,
    244,
    140,
    192,
    0,
    40,
    2,
    0,
    17,
    0,
    0,
    13,
    1,
    32,
    2,
    40,
    2,
    48,
    65,
    227,
    198,
    193,
    0,
    65,
    2,
    32,
    2,
    40,
    2,
    52,
    40,
    2,
    12,
    17,
    1,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    24,
    65,
    229,
    198,
    193,
    0,
    65,
    231,
    198,
    193,
    0,
    32,
    5,
    27,
    65,
    2,
    65,
    3,
    32,
    5,
    27,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    24,
    65,
    216,
    140,
    192,
    0,
    65,
    16,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    24,
    65,
    155,
    197,
    193,
    0,
    65,
    2,
    32,
    3,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    65,
    244,
    140,
    192,
    0,
    40,
    2,
    0,
    17,
    0,
    0,
    33,
    4,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    5,
    32,
    0,
    32,
    4,
    58,
    0,
    4,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    238,
    2,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    78,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    1,
    65,
    64,
    107,
    33,
    6,
    32,
    1,
    65,
    40,
    106,
    33,
    5,
    32,
    3,
    69,
    13,
    1,
    3,
    64,
    32,
    5,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    5,
    32,
    2,
    32,
    3,
    32,
    6,
    65,
    0,
    16,
    110,
    32,
    4,
    45,
    0,
    0,
    34,
    7,
    32,
    5,
    41,
    3,
    0,
    32,
    9,
    125,
    34,
    9,
    167,
    114,
    32,
    4,
    45,
    0,
    1,
    34,
    8,
    65,
    2,
    70,
    114,
    13,
    3,
    32,
    1,
    16,
    78,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    0,
    11,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    12,
    2,
    11,
    32,
    5,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    5,
    32,
    2,
    65,
    0,
    32,
    6,
    65,
    0,
    16,
    110,
    32,
    5,
    41,
    3,
    0,
    32,
    9,
    125,
    33,
    9,
    32,
    4,
    45,
    0,
    1,
    33,
    8,
    32,
    4,
    45,
    0,
    0,
    33,
    7,
    11,
    32,
    0,
    2,
    127,
    32,
    7,
    65,
    1,
    70,
    4,
    64,
    65,
    22,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    13,
    3,
    32,
    1,
    65,
    14,
    106,
    65,
    142,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    136,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    1,
    65,
    128,
    132,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    4,
    32,
    2,
    66,
    150,
    128,
    128,
    128,
    224,
    2,
    55,
    2,
    4,
    32,
    2,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    11,
    32,
    2,
    65,
    200,
    132,
    192,
    0,
    16,
    107,
    55,
    2,
    4,
    65,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    9,
    62,
    2,
    4,
    32,
    0,
    65,
    8,
    106,
    32,
    8,
    58,
    0,
    0,
    65,
    0,
    11,
    54,
    2,
    0,
    11,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    65,
    22,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    131,
    3,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    69,
    4,
    64,
    32,
    1,
    33,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    3,
    106,
    34,
    3,
    65,
    2,
    118,
    33,
    4,
    2,
    64,
    32,
    1,
    65,
    4,
    75,
    13,
    0,
    32,
    4,
    65,
    127,
    106,
    34,
    0,
    65,
    255,
    1,
    75,
    13,
    0,
    32,
    2,
    65,
    136,
    223,
    193,
    0,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    65,
    2,
    116,
    65,
    140,
    223,
    193,
    0,
    106,
    34,
    3,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    32,
    2,
    65,
    8,
    106,
    65,
    164,
    138,
    192,
    0,
    16,
    32,
    34,
    0,
    13,
    0,
    32,
    2,
    32,
    2,
    65,
    8,
    106,
    32,
    4,
    32,
    1,
    16,
    74,
    65,
    0,
    33,
    0,
    32,
    2,
    40,
    2,
    0,
    13,
    0,
    32,
    2,
    40,
    2,
    4,
    34,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    32,
    2,
    65,
    8,
    106,
    65,
    164,
    138,
    192,
    0,
    16,
    32,
    33,
    0,
    11,
    32,
    3,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    2,
    65,
    136,
    223,
    193,
    0,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    64,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    65,
    140,
    138,
    192,
    0,
    65,
    140,
    138,
    192,
    0,
    16,
    32,
    34,
    0,
    13,
    0,
    32,
    3,
    65,
    124,
    113,
    34,
    0,
    32,
    1,
    65,
    3,
    116,
    65,
    128,
    128,
    1,
    106,
    34,
    3,
    32,
    0,
    32,
    3,
    75,
    27,
    65,
    135,
    128,
    4,
    106,
    34,
    3,
    65,
    16,
    118,
    64,
    0,
    34,
    0,
    65,
    127,
    70,
    4,
    64,
    65,
    0,
    33,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    16,
    116,
    34,
    0,
    32,
    0,
    32,
    3,
    65,
    128,
    128,
    124,
    113,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    4,
    32,
    1,
    32,
    2,
    65,
    12,
    106,
    65,
    140,
    138,
    192,
    0,
    65,
    140,
    138,
    192,
    0,
    16,
    32,
    33,
    0,
    11,
    65,
    136,
    223,
    193,
    0,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    0,
    11,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    32,
    0,
    11,
    186,
    2,
    1,
    4,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    3,
    106,
    65,
    124,
    113,
    32,
    1,
    107,
    34,
    3,
    69,
    13,
    0,
    32,
    2,
    32,
    3,
    32,
    3,
    32,
    2,
    75,
    27,
    34,
    4,
    69,
    13,
    0,
    65,
    0,
    33,
    3,
    2,
    64,
    3,
    64,
    32,
    1,
    32,
    3,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    1,
    32,
    4,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    4,
    32,
    2,
    65,
    120,
    106,
    34,
    3,
    77,
    13,
    2,
    12,
    3,
    11,
    65,
    1,
    33,
    1,
    12,
    3,
    11,
    32,
    2,
    65,
    120,
    106,
    33,
    3,
    65,
    0,
    33,
    4,
    11,
    3,
    64,
    32,
    1,
    32,
    4,
    106,
    34,
    5,
    65,
    4,
    106,
    40,
    2,
    0,
    65,
    138,
    148,
    168,
    208,
    0,
    115,
    34,
    6,
    65,
    127,
    115,
    32,
    6,
    65,
    255,
    253,
    251,
    119,
    106,
    113,
    32,
    5,
    40,
    2,
    0,
    65,
    138,
    148,
    168,
    208,
    0,
    115,
    34,
    5,
    65,
    127,
    115,
    32,
    5,
    65,
    255,
    253,
    251,
    119,
    106,
    113,
    114,
    65,
    128,
    129,
    130,
    132,
    120,
    113,
    69,
    4,
    64,
    32,
    4,
    65,
    8,
    106,
    34,
    4,
    32,
    3,
    77,
    13,
    1,
    11,
    11,
    32,
    4,
    32,
    2,
    75,
    13,
    2,
    11,
    65,
    0,
    33,
    3,
    2,
    127,
    65,
    0,
    32,
    2,
    32,
    4,
    70,
    13,
    0,
    26,
    32,
    1,
    32,
    4,
    106,
    33,
    5,
    32,
    2,
    32,
    4,
    107,
    33,
    1,
    3,
    64,
    65,
    1,
    32,
    3,
    32,
    5,
    106,
    45,
    0,
    0,
    65,
    10,
    70,
    13,
    1,
    26,
    32,
    1,
    32,
    3,
    65,
    1,
    106,
    34,
    3,
    71,
    13,
    0,
    11,
    32,
    1,
    33,
    3,
    65,
    0,
    11,
    33,
    1,
    32,
    3,
    32,
    4,
    106,
    33,
    3,
    11,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    15,
    11,
    32,
    4,
    32,
    2,
    65,
    224,
    201,
    193,
    0,
    16,
    101,
    0,
    11,
    228,
    2,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    65,
    24,
    106,
    40,
    2,
    0,
    69,
    13,
    0,
    32,
    0,
    16,
    82,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    56,
    106,
    40,
    2,
    0,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    196,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    64,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    212,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    80,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    40,
    2,
    92,
    69,
    13,
    0,
    2,
    64,
    32,
    0,
    65,
    224,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    228,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    2,
    64,
    32,
    0,
    65,
    236,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    240,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    248,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    252,
    0,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    144,
    1,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    140,
    1,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    206,
    2,
    1,
    6,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    32,
    1,
    40,
    2,
    0,
    33,
    7,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    65,
    3,
    116,
    34,
    5,
    69,
    4,
    64,
    12,
    1,
    11,
    32,
    7,
    65,
    4,
    106,
    33,
    2,
    3,
    64,
    32,
    2,
    40,
    2,
    0,
    32,
    4,
    106,
    33,
    4,
    32,
    2,
    65,
    8,
    106,
    33,
    2,
    32,
    5,
    65,
    120,
    106,
    34,
    5,
    13,
    0,
    11,
    11,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    20,
    106,
    40,
    2,
    0,
    69,
    4,
    64,
    32,
    4,
    33,
    2,
    12,
    1,
    11,
    32,
    6,
    4,
    64,
    65,
    0,
    33,
    5,
    65,
    1,
    33,
    6,
    32,
    4,
    65,
    15,
    77,
    4,
    64,
    32,
    7,
    65,
    4,
    106,
    40,
    2,
    0,
    69,
    13,
    3,
    11,
    32,
    4,
    32,
    4,
    106,
    34,
    2,
    32,
    4,
    79,
    13,
    1,
    12,
    2,
    11,
    65,
    0,
    65,
    0,
    65,
    168,
    195,
    193,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    65,
    127,
    74,
    4,
    64,
    32,
    2,
    69,
    4,
    64,
    65,
    0,
    33,
    5,
    65,
    1,
    33,
    6,
    12,
    2,
    11,
    32,
    2,
    33,
    5,
    32,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    6,
    13,
    1,
    32,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    32,
    6,
    54,
    2,
    0,
    32,
    0,
    32,
    5,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    4,
    32,
    3,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    3,
    65,
    4,
    106,
    65,
    196,
    194,
    193,
    0,
    32,
    3,
    65,
    8,
    106,
    16,
    31,
    69,
    4,
    64,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    65,
    200,
    195,
    193,
    0,
    65,
    51,
    32,
    3,
    65,
    8,
    106,
    65,
    184,
    195,
    193,
    0,
    65,
    148,
    196,
    193,
    0,
    16,
    93,
    0,
    11,
    192,
    2,
    2,
    5,
    127,
    1,
    126,
    35,
    0,
    65,
    48,
    107,
    34,
    5,
    36,
    0,
    65,
    39,
    33,
    3,
    2,
    64,
    32,
    0,
    66,
    144,
    206,
    0,
    84,
    4,
    64,
    32,
    0,
    33,
    8,
    12,
    1,
    11,
    3,
    64,
    32,
    5,
    65,
    9,
    106,
    32,
    3,
    106,
    34,
    4,
    65,
    124,
    106,
    32,
    0,
    32,
    0,
    66,
    144,
    206,
    0,
    128,
    34,
    8,
    66,
    144,
    206,
    0,
    126,
    125,
    167,
    34,
    6,
    65,
    255,
    255,
    3,
    113,
    65,
    228,
    0,
    110,
    34,
    7,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    32,
    4,
    65,
    126,
    106,
    32,
    6,
    32,
    7,
    65,
    228,
    0,
    108,
    107,
    65,
    255,
    255,
    3,
    113,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    32,
    3,
    65,
    124,
    106,
    33,
    3,
    32,
    0,
    66,
    255,
    193,
    215,
    47,
    86,
    32,
    8,
    33,
    0,
    13,
    0,
    11,
    11,
    32,
    8,
    167,
    34,
    4,
    65,
    227,
    0,
    74,
    4,
    64,
    32,
    3,
    65,
    126,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    8,
    167,
    34,
    4,
    32,
    4,
    65,
    255,
    255,
    3,
    113,
    65,
    228,
    0,
    110,
    34,
    4,
    65,
    228,
    0,
    108,
    107,
    65,
    255,
    255,
    3,
    113,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    11,
    2,
    64,
    32,
    4,
    65,
    9,
    76,
    4,
    64,
    32,
    3,
    65,
    127,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    4,
    65,
    48,
    106,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    3,
    65,
    126,
    106,
    34,
    3,
    32,
    5,
    65,
    9,
    106,
    106,
    32,
    4,
    65,
    1,
    116,
    65,
    162,
    199,
    193,
    0,
    106,
    47,
    0,
    0,
    59,
    0,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    228,
    196,
    193,
    0,
    65,
    0,
    32,
    5,
    65,
    9,
    106,
    32,
    3,
    106,
    65,
    39,
    32,
    3,
    107,
    16,
    27,
    32,
    5,
    65,
    48,
    106,
    36,
    0,
    11,
    206,
    2,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    34,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    57,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    16,
    34,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    156,
    1,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    224,
    33,
    65,
    2,
    16,
    156,
    1,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    156,
    1,
    32,
    0,
    40,
    2,
    16,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    36,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    208,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    76,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    220,
    2,
    2,
    7,
    127,
    1,
    126,
    35,
    0,
    34,
    2,
    33,
    5,
    32,
    2,
    65,
    32,
    107,
    65,
    96,
    113,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    82,
    34,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    32,
    1,
    65,
    216,
    0,
    106,
    40,
    2,
    0,
    65,
    8,
    71,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    5,
    32,
    1,
    40,
    2,
    80,
    34,
    3,
    45,
    0,
    7,
    33,
    4,
    32,
    3,
    45,
    0,
    6,
    33,
    6,
    32,
    3,
    45,
    0,
    5,
    33,
    7,
    32,
    3,
    45,
    0,
    4,
    33,
    8,
    32,
    3,
    40,
    0,
    0,
    32,
    1,
    16,
    147,
    1,
    71,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    6,
    32,
    1,
    40,
    2,
    16,
    32,
    7,
    65,
    8,
    116,
    32,
    8,
    114,
    32,
    6,
    65,
    16,
    116,
    114,
    32,
    4,
    65,
    24,
    116,
    114,
    70,
    13,
    2,
    11,
    16,
    79,
    33,
    9,
    11,
    32,
    9,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    1,
    11,
    32,
    1,
    32,
    2,
    41,
    3,
    16,
    55,
    3,
    16,
    32,
    1,
    32,
    2,
    41,
    3,
    8,
    55,
    3,
    8,
    32,
    1,
    32,
    2,
    41,
    3,
    0,
    55,
    3,
    0,
    65,
    0,
    33,
    3,
    32,
    2,
    65,
    0,
    54,
    2,
    24,
    32,
    1,
    65,
    24,
    106,
    34,
    4,
    41,
    3,
    0,
    33,
    9,
    32,
    4,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    0,
    32,
    9,
    167,
    69,
    13,
    4,
    32,
    0,
    65,
    12,
    106,
    32,
    1,
    65,
    32,
    106,
    41,
    2,
    0,
    62,
    2,
    0,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    9,
    55,
    2,
    4,
    65,
    1,
    33,
    3,
    11,
    32,
    1,
    16,
    50,
    32,
    0,
    32,
    3,
    54,
    2,
    0,
    32,
    5,
    36,
    0,
    15,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    184,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    184,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    202,
    2,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    7,
    36,
    0,
    32,
    7,
    65,
    8,
    106,
    32,
    6,
    65,
    255,
    1,
    113,
    16,
    119,
    32,
    7,
    40,
    2,
    12,
    33,
    6,
    32,
    7,
    40,
    2,
    8,
    69,
    4,
    64,
    32,
    7,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    6,
    16,
    7,
    32,
    1,
    32,
    1,
    41,
    3,
    0,
    32,
    7,
    53,
    2,
    16,
    124,
    55,
    3,
    0,
    32,
    1,
    32,
    1,
    41,
    3,
    8,
    32,
    7,
    53,
    2,
    20,
    124,
    55,
    3,
    8,
    32,
    7,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    2,
    32,
    0,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    7,
    40,
    2,
    24,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    65,
    123,
    70,
    13,
    1,
    32,
    0,
    65,
    4,
    106,
    65,
    0,
    54,
    2,
    0,
    65,
    1,
    12,
    3,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    65,
    1,
    107,
    14,
    2,
    2,
    0,
    1,
    11,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    34,
    2,
    65,
    152,
    210,
    0,
    106,
    45,
    0,
    0,
    34,
    3,
    69,
    13,
    0,
    32,
    2,
    65,
    24,
    106,
    40,
    2,
    0,
    33,
    1,
    32,
    3,
    65,
    103,
    106,
    65,
    255,
    1,
    113,
    65,
    9,
    73,
    32,
    2,
    65,
    4,
    106,
    40,
    2,
    0,
    69,
    13,
    0,
    69,
    13,
    1,
    11,
    65,
    0,
    33,
    1,
    11,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    65,
    1,
    54,
    2,
    0,
    65,
    1,
    12,
    4,
    11,
    32,
    0,
    65,
    0,
    58,
    0,
    1,
    65,
    0,
    12,
    3,
    11,
    32,
    0,
    65,
    2,
    58,
    0,
    1,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    1,
    11,
    65,
    0,
    11,
    58,
    0,
    0,
    32,
    7,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    7,
    32,
    6,
    54,
    2,
    16,
    65,
    244,
    143,
    192,
    0,
    65,
    43,
    32,
    7,
    65,
    16,
    106,
    65,
    160,
    144,
    192,
    0,
    65,
    140,
    145,
    192,
    0,
    16,
    93,
    0,
    11,
    173,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    4,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    127,
    32,
    1,
    40,
    2,
    0,
    34,
    3,
    65,
    16,
    113,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    4,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    3,
    65,
    48,
    114,
    32,
    3,
    65,
    215,
    0,
    106,
    32,
    3,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    13,
    2,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    4,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    12,
    1,
    11,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    32,
    3,
    65,
    32,
    113,
    4,
    64,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    4,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    3,
    65,
    48,
    114,
    32,
    3,
    65,
    55,
    106,
    32,
    3,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    13,
    3,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    4,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    12,
    1,
    11,
    32,
    2,
    173,
    65,
    1,
    32,
    1,
    16,
    52,
    11,
    32,
    4,
    65,
    128,
    1,
    106,
    36,
    0,
    15,
    11,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    180,
    2,
    2,
    8,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    36,
    106,
    33,
    7,
    32,
    0,
    65,
    44,
    106,
    33,
    4,
    32,
    0,
    65,
    32,
    106,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    4,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    6,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    36,
    33,
    2,
    32,
    6,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    5,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    6,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    36,
    34,
    8,
    32,
    1,
    32,
    8,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    163,
    1,
    33,
    9,
    32,
    3,
    32,
    0,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    7,
    65,
    4,
    16,
    65,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    16,
    163,
    1,
    32,
    9,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    10,
    66,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    9,
    66,
    255,
    1,
    131,
    33,
    10,
    32,
    9,
    66,
    128,
    126,
    131,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    10,
    132,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    180,
    2,
    2,
    8,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    65,
    24,
    106,
    33,
    6,
    32,
    0,
    65,
    36,
    106,
    33,
    7,
    32,
    0,
    65,
    44,
    106,
    33,
    4,
    32,
    0,
    65,
    32,
    106,
    33,
    5,
    2,
    64,
    2,
    126,
    2,
    64,
    3,
    64,
    2,
    64,
    32,
    4,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    6,
    40,
    2,
    0,
    4,
    64,
    3,
    64,
    32,
    0,
    40,
    2,
    36,
    33,
    2,
    32,
    6,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    5,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    5,
    32,
    5,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    6,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    36,
    34,
    8,
    32,
    1,
    32,
    8,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    16,
    163,
    1,
    33,
    9,
    32,
    3,
    32,
    0,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    7,
    65,
    4,
    16,
    110,
    32,
    3,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    16,
    163,
    1,
    32,
    9,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    10,
    66,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    32,
    3,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    9,
    66,
    255,
    1,
    131,
    33,
    10,
    32,
    9,
    66,
    128,
    126,
    131,
    11,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    32,
    10,
    132,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    246,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    240,
    128,
    4,
    107,
    34,
    0,
    36,
    0,
    2,
    64,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    4,
    64,
    32,
    0,
    65,
    8,
    106,
    34,
    2,
    65,
    16,
    106,
    65,
    0,
    65,
    128,
    128,
    4,
    16,
    131,
    1,
    26,
    32,
    2,
    66,
    128,
    128,
    128,
    128,
    128,
    1,
    55,
    2,
    8,
    32,
    2,
    66,
    1,
    55,
    2,
    0,
    32,
    0,
    65,
    152,
    128,
    4,
    106,
    16,
    91,
    65,
    224,
    33,
    65,
    2,
    16,
    149,
    1,
    34,
    2,
    69,
    13,
    1,
    32,
    2,
    65,
    0,
    65,
    224,
    33,
    16,
    131,
    1,
    26,
    32,
    0,
    65,
    208,
    128,
    4,
    106,
    16,
    97,
    32,
    1,
    32,
    0,
    65,
    8,
    106,
    65,
    144,
    128,
    4,
    16,
    121,
    34,
    1,
    32,
    2,
    54,
    2,
    200,
    128,
    4,
    32,
    1,
    65,
    192,
    128,
    4,
    106,
    32,
    0,
    65,
    200,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    184,
    128,
    4,
    106,
    32,
    0,
    65,
    192,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    176,
    128,
    4,
    106,
    32,
    0,
    65,
    184,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    168,
    128,
    4,
    106,
    32,
    0,
    65,
    176,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    160,
    128,
    4,
    106,
    32,
    0,
    65,
    168,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    152,
    128,
    4,
    106,
    32,
    0,
    65,
    160,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    32,
    0,
    41,
    3,
    152,
    128,
    4,
    55,
    2,
    144,
    128,
    4,
    32,
    1,
    32,
    0,
    41,
    3,
    208,
    128,
    4,
    55,
    2,
    204,
    128,
    4,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    32,
    0,
    65,
    216,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    220,
    128,
    4,
    106,
    32,
    0,
    65,
    224,
    128,
    4,
    106,
    41,
    3,
    0,
    55,
    2,
    0,
    32,
    1,
    65,
    228,
    128,
    4,
    106,
    32,
    0,
    65,
    232,
    128,
    4,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    240,
    128,
    4,
    106,
    36,
    0,
    32,
    1,
    15,
    11,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    65,
    224,
    33,
    65,
    2,
    16,
    165,
    1,
    0,
    11,
    186,
    2,
    1,
    5,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    3,
    69,
    4,
    64,
    32,
    1,
    65,
    4,
    106,
    33,
    3,
    32,
    1,
    40,
    2,
    0,
    33,
    4,
    32,
    2,
    65,
    0,
    54,
    2,
    32,
    32,
    2,
    66,
    1,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    36,
    32,
    2,
    65,
    56,
    106,
    32,
    4,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    32,
    4,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    4,
    41,
    2,
    0,
    55,
    3,
    40,
    32,
    2,
    65,
    36,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    40,
    106,
    16,
    31,
    26,
    32,
    2,
    65,
    16,
    106,
    34,
    4,
    32,
    2,
    40,
    2,
    32,
    54,
    2,
    0,
    32,
    2,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    8,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    69,
    13,
    0,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    6,
    69,
    13,
    0,
    32,
    5,
    32,
    6,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    3,
    32,
    2,
    41,
    3,
    8,
    55,
    2,
    0,
    32,
    3,
    65,
    8,
    106,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    40,
    2,
    0,
    33,
    3,
    11,
    32,
    1,
    65,
    1,
    54,
    2,
    4,
    32,
    1,
    65,
    12,
    106,
    40,
    2,
    0,
    33,
    4,
    32,
    1,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    33,
    5,
    32,
    1,
    66,
    0,
    55,
    2,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    32,
    4,
    54,
    2,
    8,
    32,
    1,
    32,
    5,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    188,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    183,
    2,
    2,
    2,
    127,
    1,
    126,
    2,
    64,
    2,
    64,
    32,
    1,
    16,
    58,
    34,
    4,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    4,
    64,
    32,
    1,
    40,
    2,
    24,
    33,
    2,
    32,
    1,
    65,
    0,
    54,
    2,
    24,
    32,
    2,
    69,
    13,
    2,
    32,
    1,
    65,
    28,
    106,
    41,
    2,
    0,
    33,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    4,
    55,
    2,
    0,
    32,
    1,
    40,
    2,
    16,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    1,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    1,
    32,
    1,
    40,
    2,
    36,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    15,
    11,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    55,
    2,
    4,
    2,
    64,
    32,
    1,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    1,
    16,
    58,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    0,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    1,
    40,
    2,
    24,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    0,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    1,
    40,
    2,
    16,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    156,
    1,
    32,
    1,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    40,
    2,
    36,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    15,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    240,
    131,
    192,
    0,
    16,
    114,
    0,
    11,
    169,
    2,
    1,
    3,
    127,
    35,
    0,
    65,
    224,
    0,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    16,
    138,
    1,
    32,
    3,
    65,
    216,
    0,
    106,
    32,
    3,
    65,
    32,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    208,
    0,
    106,
    32,
    3,
    65,
    24,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    200,
    0,
    106,
    34,
    5,
    32,
    3,
    65,
    16,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    64,
    107,
    34,
    4,
    32,
    3,
    65,
    8,
    106,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    3,
    32,
    3,
    41,
    3,
    0,
    55,
    3,
    56,
    32,
    3,
    65,
    40,
    106,
    32,
    3,
    65,
    56,
    106,
    32,
    2,
    16,
    16,
    32,
    4,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    56,
    32,
    0,
    32,
    2,
    65,
    0,
    16,
    126,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    128,
    128,
    2,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    0,
    32,
    3,
    41,
    3,
    56,
    55,
    2,
    24,
    32,
    0,
    32,
    1,
    54,
    2,
    36,
    32,
    0,
    65,
    40,
    106,
    66,
    128,
    128,
    2,
    55,
    2,
    0,
    32,
    0,
    65,
    32,
    106,
    32,
    4,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    56,
    106,
    16,
    124,
    32,
    0,
    65,
    0,
    54,
    2,
    72,
    32,
    0,
    65,
    64,
    107,
    32,
    5,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    0,
    65,
    56,
    106,
    32,
    4,
    41,
    3,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    3,
    41,
    3,
    56,
    55,
    3,
    48,
    32,
    0,
    32,
    3,
    41,
    3,
    40,
    55,
    2,
    76,
    32,
    0,
    65,
    212,
    0,
    106,
    32,
    3,
    65,
    48,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    224,
    0,
    106,
    36,
    0,
    11,
    194,
    2,
    2,
    3,
    127,
    2,
    126,
    35,
    0,
    65,
    64,
    106,
    34,
    3,
    36,
    0,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    0,
    45,
    0,
    8,
    13,
    0,
    26,
    32,
    0,
    40,
    2,
    4,
    33,
    5,
    32,
    0,
    40,
    2,
    0,
    34,
    4,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    5,
    69,
    4,
    64,
    65,
    1,
    32,
    4,
    40,
    2,
    24,
    65,
    237,
    198,
    193,
    0,
    65,
    2,
    32,
    4,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    2,
    26,
    32,
    0,
    40,
    2,
    0,
    33,
    4,
    11,
    32,
    3,
    65,
    1,
    58,
    0,
    23,
    32,
    3,
    65,
    52,
    106,
    65,
    164,
    198,
    193,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    41,
    2,
    24,
    55,
    3,
    8,
    32,
    3,
    32,
    3,
    65,
    23,
    106,
    54,
    2,
    16,
    32,
    4,
    41,
    2,
    8,
    33,
    6,
    32,
    4,
    41,
    2,
    16,
    33,
    7,
    32,
    3,
    32,
    4,
    45,
    0,
    32,
    58,
    0,
    56,
    32,
    3,
    32,
    7,
    55,
    3,
    40,
    32,
    3,
    32,
    6,
    55,
    3,
    32,
    32,
    3,
    32,
    4,
    41,
    2,
    0,
    55,
    3,
    24,
    32,
    3,
    32,
    3,
    65,
    8,
    106,
    54,
    2,
    48,
    65,
    1,
    32,
    1,
    32,
    3,
    65,
    24,
    106,
    32,
    2,
    40,
    2,
    12,
    17,
    0,
    0,
    13,
    1,
    26,
    32,
    3,
    40,
    2,
    48,
    65,
    227,
    198,
    193,
    0,
    65,
    2,
    32,
    3,
    40,
    2,
    52,
    40,
    2,
    12,
    17,
    1,
    0,
    12,
    1,
    11,
    65,
    1,
    32,
    4,
    40,
    2,
    24,
    65,
    229,
    198,
    193,
    0,
    65,
    239,
    198,
    193,
    0,
    32,
    5,
    27,
    65,
    2,
    65,
    1,
    32,
    5,
    27,
    32,
    4,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    0,
    26,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    40,
    2,
    12,
    17,
    0,
    0,
    11,
    58,
    0,
    8,
    32,
    0,
    32,
    0,
    40,
    2,
    4,
    65,
    1,
    106,
    54,
    2,
    4,
    32,
    3,
    65,
    64,
    107,
    36,
    0,
    11,
    249,
    2,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    17,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    0,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    220,
    192,
    193,
    0,
    65,
    13,
    16,
    127,
    12,
    17,
    11,
    32,
    2,
    32,
    1,
    65,
    168,
    194,
    193,
    0,
    65,
    8,
    16,
    127,
    12,
    16,
    11,
    32,
    2,
    32,
    1,
    65,
    152,
    194,
    193,
    0,
    65,
    16,
    16,
    127,
    12,
    15,
    11,
    32,
    2,
    32,
    1,
    65,
    135,
    194,
    193,
    0,
    65,
    17,
    16,
    127,
    12,
    14,
    11,
    32,
    2,
    32,
    1,
    65,
    248,
    193,
    193,
    0,
    65,
    15,
    16,
    127,
    12,
    13,
    11,
    32,
    2,
    32,
    1,
    65,
    231,
    193,
    193,
    0,
    65,
    17,
    16,
    127,
    12,
    12,
    11,
    32,
    2,
    32,
    1,
    65,
    219,
    193,
    193,
    0,
    65,
    12,
    16,
    127,
    12,
    11,
    11,
    32,
    2,
    32,
    1,
    65,
    210,
    193,
    193,
    0,
    65,
    9,
    16,
    127,
    12,
    10,
    11,
    32,
    2,
    32,
    1,
    65,
    194,
    193,
    193,
    0,
    65,
    16,
    16,
    127,
    12,
    9,
    11,
    32,
    2,
    32,
    1,
    65,
    184,
    193,
    193,
    0,
    65,
    10,
    16,
    127,
    12,
    8,
    11,
    32,
    2,
    32,
    1,
    65,
    171,
    193,
    193,
    0,
    65,
    13,
    16,
    127,
    12,
    7,
    11,
    32,
    2,
    32,
    1,
    65,
    161,
    193,
    193,
    0,
    65,
    10,
    16,
    127,
    12,
    6,
    11,
    32,
    2,
    32,
    1,
    65,
    149,
    193,
    193,
    0,
    65,
    12,
    16,
    127,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    138,
    193,
    193,
    0,
    65,
    11,
    16,
    127,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    130,
    193,
    193,
    0,
    65,
    8,
    16,
    127,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    65,
    249,
    192,
    193,
    0,
    65,
    9,
    16,
    127,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    238,
    192,
    193,
    0,
    65,
    11,
    16,
    127,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    233,
    192,
    193,
    0,
    65,
    5,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    175,
    2,
    2,
    5,
    127,
    2,
    126,
    35,
    0,
    65,
    32,
    107,
    34,
    6,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    34,
    8,
    41,
    3,
    0,
    33,
    11,
    32,
    4,
    65,
    8,
    106,
    34,
    9,
    40,
    2,
    0,
    33,
    7,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    33,
    10,
    32,
    4,
    40,
    2,
    0,
    33,
    4,
    32,
    6,
    65,
    8,
    106,
    32,
    5,
    65,
    255,
    1,
    113,
    16,
    119,
    32,
    6,
    40,
    2,
    12,
    33,
    5,
    2,
    64,
    32,
    6,
    40,
    2,
    8,
    69,
    4,
    64,
    32,
    6,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    7,
    106,
    32,
    10,
    32,
    7,
    107,
    32,
    5,
    16,
    22,
    32,
    1,
    32,
    1,
    41,
    3,
    0,
    32,
    6,
    53,
    2,
    16,
    124,
    55,
    3,
    0,
    32,
    8,
    32,
    8,
    41,
    3,
    0,
    32,
    6,
    53,
    2,
    20,
    124,
    34,
    12,
    55,
    3,
    0,
    32,
    6,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    2,
    32,
    6,
    40,
    2,
    24,
    33,
    1,
    32,
    9,
    32,
    7,
    32,
    12,
    32,
    11,
    125,
    167,
    106,
    54,
    2,
    0,
    65,
    1,
    65,
    3,
    32,
    2,
    65,
    123,
    70,
    27,
    65,
    128,
    132,
    12,
    32,
    2,
    65,
    3,
    116,
    65,
    248,
    255,
    255,
    7,
    113,
    118,
    32,
    1,
    65,
    1,
    70,
    27,
    34,
    1,
    65,
    255,
    1,
    113,
    65,
    3,
    70,
    13,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    32,
    1,
    58,
    0,
    1,
    32,
    6,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    6,
    32,
    5,
    54,
    2,
    16,
    65,
    244,
    143,
    192,
    0,
    65,
    43,
    32,
    6,
    65,
    16,
    106,
    65,
    160,
    144,
    192,
    0,
    65,
    156,
    145,
    192,
    0,
    16,
    93,
    0,
    11,
    65,
    252,
    138,
    192,
    0,
    65,
    43,
    32,
    6,
    65,
    16,
    106,
    65,
    168,
    139,
    192,
    0,
    65,
    180,
    140,
    192,
    0,
    16,
    93,
    0,
    11,
    138,
    2,
    1,
    4,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    2,
    64,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    4,
    107,
    32,
    2,
    32,
    1,
    107,
    34,
    6,
    79,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    12,
    1,
    11,
    2,
    64,
    32,
    4,
    32,
    6,
    106,
    34,
    2,
    32,
    4,
    73,
    13,
    0,
    32,
    5,
    65,
    1,
    116,
    34,
    4,
    32,
    2,
    32,
    4,
    32,
    2,
    75,
    27,
    34,
    2,
    65,
    8,
    32,
    2,
    65,
    8,
    75,
    27,
    33,
    2,
    2,
    64,
    32,
    5,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    3,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    5,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    3,
    32,
    2,
    32,
    3,
    65,
    16,
    106,
    16,
    80,
    32,
    3,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    4,
    32,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    4,
    12,
    2,
    11,
    32,
    4,
    69,
    13,
    0,
    32,
    2,
    32,
    4,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    2,
    32,
    4,
    106,
    32,
    1,
    32,
    6,
    16,
    121,
    26,
    32,
    0,
    65,
    8,
    106,
    34,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    6,
    106,
    54,
    2,
    0,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    11,
    161,
    2,
    1,
    4,
    127,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    2,
    40,
    2,
    28,
    54,
    2,
    4,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    32,
    2,
    40,
    2,
    20,
    34,
    3,
    32,
    1,
    65,
    24,
    106,
    40,
    2,
    0,
    34,
    5,
    32,
    2,
    40,
    2,
    32,
    34,
    6,
    107,
    34,
    4,
    32,
    4,
    32,
    3,
    75,
    27,
    34,
    4,
    4,
    127,
    32,
    4,
    32,
    6,
    106,
    34,
    3,
    32,
    4,
    73,
    13,
    2,
    32,
    5,
    32,
    3,
    73,
    13,
    3,
    32,
    2,
    40,
    2,
    16,
    34,
    3,
    32,
    4,
    106,
    34,
    5,
    32,
    3,
    73,
    13,
    4,
    32,
    5,
    65,
    205,
    153,
    5,
    79,
    13,
    5,
    32,
    1,
    65,
    20,
    106,
    40,
    2,
    0,
    32,
    6,
    106,
    32,
    2,
    40,
    2,
    48,
    32,
    3,
    106,
    32,
    4,
    16,
    121,
    26,
    32,
    2,
    40,
    2,
    20,
    33,
    3,
    32,
    2,
    40,
    2,
    32,
    5,
    32,
    6,
    11,
    32,
    4,
    106,
    34,
    1,
    54,
    2,
    32,
    32,
    2,
    32,
    3,
    32,
    4,
    107,
    54,
    2,
    20,
    32,
    0,
    32,
    1,
    54,
    2,
    8,
    32,
    2,
    32,
    2,
    40,
    2,
    16,
    32,
    4,
    106,
    54,
    2,
    16,
    11,
    2,
    64,
    32,
    2,
    45,
    0,
    55,
    69,
    13,
    0,
    32,
    2,
    40,
    2,
    20,
    13,
    0,
    32,
    0,
    65,
    1,
    54,
    2,
    0,
    11,
    15,
    11,
    32,
    6,
    32,
    3,
    65,
    184,
    175,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    3,
    32,
    5,
    65,
    184,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    32,
    3,
    32,
    5,
    65,
    200,
    175,
    192,
    0,
    16,
    100,
    0,
    11,
    32,
    5,
    65,
    204,
    153,
    5,
    65,
    200,
    175,
    192,
    0,
    16,
    99,
    0,
    11,
    252,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    2,
    65,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    32,
    1,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    3,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    65,
    1,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    0,
    65,
    2,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    15,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    4,
    11,
    33,
    1,
    32,
    0,
    32,
    1,
    16,
    39,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    249,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    65,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    1,
    79,
    4,
    64,
    32,
    1,
    65,
    128,
    16,
    73,
    13,
    1,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    32,
    1,
    65,
    128,
    128,
    4,
    79,
    13,
    2,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    224,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    3,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    65,
    1,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    192,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    65,
    12,
    106,
    33,
    3,
    65,
    2,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    15,
    32,
    2,
    32,
    1,
    65,
    18,
    118,
    65,
    240,
    1,
    114,
    58,
    0,
    12,
    32,
    2,
    32,
    1,
    65,
    6,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    14,
    32,
    2,
    32,
    1,
    65,
    12,
    118,
    65,
    63,
    113,
    65,
    128,
    1,
    114,
    58,
    0,
    13,
    65,
    4,
    11,
    33,
    1,
    32,
    0,
    32,
    3,
    32,
    1,
    16,
    39,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    132,
    2,
    1,
    5,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    65,
    0,
    58,
    0,
    15,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    1,
    16,
    89,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    65,
    16,
    106,
    65,
    4,
    114,
    33,
    4,
    3,
    64,
    32,
    4,
    16,
    133,
    1,
    65,
    255,
    1,
    113,
    65,
    15,
    71,
    13,
    2,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    69,
    13,
    0,
    32,
    2,
    45,
    0,
    20,
    65,
    2,
    73,
    13,
    0,
    32,
    2,
    40,
    2,
    24,
    34,
    3,
    40,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    3,
    40,
    2,
    4,
    34,
    5,
    40,
    2,
    4,
    34,
    6,
    4,
    64,
    32,
    3,
    40,
    2,
    0,
    32,
    6,
    32,
    5,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    2,
    40,
    2,
    24,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    40,
    2,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    1,
    16,
    89,
    32,
    2,
    40,
    2,
    16,
    65,
    1,
    70,
    13,
    0,
    11,
    11,
    32,
    2,
    40,
    2,
    20,
    69,
    4,
    64,
    32,
    0,
    65,
    2,
    58,
    0,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    2,
    45,
    0,
    15,
    58,
    0,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    2,
    41,
    2,
    20,
    55,
    0,
    0,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    241,
    1,
    1,
    1,
    127,
    32,
    2,
    32,
    3,
    107,
    32,
    5,
    113,
    33,
    3,
    32,
    4,
    65,
    3,
    70,
    4,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    32,
    1,
    73,
    4,
    64,
    32,
    2,
    32,
    1,
    79,
    13,
    1,
    32,
    0,
    32,
    2,
    106,
    32,
    0,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    3,
    65,
    1,
    106,
    32,
    5,
    113,
    34,
    4,
    32,
    1,
    79,
    13,
    2,
    32,
    2,
    65,
    1,
    106,
    34,
    6,
    32,
    1,
    79,
    13,
    3,
    32,
    0,
    32,
    6,
    106,
    32,
    0,
    32,
    4,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    3,
    65,
    2,
    106,
    32,
    5,
    113,
    34,
    3,
    32,
    1,
    79,
    13,
    4,
    32,
    2,
    65,
    2,
    106,
    34,
    2,
    32,
    1,
    79,
    13,
    5,
    32,
    0,
    32,
    2,
    106,
    32,
    0,
    32,
    3,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    15,
    11,
    32,
    3,
    32,
    1,
    65,
    216,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    232,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    4,
    32,
    1,
    65,
    248,
    180,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    6,
    32,
    1,
    65,
    136,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    3,
    32,
    1,
    65,
    152,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    168,
    181,
    192,
    0,
    16,
    98,
    0,
    11,
    32,
    0,
    32,
    1,
    32,
    3,
    32,
    2,
    32,
    4,
    32,
    5,
    16,
    25,
    11,
    237,
    1,
    1,
    3,
    127,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    1,
    45,
    0,
    16,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    5,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    27,
    34,
    4,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    3,
    69,
    13,
    3,
    32,
    2,
    32,
    5,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    32,
    1,
    32,
    6,
    32,
    4,
    107,
    54,
    2,
    4,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    54,
    2,
    0,
    32,
    3,
    69,
    32,
    4,
    114,
    13,
    1,
    32,
    1,
    65,
    1,
    58,
    0,
    16,
    11,
    32,
    1,
    40,
    2,
    8,
    33,
    5,
    2,
    64,
    32,
    1,
    65,
    12,
    106,
    40,
    2,
    0,
    34,
    6,
    32,
    3,
    32,
    6,
    32,
    3,
    73,
    27,
    34,
    4,
    65,
    1,
    71,
    4,
    64,
    32,
    2,
    32,
    5,
    32,
    4,
    16,
    121,
    26,
    12,
    1,
    11,
    32,
    3,
    69,
    13,
    3,
    32,
    2,
    32,
    5,
    45,
    0,
    0,
    58,
    0,
    0,
    11,
    32,
    1,
    32,
    6,
    32,
    4,
    107,
    54,
    2,
    12,
    32,
    1,
    32,
    4,
    32,
    5,
    106,
    54,
    2,
    8,
    11,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    4,
    54,
    2,
    4,
    15,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    137,
    192,
    0,
    16,
    98,
    0,
    11,
    65,
    0,
    65,
    0,
    65,
    148,
    137,
    192,
    0,
    16,
    98,
    0,
    11,
    227,
    1,
    1,
    4,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    2,
    36,
    0,
    32,
    1,
    65,
    4,
    106,
    33,
    4,
    32,
    1,
    40,
    2,
    4,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    33,
    3,
    32,
    2,
    65,
    0,
    54,
    2,
    32,
    32,
    2,
    66,
    1,
    55,
    3,
    24,
    32,
    2,
    32,
    2,
    65,
    24,
    106,
    54,
    2,
    36,
    32,
    2,
    65,
    56,
    106,
    32,
    3,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    48,
    106,
    32,
    3,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    3,
    41,
    2,
    0,
    55,
    3,
    40,
    32,
    2,
    65,
    36,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    40,
    106,
    16,
    31,
    26,
    32,
    2,
    65,
    16,
    106,
    34,
    3,
    32,
    2,
    40,
    2,
    32,
    54,
    2,
    0,
    32,
    2,
    32,
    2,
    41,
    3,
    24,
    55,
    3,
    8,
    2,
    64,
    32,
    1,
    40,
    2,
    4,
    34,
    5,
    69,
    13,
    0,
    32,
    1,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    5,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    4,
    32,
    2,
    41,
    3,
    8,
    55,
    2,
    0,
    32,
    4,
    65,
    8,
    106,
    32,
    3,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    188,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    2,
    65,
    64,
    107,
    36,
    0,
    11,
    241,
    1,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    0,
    54,
    2,
    12,
    2,
    127,
    2,
    64,
    32,
    2,
    65,
    2,
    106,
    34,
    2,
    32,
    2,
    108,
    34,
    2,
    65,
    128,
    16,
    32,
    2,
    65,
    128,
    16,
    75,
    27,
    34,
    4,
    65,
    4,
    32,
    3,
    65,
    12,
    106,
    65,
    188,
    138,
    192,
    0,
    65,
    188,
    138,
    192,
    0,
    16,
    32,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    3,
    65,
    188,
    138,
    192,
    0,
    32,
    4,
    65,
    4,
    16,
    92,
    2,
    64,
    32,
    3,
    40,
    2,
    0,
    4,
    64,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    4,
    34,
    2,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    8,
    32,
    3,
    32,
    2,
    54,
    2,
    12,
    32,
    4,
    65,
    4,
    32,
    3,
    65,
    12,
    106,
    65,
    188,
    138,
    192,
    0,
    65,
    188,
    138,
    192,
    0,
    16,
    32,
    33,
    2,
    32,
    1,
    32,
    3,
    40,
    2,
    12,
    54,
    2,
    0,
    32,
    2,
    13,
    1,
    11,
    65,
    1,
    12,
    1,
    11,
    32,
    2,
    66,
    0,
    55,
    2,
    4,
    32,
    2,
    32,
    2,
    32,
    4,
    65,
    2,
    116,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    65,
    0,
    11,
    33,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    65,
    16,
    106,
    36,
    0,
    11,
    202,
    1,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    4,
    32,
    1,
    107,
    32,
    2,
    73,
    4,
    64,
    32,
    1,
    32,
    2,
    106,
    34,
    2,
    32,
    1,
    73,
    13,
    2,
    32,
    4,
    65,
    1,
    116,
    34,
    1,
    32,
    2,
    32,
    1,
    32,
    2,
    75,
    27,
    34,
    1,
    65,
    8,
    32,
    1,
    65,
    8,
    75,
    27,
    33,
    1,
    2,
    64,
    32,
    4,
    69,
    4,
    64,
    32,
    3,
    65,
    0,
    54,
    2,
    16,
    12,
    1,
    11,
    32,
    3,
    65,
    24,
    106,
    65,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    54,
    2,
    20,
    32,
    3,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    16,
    11,
    32,
    3,
    32,
    1,
    32,
    3,
    65,
    16,
    106,
    16,
    81,
    32,
    3,
    65,
    8,
    106,
    40,
    2,
    0,
    33,
    1,
    32,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    1,
    54,
    2,
    0,
    11,
    32,
    3,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    1,
    69,
    13,
    0,
    32,
    2,
    32,
    1,
    16,
    165,
    1,
    0,
    11,
    16,
    158,
    1,
    0,
    11,
    149,
    2,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    4,
    36,
    0,
    65,
    1,
    33,
    5,
    65,
    188,
    231,
    193,
    0,
    65,
    188,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    106,
    54,
    2,
    0,
    2,
    64,
    2,
    64,
    65,
    192,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    65,
    192,
    231,
    193,
    0,
    66,
    129,
    128,
    128,
    128,
    16,
    55,
    3,
    0,
    12,
    1,
    11,
    65,
    196,
    231,
    193,
    0,
    65,
    196,
    231,
    193,
    0,
    40,
    2,
    0,
    65,
    1,
    106,
    34,
    5,
    54,
    2,
    0,
    32,
    5,
    65,
    3,
    79,
    13,
    1,
    11,
    32,
    4,
    32,
    3,
    54,
    2,
    28,
    32,
    4,
    32,
    2,
    54,
    2,
    24,
    32,
    4,
    65,
    196,
    188,
    193,
    0,
    54,
    2,
    20,
    32,
    4,
    65,
    196,
    188,
    193,
    0,
    54,
    2,
    16,
    65,
    176,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    2,
    65,
    127,
    76,
    13,
    0,
    65,
    176,
    231,
    193,
    0,
    32,
    2,
    65,
    1,
    106,
    34,
    2,
    54,
    2,
    0,
    65,
    176,
    231,
    193,
    0,
    65,
    184,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    3,
    4,
    127,
    65,
    180,
    231,
    193,
    0,
    40,
    2,
    0,
    32,
    4,
    65,
    8,
    106,
    32,
    0,
    32,
    1,
    40,
    2,
    16,
    17,
    4,
    0,
    32,
    4,
    32,
    4,
    41,
    3,
    8,
    55,
    3,
    16,
    32,
    4,
    65,
    16,
    106,
    32,
    3,
    40,
    2,
    12,
    17,
    4,
    0,
    65,
    176,
    231,
    193,
    0,
    40,
    2,
    0,
    5,
    32,
    2,
    11,
    65,
    127,
    106,
    54,
    2,
    0,
    32,
    5,
    65,
    2,
    79,
    13,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    0,
    11,
    0,
    11,
    223,
    1,
    2,
    3,
    127,
    1,
    126,
    2,
    64,
    32,
    0,
    40,
    2,
    24,
    69,
    13,
    0,
    32,
    0,
    16,
    57,
    34,
    4,
    167,
    65,
    3,
    113,
    65,
    2,
    70,
    4,
    64,
    32,
    4,
    66,
    32,
    136,
    167,
    34,
    1,
    40,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    40,
    2,
    0,
    17,
    2,
    0,
    32,
    1,
    40,
    2,
    4,
    34,
    2,
    40,
    2,
    4,
    34,
    3,
    4,
    64,
    32,
    1,
    40,
    2,
    0,
    32,
    3,
    32,
    2,
    40,
    2,
    8,
    16,
    156,
    1,
    11,
    32,
    1,
    65,
    12,
    65,
    4,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    24,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    65,
    1,
    16,
    156,
    1,
    11,
    32,
    0,
    40,
    2,
    16,
    34,
    1,
    65,
    192,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    156,
    1,
    32,
    1,
    40,
    2,
    200,
    128,
    4,
    65,
    224,
    33,
    65,
    2,
    16,
    156,
    1,
    32,
    1,
    65,
    212,
    128,
    4,
    106,
    40,
    2,
    0,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    156,
    1,
    32,
    0,
    40,
    2,
    16,
    65,
    232,
    128,
    4,
    65,
    4,
    16,
    156,
    1,
    32,
    0,
    65,
    40,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    36,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    208,
    1,
    1,
    6,
    127,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    200,
    0,
    106,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    24,
    4,
    64,
    32,
    0,
    65,
    24,
    106,
    33,
    5,
    32,
    0,
    65,
    32,
    106,
    33,
    3,
    32,
    0,
    65,
    200,
    0,
    106,
    33,
    4,
    3,
    64,
    32,
    0,
    40,
    2,
    64,
    33,
    2,
    32,
    5,
    32,
    3,
    40,
    2,
    0,
    32,
    1,
    16,
    75,
    32,
    0,
    40,
    2,
    24,
    32,
    3,
    40,
    2,
    0,
    106,
    32,
    2,
    32,
    1,
    16,
    121,
    26,
    32,
    3,
    32,
    3,
    40,
    2,
    0,
    32,
    1,
    106,
    54,
    2,
    0,
    32,
    0,
    32,
    2,
    32,
    1,
    16,
    141,
    1,
    32,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    1,
    73,
    13,
    3,
    32,
    4,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    107,
    34,
    2,
    69,
    13,
    2,
    32,
    0,
    40,
    2,
    64,
    34,
    6,
    32,
    1,
    32,
    6,
    106,
    32,
    2,
    16,
    96,
    32,
    4,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    33,
    1,
    32,
    0,
    40,
    2,
    24,
    13,
    0,
    11,
    11,
    65,
    236,
    130,
    192,
    0,
    65,
    43,
    65,
    152,
    132,
    192,
    0,
    16,
    114,
    0,
    11,
    66,
    3,
    15,
    11,
    32,
    1,
    32,
    2,
    65,
    208,
    133,
    192,
    0,
    16,
    99,
    0,
    11,
    205,
    1,
    2,
    4,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    53,
    16,
    103,
    32,
    1,
    40,
    2,
    12,
    33,
    3,
    32,
    1,
    40,
    2,
    8,
    34,
    0,
    65,
    172,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    45,
    106,
    65,
    217,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    40,
    106,
    65,
    212,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    32,
    106,
    65,
    204,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    24,
    106,
    65,
    196,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    16,
    106,
    65,
    188,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    180,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    65,
    53,
    54,
    2,
    8,
    32,
    2,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    3,
    54,
    2,
    4,
    65,
    11,
    32,
    2,
    65,
    248,
    145,
    192,
    0,
    16,
    107,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    144,
    1,
    1,
    3,
    127,
    65,
    1,
    33,
    3,
    65,
    1,
    33,
    4,
    2,
    64,
    32,
    1,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    3,
    12,
    1,
    11,
    2,
    127,
    32,
    2,
    40,
    2,
    0,
    34,
    5,
    69,
    4,
    64,
    65,
    1,
    32,
    1,
    69,
    13,
    1,
    26,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    12,
    1,
    11,
    32,
    2,
    40,
    2,
    4,
    34,
    2,
    69,
    4,
    64,
    65,
    1,
    32,
    1,
    69,
    13,
    1,
    26,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    12,
    1,
    11,
    32,
    5,
    32,
    2,
    32,
    1,
    16,
    143,
    1,
    11,
    34,
    2,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    65,
    0,
    33,
    4,
    32,
    1,
    33,
    3,
    11,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    3,
    54,
    2,
    0,
    11,
    145,
    1,
    1,
    2,
    127,
    65,
    1,
    33,
    3,
    2,
    64,
    32,
    1,
    65,
    0,
    72,
    4,
    64,
    65,
    0,
    33,
    1,
    12,
    1,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    0,
    34,
    4,
    69,
    4,
    64,
    32,
    1,
    69,
    13,
    1,
    12,
    3,
    11,
    32,
    2,
    40,
    2,
    4,
    34,
    2,
    13,
    1,
    32,
    1,
    13,
    2,
    11,
    65,
    1,
    33,
    2,
    12,
    3,
    11,
    32,
    4,
    32,
    2,
    32,
    1,
    16,
    143,
    1,
    34,
    2,
    69,
    13,
    1,
    12,
    2,
    11,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    34,
    2,
    13,
    1,
    11,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    65,
    1,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    65,
    0,
    33,
    3,
    11,
    32,
    0,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    54,
    2,
    0,
    11,
    154,
    1,
    2,
    3,
    127,
    2,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    65,
    64,
    107,
    33,
    3,
    32,
    0,
    65,
    40,
    106,
    33,
    2,
    2,
    126,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    0,
    16,
    78,
    34,
    4,
    167,
    65,
    255,
    1,
    113,
    65,
    3,
    71,
    13,
    2,
    32,
    2,
    16,
    163,
    1,
    33,
    4,
    32,
    1,
    32,
    2,
    65,
    168,
    132,
    192,
    0,
    65,
    0,
    32,
    3,
    65,
    4,
    16,
    110,
    32,
    1,
    45,
    0,
    0,
    65,
    1,
    70,
    13,
    1,
    32,
    2,
    16,
    163,
    1,
    32,
    4,
    82,
    13,
    0,
    11,
    66,
    3,
    33,
    4,
    66,
    0,
    12,
    2,
    11,
    32,
    1,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    8,
    16,
    128,
    1,
    34,
    4,
    66,
    128,
    126,
    131,
    12,
    1,
    11,
    32,
    4,
    66,
    128,
    126,
    131,
    11,
    33,
    5,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    32,
    4,
    66,
    255,
    1,
    131,
    32,
    5,
    132,
    11,
    141,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    3,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    4,
    65,
    48,
    114,
    32,
    4,
    65,
    215,
    0,
    106,
    32,
    4,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    32,
    3,
    65,
    128,
    1,
    106,
    36,
    0,
    11,
    140,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    128,
    1,
    107,
    34,
    3,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    3,
    106,
    65,
    255,
    0,
    106,
    32,
    2,
    65,
    15,
    113,
    34,
    4,
    65,
    48,
    114,
    32,
    4,
    65,
    55,
    106,
    32,
    4,
    65,
    10,
    73,
    27,
    58,
    0,
    0,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    32,
    2,
    65,
    4,
    118,
    34,
    2,
    13,
    0,
    11,
    32,
    0,
    65,
    128,
    1,
    106,
    34,
    2,
    65,
    129,
    1,
    79,
    4,
    64,
    32,
    2,
    65,
    128,
    1,
    65,
    144,
    199,
    193,
    0,
    16,
    101,
    0,
    11,
    32,
    1,
    65,
    1,
    65,
    160,
    199,
    193,
    0,
    65,
    2,
    32,
    0,
    32,
    3,
    106,
    65,
    128,
    1,
    106,
    65,
    0,
    32,
    0,
    107,
    16,
    27,
    32,
    3,
    65,
    128,
    1,
    106,
    36,
    0,
    11,
    135,
    1,
    1,
    1,
    127,
    32,
    0,
    32,
    2,
    65,
    255,
    1,
    113,
    34,
    2,
    65,
    10,
    32,
    2,
    65,
    10,
    73,
    27,
    65,
    2,
    116,
    65,
    232,
    175,
    192,
    0,
    106,
    40,
    2,
    0,
    32,
    2,
    65,
    4,
    73,
    65,
    14,
    116,
    114,
    34,
    3,
    32,
    3,
    65,
    128,
    32,
    114,
    32,
    1,
    27,
    34,
    1,
    32,
    1,
    65,
    128,
    128,
    32,
    114,
    32,
    2,
    27,
    34,
    1,
    54,
    2,
    144,
    128,
    4,
    32,
    0,
    65,
    196,
    128,
    4,
    106,
    32,
    1,
    65,
    14,
    118,
    65,
    1,
    113,
    58,
    0,
    0,
    32,
    0,
    32,
    1,
    65,
    255,
    31,
    113,
    34,
    0,
    65,
    2,
    118,
    65,
    2,
    106,
    65,
    3,
    110,
    65,
    1,
    106,
    173,
    66,
    32,
    134,
    32,
    0,
    65,
    2,
    106,
    65,
    3,
    110,
    65,
    1,
    106,
    173,
    132,
    55,
    2,
    204,
    128,
    4,
    11,
    150,
    1,
    1,
    2,
    127,
    32,
    0,
    45,
    0,
    8,
    33,
    1,
    32,
    0,
    40,
    2,
    4,
    34,
    2,
    4,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    33,
    1,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    1,
    13,
    0,
    26,
    2,
    64,
    32,
    2,
    65,
    1,
    71,
    13,
    0,
    32,
    0,
    45,
    0,
    9,
    69,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    2,
    45,
    0,
    0,
    65,
    4,
    113,
    13,
    0,
    65,
    1,
    32,
    2,
    40,
    2,
    24,
    65,
    240,
    198,
    193,
    0,
    65,
    1,
    32,
    2,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    13,
    1,
    26,
    11,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    24,
    65,
    241,
    198,
    193,
    0,
    65,
    1,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    34,
    1,
    58,
    0,
    8,
    11,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    11,
    168,
    1,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    65,
    6,
    106,
    14,
    6,
    6,
    5,
    4,
    3,
    2,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    65,
    236,
    186,
    192,
    0,
    65,
    5,
    16,
    127,
    12,
    6,
    11,
    32,
    2,
    32,
    1,
    65,
    136,
    187,
    192,
    0,
    65,
    5,
    16,
    127,
    12,
    5,
    11,
    32,
    2,
    32,
    1,
    65,
    130,
    187,
    192,
    0,
    65,
    6,
    16,
    127,
    12,
    4,
    11,
    32,
    2,
    32,
    1,
    65,
    254,
    186,
    192,
    0,
    65,
    4,
    16,
    127,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    65,
    251,
    186,
    192,
    0,
    65,
    3,
    16,
    127,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    65,
    248,
    186,
    192,
    0,
    65,
    3,
    16,
    127,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    241,
    186,
    192,
    0,
    65,
    7,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    162,
    1,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    34,
    2,
    65,
    20,
    106,
    40,
    2,
    0,
    33,
    3,
    2,
    64,
    2,
    127,
    2,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    4,
    14,
    2,
    0,
    1,
    3,
    11,
    32,
    3,
    13,
    2,
    65,
    0,
    33,
    2,
    65,
    196,
    188,
    193,
    0,
    12,
    1,
    11,
    32,
    3,
    13,
    1,
    32,
    2,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    4,
    33,
    2,
    32,
    3,
    40,
    2,
    0,
    11,
    33,
    3,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    1,
    65,
    168,
    192,
    193,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    8,
    32,
    0,
    40,
    2,
    8,
    16,
    76,
    0,
    11,
    32,
    1,
    65,
    0,
    54,
    2,
    4,
    32,
    1,
    32,
    2,
    54,
    2,
    0,
    32,
    1,
    65,
    148,
    192,
    193,
    0,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    8,
    32,
    0,
    40,
    2,
    8,
    16,
    76,
    0,
    11,
    137,
    1,
    2,
    3,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    1,
    40,
    2,
    24,
    34,
    6,
    32,
    2,
    32,
    3,
    16,
    72,
    65,
    1,
    33,
    4,
    32,
    5,
    41,
    2,
    4,
    33,
    7,
    2,
    64,
    2,
    64,
    32,
    5,
    40,
    2,
    0,
    65,
    1,
    71,
    4,
    64,
    32,
    6,
    32,
    7,
    167,
    34,
    4,
    32,
    6,
    40,
    2,
    20,
    106,
    54,
    2,
    20,
    32,
    4,
    32,
    3,
    75,
    13,
    2,
    32,
    1,
    32,
    2,
    32,
    4,
    16,
    141,
    1,
    32,
    0,
    32,
    4,
    54,
    2,
    4,
    65,
    0,
    33,
    4,
    12,
    1,
    11,
    32,
    0,
    32,
    7,
    55,
    2,
    4,
    11,
    32,
    0,
    32,
    4,
    54,
    2,
    0,
    32,
    5,
    65,
    16,
    106,
    36,
    0,
    15,
    11,
    32,
    4,
    32,
    3,
    65,
    252,
    137,
    192,
    0,
    16,
    99,
    0,
    11,
    141,
    1,
    2,
    4,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    8,
    106,
    65,
    19,
    16,
    103,
    32,
    0,
    40,
    2,
    12,
    33,
    3,
    32,
    0,
    40,
    2,
    8,
    34,
    2,
    65,
    225,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    32,
    2,
    65,
    15,
    106,
    65,
    240,
    145,
    192,
    0,
    40,
    0,
    0,
    54,
    0,
    0,
    32,
    2,
    65,
    8,
    106,
    65,
    233,
    145,
    192,
    0,
    41,
    0,
    0,
    55,
    0,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    19,
    54,
    2,
    8,
    32,
    1,
    32,
    2,
    54,
    2,
    0,
    32,
    1,
    32,
    3,
    54,
    2,
    4,
    65,
    11,
    32,
    1,
    65,
    248,
    145,
    192,
    0,
    16,
    107,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    11,
    136,
    1,
    1,
    1,
    127,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    204,
    153,
    5,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    0,
    65,
    204,
    153,
    5,
    16,
    131,
    1,
    33,
    1,
    32,
    0,
    65,
    0,
    58,
    0,
    55,
    32,
    0,
    65,
    0,
    59,
    0,
    53,
    32,
    0,
    65,
    144,
    32,
    54,
    2,
    0,
    32,
    0,
    66,
    0,
    55,
    2,
    4,
    32,
    0,
    65,
    12,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    66,
    0,
    55,
    2,
    28,
    32,
    0,
    65,
    20,
    106,
    66,
    128,
    128,
    128,
    128,
    16,
    55,
    2,
    0,
    32,
    0,
    65,
    36,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    65,
    44,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    54,
    2,
    48,
    32,
    0,
    65,
    0,
    58,
    0,
    52,
    11,
    113,
    0,
    2,
    127,
    32,
    2,
    65,
    2,
    116,
    34,
    1,
    32,
    3,
    65,
    3,
    116,
    65,
    128,
    128,
    1,
    106,
    34,
    2,
    32,
    1,
    32,
    2,
    75,
    27,
    65,
    135,
    128,
    4,
    106,
    34,
    1,
    65,
    16,
    118,
    64,
    0,
    34,
    2,
    65,
    127,
    70,
    4,
    64,
    65,
    0,
    33,
    3,
    65,
    1,
    12,
    1,
    11,
    32,
    2,
    65,
    16,
    116,
    34,
    3,
    66,
    0,
    55,
    3,
    0,
    32,
    3,
    65,
    0,
    54,
    2,
    8,
    32,
    3,
    32,
    3,
    32,
    1,
    65,
    128,
    128,
    124,
    113,
    106,
    65,
    2,
    114,
    54,
    2,
    0,
    65,
    0,
    11,
    33,
    2,
    32,
    0,
    32,
    3,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    11,
    127,
    1,
    1,
    127,
    35,
    0,
    65,
    64,
    106,
    34,
    5,
    36,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    12,
    32,
    5,
    32,
    0,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    20,
    32,
    5,
    32,
    2,
    54,
    2,
    16,
    32,
    5,
    65,
    44,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    5,
    65,
    60,
    106,
    65,
    194,
    0,
    54,
    2,
    0,
    32,
    5,
    66,
    2,
    55,
    2,
    28,
    32,
    5,
    65,
    160,
    197,
    193,
    0,
    54,
    2,
    24,
    32,
    5,
    65,
    62,
    54,
    2,
    52,
    32,
    5,
    32,
    5,
    65,
    48,
    106,
    54,
    2,
    40,
    32,
    5,
    32,
    5,
    65,
    16,
    106,
    54,
    2,
    56,
    32,
    5,
    32,
    5,
    65,
    8,
    106,
    54,
    2,
    48,
    32,
    5,
    65,
    24,
    106,
    32,
    4,
    16,
    130,
    1,
    0,
    11,
    113,
    1,
    3,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    32,
    1,
    16,
    56,
    13,
    0,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    1,
    40,
    2,
    24,
    32,
    2,
    65,
    28,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    24,
    32,
    2,
    66,
    1,
    55,
    2,
    12,
    32,
    2,
    65,
    232,
    196,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    13,
    0,
    32,
    0,
    65,
    4,
    106,
    32,
    1,
    16,
    56,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    15,
    11,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    65,
    1,
    11,
    119,
    1,
    2,
    127,
    32,
    0,
    45,
    0,
    4,
    33,
    1,
    32,
    0,
    45,
    0,
    5,
    4,
    64,
    32,
    1,
    65,
    255,
    1,
    113,
    33,
    2,
    32,
    0,
    2,
    127,
    65,
    1,
    32,
    2,
    13,
    0,
    26,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    33,
    2,
    32,
    1,
    40,
    2,
    24,
    33,
    0,
    32,
    1,
    45,
    0,
    0,
    65,
    4,
    113,
    4,
    64,
    32,
    0,
    65,
    234,
    198,
    193,
    0,
    65,
    1,
    32,
    2,
    17,
    1,
    0,
    12,
    1,
    11,
    32,
    0,
    65,
    235,
    198,
    193,
    0,
    65,
    2,
    32,
    2,
    17,
    1,
    0,
    11,
    34,
    1,
    58,
    0,
    4,
    11,
    32,
    1,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    11,
    101,
    0,
    2,
    64,
    32,
    0,
    32,
    1,
    107,
    32,
    2,
    73,
    4,
    64,
    32,
    1,
    65,
    127,
    106,
    33,
    1,
    32,
    0,
    65,
    127,
    106,
    33,
    0,
    3,
    64,
    32,
    0,
    32,
    2,
    106,
    32,
    1,
    32,
    2,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    2,
    69,
    13,
    0,
    3,
    64,
    32,
    0,
    32,
    1,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    0,
    65,
    1,
    106,
    33,
    0,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    11,
    77,
    1,
    1,
    127,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    130,
    130,
    10,
    65,
    2,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    0,
    65,
    130,
    130,
    10,
    16,
    131,
    1,
    33,
    1,
    32,
    0,
    66,
    0,
    55,
    2,
    12,
    32,
    0,
    32,
    1,
    54,
    2,
    8,
    32,
    0,
    65,
    20,
    106,
    66,
    0,
    55,
    2,
    0,
    32,
    0,
    66,
    135,
    128,
    128,
    128,
    48,
    55,
    2,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    244,
    197,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    196,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    248,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    109,
    1,
    1,
    127,
    35,
    0,
    65,
    48,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    28,
    106,
    65,
    2,
    54,
    2,
    0,
    32,
    3,
    65,
    44,
    106,
    65,
    61,
    54,
    2,
    0,
    32,
    3,
    66,
    2,
    55,
    2,
    12,
    32,
    3,
    65,
    164,
    202,
    193,
    0,
    54,
    2,
    8,
    32,
    3,
    65,
    61,
    54,
    2,
    36,
    32,
    3,
    32,
    3,
    65,
    32,
    106,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    4,
    106,
    54,
    2,
    40,
    32,
    3,
    32,
    3,
    54,
    2,
    32,
    32,
    3,
    65,
    8,
    106,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    86,
    1,
    2,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    33,
    3,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    3,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    70,
    1,
    1,
    127,
    2,
    64,
    32,
    1,
    65,
    127,
    74,
    4,
    64,
    2,
    64,
    32,
    1,
    69,
    4,
    64,
    65,
    1,
    33,
    2,
    12,
    1,
    11,
    32,
    1,
    65,
    1,
    16,
    149,
    1,
    34,
    2,
    13,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    1,
    54,
    2,
    4,
    32,
    0,
    32,
    2,
    54,
    2,
    0,
    15,
    11,
    16,
    158,
    1,
    0,
    11,
    32,
    1,
    65,
    1,
    16,
    165,
    1,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    172,
    188,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    196,
    194,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    89,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    40,
    2,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    236,
    200,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    97,
    1,
    2,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    4,
    36,
    0,
    65,
    12,
    65,
    4,
    16,
    149,
    1,
    34,
    3,
    69,
    4,
    64,
    65,
    12,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    3,
    32,
    0,
    58,
    0,
    8,
    32,
    3,
    32,
    2,
    54,
    2,
    4,
    32,
    3,
    32,
    1,
    54,
    2,
    0,
    32,
    3,
    32,
    4,
    47,
    0,
    13,
    59,
    0,
    9,
    32,
    3,
    65,
    11,
    106,
    32,
    4,
    65,
    15,
    106,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    4,
    65,
    16,
    106,
    36,
    0,
    32,
    3,
    173,
    66,
    32,
    134,
    66,
    2,
    132,
    11,
    86,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    24,
    106,
    32,
    1,
    65,
    16,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    65,
    16,
    106,
    32,
    1,
    65,
    8,
    106,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    2,
    32,
    1,
    41,
    2,
    0,
    55,
    3,
    8,
    32,
    2,
    65,
    4,
    106,
    65,
    236,
    200,
    193,
    0,
    32,
    2,
    65,
    8,
    106,
    16,
    31,
    32,
    2,
    65,
    32,
    106,
    36,
    0,
    11,
    95,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    220,
    143,
    192,
    0,
    65,
    4,
    16,
    127,
    32,
    2,
    32,
    0,
    65,
    4,
    106,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    228,
    143,
    192,
    0,
    16,
    63,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    65,
    224,
    143,
    192,
    0,
    65,
    4,
    16,
    127,
    11,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    76,
    2,
    1,
    127,
    1,
    126,
    32,
    1,
    65,
    8,
    106,
    34,
    6,
    41,
    3,
    0,
    33,
    7,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    65,
    8,
    106,
    34,
    1,
    40,
    2,
    0,
    34,
    0,
    32,
    4,
    40,
    2,
    0,
    106,
    32,
    4,
    65,
    4,
    106,
    40,
    2,
    0,
    32,
    0,
    107,
    32,
    5,
    16,
    55,
    32,
    1,
    32,
    0,
    32,
    6,
    41,
    3,
    0,
    32,
    7,
    125,
    167,
    106,
    54,
    2,
    0,
    11,
    74,
    0,
    2,
    127,
    32,
    1,
    65,
    128,
    128,
    196,
    0,
    71,
    4,
    64,
    65,
    1,
    32,
    0,
    40,
    2,
    24,
    32,
    1,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    16,
    17,
    0,
    0,
    13,
    1,
    26,
    11,
    32,
    2,
    69,
    4,
    64,
    65,
    0,
    15,
    11,
    32,
    0,
    40,
    2,
    24,
    32,
    2,
    32,
    3,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    11,
    57,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    0,
    32,
    2,
    32,
    1,
    16,
    137,
    1,
    55,
    3,
    0,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    16,
    46,
    32,
    2,
    16,
    95,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    86,
    1,
    1,
    127,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    244,
    213,
    2,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    65,
    232,
    213,
    0,
    106,
    65,
    0,
    65,
    136,
    128,
    2,
    16,
    131,
    1,
    26,
    32,
    1,
    65,
    0,
    65,
    230,
    213,
    0,
    16,
    131,
    1,
    34,
    1,
    65,
    1,
    58,
    0,
    243,
    213,
    2,
    32,
    1,
    65,
    1,
    59,
    1,
    240,
    213,
    2,
    32,
    1,
    32,
    0,
    58,
    0,
    242,
    213,
    2,
    32,
    1,
    11,
    72,
    1,
    1,
    127,
    35,
    0,
    65,
    32,
    107,
    34,
    3,
    36,
    0,
    32,
    3,
    65,
    20,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    16,
    32,
    3,
    66,
    1,
    55,
    2,
    4,
    32,
    3,
    32,
    1,
    54,
    2,
    28,
    32,
    3,
    32,
    0,
    54,
    2,
    24,
    32,
    3,
    32,
    3,
    65,
    24,
    106,
    54,
    2,
    0,
    32,
    3,
    32,
    2,
    16,
    130,
    1,
    0,
    11,
    64,
    0,
    35,
    0,
    65,
    32,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    28,
    106,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    220,
    139,
    192,
    0,
    54,
    2,
    24,
    32,
    0,
    66,
    1,
    55,
    2,
    12,
    32,
    0,
    65,
    212,
    139,
    192,
    0,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    65,
    8,
    106,
    16,
    102,
    32,
    0,
    65,
    32,
    106,
    36,
    0,
    11,
    58,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    65,
    248,
    140,
    192,
    0,
    65,
    15,
    16,
    127,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    136,
    141,
    192,
    0,
    16,
    63,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    58,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    65,
    152,
    141,
    192,
    0,
    65,
    13,
    16,
    127,
    32,
    2,
    32,
    0,
    54,
    2,
    12,
    32,
    2,
    32,
    2,
    65,
    12,
    106,
    65,
    168,
    141,
    192,
    0,
    16,
    63,
    32,
    2,
    16,
    86,
    32,
    2,
    65,
    16,
    106,
    36,
    0,
    11,
    70,
    1,
    2,
    127,
    32,
    1,
    40,
    2,
    4,
    33,
    2,
    32,
    1,
    40,
    2,
    0,
    33,
    3,
    65,
    8,
    65,
    4,
    16,
    149,
    1,
    34,
    1,
    69,
    4,
    64,
    65,
    8,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    0,
    65,
    204,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    59,
    1,
    1,
    127,
    2,
    127,
    32,
    1,
    65,
    4,
    75,
    4,
    64,
    65,
    240,
    177,
    127,
    33,
    2,
    65,
    1,
    12,
    1,
    11,
    32,
    1,
    65,
    2,
    116,
    65,
    144,
    187,
    192,
    0,
    106,
    40,
    2,
    0,
    33,
    2,
    65,
    0,
    11,
    33,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    92,
    1,
    3,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    0,
    40,
    2,
    12,
    34,
    2,
    69,
    4,
    64,
    65,
    212,
    188,
    193,
    0,
    65,
    43,
    65,
    244,
    191,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    3,
    69,
    4,
    64,
    65,
    212,
    188,
    193,
    0,
    65,
    43,
    65,
    132,
    192,
    193,
    0,
    16,
    114,
    0,
    11,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    32,
    1,
    32,
    0,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    1,
    16,
    129,
    1,
    0,
    11,
    51,
    1,
    1,
    127,
    32,
    2,
    4,
    64,
    32,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    11,
    58,
    0,
    32,
    0,
    40,
    2,
    0,
    33,
    0,
    32,
    1,
    45,
    0,
    0,
    65,
    16,
    113,
    65,
    4,
    118,
    4,
    64,
    32,
    0,
    32,
    1,
    16,
    83,
    15,
    11,
    32,
    1,
    45,
    0,
    0,
    65,
    32,
    113,
    65,
    5,
    118,
    4,
    64,
    32,
    0,
    32,
    1,
    16,
    84,
    15,
    11,
    32,
    0,
    32,
    1,
    16,
    160,
    1,
    11,
    42,
    1,
    1,
    127,
    32,
    2,
    65,
    1,
    16,
    48,
    34,
    3,
    4,
    64,
    32,
    3,
    32,
    0,
    32,
    2,
    32,
    1,
    32,
    1,
    32,
    2,
    75,
    27,
    16,
    121,
    26,
    32,
    0,
    32,
    1,
    65,
    1,
    16,
    24,
    11,
    32,
    3,
    11,
    67,
    2,
    1,
    127,
    1,
    126,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    0,
    54,
    2,
    8,
    32,
    1,
    66,
    0,
    55,
    3,
    0,
    32,
    1,
    41,
    3,
    0,
    33,
    2,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    54,
    2,
    8,
    32,
    0,
    32,
    2,
    55,
    3,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    16,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    45,
    0,
    2,
    64,
    32,
    0,
    65,
    124,
    77,
    4,
    64,
    32,
    0,
    69,
    4,
    64,
    65,
    4,
    33,
    0,
    12,
    2,
    11,
    32,
    0,
    32,
    0,
    65,
    125,
    73,
    65,
    2,
    116,
    16,
    149,
    1,
    34,
    0,
    13,
    1,
    11,
    0,
    11,
    32,
    0,
    11,
    50,
    1,
    1,
    127,
    16,
    59,
    34,
    3,
    32,
    2,
    65,
    1,
    115,
    32,
    1,
    65,
    1,
    32,
    1,
    65,
    128,
    2,
    73,
    27,
    16,
    85,
    32,
    0,
    66,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    3,
    54,
    2,
    16,
    32,
    0,
    65,
    8,
    106,
    66,
    0,
    55,
    3,
    0,
    11,
    52,
    0,
    32,
    0,
    32,
    1,
    40,
    2,
    24,
    32,
    2,
    32,
    3,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    58,
    0,
    8,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    3,
    69,
    58,
    0,
    9,
    32,
    0,
    65,
    0,
    54,
    2,
    4,
    11,
    50,
    1,
    1,
    127,
    65,
    8,
    65,
    4,
    16,
    149,
    1,
    34,
    2,
    69,
    4,
    64,
    65,
    8,
    65,
    4,
    16,
    165,
    1,
    0,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    4,
    32,
    2,
    32,
    0,
    54,
    2,
    0,
    65,
    16,
    32,
    2,
    65,
    180,
    143,
    192,
    0,
    16,
    107,
    11,
    44,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    65,
    8,
    106,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    0,
    41,
    2,
    0,
    55,
    3,
    0,
    32,
    1,
    16,
    88,
    0,
    11,
    52,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    2,
    36,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    32,
    2,
    65,
    176,
    197,
    193,
    0,
    54,
    2,
    4,
    32,
    2,
    65,
    228,
    196,
    193,
    0,
    54,
    2,
    0,
    32,
    2,
    16,
    120,
    0,
    11,
    41,
    1,
    1,
    127,
    32,
    2,
    4,
    64,
    32,
    0,
    33,
    3,
    3,
    64,
    32,
    3,
    32,
    1,
    58,
    0,
    0,
    32,
    3,
    65,
    1,
    106,
    33,
    3,
    32,
    2,
    65,
    127,
    106,
    34,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    11,
    37,
    1,
    1,
    126,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    172,
    34,
    2,
    32,
    2,
    66,
    63,
    135,
    34,
    2,
    124,
    32,
    2,
    133,
    32,
    0,
    65,
    127,
    115,
    65,
    31,
    118,
    32,
    1,
    16,
    52,
    11,
    51,
    1,
    1,
    127,
    65,
    16,
    33,
    1,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    65,
    1,
    107,
    14,
    2,
    0,
    1,
    2,
    11,
    32,
    0,
    45,
    0,
    1,
    15,
    11,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    45,
    0,
    8,
    33,
    1,
    11,
    32,
    1,
    11,
    39,
    1,
    1,
    127,
    2,
    64,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    39,
    1,
    1,
    127,
    2,
    64,
    32,
    0,
    40,
    2,
    4,
    34,
    1,
    69,
    13,
    0,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    35,
    0,
    32,
    1,
    65,
    1,
    115,
    16,
    113,
    33,
    1,
    32,
    0,
    66,
    0,
    55,
    3,
    0,
    32,
    0,
    32,
    1,
    54,
    2,
    16,
    32,
    0,
    65,
    8,
    106,
    66,
    0,
    55,
    3,
    0,
    11,
    41,
    0,
    32,
    0,
    173,
    66,
    128,
    128,
    128,
    128,
    16,
    66,
    0,
    32,
    0,
    40,
    2,
    24,
    65,
    196,
    140,
    192,
    0,
    65,
    20,
    32,
    0,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    27,
    132,
    11,
    37,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    32,
    32,
    0,
    65,
    0,
    54,
    2,
    20,
    32,
    0,
    65,
    0,
    54,
    2,
    12,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    28,
    11,
    27,
    1,
    1,
    127,
    32,
    0,
    65,
    1,
    16,
    48,
    34,
    1,
    4,
    64,
    32,
    1,
    65,
    0,
    32,
    0,
    16,
    131,
    1,
    26,
    11,
    32,
    1,
    11,
    29,
    1,
    1,
    127,
    32,
    0,
    65,
    4,
    106,
    40,
    2,
    0,
    34,
    1,
    4,
    64,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    65,
    1,
    16,
    156,
    1,
    11,
    11,
    40,
    0,
    32,
    0,
    32,
    0,
    40,
    2,
    16,
    32,
    2,
    106,
    54,
    2,
    16,
    32,
    0,
    32,
    0,
    41,
    3,
    0,
    32,
    2,
    173,
    124,
    55,
    3,
    0,
    32,
    0,
    65,
    8,
    106,
    32,
    1,
    32,
    2,
    16,
    8,
    11,
    28,
    0,
    32,
    1,
    40,
    2,
    24,
    65,
    208,
    216,
    193,
    0,
    65,
    5,
    32,
    1,
    65,
    28,
    106,
    40,
    2,
    0,
    40,
    2,
    12,
    17,
    1,
    0,
    11,
    10,
    0,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    123,
    11,
    16,
    0,
    32,
    1,
    4,
    64,
    32,
    0,
    32,
    1,
    65,
    4,
    16,
    156,
    1,
    11,
    11,
    18,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    1,
    32,
    2,
    106,
    16,
    66,
    65,
    0,
    11,
    22,
    0,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    40,
    2,
    0,
    54,
    2,
    0,
    11,
    16,
    0,
    32,
    0,
    41,
    3,
    0,
    26,
    32,
    0,
    65,
    8,
    106,
    40,
    2,
    0,
    11,
    20,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    4,
    40,
    2,
    12,
    17,
    0,
    0,
    11,
    8,
    0,
    32,
    0,
    32,
    1,
    16,
    48,
    11,
    19,
    0,
    32,
    0,
    65,
    40,
    54,
    2,
    4,
    32,
    0,
    65,
    212,
    138,
    192,
    0,
    54,
    2,
    0,
    11,
    17,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    32,
    1,
    16,
    166,
    1,
    11,
    17,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    32,
    1,
    16,
    166,
    1,
    11,
    16,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    8,
    32,
    1,
    16,
    15,
    11,
    19,
    0,
    32,
    0,
    65,
    204,
    192,
    193,
    0,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    11,
    16,
    0,
    32,
    1,
    32,
    0,
    40,
    2,
    0,
    32,
    0,
    40,
    2,
    4,
    16,
    14,
    11,
    10,
    0,
    32,
    0,
    32,
    1,
    32,
    2,
    16,
    24,
    11,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    16,
    37,
    65,
    0,
    11,
    17,
    0,
    65,
    192,
    196,
    193,
    0,
    65,
    17,
    65,
    212,
    196,
    193,
    0,
    16,
    114,
    0,
    11,
    14,
    0,
    32,
    0,
    40,
    2,
    0,
    26,
    3,
    64,
    12,
    0,
    11,
    0,
    11,
    13,
    0,
    32,
    0,
    53,
    2,
    0,
    65,
    1,
    32,
    1,
    16,
    52,
    11,
    13,
    0,
    32,
    0,
    40,
    2,
    0,
    32,
    1,
    32,
    2,
    16,
    39,
    11,
    11,
    0,
    32,
    0,
    35,
    0,
    106,
    36,
    0,
    35,
    0,
    11,
    10,
    0,
    32,
    0,
    65,
    8,
    106,
    41,
    3,
    0,
    11,
    13,
    0,
    32,
    1,
    65,
    244,
    145,
    192,
    0,
    65,
    2,
    16,
    14,
    11,
    25,
    0,
    32,
    0,
    32,
    1,
    65,
    172,
    231,
    193,
    0,
    40,
    2,
    0,
    34,
    0,
    65,
    42,
    32,
    0,
    27,
    17,
    4,
    0,
    0,
    11,
    10,
    0,
    32,
    2,
    32,
    0,
    32,
    1,
    16,
    14,
    11,
    9,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    0,
    11,
    7,
    0,
    32,
    0,
    16,
    1,
    0,
    11,
    13,
    0,
    66,
    250,
    227,
    222,
    178,
    168,
    237,
    139,
    221,
    137,
    127,
    11,
    4,
    0,
    65,
    0,
    11,
    5,
    0,
    65,
    128,
    4,
    11,
    4,
    0,
    65,
    1,
    11,
    4,
    0,
    32,
    1,
    11,
    13,
    0,
    66,
    149,
    151,
    213,
    166,
    240,
    201,
    145,
    211,
    198,
    0,
    11,
    13,
    0,
    66,
    244,
    249,
    158,
    230,
    238,
    163,
    170,
    249,
    254,
    0,
    11,
    13,
    0,
    66,
    225,
    246,
    196,
    237,
    133,
    189,
    222,
    249,
    138,
    127,
    11,
    12,
    0,
    66,
    161,
    180,
    233,
    183,
    247,
    251,
    205,
    222,
    8,
    11,
    3,
    0,
    1,
    11,
    3,
    0,
    1,
    11,
    11,
    140,
    223,
    1,
    3,
    0,
    65,
    128,
    128,
    192,
    0,
    11,
    246,
    30,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    103,
    122,
    92,
    119,
    114,
    105,
    116,
    101,
    46,
    114,
    115,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    112,
    0,
    0,
    0,
    34,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    119,
    1,
    0,
    0,
    44,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    96,
    40,
    108,
    101,
    102,
    116,
    32,
    61,
    61,
    32,
    114,
    105,
    103,
    104,
    116,
    41,
    96,
    10,
    32,
    32,
    108,
    101,
    102,
    116,
    58,
    32,
    96,
    96,
    44,
    10,
    32,
    114,
    105,
    103,
    104,
    116,
    58,
    32,
    96,
    96,
    0,
    0,
    248,
    0,
    16,
    0,
    45,
    0,
    0,
    0,
    37,
    1,
    16,
    0,
    12,
    0,
    0,
    0,
    49,
    1,
    16,
    0,
    1,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    147,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    120,
    0,
    16,
    0,
    92,
    0,
    0,
    0,
    150,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    122,
    105,
    111,
    46,
    114,
    115,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    198,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    99,
    111,
    114,
    114,
    117,
    112,
    116,
    32,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    244,
    0,
    0,
    0,
    39,
    0,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    190,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    151,
    1,
    16,
    0,
    87,
    0,
    0,
    0,
    186,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    58,
    32,
    0,
    0,
    112,
    2,
    16,
    0,
    0,
    0,
    0,
    0,
    112,
    2,
    16,
    0,
    2,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    118,
    101,
    99,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    132,
    2,
    16,
    0,
    76,
    0,
    0,
    0,
    64,
    6,
    0,
    0,
    42,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    224,
    2,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    88,
    3,
    16,
    0,
    73,
    0,
    0,
    0,
    158,
    5,
    0,
    0,
    33,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    0,
    208,
    3,
    16,
    0,
    73,
    0,
    0,
    0,
    169,
    1,
    0,
    0,
    28,
    0,
    0,
    0,
    102,
    97,
    105,
    108,
    101,
    100,
    32,
    116,
    111,
    32,
    102,
    105,
    108,
    108,
    32,
    119,
    104,
    111,
    108,
    101,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    105,
    111,
    47,
    105,
    109,
    112,
    108,
    115,
    46,
    114,
    115,
    0,
    0,
    71,
    4,
    16,
    0,
    75,
    0,
    0,
    0,
    230,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    99,
    114,
    99,
    46,
    114,
    115,
    0,
    164,
    4,
    16,
    0,
    87,
    0,
    0,
    0,
    105,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    105,
    111,
    110,
    40,
    41,
    32,
    105,
    115,
    32,
    100,
    101,
    112,
    114,
    101,
    99,
    97,
    116,
    101,
    100,
    59,
    32,
    117,
    115,
    101,
    32,
    68,
    105,
    115,
    112,
    108,
    97,
    121,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    82,
    101,
    115,
    117,
    108,
    116,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    110,
    32,
    96,
    69,
    114,
    114,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    32,
    100,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    184,
    5,
    16,
    0,
    27,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    122,
    105,
    111,
    46,
    114,
    115,
    0,
    220,
    5,
    16,
    0,
    87,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    52,
    0,
    0,
    0,
    68,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    73,
    110,
    110,
    101,
    114,
    110,
    101,
    101,
    100,
    115,
    95,
    100,
    105,
    99,
    116,
    105,
    111,
    110,
    97,
    114,
    121,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    21,
    0,
    0,
    0,
    68,
    101,
    99,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    0,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    67,
    111,
    109,
    112,
    114,
    101,
    115,
    115,
    69,
    114,
    114,
    111,
    114,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    103,
    122,
    92,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    230,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    231,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    232,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    233,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    234,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    235,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    236,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    237,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    238,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    184,
    6,
    16,
    0,
    90,
    0,
    0,
    0,
    250,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    24,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    28,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    83,
    111,
    109,
    101,
    78,
    111,
    110,
    101,
    31,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    82,
    101,
    115,
    117,
    108,
    116,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    110,
    32,
    96,
    69,
    114,
    114,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    33,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    34,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    102,
    108,
    97,
    116,
    101,
    50,
    45,
    49,
    46,
    48,
    46,
    50,
    48,
    92,
    115,
    114,
    99,
    92,
    102,
    102,
    105,
    92,
    114,
    117,
    115,
    116,
    46,
    114,
    115,
    48,
    8,
    16,
    0,
    92,
    0,
    0,
    0,
    60,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    48,
    8,
    16,
    0,
    92,
    0,
    0,
    0,
    138,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    99,
    111,
    114,
    114,
    117,
    112,
    116,
    32,
    103,
    122,
    105,
    112,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    32,
    100,
    111,
    101,
    115,
    32,
    110,
    111,
    116,
    32,
    104,
    97,
    118,
    101,
    32,
    97,
    32,
    109,
    97,
    116,
    99,
    104,
    105,
    110,
    103,
    32,
    99,
    104,
    101,
    99,
    107,
    115,
    117,
    109,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    103,
    122,
    105,
    112,
    32,
    104,
    101,
    97,
    100,
    101,
    114,
    40,
    41,
    0,
    0,
    35,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    36,
    0,
    0,
    0,
    37,
    0,
    0,
    0,
    38,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    36,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    92,
    99,
    111,
    114,
    101,
    46,
    114,
    115,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    134,
    1,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    134,
    1,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    15,
    2,
    0,
    0,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    41,
    2,
    0,
    0,
    19,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    42,
    2,
    0,
    0,
    35,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    73,
    2,
    0,
    0,
    22,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    98,
    105,
    116,
    115,
    32,
    60,
    61,
    32,
    40,
    40,
    49,
    117,
    51,
    50,
    32,
    60,
    60,
    32,
    108,
    101,
    110,
    41,
    32,
    45,
    32,
    49,
    117,
    51,
    50,
    41,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    155,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    159,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    212,
    2,
    0,
    0,
    30,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    93,
    3,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    98,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    117,
    3,
    0,
    0,
    40,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    118,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    118,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    122,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    126,
    3,
    0,
    0,
    55,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    127,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    127,
    3,
    0,
    0,
    76,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    131,
    3,
    0,
    0,
    45,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    136,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    3,
    0,
    0,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    3,
    0,
    0,
    41,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    147,
    3,
    0,
    0,
    43,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    152,
    3,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    179,
    3,
    0,
    0,
    20,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    181,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    200,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    214,
    3,
    0,
    0,
    20,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    215,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    224,
    3,
    0,
    0,
    22,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    230,
    3,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    240,
    3,
    0,
    0,
    36,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    241,
    3,
    0,
    0,
    32,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    3,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    251,
    3,
    0,
    0,
    22,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    8,
    4,
    0,
    0,
    28,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    60,
    4,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    60,
    4,
    0,
    0,
    62,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    62,
    4,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    63,
    4,
    0,
    0,
    31,
    0,
    0,
    0,
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    120,
    4,
    0,
    0,
    26,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    129,
    4,
    0,
    0,
    24,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    99,
    111,
    100,
    101,
    32,
    60,
    32,
    77,
    65,
    88,
    95,
    72,
    85,
    70,
    70,
    95,
    83,
    89,
    77,
    66,
    79,
    76,
    83,
    95,
    50,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    131,
    4,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    138,
    4,
    0,
    0,
    31,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    139,
    4,
    0,
    0,
    21,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    213,
    4,
    0,
    0,
    30,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    180,
    5,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    194,
    5,
    0,
    0,
    14,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    17,
    6,
    0,
    0,
    27,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    236,
    5,
    0,
    0,
    29,
    0,
    0,
    0,
    1,
    1,
    2,
    1,
    3,
    1,
    4,
    1,
    5,
    1,
    6,
    1,
    7,
    1,
    8,
    1,
    9,
    1,
    9,
    1,
    10,
    1,
    10,
    1,
    11,
    1,
    11,
    1,
    12,
    1,
    12,
    1,
    13,
    1,
    13,
    1,
    13,
    1,
    13,
    1,
    14,
    1,
    14,
    1,
    14,
    1,
    14,
    1,
    15,
    1,
    15,
    1,
    15,
    1,
    15,
    1,
    16,
    1,
    16,
    1,
    16,
    1,
    16,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    17,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    18,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    19,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    20,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    21,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    22,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    23,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    24,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    25,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    26,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    27,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    28,
    1,
    29,
    1,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    5,
    0,
    0,
    27,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    63,
    0,
    0,
    0,
    127,
    0,
    0,
    0,
    255,
    0,
    0,
    0,
    255,
    1,
    0,
    0,
    255,
    3,
    0,
    0,
    255,
    7,
    0,
    0,
    255,
    15,
    0,
    0,
    255,
    31,
    0,
    0,
    255,
    63,
    0,
    0,
    255,
    127,
    0,
    0,
    255,
    255,
    0,
    65,
    128,
    159,
    192,
    0,
    11,
    181,
    22,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    248,
    5,
    0,
    0,
    46,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    15,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    0,
    0,
    18,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    26,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    27,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    29,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    0,
    6,
    0,
    0,
    23,
    0,
    0,
    0,
    0,
    0,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    13,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    10,
    6,
    0,
    0,
    51,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    65,
    6,
    0,
    0,
    38,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    100,
    46,
    112,
    97,
    114,
    97,
    109,
    115,
    46,
    102,
    108,
    117,
    115,
    104,
    95,
    114,
    101,
    109,
    97,
    105,
    110,
    105,
    110,
    103,
    32,
    61,
    61,
    32,
    48,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    84,
    6,
    0,
    0,
    9,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    108,
    101,
    110,
    32,
    62,
    61,
    32,
    77,
    73,
    78,
    95,
    77,
    65,
    84,
    67,
    72,
    95,
    76,
    69,
    78,
    46,
    105,
    110,
    116,
    111,
    40,
    41,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    196,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    100,
    105,
    115,
    116,
    32,
    62,
    61,
    32,
    49,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    197,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    109,
    97,
    116,
    99,
    104,
    95,
    100,
    105,
    115,
    116,
    32,
    97,
    115,
    32,
    117,
    115,
    105,
    122,
    101,
    32,
    60,
    61,
    32,
    76,
    90,
    95,
    68,
    73,
    67,
    84,
    95,
    83,
    73,
    90,
    69,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    198,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    217,
    6,
    0,
    0,
    16,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    217,
    6,
    0,
    0,
    5,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    6,
    0,
    0,
    24,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    14,
    7,
    0,
    0,
    24,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    56,
    7,
    0,
    0,
    33,
    0,
    0,
    0,
    97,
    115,
    115,
    101,
    114,
    116,
    105,
    111,
    110,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    58,
    32,
    108,
    111,
    111,
    107,
    97,
    104,
    101,
    97,
    100,
    95,
    115,
    105,
    122,
    101,
    32,
    62,
    61,
    32,
    108,
    101,
    110,
    95,
    116,
    111,
    95,
    109,
    111,
    118,
    101,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    124,
    7,
    0,
    0,
    9,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    184,
    7,
    0,
    0,
    13,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    184,
    7,
    0,
    0,
    66,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    188,
    7,
    0,
    0,
    17,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    189,
    7,
    0,
    0,
    39,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    15,
    8,
    0,
    0,
    34,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    8,
    0,
    0,
    41,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    8,
    0,
    0,
    25,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    107,
    8,
    0,
    0,
    19,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    108,
    8,
    0,
    0,
    35,
    0,
    0,
    0,
    32,
    9,
    16,
    0,
    100,
    0,
    0,
    0,
    218,
    8,
    0,
    0,
    66,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    128,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    220,
    5,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    99,
    111,
    114,
    101,
    46,
    114,
    115,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    55,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    83,
    1,
    0,
    0,
    25,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    215,
    1,
    0,
    0,
    29,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    116,
    2,
    0,
    0,
    26,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    123,
    2,
    0,
    0,
    28,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    124,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    143,
    2,
    0,
    0,
    29,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    148,
    2,
    0,
    0,
    32,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    176,
    2,
    0,
    0,
    20,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    187,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    2,
    0,
    0,
    30,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    243,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    243,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    244,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    245,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    245,
    2,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    2,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    2,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    3,
    3,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    3,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    4,
    3,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    4,
    3,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    254,
    2,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    254,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    255,
    2,
    0,
    0,
    38,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    255,
    2,
    0,
    0,
    13,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    2,
    0,
    0,
    35,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    252,
    2,
    0,
    0,
    14,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    25,
    3,
    0,
    0,
    30,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    25,
    3,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    3,
    0,
    0,
    9,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    27,
    3,
    0,
    0,
    34,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    27,
    3,
    0,
    0,
    9,
    0,
    65,
    192,
    181,
    192,
    0,
    11,
    196,
    169,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    0,
    0,
    0,
    3,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    10,
    0,
    11,
    0,
    13,
    0,
    15,
    0,
    17,
    0,
    19,
    0,
    23,
    0,
    27,
    0,
    31,
    0,
    35,
    0,
    43,
    0,
    51,
    0,
    59,
    0,
    67,
    0,
    83,
    0,
    99,
    0,
    115,
    0,
    131,
    0,
    163,
    0,
    195,
    0,
    227,
    0,
    2,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    13,
    13,
    1,
    0,
    2,
    0,
    3,
    0,
    4,
    0,
    5,
    0,
    7,
    0,
    9,
    0,
    13,
    0,
    17,
    0,
    25,
    0,
    33,
    0,
    49,
    0,
    65,
    0,
    97,
    0,
    129,
    0,
    193,
    0,
    1,
    1,
    129,
    1,
    1,
    2,
    1,
    3,
    1,
    4,
    1,
    6,
    1,
    8,
    1,
    12,
    1,
    16,
    1,
    24,
    1,
    32,
    1,
    48,
    1,
    64,
    1,
    96,
    0,
    128,
    0,
    128,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    11,
    6,
    0,
    0,
    31,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    21,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    6,
    5,
    0,
    0,
    21,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    7,
    5,
    0,
    0,
    43,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    188,
    4,
    0,
    0,
    42,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    86,
    6,
    0,
    0,
    60,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    4,
    0,
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    224,
    4,
    0,
    0,
    40,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    242,
    4,
    0,
    0,
    33,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    248,
    4,
    0,
    0,
    47,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    18,
    5,
    0,
    0,
    35,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    20,
    5,
    0,
    0,
    25,
    0,
    0,
    0,
    20,
    24,
    16,
    0,
    100,
    0,
    0,
    0,
    26,
    5,
    0,
    0,
    30,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    111,
    117,
    116,
    112,
    117,
    116,
    95,
    98,
    117,
    102,
    102,
    101,
    114,
    46,
    114,
    115,
    0,
    0,
    0,
    84,
    28,
    16,
    0,
    109,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    84,
    28,
    16,
    0,
    109,
    0,
    0,
    0,
    42,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    105,
    110,
    102,
    108,
    97,
    116,
    101,
    92,
    115,
    116,
    114,
    101,
    97,
    109,
    46,
    114,
    115,
    0,
    0,
    228,
    28,
    16,
    0,
    102,
    0,
    0,
    0,
    32,
    1,
    0,
    0,
    21,
    0,
    0,
    0,
    228,
    28,
    16,
    0,
    102,
    0,
    0,
    0,
    80,
    1,
    0,
    0,
    38,
    0,
    0,
    0,
    80,
    97,
    114,
    97,
    109,
    86,
    101,
    114,
    115,
    105,
    111,
    110,
    66,
    117,
    102,
    77,
    101,
    109,
    68,
    97,
    116,
    97,
    83,
    116,
    114,
    101,
    97,
    109,
    69,
    114,
    114,
    78,
    111,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    67,
    58,
    92,
    85,
    115,
    101,
    114,
    115,
    92,
    104,
    117,
    103,
    111,
    103,
    92,
    46,
    99,
    97,
    114,
    103,
    111,
    92,
    114,
    101,
    103,
    105,
    115,
    116,
    114,
    121,
    92,
    115,
    114,
    99,
    92,
    103,
    105,
    116,
    104,
    117,
    98,
    46,
    99,
    111,
    109,
    45,
    49,
    101,
    99,
    99,
    54,
    50,
    57,
    57,
    100,
    98,
    57,
    101,
    99,
    56,
    50,
    51,
    92,
    109,
    105,
    110,
    105,
    122,
    95,
    111,
    120,
    105,
    100,
    101,
    45,
    48,
    46,
    52,
    46,
    52,
    92,
    115,
    114,
    99,
    92,
    100,
    101,
    102,
    108,
    97,
    116,
    101,
    92,
    115,
    116,
    114,
    101,
    97,
    109,
    46,
    114,
    115,
    0,
    0,
    164,
    29,
    16,
    0,
    102,
    0,
    0,
    0,
    58,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    164,
    29,
    16,
    0,
    102,
    0,
    0,
    0,
    59,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    150,
    48,
    7,
    119,
    44,
    97,
    14,
    238,
    186,
    81,
    9,
    153,
    25,
    196,
    109,
    7,
    143,
    244,
    106,
    112,
    53,
    165,
    99,
    233,
    163,
    149,
    100,
    158,
    50,
    136,
    219,
    14,
    164,
    184,
    220,
    121,
    30,
    233,
    213,
    224,
    136,
    217,
    210,
    151,
    43,
    76,
    182,
    9,
    189,
    124,
    177,
    126,
    7,
    45,
    184,
    231,
    145,
    29,
    191,
    144,
    100,
    16,
    183,
    29,
    242,
    32,
    176,
    106,
    72,
    113,
    185,
    243,
    222,
    65,
    190,
    132,
    125,
    212,
    218,
    26,
    235,
    228,
    221,
    109,
    81,
    181,
    212,
    244,
    199,
    133,
    211,
    131,
    86,
    152,
    108,
    19,
    192,
    168,
    107,
    100,
    122,
    249,
    98,
    253,
    236,
    201,
    101,
    138,
    79,
    92,
    1,
    20,
    217,
    108,
    6,
    99,
    99,
    61,
    15,
    250,
    245,
    13,
    8,
    141,
    200,
    32,
    110,
    59,
    94,
    16,
    105,
    76,
    228,
    65,
    96,
    213,
    114,
    113,
    103,
    162,
    209,
    228,
    3,
    60,
    71,
    212,
    4,
    75,
    253,
    133,
    13,
    210,
    107,
    181,
    10,
    165,
    250,
    168,
    181,
    53,
    108,
    152,
    178,
    66,
    214,
    201,
    187,
    219,
    64,
    249,
    188,
    172,
    227,
    108,
    216,
    50,
    117,
    92,
    223,
    69,
    207,
    13,
    214,
    220,
    89,
    61,
    209,
    171,
    172,
    48,
    217,
    38,
    58,
    0,
    222,
    81,
    128,
    81,
    215,
    200,
    22,
    97,
    208,
    191,
    181,
    244,
    180,
    33,
    35,
    196,
    179,
    86,
    153,
    149,
    186,
    207,
    15,
    165,
    189,
    184,
    158,
    184,
    2,
    40,
    8,
    136,
    5,
    95,
    178,
    217,
    12,
    198,
    36,
    233,
    11,
    177,
    135,
    124,
    111,
    47,
    17,
    76,
    104,
    88,
    171,
    29,
    97,
    193,
    61,
    45,
    102,
    182,
    144,
    65,
    220,
    118,
    6,
    113,
    219,
    1,
    188,
    32,
    210,
    152,
    42,
    16,
    213,
    239,
    137,
    133,
    177,
    113,
    31,
    181,
    182,
    6,
    165,
    228,
    191,
    159,
    51,
    212,
    184,
    232,
    162,
    201,
    7,
    120,
    52,
    249,
    0,
    15,
    142,
    168,
    9,
    150,
    24,
    152,
    14,
    225,
    187,
    13,
    106,
    127,
    45,
    61,
    109,
    8,
    151,
    108,
    100,
    145,
    1,
    92,
    99,
    230,
    244,
    81,
    107,
    107,
    98,
    97,
    108,
    28,
    216,
    48,
    101,
    133,
    78,
    0,
    98,
    242,
    237,
    149,
    6,
    108,
    123,
    165,
    1,
    27,
    193,
    244,
    8,
    130,
    87,
    196,
    15,
    245,
    198,
    217,
    176,
    101,
    80,
    233,
    183,
    18,
    234,
    184,
    190,
    139,
    124,
    136,
    185,
    252,
    223,
    29,
    221,
    98,
    73,
    45,
    218,
    21,
    243,
    124,
    211,
    140,
    101,
    76,
    212,
    251,
    88,
    97,
    178,
    77,
    206,
    81,
    181,
    58,
    116,
    0,
    188,
    163,
    226,
    48,
    187,
    212,
    65,
    165,
    223,
    74,
    215,
    149,
    216,
    61,
    109,
    196,
    209,
    164,
    251,
    244,
    214,
    211,
    106,
    233,
    105,
    67,
    252,
    217,
    110,
    52,
    70,
    136,
    103,
    173,
    208,
    184,
    96,
    218,
    115,
    45,
    4,
    68,
    229,
    29,
    3,
    51,
    95,
    76,
    10,
    170,
    201,
    124,
    13,
    221,
    60,
    113,
    5,
    80,
    170,
    65,
    2,
    39,
    16,
    16,
    11,
    190,
    134,
    32,
    12,
    201,
    37,
    181,
    104,
    87,
    179,
    133,
    111,
    32,
    9,
    212,
    102,
    185,
    159,
    228,
    97,
    206,
    14,
    249,
    222,
    94,
    152,
    201,
    217,
    41,
    34,
    152,
    208,
    176,
    180,
    168,
    215,
    199,
    23,
    61,
    179,
    89,
    129,
    13,
    180,
    46,
    59,
    92,
    189,
    183,
    173,
    108,
    186,
    192,
    32,
    131,
    184,
    237,
    182,
    179,
    191,
    154,
    12,
    226,
    182,
    3,
    154,
    210,
    177,
    116,
    57,
    71,
    213,
    234,
    175,
    119,
    210,
    157,
    21,
    38,
    219,
    4,
    131,
    22,
    220,
    115,
    18,
    11,
    99,
    227,
    132,
    59,
    100,
    148,
    62,
    106,
    109,
    13,
    168,
    90,
    106,
    122,
    11,
    207,
    14,
    228,
    157,
    255,
    9,
    147,
    39,
    174,
    0,
    10,
    177,
    158,
    7,
    125,
    68,
    147,
    15,
    240,
    210,
    163,
    8,
    135,
    104,
    242,
    1,
    30,
    254,
    194,
    6,
    105,
    93,
    87,
    98,
    247,
    203,
    103,
    101,
    128,
    113,
    54,
    108,
    25,
    231,
    6,
    107,
    110,
    118,
    27,
    212,
    254,
    224,
    43,
    211,
    137,
    90,
    122,
    218,
    16,
    204,
    74,
    221,
    103,
    111,
    223,
    185,
    249,
    249,
    239,
    190,
    142,
    67,
    190,
    183,
    23,
    213,
    142,
    176,
    96,
    232,
    163,
    214,
    214,
    126,
    147,
    209,
    161,
    196,
    194,
    216,
    56,
    82,
    242,
    223,
    79,
    241,
    103,
    187,
    209,
    103,
    87,
    188,
    166,
    221,
    6,
    181,
    63,
    75,
    54,
    178,
    72,
    218,
    43,
    13,
    216,
    76,
    27,
    10,
    175,
    246,
    74,
    3,
    54,
    96,
    122,
    4,
    65,
    195,
    239,
    96,
    223,
    85,
    223,
    103,
    168,
    239,
    142,
    110,
    49,
    121,
    190,
    105,
    70,
    140,
    179,
    97,
    203,
    26,
    131,
    102,
    188,
    160,
    210,
    111,
    37,
    54,
    226,
    104,
    82,
    149,
    119,
    12,
    204,
    3,
    71,
    11,
    187,
    185,
    22,
    2,
    34,
    47,
    38,
    5,
    85,
    190,
    59,
    186,
    197,
    40,
    11,
    189,
    178,
    146,
    90,
    180,
    43,
    4,
    106,
    179,
    92,
    167,
    255,
    215,
    194,
    49,
    207,
    208,
    181,
    139,
    158,
    217,
    44,
    29,
    174,
    222,
    91,
    176,
    194,
    100,
    155,
    38,
    242,
    99,
    236,
    156,
    163,
    106,
    117,
    10,
    147,
    109,
    2,
    169,
    6,
    9,
    156,
    63,
    54,
    14,
    235,
    133,
    103,
    7,
    114,
    19,
    87,
    0,
    5,
    130,
    74,
    191,
    149,
    20,
    122,
    184,
    226,
    174,
    43,
    177,
    123,
    56,
    27,
    182,
    12,
    155,
    142,
    210,
    146,
    13,
    190,
    213,
    229,
    183,
    239,
    220,
    124,
    33,
    223,
    219,
    11,
    212,
    210,
    211,
    134,
    66,
    226,
    212,
    241,
    248,
    179,
    221,
    104,
    110,
    131,
    218,
    31,
    205,
    22,
    190,
    129,
    91,
    38,
    185,
    246,
    225,
    119,
    176,
    111,
    119,
    71,
    183,
    24,
    230,
    90,
    8,
    136,
    112,
    106,
    15,
    255,
    202,
    59,
    6,
    102,
    92,
    11,
    1,
    17,
    255,
    158,
    101,
    143,
    105,
    174,
    98,
    248,
    211,
    255,
    107,
    97,
    69,
    207,
    108,
    22,
    120,
    226,
    10,
    160,
    238,
    210,
    13,
    215,
    84,
    131,
    4,
    78,
    194,
    179,
    3,
    57,
    97,
    38,
    103,
    167,
    247,
    22,
    96,
    208,
    77,
    71,
    105,
    73,
    219,
    119,
    110,
    62,
    74,
    106,
    209,
    174,
    220,
    90,
    214,
    217,
    102,
    11,
    223,
    64,
    240,
    59,
    216,
    55,
    83,
    174,
    188,
    169,
    197,
    158,
    187,
    222,
    127,
    207,
    178,
    71,
    233,
    255,
    181,
    48,
    28,
    242,
    189,
    189,
    138,
    194,
    186,
    202,
    48,
    147,
    179,
    83,
    166,
    163,
    180,
    36,
    5,
    54,
    208,
    186,
    147,
    6,
    215,
    205,
    41,
    87,
    222,
    84,
    191,
    103,
    217,
    35,
    46,
    122,
    102,
    179,
    184,
    74,
    97,
    196,
    2,
    27,
    104,
    93,
    148,
    43,
    111,
    42,
    55,
    190,
    11,
    180,
    161,
    142,
    12,
    195,
    27,
    223,
    5,
    90,
    141,
    239,
    2,
    45,
    0,
    0,
    0,
    0,
    65,
    49,
    27,
    25,
    130,
    98,
    54,
    50,
    195,
    83,
    45,
    43,
    4,
    197,
    108,
    100,
    69,
    244,
    119,
    125,
    134,
    167,
    90,
    86,
    199,
    150,
    65,
    79,
    8,
    138,
    217,
    200,
    73,
    187,
    194,
    209,
    138,
    232,
    239,
    250,
    203,
    217,
    244,
    227,
    12,
    79,
    181,
    172,
    77,
    126,
    174,
    181,
    142,
    45,
    131,
    158,
    207,
    28,
    152,
    135,
    81,
    18,
    194,
    74,
    16,
    35,
    217,
    83,
    211,
    112,
    244,
    120,
    146,
    65,
    239,
    97,
    85,
    215,
    174,
    46,
    20,
    230,
    181,
    55,
    215,
    181,
    152,
    28,
    150,
    132,
    131,
    5,
    89,
    152,
    27,
    130,
    24,
    169,
    0,
    155,
    219,
    250,
    45,
    176,
    154,
    203,
    54,
    169,
    93,
    93,
    119,
    230,
    28,
    108,
    108,
    255,
    223,
    63,
    65,
    212,
    158,
    14,
    90,
    205,
    162,
    36,
    132,
    149,
    227,
    21,
    159,
    140,
    32,
    70,
    178,
    167,
    97,
    119,
    169,
    190,
    166,
    225,
    232,
    241,
    231,
    208,
    243,
    232,
    36,
    131,
    222,
    195,
    101,
    178,
    197,
    218,
    170,
    174,
    93,
    93,
    235,
    159,
    70,
    68,
    40,
    204,
    107,
    111,
    105,
    253,
    112,
    118,
    174,
    107,
    49,
    57,
    239,
    90,
    42,
    32,
    44,
    9,
    7,
    11,
    109,
    56,
    28,
    18,
    243,
    54,
    70,
    223,
    178,
    7,
    93,
    198,
    113,
    84,
    112,
    237,
    48,
    101,
    107,
    244,
    247,
    243,
    42,
    187,
    182,
    194,
    49,
    162,
    117,
    145,
    28,
    137,
    52,
    160,
    7,
    144,
    251,
    188,
    159,
    23,
    186,
    141,
    132,
    14,
    121,
    222,
    169,
    37,
    56,
    239,
    178,
    60,
    255,
    121,
    243,
    115,
    190,
    72,
    232,
    106,
    125,
    27,
    197,
    65,
    60,
    42,
    222,
    88,
    5,
    79,
    121,
    240,
    68,
    126,
    98,
    233,
    135,
    45,
    79,
    194,
    198,
    28,
    84,
    219,
    1,
    138,
    21,
    148,
    64,
    187,
    14,
    141,
    131,
    232,
    35,
    166,
    194,
    217,
    56,
    191,
    13,
    197,
    160,
    56,
    76,
    244,
    187,
    33,
    143,
    167,
    150,
    10,
    206,
    150,
    141,
    19,
    9,
    0,
    204,
    92,
    72,
    49,
    215,
    69,
    139,
    98,
    250,
    110,
    202,
    83,
    225,
    119,
    84,
    93,
    187,
    186,
    21,
    108,
    160,
    163,
    214,
    63,
    141,
    136,
    151,
    14,
    150,
    145,
    80,
    152,
    215,
    222,
    17,
    169,
    204,
    199,
    210,
    250,
    225,
    236,
    147,
    203,
    250,
    245,
    92,
    215,
    98,
    114,
    29,
    230,
    121,
    107,
    222,
    181,
    84,
    64,
    159,
    132,
    79,
    89,
    88,
    18,
    14,
    22,
    25,
    35,
    21,
    15,
    218,
    112,
    56,
    36,
    155,
    65,
    35,
    61,
    167,
    107,
    253,
    101,
    230,
    90,
    230,
    124,
    37,
    9,
    203,
    87,
    100,
    56,
    208,
    78,
    163,
    174,
    145,
    1,
    226,
    159,
    138,
    24,
    33,
    204,
    167,
    51,
    96,
    253,
    188,
    42,
    175,
    225,
    36,
    173,
    238,
    208,
    63,
    180,
    45,
    131,
    18,
    159,
    108,
    178,
    9,
    134,
    171,
    36,
    72,
    201,
    234,
    21,
    83,
    208,
    41,
    70,
    126,
    251,
    104,
    119,
    101,
    226,
    246,
    121,
    63,
    47,
    183,
    72,
    36,
    54,
    116,
    27,
    9,
    29,
    53,
    42,
    18,
    4,
    242,
    188,
    83,
    75,
    179,
    141,
    72,
    82,
    112,
    222,
    101,
    121,
    49,
    239,
    126,
    96,
    254,
    243,
    230,
    231,
    191,
    194,
    253,
    254,
    124,
    145,
    208,
    213,
    61,
    160,
    203,
    204,
    250,
    54,
    138,
    131,
    187,
    7,
    145,
    154,
    120,
    84,
    188,
    177,
    57,
    101,
    167,
    168,
    75,
    152,
    131,
    59,
    10,
    169,
    152,
    34,
    201,
    250,
    181,
    9,
    136,
    203,
    174,
    16,
    79,
    93,
    239,
    95,
    14,
    108,
    244,
    70,
    205,
    63,
    217,
    109,
    140,
    14,
    194,
    116,
    67,
    18,
    90,
    243,
    2,
    35,
    65,
    234,
    193,
    112,
    108,
    193,
    128,
    65,
    119,
    216,
    71,
    215,
    54,
    151,
    6,
    230,
    45,
    142,
    197,
    181,
    0,
    165,
    132,
    132,
    27,
    188,
    26,
    138,
    65,
    113,
    91,
    187,
    90,
    104,
    152,
    232,
    119,
    67,
    217,
    217,
    108,
    90,
    30,
    79,
    45,
    21,
    95,
    126,
    54,
    12,
    156,
    45,
    27,
    39,
    221,
    28,
    0,
    62,
    18,
    0,
    152,
    185,
    83,
    49,
    131,
    160,
    144,
    98,
    174,
    139,
    209,
    83,
    181,
    146,
    22,
    197,
    244,
    221,
    87,
    244,
    239,
    196,
    148,
    167,
    194,
    239,
    213,
    150,
    217,
    246,
    233,
    188,
    7,
    174,
    168,
    141,
    28,
    183,
    107,
    222,
    49,
    156,
    42,
    239,
    42,
    133,
    237,
    121,
    107,
    202,
    172,
    72,
    112,
    211,
    111,
    27,
    93,
    248,
    46,
    42,
    70,
    225,
    225,
    54,
    222,
    102,
    160,
    7,
    197,
    127,
    99,
    84,
    232,
    84,
    34,
    101,
    243,
    77,
    229,
    243,
    178,
    2,
    164,
    194,
    169,
    27,
    103,
    145,
    132,
    48,
    38,
    160,
    159,
    41,
    184,
    174,
    197,
    228,
    249,
    159,
    222,
    253,
    58,
    204,
    243,
    214,
    123,
    253,
    232,
    207,
    188,
    107,
    169,
    128,
    253,
    90,
    178,
    153,
    62,
    9,
    159,
    178,
    127,
    56,
    132,
    171,
    176,
    36,
    28,
    44,
    241,
    21,
    7,
    53,
    50,
    70,
    42,
    30,
    115,
    119,
    49,
    7,
    180,
    225,
    112,
    72,
    245,
    208,
    107,
    81,
    54,
    131,
    70,
    122,
    119,
    178,
    93,
    99,
    78,
    215,
    250,
    203,
    15,
    230,
    225,
    210,
    204,
    181,
    204,
    249,
    141,
    132,
    215,
    224,
    74,
    18,
    150,
    175,
    11,
    35,
    141,
    182,
    200,
    112,
    160,
    157,
    137,
    65,
    187,
    132,
    70,
    93,
    35,
    3,
    7,
    108,
    56,
    26,
    196,
    63,
    21,
    49,
    133,
    14,
    14,
    40,
    66,
    152,
    79,
    103,
    3,
    169,
    84,
    126,
    192,
    250,
    121,
    85,
    129,
    203,
    98,
    76,
    31,
    197,
    56,
    129,
    94,
    244,
    35,
    152,
    157,
    167,
    14,
    179,
    220,
    150,
    21,
    170,
    27,
    0,
    84,
    229,
    90,
    49,
    79,
    252,
    153,
    98,
    98,
    215,
    216,
    83,
    121,
    206,
    23,
    79,
    225,
    73,
    86,
    126,
    250,
    80,
    149,
    45,
    215,
    123,
    212,
    28,
    204,
    98,
    19,
    138,
    141,
    45,
    82,
    187,
    150,
    52,
    145,
    232,
    187,
    31,
    208,
    217,
    160,
    6,
    236,
    243,
    126,
    94,
    173,
    194,
    101,
    71,
    110,
    145,
    72,
    108,
    47,
    160,
    83,
    117,
    232,
    54,
    18,
    58,
    169,
    7,
    9,
    35,
    106,
    84,
    36,
    8,
    43,
    101,
    63,
    17,
    228,
    121,
    167,
    150,
    165,
    72,
    188,
    143,
    102,
    27,
    145,
    164,
    39,
    42,
    138,
    189,
    224,
    188,
    203,
    242,
    161,
    141,
    208,
    235,
    98,
    222,
    253,
    192,
    35,
    239,
    230,
    217,
    189,
    225,
    188,
    20,
    252,
    208,
    167,
    13,
    63,
    131,
    138,
    38,
    126,
    178,
    145,
    63,
    185,
    36,
    208,
    112,
    248,
    21,
    203,
    105,
    59,
    70,
    230,
    66,
    122,
    119,
    253,
    91,
    181,
    107,
    101,
    220,
    244,
    90,
    126,
    197,
    55,
    9,
    83,
    238,
    118,
    56,
    72,
    247,
    177,
    174,
    9,
    184,
    240,
    159,
    18,
    161,
    51,
    204,
    63,
    138,
    114,
    253,
    36,
    147,
    0,
    0,
    0,
    0,
    55,
    106,
    194,
    1,
    110,
    212,
    132,
    3,
    89,
    190,
    70,
    2,
    220,
    168,
    9,
    7,
    235,
    194,
    203,
    6,
    178,
    124,
    141,
    4,
    133,
    22,
    79,
    5,
    184,
    81,
    19,
    14,
    143,
    59,
    209,
    15,
    214,
    133,
    151,
    13,
    225,
    239,
    85,
    12,
    100,
    249,
    26,
    9,
    83,
    147,
    216,
    8,
    10,
    45,
    158,
    10,
    61,
    71,
    92,
    11,
    112,
    163,
    38,
    28,
    71,
    201,
    228,
    29,
    30,
    119,
    162,
    31,
    41,
    29,
    96,
    30,
    172,
    11,
    47,
    27,
    155,
    97,
    237,
    26,
    194,
    223,
    171,
    24,
    245,
    181,
    105,
    25,
    200,
    242,
    53,
    18,
    255,
    152,
    247,
    19,
    166,
    38,
    177,
    17,
    145,
    76,
    115,
    16,
    20,
    90,
    60,
    21,
    35,
    48,
    254,
    20,
    122,
    142,
    184,
    22,
    77,
    228,
    122,
    23,
    224,
    70,
    77,
    56,
    215,
    44,
    143,
    57,
    142,
    146,
    201,
    59,
    185,
    248,
    11,
    58,
    60,
    238,
    68,
    63,
    11,
    132,
    134,
    62,
    82,
    58,
    192,
    60,
    101,
    80,
    2,
    61,
    88,
    23,
    94,
    54,
    111,
    125,
    156,
    55,
    54,
    195,
    218,
    53,
    1,
    169,
    24,
    52,
    132,
    191,
    87,
    49,
    179,
    213,
    149,
    48,
    234,
    107,
    211,
    50,
    221,
    1,
    17,
    51,
    144,
    229,
    107,
    36,
    167,
    143,
    169,
    37,
    254,
    49,
    239,
    39,
    201,
    91,
    45,
    38,
    76,
    77,
    98,
    35,
    123,
    39,
    160,
    34,
    34,
    153,
    230,
    32,
    21,
    243,
    36,
    33,
    40,
    180,
    120,
    42,
    31,
    222,
    186,
    43,
    70,
    96,
    252,
    41,
    113,
    10,
    62,
    40,
    244,
    28,
    113,
    45,
    195,
    118,
    179,
    44,
    154,
    200,
    245,
    46,
    173,
    162,
    55,
    47,
    192,
    141,
    154,
    112,
    247,
    231,
    88,
    113,
    174,
    89,
    30,
    115,
    153,
    51,
    220,
    114,
    28,
    37,
    147,
    119,
    43,
    79,
    81,
    118,
    114,
    241,
    23,
    116,
    69,
    155,
    213,
    117,
    120,
    220,
    137,
    126,
    79,
    182,
    75,
    127,
    22,
    8,
    13,
    125,
    33,
    98,
    207,
    124,
    164,
    116,
    128,
    121,
    147,
    30,
    66,
    120,
    202,
    160,
    4,
    122,
    253,
    202,
    198,
    123,
    176,
    46,
    188,
    108,
    135,
    68,
    126,
    109,
    222,
    250,
    56,
    111,
    233,
    144,
    250,
    110,
    108,
    134,
    181,
    107,
    91,
    236,
    119,
    106,
    2,
    82,
    49,
    104,
    53,
    56,
    243,
    105,
    8,
    127,
    175,
    98,
    63,
    21,
    109,
    99,
    102,
    171,
    43,
    97,
    81,
    193,
    233,
    96,
    212,
    215,
    166,
    101,
    227,
    189,
    100,
    100,
    186,
    3,
    34,
    102,
    141,
    105,
    224,
    103,
    32,
    203,
    215,
    72,
    23,
    161,
    21,
    73,
    78,
    31,
    83,
    75,
    121,
    117,
    145,
    74,
    252,
    99,
    222,
    79,
    203,
    9,
    28,
    78,
    146,
    183,
    90,
    76,
    165,
    221,
    152,
    77,
    152,
    154,
    196,
    70,
    175,
    240,
    6,
    71,
    246,
    78,
    64,
    69,
    193,
    36,
    130,
    68,
    68,
    50,
    205,
    65,
    115,
    88,
    15,
    64,
    42,
    230,
    73,
    66,
    29,
    140,
    139,
    67,
    80,
    104,
    241,
    84,
    103,
    2,
    51,
    85,
    62,
    188,
    117,
    87,
    9,
    214,
    183,
    86,
    140,
    192,
    248,
    83,
    187,
    170,
    58,
    82,
    226,
    20,
    124,
    80,
    213,
    126,
    190,
    81,
    232,
    57,
    226,
    90,
    223,
    83,
    32,
    91,
    134,
    237,
    102,
    89,
    177,
    135,
    164,
    88,
    52,
    145,
    235,
    93,
    3,
    251,
    41,
    92,
    90,
    69,
    111,
    94,
    109,
    47,
    173,
    95,
    128,
    27,
    53,
    225,
    183,
    113,
    247,
    224,
    238,
    207,
    177,
    226,
    217,
    165,
    115,
    227,
    92,
    179,
    60,
    230,
    107,
    217,
    254,
    231,
    50,
    103,
    184,
    229,
    5,
    13,
    122,
    228,
    56,
    74,
    38,
    239,
    15,
    32,
    228,
    238,
    86,
    158,
    162,
    236,
    97,
    244,
    96,
    237,
    228,
    226,
    47,
    232,
    211,
    136,
    237,
    233,
    138,
    54,
    171,
    235,
    189,
    92,
    105,
    234,
    240,
    184,
    19,
    253,
    199,
    210,
    209,
    252,
    158,
    108,
    151,
    254,
    169,
    6,
    85,
    255,
    44,
    16,
    26,
    250,
    27,
    122,
    216,
    251,
    66,
    196,
    158,
    249,
    117,
    174,
    92,
    248,
    72,
    233,
    0,
    243,
    127,
    131,
    194,
    242,
    38,
    61,
    132,
    240,
    17,
    87,
    70,
    241,
    148,
    65,
    9,
    244,
    163,
    43,
    203,
    245,
    250,
    149,
    141,
    247,
    205,
    255,
    79,
    246,
    96,
    93,
    120,
    217,
    87,
    55,
    186,
    216,
    14,
    137,
    252,
    218,
    57,
    227,
    62,
    219,
    188,
    245,
    113,
    222,
    139,
    159,
    179,
    223,
    210,
    33,
    245,
    221,
    229,
    75,
    55,
    220,
    216,
    12,
    107,
    215,
    239,
    102,
    169,
    214,
    182,
    216,
    239,
    212,
    129,
    178,
    45,
    213,
    4,
    164,
    98,
    208,
    51,
    206,
    160,
    209,
    106,
    112,
    230,
    211,
    93,
    26,
    36,
    210,
    16,
    254,
    94,
    197,
    39,
    148,
    156,
    196,
    126,
    42,
    218,
    198,
    73,
    64,
    24,
    199,
    204,
    86,
    87,
    194,
    251,
    60,
    149,
    195,
    162,
    130,
    211,
    193,
    149,
    232,
    17,
    192,
    168,
    175,
    77,
    203,
    159,
    197,
    143,
    202,
    198,
    123,
    201,
    200,
    241,
    17,
    11,
    201,
    116,
    7,
    68,
    204,
    67,
    109,
    134,
    205,
    26,
    211,
    192,
    207,
    45,
    185,
    2,
    206,
    64,
    150,
    175,
    145,
    119,
    252,
    109,
    144,
    46,
    66,
    43,
    146,
    25,
    40,
    233,
    147,
    156,
    62,
    166,
    150,
    171,
    84,
    100,
    151,
    242,
    234,
    34,
    149,
    197,
    128,
    224,
    148,
    248,
    199,
    188,
    159,
    207,
    173,
    126,
    158,
    150,
    19,
    56,
    156,
    161,
    121,
    250,
    157,
    36,
    111,
    181,
    152,
    19,
    5,
    119,
    153,
    74,
    187,
    49,
    155,
    125,
    209,
    243,
    154,
    48,
    53,
    137,
    141,
    7,
    95,
    75,
    140,
    94,
    225,
    13,
    142,
    105,
    139,
    207,
    143,
    236,
    157,
    128,
    138,
    219,
    247,
    66,
    139,
    130,
    73,
    4,
    137,
    181,
    35,
    198,
    136,
    136,
    100,
    154,
    131,
    191,
    14,
    88,
    130,
    230,
    176,
    30,
    128,
    209,
    218,
    220,
    129,
    84,
    204,
    147,
    132,
    99,
    166,
    81,
    133,
    58,
    24,
    23,
    135,
    13,
    114,
    213,
    134,
    160,
    208,
    226,
    169,
    151,
    186,
    32,
    168,
    206,
    4,
    102,
    170,
    249,
    110,
    164,
    171,
    124,
    120,
    235,
    174,
    75,
    18,
    41,
    175,
    18,
    172,
    111,
    173,
    37,
    198,
    173,
    172,
    24,
    129,
    241,
    167,
    47,
    235,
    51,
    166,
    118,
    85,
    117,
    164,
    65,
    63,
    183,
    165,
    196,
    41,
    248,
    160,
    243,
    67,
    58,
    161,
    170,
    253,
    124,
    163,
    157,
    151,
    190,
    162,
    208,
    115,
    196,
    181,
    231,
    25,
    6,
    180,
    190,
    167,
    64,
    182,
    137,
    205,
    130,
    183,
    12,
    219,
    205,
    178,
    59,
    177,
    15,
    179,
    98,
    15,
    73,
    177,
    85,
    101,
    139,
    176,
    104,
    34,
    215,
    187,
    95,
    72,
    21,
    186,
    6,
    246,
    83,
    184,
    49,
    156,
    145,
    185,
    180,
    138,
    222,
    188,
    131,
    224,
    28,
    189,
    218,
    94,
    90,
    191,
    237,
    52,
    152,
    190,
    0,
    0,
    0,
    0,
    101,
    103,
    188,
    184,
    139,
    200,
    9,
    170,
    238,
    175,
    181,
    18,
    87,
    151,
    98,
    143,
    50,
    240,
    222,
    55,
    220,
    95,
    107,
    37,
    185,
    56,
    215,
    157,
    239,
    40,
    180,
    197,
    138,
    79,
    8,
    125,
    100,
    224,
    189,
    111,
    1,
    135,
    1,
    215,
    184,
    191,
    214,
    74,
    221,
    216,
    106,
    242,
    51,
    119,
    223,
    224,
    86,
    16,
    99,
    88,
    159,
    87,
    25,
    80,
    250,
    48,
    165,
    232,
    20,
    159,
    16,
    250,
    113,
    248,
    172,
    66,
    200,
    192,
    123,
    223,
    173,
    167,
    199,
    103,
    67,
    8,
    114,
    117,
    38,
    111,
    206,
    205,
    112,
    127,
    173,
    149,
    21,
    24,
    17,
    45,
    251,
    183,
    164,
    63,
    158,
    208,
    24,
    135,
    39,
    232,
    207,
    26,
    66,
    143,
    115,
    162,
    172,
    32,
    198,
    176,
    201,
    71,
    122,
    8,
    62,
    175,
    50,
    160,
    91,
    200,
    142,
    24,
    181,
    103,
    59,
    10,
    208,
    0,
    135,
    178,
    105,
    56,
    80,
    47,
    12,
    95,
    236,
    151,
    226,
    240,
    89,
    133,
    135,
    151,
    229,
    61,
    209,
    135,
    134,
    101,
    180,
    224,
    58,
    221,
    90,
    79,
    143,
    207,
    63,
    40,
    51,
    119,
    134,
    16,
    228,
    234,
    227,
    119,
    88,
    82,
    13,
    216,
    237,
    64,
    104,
    191,
    81,
    248,
    161,
    248,
    43,
    240,
    196,
    159,
    151,
    72,
    42,
    48,
    34,
    90,
    79,
    87,
    158,
    226,
    246,
    111,
    73,
    127,
    147,
    8,
    245,
    199,
    125,
    167,
    64,
    213,
    24,
    192,
    252,
    109,
    78,
    208,
    159,
    53,
    43,
    183,
    35,
    141,
    197,
    24,
    150,
    159,
    160,
    127,
    42,
    39,
    25,
    71,
    253,
    186,
    124,
    32,
    65,
    2,
    146,
    143,
    244,
    16,
    247,
    232,
    72,
    168,
    61,
    88,
    20,
    155,
    88,
    63,
    168,
    35,
    182,
    144,
    29,
    49,
    211,
    247,
    161,
    137,
    106,
    207,
    118,
    20,
    15,
    168,
    202,
    172,
    225,
    7,
    127,
    190,
    132,
    96,
    195,
    6,
    210,
    112,
    160,
    94,
    183,
    23,
    28,
    230,
    89,
    184,
    169,
    244,
    60,
    223,
    21,
    76,
    133,
    231,
    194,
    209,
    224,
    128,
    126,
    105,
    14,
    47,
    203,
    123,
    107,
    72,
    119,
    195,
    162,
    15,
    13,
    203,
    199,
    104,
    177,
    115,
    41,
    199,
    4,
    97,
    76,
    160,
    184,
    217,
    245,
    152,
    111,
    68,
    144,
    255,
    211,
    252,
    126,
    80,
    102,
    238,
    27,
    55,
    218,
    86,
    77,
    39,
    185,
    14,
    40,
    64,
    5,
    182,
    198,
    239,
    176,
    164,
    163,
    136,
    12,
    28,
    26,
    176,
    219,
    129,
    127,
    215,
    103,
    57,
    145,
    120,
    210,
    43,
    244,
    31,
    110,
    147,
    3,
    247,
    38,
    59,
    102,
    144,
    154,
    131,
    136,
    63,
    47,
    145,
    237,
    88,
    147,
    41,
    84,
    96,
    68,
    180,
    49,
    7,
    248,
    12,
    223,
    168,
    77,
    30,
    186,
    207,
    241,
    166,
    236,
    223,
    146,
    254,
    137,
    184,
    46,
    70,
    103,
    23,
    155,
    84,
    2,
    112,
    39,
    236,
    187,
    72,
    240,
    113,
    222,
    47,
    76,
    201,
    48,
    128,
    249,
    219,
    85,
    231,
    69,
    99,
    156,
    160,
    63,
    107,
    249,
    199,
    131,
    211,
    23,
    104,
    54,
    193,
    114,
    15,
    138,
    121,
    203,
    55,
    93,
    228,
    174,
    80,
    225,
    92,
    64,
    255,
    84,
    78,
    37,
    152,
    232,
    246,
    115,
    136,
    139,
    174,
    22,
    239,
    55,
    22,
    248,
    64,
    130,
    4,
    157,
    39,
    62,
    188,
    36,
    31,
    233,
    33,
    65,
    120,
    85,
    153,
    175,
    215,
    224,
    139,
    202,
    176,
    92,
    51,
    59,
    182,
    89,
    237,
    94,
    209,
    229,
    85,
    176,
    126,
    80,
    71,
    213,
    25,
    236,
    255,
    108,
    33,
    59,
    98,
    9,
    70,
    135,
    218,
    231,
    233,
    50,
    200,
    130,
    142,
    142,
    112,
    212,
    158,
    237,
    40,
    177,
    249,
    81,
    144,
    95,
    86,
    228,
    130,
    58,
    49,
    88,
    58,
    131,
    9,
    143,
    167,
    230,
    110,
    51,
    31,
    8,
    193,
    134,
    13,
    109,
    166,
    58,
    181,
    164,
    225,
    64,
    189,
    193,
    134,
    252,
    5,
    47,
    41,
    73,
    23,
    74,
    78,
    245,
    175,
    243,
    118,
    34,
    50,
    150,
    17,
    158,
    138,
    120,
    190,
    43,
    152,
    29,
    217,
    151,
    32,
    75,
    201,
    244,
    120,
    46,
    174,
    72,
    192,
    192,
    1,
    253,
    210,
    165,
    102,
    65,
    106,
    28,
    94,
    150,
    247,
    121,
    57,
    42,
    79,
    151,
    150,
    159,
    93,
    242,
    241,
    35,
    229,
    5,
    25,
    107,
    77,
    96,
    126,
    215,
    245,
    142,
    209,
    98,
    231,
    235,
    182,
    222,
    95,
    82,
    142,
    9,
    194,
    55,
    233,
    181,
    122,
    217,
    70,
    0,
    104,
    188,
    33,
    188,
    208,
    234,
    49,
    223,
    136,
    143,
    86,
    99,
    48,
    97,
    249,
    214,
    34,
    4,
    158,
    106,
    154,
    189,
    166,
    189,
    7,
    216,
    193,
    1,
    191,
    54,
    110,
    180,
    173,
    83,
    9,
    8,
    21,
    154,
    78,
    114,
    29,
    255,
    41,
    206,
    165,
    17,
    134,
    123,
    183,
    116,
    225,
    199,
    15,
    205,
    217,
    16,
    146,
    168,
    190,
    172,
    42,
    70,
    17,
    25,
    56,
    35,
    118,
    165,
    128,
    117,
    102,
    198,
    216,
    16,
    1,
    122,
    96,
    254,
    174,
    207,
    114,
    155,
    201,
    115,
    202,
    34,
    241,
    164,
    87,
    71,
    150,
    24,
    239,
    169,
    57,
    173,
    253,
    204,
    94,
    17,
    69,
    6,
    238,
    77,
    118,
    99,
    137,
    241,
    206,
    141,
    38,
    68,
    220,
    232,
    65,
    248,
    100,
    81,
    121,
    47,
    249,
    52,
    30,
    147,
    65,
    218,
    177,
    38,
    83,
    191,
    214,
    154,
    235,
    233,
    198,
    249,
    179,
    140,
    161,
    69,
    11,
    98,
    14,
    240,
    25,
    7,
    105,
    76,
    161,
    190,
    81,
    155,
    60,
    219,
    54,
    39,
    132,
    53,
    153,
    146,
    150,
    80,
    254,
    46,
    46,
    153,
    185,
    84,
    38,
    252,
    222,
    232,
    158,
    18,
    113,
    93,
    140,
    119,
    22,
    225,
    52,
    206,
    46,
    54,
    169,
    171,
    73,
    138,
    17,
    69,
    230,
    63,
    3,
    32,
    129,
    131,
    187,
    118,
    145,
    224,
    227,
    19,
    246,
    92,
    91,
    253,
    89,
    233,
    73,
    152,
    62,
    85,
    241,
    33,
    6,
    130,
    108,
    68,
    97,
    62,
    212,
    170,
    206,
    139,
    198,
    207,
    169,
    55,
    126,
    56,
    65,
    127,
    214,
    93,
    38,
    195,
    110,
    179,
    137,
    118,
    124,
    214,
    238,
    202,
    196,
    111,
    214,
    29,
    89,
    10,
    177,
    161,
    225,
    228,
    30,
    20,
    243,
    129,
    121,
    168,
    75,
    215,
    105,
    203,
    19,
    178,
    14,
    119,
    171,
    92,
    161,
    194,
    185,
    57,
    198,
    126,
    1,
    128,
    254,
    169,
    156,
    229,
    153,
    21,
    36,
    11,
    54,
    160,
    54,
    110,
    81,
    28,
    142,
    167,
    22,
    102,
    134,
    194,
    113,
    218,
    62,
    44,
    222,
    111,
    44,
    73,
    185,
    211,
    148,
    240,
    129,
    4,
    9,
    149,
    230,
    184,
    177,
    123,
    73,
    13,
    163,
    30,
    46,
    177,
    27,
    72,
    62,
    210,
    67,
    45,
    89,
    110,
    251,
    195,
    246,
    219,
    233,
    166,
    145,
    103,
    81,
    31,
    169,
    176,
    204,
    122,
    206,
    12,
    116,
    148,
    97,
    185,
    102,
    241,
    6,
    5,
    222,
    0,
    0,
    0,
    0,
    176,
    41,
    96,
    61,
    96,
    83,
    192,
    122,
    208,
    122,
    160,
    71,
    192,
    166,
    128,
    245,
    112,
    143,
    224,
    200,
    160,
    245,
    64,
    143,
    16,
    220,
    32,
    178,
    193,
    75,
    112,
    48,
    113,
    98,
    16,
    13,
    161,
    24,
    176,
    74,
    17,
    49,
    208,
    119,
    1,
    237,
    240,
    197,
    177,
    196,
    144,
    248,
    97,
    190,
    48,
    191,
    209,
    151,
    80,
    130,
    130,
    151,
    224,
    96,
    50,
    190,
    128,
    93,
    226,
    196,
    32,
    26,
    82,
    237,
    64,
    39,
    66,
    49,
    96,
    149,
    242,
    24,
    0,
    168,
    34,
    98,
    160,
    239,
    146,
    75,
    192,
    210,
    67,
    220,
    144,
    80,
    243,
    245,
    240,
    109,
    35,
    143,
    80,
    42,
    147,
    166,
    48,
    23,
    131,
    122,
    16,
    165,
    51,
    83,
    112,
    152,
    227,
    41,
    208,
    223,
    83,
    0,
    176,
    226,
    4,
    47,
    193,
    193,
    180,
    6,
    161,
    252,
    100,
    124,
    1,
    187,
    212,
    85,
    97,
    134,
    196,
    137,
    65,
    52,
    116,
    160,
    33,
    9,
    164,
    218,
    129,
    78,
    20,
    243,
    225,
    115,
    197,
    100,
    177,
    241,
    117,
    77,
    209,
    204,
    165,
    55,
    113,
    139,
    21,
    30,
    17,
    182,
    5,
    194,
    49,
    4,
    181,
    235,
    81,
    57,
    101,
    145,
    241,
    126,
    213,
    184,
    145,
    67,
    134,
    184,
    33,
    161,
    54,
    145,
    65,
    156,
    230,
    235,
    225,
    219,
    86,
    194,
    129,
    230,
    70,
    30,
    161,
    84,
    246,
    55,
    193,
    105,
    38,
    77,
    97,
    46,
    150,
    100,
    1,
    19,
    71,
    243,
    81,
    145,
    247,
    218,
    49,
    172,
    39,
    160,
    145,
    235,
    151,
    137,
    241,
    214,
    135,
    85,
    209,
    100,
    55,
    124,
    177,
    89,
    231,
    6,
    17,
    30,
    87,
    47,
    113,
    35,
    73,
    88,
    243,
    88,
    249,
    113,
    147,
    101,
    41,
    11,
    51,
    34,
    153,
    34,
    83,
    31,
    137,
    254,
    115,
    173,
    57,
    215,
    19,
    144,
    233,
    173,
    179,
    215,
    89,
    132,
    211,
    234,
    136,
    19,
    131,
    104,
    56,
    58,
    227,
    85,
    232,
    64,
    67,
    18,
    88,
    105,
    35,
    47,
    72,
    181,
    3,
    157,
    248,
    156,
    99,
    160,
    40,
    230,
    195,
    231,
    152,
    207,
    163,
    218,
    203,
    207,
    19,
    56,
    123,
    230,
    115,
    5,
    171,
    156,
    211,
    66,
    27,
    181,
    179,
    127,
    11,
    105,
    147,
    205,
    187,
    64,
    243,
    240,
    107,
    58,
    83,
    183,
    219,
    19,
    51,
    138,
    10,
    132,
    99,
    8,
    186,
    173,
    3,
    53,
    106,
    215,
    163,
    114,
    218,
    254,
    195,
    79,
    202,
    34,
    227,
    253,
    122,
    11,
    131,
    192,
    170,
    113,
    35,
    135,
    26,
    88,
    67,
    186,
    77,
    119,
    50,
    153,
    253,
    94,
    82,
    164,
    45,
    36,
    242,
    227,
    157,
    13,
    146,
    222,
    141,
    209,
    178,
    108,
    61,
    248,
    210,
    81,
    237,
    130,
    114,
    22,
    93,
    171,
    18,
    43,
    140,
    60,
    66,
    169,
    60,
    21,
    34,
    148,
    236,
    111,
    130,
    211,
    92,
    70,
    226,
    238,
    76,
    154,
    194,
    92,
    252,
    179,
    162,
    97,
    44,
    201,
    2,
    38,
    156,
    224,
    98,
    27,
    207,
    224,
    210,
    249,
    127,
    201,
    178,
    196,
    175,
    179,
    18,
    131,
    31,
    154,
    114,
    190,
    15,
    70,
    82,
    12,
    191,
    111,
    50,
    49,
    111,
    21,
    146,
    118,
    223,
    60,
    242,
    75,
    14,
    171,
    162,
    201,
    190,
    130,
    194,
    244,
    110,
    248,
    98,
    179,
    222,
    209,
    2,
    142,
    206,
    13,
    34,
    60,
    126,
    36,
    66,
    1,
    174,
    94,
    226,
    70,
    30,
    119,
    130,
    123,
    146,
    176,
    230,
    177,
    34,
    153,
    134,
    140,
    242,
    227,
    38,
    203,
    66,
    202,
    70,
    246,
    82,
    22,
    102,
    68,
    226,
    63,
    6,
    121,
    50,
    69,
    166,
    62,
    130,
    108,
    198,
    3,
    83,
    251,
    150,
    129,
    227,
    210,
    246,
    188,
    51,
    168,
    86,
    251,
    131,
    129,
    54,
    198,
    147,
    93,
    22,
    116,
    35,
    116,
    118,
    73,
    243,
    14,
    214,
    14,
    67,
    39,
    182,
    51,
    16,
    39,
    6,
    209,
    160,
    14,
    102,
    236,
    112,
    116,
    198,
    171,
    192,
    93,
    166,
    150,
    208,
    129,
    134,
    36,
    96,
    168,
    230,
    25,
    176,
    210,
    70,
    94,
    0,
    251,
    38,
    99,
    209,
    108,
    118,
    225,
    97,
    69,
    22,
    220,
    177,
    63,
    182,
    155,
    1,
    22,
    214,
    166,
    17,
    202,
    246,
    20,
    161,
    227,
    150,
    41,
    113,
    153,
    54,
    110,
    193,
    176,
    86,
    83,
    150,
    159,
    39,
    112,
    38,
    182,
    71,
    77,
    246,
    204,
    231,
    10,
    70,
    229,
    135,
    55,
    86,
    57,
    167,
    133,
    230,
    16,
    199,
    184,
    54,
    106,
    103,
    255,
    134,
    67,
    7,
    194,
    87,
    212,
    87,
    64,
    231,
    253,
    55,
    125,
    55,
    135,
    151,
    58,
    135,
    174,
    247,
    7,
    151,
    114,
    215,
    181,
    39,
    91,
    183,
    136,
    247,
    33,
    23,
    207,
    71,
    8,
    119,
    242,
    20,
    8,
    199,
    16,
    164,
    33,
    167,
    45,
    116,
    91,
    7,
    106,
    196,
    114,
    103,
    87,
    212,
    174,
    71,
    229,
    100,
    135,
    39,
    216,
    180,
    253,
    135,
    159,
    4,
    212,
    231,
    162,
    213,
    67,
    183,
    32,
    101,
    106,
    215,
    29,
    181,
    16,
    119,
    90,
    5,
    57,
    23,
    103,
    21,
    229,
    55,
    213,
    165,
    204,
    87,
    232,
    117,
    182,
    247,
    175,
    197,
    159,
    151,
    146,
    219,
    232,
    21,
    233,
    107,
    193,
    117,
    212,
    187,
    187,
    213,
    147,
    11,
    146,
    181,
    174,
    27,
    78,
    149,
    28,
    171,
    103,
    245,
    33,
    123,
    29,
    85,
    102,
    203,
    52,
    53,
    91,
    26,
    163,
    101,
    217,
    170,
    138,
    5,
    228,
    122,
    240,
    165,
    163,
    202,
    217,
    197,
    158,
    218,
    5,
    229,
    44,
    106,
    44,
    133,
    17,
    186,
    86,
    37,
    86,
    10,
    127,
    69,
    107,
    89,
    127,
    245,
    137,
    233,
    86,
    149,
    180,
    57,
    44,
    53,
    243,
    137,
    5,
    85,
    206,
    153,
    217,
    117,
    124,
    41,
    240,
    21,
    65,
    249,
    138,
    181,
    6,
    73,
    163,
    213,
    59,
    152,
    52,
    133,
    185,
    40,
    29,
    229,
    132,
    248,
    103,
    69,
    195,
    72,
    78,
    37,
    254,
    88,
    146,
    5,
    76,
    232,
    187,
    101,
    113,
    56,
    193,
    197,
    54,
    136,
    232,
    165,
    11,
    223,
    199,
    212,
    40,
    111,
    238,
    180,
    21,
    191,
    148,
    20,
    82,
    15,
    189,
    116,
    111,
    31,
    97,
    84,
    221,
    175,
    72,
    52,
    224,
    127,
    50,
    148,
    167,
    207,
    27,
    244,
    154,
    30,
    140,
    164,
    24,
    174,
    165,
    196,
    37,
    126,
    223,
    100,
    98,
    206,
    246,
    4,
    95,
    222,
    42,
    36,
    237,
    110,
    3,
    68,
    208,
    190,
    121,
    228,
    151,
    14,
    80,
    132,
    170,
    93,
    80,
    52,
    72,
    237,
    121,
    84,
    117,
    61,
    3,
    244,
    50,
    141,
    42,
    148,
    15,
    157,
    246,
    180,
    189,
    45,
    223,
    212,
    128,
    253,
    165,
    116,
    199,
    77,
    140,
    20,
    250,
    156,
    27,
    68,
    120,
    44,
    50,
    36,
    69,
    252,
    72,
    132,
    2,
    76,
    97,
    228,
    63,
    92,
    189,
    196,
    141,
    236,
    148,
    164,
    176,
    60,
    238,
    4,
    247,
    140,
    199,
    100,
    202,
    0,
    0,
    0,
    0,
    165,
    211,
    92,
    203,
    11,
    161,
    200,
    77,
    174,
    114,
    148,
    134,
    22,
    66,
    145,
    155,
    179,
    145,
    205,
    80,
    29,
    227,
    89,
    214,
    184,
    48,
    5,
    29,
    109,
    130,
    83,
    236,
    200,
    81,
    15,
    39,
    102,
    35,
    155,
    161,
    195,
    240,
    199,
    106,
    123,
    192,
    194,
    119,
    222,
    19,
    158,
    188,
    112,
    97,
    10,
    58,
    213,
    178,
    86,
    241,
    155,
    2,
    214,
    3,
    62,
    209,
    138,
    200,
    144,
    163,
    30,
    78,
    53,
    112,
    66,
    133,
    141,
    64,
    71,
    152,
    40,
    147,
    27,
    83,
    134,
    225,
    143,
    213,
    35,
    50,
    211,
    30,
    246,
    128,
    133,
    239,
    83,
    83,
    217,
    36,
    253,
    33,
    77,
    162,
    88,
    242,
    17,
    105,
    224,
    194,
    20,
    116,
    69,
    17,
    72,
    191,
    235,
    99,
    220,
    57,
    78,
    176,
    128,
    242,
    54,
    5,
    172,
    7,
    147,
    214,
    240,
    204,
    61,
    164,
    100,
    74,
    152,
    119,
    56,
    129,
    32,
    71,
    61,
    156,
    133,
    148,
    97,
    87,
    43,
    230,
    245,
    209,
    142,
    53,
    169,
    26,
    91,
    135,
    255,
    235,
    254,
    84,
    163,
    32,
    80,
    38,
    55,
    166,
    245,
    245,
    107,
    109,
    77,
    197,
    110,
    112,
    232,
    22,
    50,
    187,
    70,
    100,
    166,
    61,
    227,
    183,
    250,
    246,
    173,
    7,
    122,
    4,
    8,
    212,
    38,
    207,
    166,
    166,
    178,
    73,
    3,
    117,
    238,
    130,
    187,
    69,
    235,
    159,
    30,
    150,
    183,
    84,
    176,
    228,
    35,
    210,
    21,
    55,
    127,
    25,
    192,
    133,
    41,
    232,
    101,
    86,
    117,
    35,
    203,
    36,
    225,
    165,
    110,
    247,
    189,
    110,
    214,
    199,
    184,
    115,
    115,
    20,
    228,
    184,
    221,
    102,
    112,
    62,
    120,
    181,
    44,
    245,
    108,
    10,
    88,
    15,
    201,
    217,
    4,
    196,
    103,
    171,
    144,
    66,
    194,
    120,
    204,
    137,
    122,
    72,
    201,
    148,
    223,
    155,
    149,
    95,
    113,
    233,
    1,
    217,
    212,
    58,
    93,
    18,
    1,
    136,
    11,
    227,
    164,
    91,
    87,
    40,
    10,
    41,
    195,
    174,
    175,
    250,
    159,
    101,
    23,
    202,
    154,
    120,
    178,
    25,
    198,
    179,
    28,
    107,
    82,
    53,
    185,
    184,
    14,
    254,
    247,
    8,
    142,
    12,
    82,
    219,
    210,
    199,
    252,
    169,
    70,
    65,
    89,
    122,
    26,
    138,
    225,
    74,
    31,
    151,
    68,
    153,
    67,
    92,
    234,
    235,
    215,
    218,
    79,
    56,
    139,
    17,
    154,
    138,
    221,
    224,
    63,
    89,
    129,
    43,
    145,
    43,
    21,
    173,
    52,
    248,
    73,
    102,
    140,
    200,
    76,
    123,
    41,
    27,
    16,
    176,
    135,
    105,
    132,
    54,
    34,
    186,
    216,
    253,
    90,
    15,
    244,
    8,
    255,
    220,
    168,
    195,
    81,
    174,
    60,
    69,
    244,
    125,
    96,
    142,
    76,
    77,
    101,
    147,
    233,
    158,
    57,
    88,
    71,
    236,
    173,
    222,
    226,
    63,
    241,
    21,
    55,
    141,
    167,
    228,
    146,
    94,
    251,
    47,
    60,
    44,
    111,
    169,
    153,
    255,
    51,
    98,
    33,
    207,
    54,
    127,
    132,
    28,
    106,
    180,
    42,
    110,
    254,
    50,
    143,
    189,
    162,
    249,
    193,
    13,
    34,
    11,
    100,
    222,
    126,
    192,
    202,
    172,
    234,
    70,
    111,
    127,
    182,
    141,
    215,
    79,
    179,
    144,
    114,
    156,
    239,
    91,
    220,
    238,
    123,
    221,
    121,
    61,
    39,
    22,
    172,
    143,
    113,
    231,
    9,
    92,
    45,
    44,
    167,
    46,
    185,
    170,
    2,
    253,
    229,
    97,
    186,
    205,
    224,
    124,
    31,
    30,
    188,
    183,
    177,
    108,
    40,
    49,
    20,
    191,
    116,
    250,
    216,
    20,
    176,
    30,
    125,
    199,
    236,
    213,
    211,
    181,
    120,
    83,
    118,
    102,
    36,
    152,
    206,
    86,
    33,
    133,
    107,
    133,
    125,
    78,
    197,
    247,
    233,
    200,
    96,
    36,
    181,
    3,
    181,
    150,
    227,
    242,
    16,
    69,
    191,
    57,
    190,
    55,
    43,
    191,
    27,
    228,
    119,
    116,
    163,
    212,
    114,
    105,
    6,
    7,
    46,
    162,
    168,
    117,
    186,
    36,
    13,
    166,
    230,
    239,
    67,
    22,
    102,
    29,
    230,
    197,
    58,
    214,
    72,
    183,
    174,
    80,
    237,
    100,
    242,
    155,
    85,
    84,
    247,
    134,
    240,
    135,
    171,
    77,
    94,
    245,
    63,
    203,
    251,
    38,
    99,
    0,
    46,
    148,
    53,
    241,
    139,
    71,
    105,
    58,
    37,
    53,
    253,
    188,
    128,
    230,
    161,
    119,
    56,
    214,
    164,
    106,
    157,
    5,
    248,
    161,
    51,
    119,
    108,
    39,
    150,
    164,
    48,
    236,
    238,
    17,
    28,
    25,
    75,
    194,
    64,
    210,
    229,
    176,
    212,
    84,
    64,
    99,
    136,
    159,
    248,
    83,
    141,
    130,
    93,
    128,
    209,
    73,
    243,
    242,
    69,
    207,
    86,
    33,
    25,
    4,
    131,
    147,
    79,
    245,
    38,
    64,
    19,
    62,
    136,
    50,
    135,
    184,
    45,
    225,
    219,
    115,
    149,
    209,
    222,
    110,
    48,
    2,
    130,
    165,
    158,
    112,
    22,
    35,
    59,
    163,
    74,
    232,
    117,
    19,
    202,
    26,
    208,
    192,
    150,
    209,
    126,
    178,
    2,
    87,
    219,
    97,
    94,
    156,
    99,
    81,
    91,
    129,
    198,
    130,
    7,
    74,
    104,
    240,
    147,
    204,
    205,
    35,
    207,
    7,
    24,
    145,
    153,
    246,
    189,
    66,
    197,
    61,
    19,
    48,
    81,
    187,
    182,
    227,
    13,
    112,
    14,
    211,
    8,
    109,
    171,
    0,
    84,
    166,
    5,
    114,
    192,
    32,
    160,
    161,
    156,
    235,
    180,
    30,
    232,
    17,
    17,
    205,
    180,
    218,
    191,
    191,
    32,
    92,
    26,
    108,
    124,
    151,
    162,
    92,
    121,
    138,
    7,
    143,
    37,
    65,
    169,
    253,
    177,
    199,
    12,
    46,
    237,
    12,
    217,
    156,
    187,
    253,
    124,
    79,
    231,
    54,
    210,
    61,
    115,
    176,
    119,
    238,
    47,
    123,
    207,
    222,
    42,
    102,
    106,
    13,
    118,
    173,
    196,
    127,
    226,
    43,
    97,
    172,
    190,
    224,
    47,
    28,
    62,
    18,
    138,
    207,
    98,
    217,
    36,
    189,
    246,
    95,
    129,
    110,
    170,
    148,
    57,
    94,
    175,
    137,
    156,
    141,
    243,
    66,
    50,
    255,
    103,
    196,
    151,
    44,
    59,
    15,
    66,
    158,
    109,
    254,
    231,
    77,
    49,
    53,
    73,
    63,
    165,
    179,
    236,
    236,
    249,
    120,
    84,
    220,
    252,
    101,
    241,
    15,
    160,
    174,
    95,
    125,
    52,
    40,
    250,
    174,
    104,
    227,
    130,
    27,
    68,
    22,
    39,
    200,
    24,
    221,
    137,
    186,
    140,
    91,
    44,
    105,
    208,
    144,
    148,
    89,
    213,
    141,
    49,
    138,
    137,
    70,
    159,
    248,
    29,
    192,
    58,
    43,
    65,
    11,
    239,
    153,
    23,
    250,
    74,
    74,
    75,
    49,
    228,
    56,
    223,
    183,
    65,
    235,
    131,
    124,
    249,
    219,
    134,
    97,
    92,
    8,
    218,
    170,
    242,
    122,
    78,
    44,
    87,
    169,
    18,
    231,
    25,
    25,
    146,
    21,
    188,
    202,
    206,
    222,
    18,
    184,
    90,
    88,
    183,
    107,
    6,
    147,
    15,
    91,
    3,
    142,
    170,
    136,
    95,
    69,
    4,
    250,
    203,
    195,
    161,
    41,
    151,
    8,
    116,
    155,
    193,
    249,
    209,
    72,
    157,
    50,
    127,
    58,
    9,
    180,
    218,
    233,
    85,
    127,
    98,
    217,
    80,
    98,
    199,
    10,
    12,
    169,
    105,
    120,
    152,
    47,
    204,
    171,
    196,
    228,
    0,
    0,
    0,
    0,
    180,
    11,
    119,
    166,
    41,
    17,
    159,
    151,
    157,
    26,
    232,
    49,
    19,
    36,
    79,
    244,
    167,
    47,
    56,
    82,
    58,
    53,
    208,
    99,
    142,
    62,
    167,
    197,
    103,
    78,
    239,
    51,
    211,
    69,
    152,
    149,
    78,
    95,
    112,
    164,
    250,
    84,
    7,
    2,
    116,
    106,
    160,
    199,
    192,
    97,
    215,
    97,
    93,
    123,
    63,
    80,
    233,
    112,
    72,
    246,
    206,
    156,
    222,
    103,
    122,
    151,
    169,
    193,
    231,
    141,
    65,
    240,
    83,
    134,
    54,
    86,
    221,
    184,
    145,
    147,
    105,
    179,
    230,
    53,
    244,
    169,
    14,
    4,
    64,
    162,
    121,
    162,
    169,
    210,
    49,
    84,
    29,
    217,
    70,
    242,
    128,
    195,
    174,
    195,
    52,
    200,
    217,
    101,
    186,
    246,
    126,
    160,
    14,
    253,
    9,
    6,
    147,
    231,
    225,
    55,
    39,
    236,
    150,
    145,
    156,
    57,
    189,
    207,
    40,
    50,
    202,
    105,
    181,
    40,
    34,
    88,
    1,
    35,
    85,
    254,
    143,
    29,
    242,
    59,
    59,
    22,
    133,
    157,
    166,
    12,
    109,
    172,
    18,
    7,
    26,
    10,
    251,
    119,
    82,
    252,
    79,
    124,
    37,
    90,
    210,
    102,
    205,
    107,
    102,
    109,
    186,
    205,
    232,
    83,
    29,
    8,
    92,
    88,
    106,
    174,
    193,
    66,
    130,
    159,
    117,
    73,
    245,
    57,
    82,
    165,
    99,
    168,
    230,
    174,
    20,
    14,
    123,
    180,
    252,
    63,
    207,
    191,
    139,
    153,
    65,
    129,
    44,
    92,
    245,
    138,
    91,
    250,
    104,
    144,
    179,
    203,
    220,
    155,
    196,
    109,
    53,
    235,
    140,
    155,
    129,
    224,
    251,
    61,
    28,
    250,
    19,
    12,
    168,
    241,
    100,
    170,
    38,
    207,
    195,
    111,
    146,
    196,
    180,
    201,
    15,
    222,
    92,
    248,
    187,
    213,
    43,
    94,
    121,
    117,
    11,
    68,
    205,
    126,
    124,
    226,
    80,
    100,
    148,
    211,
    228,
    111,
    227,
    117,
    106,
    81,
    68,
    176,
    222,
    90,
    51,
    22,
    67,
    64,
    219,
    39,
    247,
    75,
    172,
    129,
    30,
    59,
    228,
    119,
    170,
    48,
    147,
    209,
    55,
    42,
    123,
    224,
    131,
    33,
    12,
    70,
    13,
    31,
    171,
    131,
    185,
    20,
    220,
    37,
    36,
    14,
    52,
    20,
    144,
    5,
    67,
    178,
    183,
    233,
    213,
    35,
    3,
    226,
    162,
    133,
    158,
    248,
    74,
    180,
    42,
    243,
    61,
    18,
    164,
    205,
    154,
    215,
    16,
    198,
    237,
    113,
    141,
    220,
    5,
    64,
    57,
    215,
    114,
    230,
    208,
    167,
    58,
    16,
    100,
    172,
    77,
    182,
    249,
    182,
    165,
    135,
    77,
    189,
    210,
    33,
    195,
    131,
    117,
    228,
    119,
    136,
    2,
    66,
    234,
    146,
    234,
    115,
    94,
    153,
    157,
    213,
    229,
    76,
    182,
    139,
    81,
    71,
    193,
    45,
    204,
    93,
    41,
    28,
    120,
    86,
    94,
    186,
    246,
    104,
    249,
    127,
    66,
    99,
    142,
    217,
    223,
    121,
    102,
    232,
    107,
    114,
    17,
    78,
    130,
    2,
    89,
    184,
    54,
    9,
    46,
    30,
    171,
    19,
    198,
    47,
    31,
    24,
    177,
    137,
    145,
    38,
    22,
    76,
    37,
    45,
    97,
    234,
    184,
    55,
    137,
    219,
    12,
    60,
    254,
    125,
    43,
    208,
    104,
    236,
    159,
    219,
    31,
    74,
    2,
    193,
    247,
    123,
    182,
    202,
    128,
    221,
    56,
    244,
    39,
    24,
    140,
    255,
    80,
    190,
    17,
    229,
    184,
    143,
    165,
    238,
    207,
    41,
    76,
    158,
    135,
    223,
    248,
    149,
    240,
    121,
    101,
    143,
    24,
    72,
    209,
    132,
    111,
    238,
    95,
    186,
    200,
    43,
    235,
    177,
    191,
    141,
    118,
    171,
    87,
    188,
    194,
    160,
    32,
    26,
    242,
    234,
    22,
    136,
    70,
    225,
    97,
    46,
    219,
    251,
    137,
    31,
    111,
    240,
    254,
    185,
    225,
    206,
    89,
    124,
    85,
    197,
    46,
    218,
    200,
    223,
    198,
    235,
    124,
    212,
    177,
    77,
    149,
    164,
    249,
    187,
    33,
    175,
    142,
    29,
    188,
    181,
    102,
    44,
    8,
    190,
    17,
    138,
    134,
    128,
    182,
    79,
    50,
    139,
    193,
    233,
    175,
    145,
    41,
    216,
    27,
    154,
    94,
    126,
    60,
    118,
    200,
    239,
    136,
    125,
    191,
    73,
    21,
    103,
    87,
    120,
    161,
    108,
    32,
    222,
    47,
    82,
    135,
    27,
    155,
    89,
    240,
    189,
    6,
    67,
    24,
    140,
    178,
    72,
    111,
    42,
    91,
    56,
    39,
    220,
    239,
    51,
    80,
    122,
    114,
    41,
    184,
    75,
    198,
    34,
    207,
    237,
    72,
    28,
    104,
    40,
    252,
    23,
    31,
    142,
    97,
    13,
    247,
    191,
    213,
    6,
    128,
    25,
    110,
    211,
    171,
    71,
    218,
    216,
    220,
    225,
    71,
    194,
    52,
    208,
    243,
    201,
    67,
    118,
    125,
    247,
    228,
    179,
    201,
    252,
    147,
    21,
    84,
    230,
    123,
    36,
    224,
    237,
    12,
    130,
    9,
    157,
    68,
    116,
    189,
    150,
    51,
    210,
    32,
    140,
    219,
    227,
    148,
    135,
    172,
    69,
    26,
    185,
    11,
    128,
    174,
    178,
    124,
    38,
    51,
    168,
    148,
    23,
    135,
    163,
    227,
    177,
    160,
    79,
    117,
    32,
    20,
    68,
    2,
    134,
    137,
    94,
    234,
    183,
    61,
    85,
    157,
    17,
    179,
    107,
    58,
    212,
    7,
    96,
    77,
    114,
    154,
    122,
    165,
    67,
    46,
    113,
    210,
    229,
    199,
    1,
    154,
    19,
    115,
    10,
    237,
    181,
    238,
    16,
    5,
    132,
    90,
    27,
    114,
    34,
    212,
    37,
    213,
    231,
    96,
    46,
    162,
    65,
    253,
    52,
    74,
    112,
    73,
    63,
    61,
    214,
    139,
    159,
    29,
    204,
    63,
    148,
    106,
    106,
    162,
    142,
    130,
    91,
    22,
    133,
    245,
    253,
    152,
    187,
    82,
    56,
    44,
    176,
    37,
    158,
    177,
    170,
    205,
    175,
    5,
    161,
    186,
    9,
    236,
    209,
    242,
    255,
    88,
    218,
    133,
    89,
    197,
    192,
    109,
    104,
    113,
    203,
    26,
    206,
    255,
    245,
    189,
    11,
    75,
    254,
    202,
    173,
    214,
    228,
    34,
    156,
    98,
    239,
    85,
    58,
    69,
    3,
    195,
    171,
    241,
    8,
    180,
    13,
    108,
    18,
    92,
    60,
    216,
    25,
    43,
    154,
    86,
    39,
    140,
    95,
    226,
    44,
    251,
    249,
    127,
    54,
    19,
    200,
    203,
    61,
    100,
    110,
    34,
    77,
    44,
    152,
    150,
    70,
    91,
    62,
    11,
    92,
    179,
    15,
    191,
    87,
    196,
    169,
    49,
    105,
    99,
    108,
    133,
    98,
    20,
    202,
    24,
    120,
    252,
    251,
    172,
    115,
    139,
    93,
    23,
    166,
    160,
    3,
    163,
    173,
    215,
    165,
    62,
    183,
    63,
    148,
    138,
    188,
    72,
    50,
    4,
    130,
    239,
    247,
    176,
    137,
    152,
    81,
    45,
    147,
    112,
    96,
    153,
    152,
    7,
    198,
    112,
    232,
    79,
    48,
    196,
    227,
    56,
    150,
    89,
    249,
    208,
    167,
    237,
    242,
    167,
    1,
    99,
    204,
    0,
    196,
    215,
    199,
    119,
    98,
    74,
    221,
    159,
    83,
    254,
    214,
    232,
    245,
    217,
    58,
    126,
    100,
    109,
    49,
    9,
    194,
    240,
    43,
    225,
    243,
    68,
    32,
    150,
    85,
    202,
    30,
    49,
    144,
    126,
    21,
    70,
    54,
    227,
    15,
    174,
    7,
    87,
    4,
    217,
    161,
    190,
    116,
    145,
    87,
    10,
    127,
    230,
    241,
    151,
    101,
    14,
    192,
    35,
    110,
    121,
    102,
    173,
    80,
    222,
    163,
    25,
    91,
    169,
    5,
    132,
    65,
    65,
    52,
    48,
    74,
    54,
    146,
    0,
    0,
    0,
    0,
    158,
    0,
    170,
    204,
    125,
    7,
    37,
    66,
    227,
    7,
    143,
    142,
    250,
    14,
    74,
    132,
    100,
    14,
    224,
    72,
    135,
    9,
    111,
    198,
    25,
    9,
    197,
    10,
    181,
    27,
    229,
    211,
    43,
    27,
    79,
    31,
    200,
    28,
    192,
    145,
    86,
    28,
    106,
    93,
    79,
    21,
    175,
    87,
    209,
    21,
    5,
    155,
    50,
    18,
    138,
    21,
    172,
    18,
    32,
    217,
    43,
    49,
    187,
    124,
    181,
    49,
    17,
    176,
    86,
    54,
    158,
    62,
    200,
    54,
    52,
    242,
    209,
    63,
    241,
    248,
    79,
    63,
    91,
    52,
    172,
    56,
    212,
    186,
    50,
    56,
    126,
    118,
    158,
    42,
    94,
    175,
    0,
    42,
    244,
    99,
    227,
    45,
    123,
    237,
    125,
    45,
    209,
    33,
    100,
    36,
    20,
    43,
    250,
    36,
    190,
    231,
    25,
    35,
    49,
    105,
    135,
    35,
    155,
    165,
    86,
    98,
    118,
    249,
    200,
    98,
    220,
    53,
    43,
    101,
    83,
    187,
    181,
    101,
    249,
    119,
    172,
    108,
    60,
    125,
    50,
    108,
    150,
    177,
    209,
    107,
    25,
    63,
    79,
    107,
    179,
    243,
    227,
    121,
    147,
    42,
    125,
    121,
    57,
    230,
    158,
    126,
    182,
    104,
    0,
    126,
    28,
    164,
    25,
    119,
    217,
    174,
    135,
    119,
    115,
    98,
    100,
    112,
    252,
    236,
    250,
    112,
    86,
    32,
    125,
    83,
    205,
    133,
    227,
    83,
    103,
    73,
    0,
    84,
    232,
    199,
    158,
    84,
    66,
    11,
    135,
    93,
    135,
    1,
    25,
    93,
    45,
    205,
    250,
    90,
    162,
    67,
    100,
    90,
    8,
    143,
    200,
    72,
    40,
    86,
    86,
    72,
    130,
    154,
    181,
    79,
    13,
    20,
    43,
    79,
    167,
    216,
    50,
    70,
    98,
    210,
    172,
    70,
    200,
    30,
    79,
    65,
    71,
    144,
    209,
    65,
    237,
    92,
    237,
    194,
    157,
    41,
    115,
    194,
    55,
    229,
    144,
    197,
    184,
    107,
    14,
    197,
    18,
    167,
    23,
    204,
    215,
    173,
    137,
    204,
    125,
    97,
    106,
    203,
    242,
    239,
    244,
    203,
    88,
    35,
    88,
    217,
    120,
    250,
    198,
    217,
    210,
    54,
    37,
    222,
    93,
    184,
    187,
    222,
    247,
    116,
    162,
    215,
    50,
    126,
    60,
    215,
    152,
    178,
    223,
    208,
    23,
    60,
    65,
    208,
    189,
    240,
    198,
    243,
    38,
    85,
    88,
    243,
    140,
    153,
    187,
    244,
    3,
    23,
    37,
    244,
    169,
    219,
    60,
    253,
    108,
    209,
    162,
    253,
    198,
    29,
    65,
    250,
    73,
    147,
    223,
    250,
    227,
    95,
    115,
    232,
    195,
    134,
    237,
    232,
    105,
    74,
    14,
    239,
    230,
    196,
    144,
    239,
    76,
    8,
    137,
    230,
    137,
    2,
    23,
    230,
    35,
    206,
    244,
    225,
    172,
    64,
    106,
    225,
    6,
    140,
    187,
    160,
    235,
    208,
    37,
    160,
    65,
    28,
    198,
    167,
    206,
    146,
    88,
    167,
    100,
    94,
    65,
    174,
    161,
    84,
    223,
    174,
    11,
    152,
    60,
    169,
    132,
    22,
    162,
    169,
    46,
    218,
    14,
    187,
    14,
    3,
    144,
    187,
    164,
    207,
    115,
    188,
    43,
    65,
    237,
    188,
    129,
    141,
    244,
    181,
    68,
    135,
    106,
    181,
    238,
    75,
    137,
    178,
    97,
    197,
    23,
    178,
    203,
    9,
    144,
    145,
    80,
    172,
    14,
    145,
    250,
    96,
    237,
    150,
    117,
    238,
    115,
    150,
    223,
    34,
    106,
    159,
    26,
    40,
    244,
    159,
    176,
    228,
    23,
    152,
    63,
    106,
    137,
    152,
    149,
    166,
    37,
    138,
    181,
    127,
    187,
    138,
    31,
    179,
    88,
    141,
    144,
    61,
    198,
    141,
    58,
    241,
    223,
    132,
    255,
    251,
    65,
    132,
    85,
    55,
    162,
    131,
    218,
    185,
    60,
    131,
    112,
    117,
    218,
    133,
    59,
    83,
    68,
    133,
    145,
    159,
    167,
    130,
    30,
    17,
    57,
    130,
    180,
    221,
    32,
    139,
    113,
    215,
    190,
    139,
    219,
    27,
    93,
    140,
    84,
    149,
    195,
    140,
    254,
    89,
    111,
    158,
    222,
    128,
    241,
    158,
    116,
    76,
    18,
    153,
    251,
    194,
    140,
    153,
    81,
    14,
    149,
    144,
    148,
    4,
    11,
    144,
    62,
    200,
    232,
    151,
    177,
    70,
    118,
    151,
    27,
    138,
    241,
    180,
    128,
    47,
    111,
    180,
    42,
    227,
    140,
    179,
    165,
    109,
    18,
    179,
    15,
    161,
    11,
    186,
    202,
    171,
    149,
    186,
    96,
    103,
    118,
    189,
    239,
    233,
    232,
    189,
    69,
    37,
    68,
    175,
    101,
    252,
    218,
    175,
    207,
    48,
    57,
    168,
    64,
    190,
    167,
    168,
    234,
    114,
    190,
    161,
    47,
    120,
    32,
    161,
    133,
    180,
    195,
    166,
    10,
    58,
    93,
    166,
    160,
    246,
    140,
    231,
    77,
    170,
    18,
    231,
    231,
    102,
    241,
    224,
    104,
    232,
    111,
    224,
    194,
    36,
    118,
    233,
    7,
    46,
    232,
    233,
    173,
    226,
    11,
    238,
    34,
    108,
    149,
    238,
    136,
    160,
    57,
    252,
    168,
    121,
    167,
    252,
    2,
    181,
    68,
    251,
    141,
    59,
    218,
    251,
    39,
    247,
    195,
    242,
    226,
    253,
    93,
    242,
    72,
    49,
    190,
    245,
    199,
    191,
    32,
    245,
    109,
    115,
    167,
    214,
    246,
    214,
    57,
    214,
    92,
    26,
    218,
    209,
    211,
    148,
    68,
    209,
    121,
    88,
    93,
    216,
    188,
    82,
    195,
    216,
    22,
    158,
    32,
    223,
    153,
    16,
    190,
    223,
    51,
    220,
    18,
    205,
    19,
    5,
    140,
    205,
    185,
    201,
    111,
    202,
    54,
    71,
    241,
    202,
    156,
    139,
    232,
    195,
    89,
    129,
    118,
    195,
    243,
    77,
    149,
    196,
    124,
    195,
    11,
    196,
    214,
    15,
    55,
    71,
    166,
    122,
    169,
    71,
    12,
    182,
    74,
    64,
    131,
    56,
    212,
    64,
    41,
    244,
    205,
    73,
    236,
    254,
    83,
    73,
    70,
    50,
    176,
    78,
    201,
    188,
    46,
    78,
    99,
    112,
    130,
    92,
    67,
    169,
    28,
    92,
    233,
    101,
    255,
    91,
    102,
    235,
    97,
    91,
    204,
    39,
    120,
    82,
    9,
    45,
    230,
    82,
    163,
    225,
    5,
    85,
    44,
    111,
    155,
    85,
    134,
    163,
    28,
    118,
    29,
    6,
    130,
    118,
    183,
    202,
    97,
    113,
    56,
    68,
    255,
    113,
    146,
    136,
    230,
    120,
    87,
    130,
    120,
    120,
    253,
    78,
    155,
    127,
    114,
    192,
    5,
    127,
    216,
    12,
    169,
    109,
    248,
    213,
    55,
    109,
    82,
    25,
    212,
    106,
    221,
    151,
    74,
    106,
    119,
    91,
    83,
    99,
    178,
    81,
    205,
    99,
    24,
    157,
    46,
    100,
    151,
    19,
    176,
    100,
    61,
    223,
    97,
    37,
    208,
    131,
    255,
    37,
    122,
    79,
    28,
    34,
    245,
    193,
    130,
    34,
    95,
    13,
    155,
    43,
    154,
    7,
    5,
    43,
    48,
    203,
    230,
    44,
    191,
    69,
    120,
    44,
    21,
    137,
    212,
    62,
    53,
    80,
    74,
    62,
    159,
    156,
    169,
    57,
    16,
    18,
    55,
    57,
    186,
    222,
    46,
    48,
    127,
    212,
    176,
    48,
    213,
    24,
    83,
    55,
    90,
    150,
    205,
    55,
    240,
    90,
    74,
    20,
    107,
    255,
    212,
    20,
    193,
    51,
    55,
    19,
    78,
    189,
    169,
    19,
    228,
    113,
    176,
    26,
    33,
    123,
    46,
    26,
    139,
    183,
    205,
    29,
    4,
    57,
    83,
    29,
    174,
    245,
    255,
    15,
    142,
    44,
    97,
    15,
    36,
    224,
    130,
    8,
    171,
    110,
    28,
    8,
    1,
    162,
    5,
    1,
    196,
    168,
    155,
    1,
    110,
    100,
    120,
    6,
    225,
    234,
    230,
    6,
    75,
    38,
    0,
    0,
    0,
    0,
    67,
    20,
    123,
    23,
    134,
    40,
    246,
    46,
    197,
    60,
    141,
    57,
    12,
    81,
    236,
    93,
    79,
    69,
    151,
    74,
    138,
    121,
    26,
    115,
    201,
    109,
    97,
    100,
    24,
    162,
    216,
    187,
    91,
    182,
    163,
    172,
    158,
    138,
    46,
    149,
    221,
    158,
    85,
    130,
    20,
    243,
    52,
    230,
    87,
    231,
    79,
    241,
    146,
    219,
    194,
    200,
    209,
    207,
    185,
    223,
    113,
    66,
    192,
    172,
    50,
    86,
    187,
    187,
    247,
    106,
    54,
    130,
    180,
    126,
    77,
    149,
    125,
    19,
    44,
    241,
    62,
    7,
    87,
    230,
    251,
    59,
    218,
    223,
    184,
    47,
    161,
    200,
    105,
    224,
    24,
    23,
    42,
    244,
    99,
    0,
    239,
    200,
    238,
    57,
    172,
    220,
    149,
    46,
    101,
    177,
    244,
    74,
    38,
    165,
    143,
    93,
    227,
    153,
    2,
    100,
    160,
    141,
    121,
    115,
    163,
    130,
    241,
    130,
    224,
    150,
    138,
    149,
    37,
    170,
    7,
    172,
    102,
    190,
    124,
    187,
    175,
    211,
    29,
    223,
    236,
    199,
    102,
    200,
    41,
    251,
    235,
    241,
    106,
    239,
    144,
    230,
    187,
    32,
    41,
    57,
    248,
    52,
    82,
    46,
    61,
    8,
    223,
    23,
    126,
    28,
    164,
    0,
    183,
    113,
    197,
    100,
    244,
    101,
    190,
    115,
    49,
    89,
    51,
    74,
    114,
    77,
    72,
    93,
    210,
    192,
    49,
    46,
    145,
    212,
    74,
    57,
    84,
    232,
    199,
    0,
    23,
    252,
    188,
    23,
    222,
    145,
    221,
    115,
    157,
    133,
    166,
    100,
    88,
    185,
    43,
    93,
    27,
    173,
    80,
    74,
    202,
    98,
    233,
    149,
    137,
    118,
    146,
    130,
    76,
    74,
    31,
    187,
    15,
    94,
    100,
    172,
    198,
    51,
    5,
    200,
    133,
    39,
    126,
    223,
    64,
    27,
    243,
    230,
    3,
    15,
    136,
    241,
    7,
    3,
    146,
    222,
    68,
    23,
    233,
    201,
    129,
    43,
    100,
    240,
    194,
    63,
    31,
    231,
    11,
    82,
    126,
    131,
    72,
    70,
    5,
    148,
    141,
    122,
    136,
    173,
    206,
    110,
    243,
    186,
    31,
    161,
    74,
    101,
    92,
    181,
    49,
    114,
    153,
    137,
    188,
    75,
    218,
    157,
    199,
    92,
    19,
    240,
    166,
    56,
    80,
    228,
    221,
    47,
    149,
    216,
    80,
    22,
    214,
    204,
    43,
    1,
    118,
    65,
    82,
    114,
    53,
    85,
    41,
    101,
    240,
    105,
    164,
    92,
    179,
    125,
    223,
    75,
    122,
    16,
    190,
    47,
    57,
    4,
    197,
    56,
    252,
    56,
    72,
    1,
    191,
    44,
    51,
    22,
    110,
    227,
    138,
    201,
    45,
    247,
    241,
    222,
    232,
    203,
    124,
    231,
    171,
    223,
    7,
    240,
    98,
    178,
    102,
    148,
    33,
    166,
    29,
    131,
    228,
    154,
    144,
    186,
    167,
    142,
    235,
    173,
    164,
    129,
    99,
    92,
    231,
    149,
    24,
    75,
    34,
    169,
    149,
    114,
    97,
    189,
    238,
    101,
    168,
    208,
    143,
    1,
    235,
    196,
    244,
    22,
    46,
    248,
    121,
    47,
    109,
    236,
    2,
    56,
    188,
    35,
    187,
    231,
    255,
    55,
    192,
    240,
    58,
    11,
    77,
    201,
    121,
    31,
    54,
    222,
    176,
    114,
    87,
    186,
    243,
    102,
    44,
    173,
    54,
    90,
    161,
    148,
    117,
    78,
    218,
    131,
    213,
    195,
    163,
    240,
    150,
    215,
    216,
    231,
    83,
    235,
    85,
    222,
    16,
    255,
    46,
    201,
    217,
    146,
    79,
    173,
    154,
    134,
    52,
    186,
    95,
    186,
    185,
    131,
    28,
    174,
    194,
    148,
    205,
    97,
    123,
    75,
    142,
    117,
    0,
    92,
    75,
    73,
    141,
    101,
    8,
    93,
    246,
    114,
    193,
    48,
    151,
    22,
    130,
    36,
    236,
    1,
    71,
    24,
    97,
    56,
    4,
    12,
    26,
    47,
    79,
    0,
    85,
    102,
    12,
    20,
    46,
    113,
    201,
    40,
    163,
    72,
    138,
    60,
    216,
    95,
    67,
    81,
    185,
    59,
    0,
    69,
    194,
    44,
    197,
    121,
    79,
    21,
    134,
    109,
    52,
    2,
    87,
    162,
    141,
    221,
    20,
    182,
    246,
    202,
    209,
    138,
    123,
    243,
    146,
    158,
    0,
    228,
    91,
    243,
    97,
    128,
    24,
    231,
    26,
    151,
    221,
    219,
    151,
    174,
    158,
    207,
    236,
    185,
    62,
    66,
    149,
    202,
    125,
    86,
    238,
    221,
    184,
    106,
    99,
    228,
    251,
    126,
    24,
    243,
    50,
    19,
    121,
    151,
    113,
    7,
    2,
    128,
    180,
    59,
    143,
    185,
    247,
    47,
    244,
    174,
    38,
    224,
    77,
    113,
    101,
    244,
    54,
    102,
    160,
    200,
    187,
    95,
    227,
    220,
    192,
    72,
    42,
    177,
    161,
    44,
    105,
    165,
    218,
    59,
    172,
    153,
    87,
    2,
    239,
    141,
    44,
    21,
    236,
    130,
    164,
    228,
    175,
    150,
    223,
    243,
    106,
    170,
    82,
    202,
    41,
    190,
    41,
    221,
    224,
    211,
    72,
    185,
    163,
    199,
    51,
    174,
    102,
    251,
    190,
    151,
    37,
    239,
    197,
    128,
    244,
    32,
    124,
    95,
    183,
    52,
    7,
    72,
    114,
    8,
    138,
    113,
    49,
    28,
    241,
    102,
    248,
    113,
    144,
    2,
    187,
    101,
    235,
    21,
    126,
    89,
    102,
    44,
    61,
    77,
    29,
    59,
    157,
    192,
    100,
    72,
    222,
    212,
    31,
    95,
    27,
    232,
    146,
    102,
    88,
    252,
    233,
    113,
    145,
    145,
    136,
    21,
    210,
    133,
    243,
    2,
    23,
    185,
    126,
    59,
    84,
    173,
    5,
    44,
    133,
    98,
    188,
    243,
    198,
    118,
    199,
    228,
    3,
    74,
    74,
    221,
    64,
    94,
    49,
    202,
    137,
    51,
    80,
    174,
    202,
    39,
    43,
    185,
    15,
    27,
    166,
    128,
    76,
    15,
    221,
    151,
    72,
    3,
    199,
    184,
    11,
    23,
    188,
    175,
    206,
    43,
    49,
    150,
    141,
    63,
    74,
    129,
    68,
    82,
    43,
    229,
    7,
    70,
    80,
    242,
    194,
    122,
    221,
    203,
    129,
    110,
    166,
    220,
    80,
    161,
    31,
    3,
    19,
    181,
    100,
    20,
    214,
    137,
    233,
    45,
    149,
    157,
    146,
    58,
    92,
    240,
    243,
    94,
    31,
    228,
    136,
    73,
    218,
    216,
    5,
    112,
    153,
    204,
    126,
    103,
    57,
    65,
    7,
    20,
    122,
    85,
    124,
    3,
    191,
    105,
    241,
    58,
    252,
    125,
    138,
    45,
    53,
    16,
    235,
    73,
    118,
    4,
    144,
    94,
    179,
    56,
    29,
    103,
    240,
    44,
    102,
    112,
    33,
    227,
    223,
    175,
    98,
    247,
    164,
    184,
    167,
    203,
    41,
    129,
    228,
    223,
    82,
    150,
    45,
    178,
    51,
    242,
    110,
    166,
    72,
    229,
    171,
    154,
    197,
    220,
    232,
    142,
    190,
    203,
    235,
    129,
    54,
    58,
    168,
    149,
    77,
    45,
    109,
    169,
    192,
    20,
    46,
    189,
    187,
    3,
    231,
    208,
    218,
    103,
    164,
    196,
    161,
    112,
    97,
    248,
    44,
    73,
    34,
    236,
    87,
    94,
    243,
    35,
    238,
    129,
    176,
    55,
    149,
    150,
    117,
    11,
    24,
    175,
    54,
    31,
    99,
    184,
    255,
    114,
    2,
    220,
    188,
    102,
    121,
    203,
    121,
    90,
    244,
    242,
    58,
    78,
    143,
    229,
    154,
    195,
    246,
    150,
    217,
    215,
    141,
    129,
    28,
    235,
    0,
    184,
    95,
    255,
    123,
    175,
    150,
    146,
    26,
    203,
    213,
    134,
    97,
    220,
    16,
    186,
    236,
    229,
    83,
    174,
    151,
    242,
    130,
    97,
    46,
    45,
    193,
    117,
    85,
    58,
    4,
    73,
    216,
    3,
    71,
    93,
    163,
    20,
    142,
    48,
    194,
    112,
    205,
    36,
    185,
    103,
    8,
    24,
    52,
    94,
    75,
    12,
    79,
    73,
    0,
    0,
    0,
    0,
    62,
    107,
    194,
    239,
    61,
    208,
    245,
    4,
    3,
    187,
    55,
    235,
    122,
    160,
    235,
    9,
    68,
    203,
    41,
    230,
    71,
    112,
    30,
    13,
    121,
    27,
    220,
    226,
    244,
    64,
    215,
    19,
    202,
    43,
    21,
    252,
    201,
    144,
    34,
    23,
    247,
    251,
    224,
    248,
    142,
    224,
    60,
    26,
    176,
    139,
    254,
    245,
    179,
    48,
    201,
    30,
    141,
    91,
    11,
    241,
    232,
    129,
    174,
    39,
    214,
    234,
    108,
    200,
    213,
    81,
    91,
    35,
    235,
    58,
    153,
    204,
    146,
    33,
    69,
    46,
    172,
    74,
    135,
    193,
    175,
    241,
    176,
    42,
    145,
    154,
    114,
    197,
    28,
    193,
    121,
    52,
    34,
    170,
    187,
    219,
    33,
    17,
    140,
    48,
    31,
    122,
    78,
    223,
    102,
    97,
    146,
    61,
    88,
    10,
    80,
    210,
    91,
    177,
    103,
    57,
    101,
    218,
    165,
    214,
    208,
    3,
    93,
    79,
    238,
    104,
    159,
    160,
    237,
    211,
    168,
    75,
    211,
    184,
    106,
    164,
    170,
    163,
    182,
    70,
    148,
    200,
    116,
    169,
    151,
    115,
    67,
    66,
    169,
    24,
    129,
    173,
    36,
    67,
    138,
    92,
    26,
    40,
    72,
    179,
    25,
    147,
    127,
    88,
    39,
    248,
    189,
    183,
    94,
    227,
    97,
    85,
    96,
    136,
    163,
    186,
    99,
    51,
    148,
    81,
    93,
    88,
    86,
    190,
    56,
    130,
    243,
    104,
    6,
    233,
    49,
    135,
    5,
    82,
    6,
    108,
    59,
    57,
    196,
    131,
    66,
    34,
    24,
    97,
    124,
    73,
    218,
    142,
    127,
    242,
    237,
    101,
    65,
    153,
    47,
    138,
    204,
    194,
    36,
    123,
    242,
    169,
    230,
    148,
    241,
    18,
    209,
    127,
    207,
    121,
    19,
    144,
    182,
    98,
    207,
    114,
    136,
    9,
    13,
    157,
    139,
    178,
    58,
    118,
    181,
    217,
    248,
    153,
    160,
    7,
    186,
    158,
    158,
    108,
    120,
    113,
    157,
    215,
    79,
    154,
    163,
    188,
    141,
    117,
    218,
    167,
    81,
    151,
    228,
    204,
    147,
    120,
    231,
    119,
    164,
    147,
    217,
    28,
    102,
    124,
    84,
    71,
    109,
    141,
    106,
    44,
    175,
    98,
    105,
    151,
    152,
    137,
    87,
    252,
    90,
    102,
    46,
    231,
    134,
    132,
    16,
    140,
    68,
    107,
    19,
    55,
    115,
    128,
    45,
    92,
    177,
    111,
    72,
    134,
    20,
    185,
    118,
    237,
    214,
    86,
    117,
    86,
    225,
    189,
    75,
    61,
    35,
    82,
    50,
    38,
    255,
    176,
    12,
    77,
    61,
    95,
    15,
    246,
    10,
    180,
    49,
    157,
    200,
    91,
    188,
    198,
    195,
    170,
    130,
    173,
    1,
    69,
    129,
    22,
    54,
    174,
    191,
    125,
    244,
    65,
    198,
    102,
    40,
    163,
    248,
    13,
    234,
    76,
    251,
    182,
    221,
    167,
    197,
    221,
    31,
    72,
    112,
    4,
    231,
    209,
    78,
    111,
    37,
    62,
    77,
    212,
    18,
    213,
    115,
    191,
    208,
    58,
    10,
    164,
    12,
    216,
    52,
    207,
    206,
    55,
    55,
    116,
    249,
    220,
    9,
    31,
    59,
    51,
    132,
    68,
    48,
    194,
    186,
    47,
    242,
    45,
    185,
    148,
    197,
    198,
    135,
    255,
    7,
    41,
    254,
    228,
    219,
    203,
    192,
    143,
    25,
    36,
    195,
    52,
    46,
    207,
    253,
    95,
    236,
    32,
    152,
    133,
    73,
    246,
    166,
    238,
    139,
    25,
    165,
    85,
    188,
    242,
    155,
    62,
    126,
    29,
    226,
    37,
    162,
    255,
    220,
    78,
    96,
    16,
    223,
    245,
    87,
    251,
    225,
    158,
    149,
    20,
    108,
    197,
    158,
    229,
    82,
    174,
    92,
    10,
    81,
    21,
    107,
    225,
    111,
    126,
    169,
    14,
    22,
    101,
    117,
    236,
    40,
    14,
    183,
    3,
    43,
    181,
    128,
    232,
    21,
    222,
    66,
    7,
    1,
    9,
    5,
    230,
    63,
    98,
    199,
    9,
    60,
    217,
    240,
    226,
    2,
    178,
    50,
    13,
    123,
    169,
    238,
    239,
    69,
    194,
    44,
    0,
    70,
    121,
    27,
    235,
    120,
    18,
    217,
    4,
    245,
    73,
    210,
    245,
    203,
    34,
    16,
    26,
    200,
    153,
    39,
    241,
    246,
    242,
    229,
    30,
    143,
    233,
    57,
    252,
    177,
    130,
    251,
    19,
    178,
    57,
    204,
    248,
    140,
    82,
    14,
    23,
    233,
    136,
    171,
    193,
    215,
    227,
    105,
    46,
    212,
    88,
    94,
    197,
    234,
    51,
    156,
    42,
    147,
    40,
    64,
    200,
    173,
    67,
    130,
    39,
    174,
    248,
    181,
    204,
    144,
    147,
    119,
    35,
    29,
    200,
    124,
    210,
    35,
    163,
    190,
    61,
    32,
    24,
    137,
    214,
    30,
    115,
    75,
    57,
    103,
    104,
    151,
    219,
    89,
    3,
    85,
    52,
    90,
    184,
    98,
    223,
    100,
    211,
    160,
    48,
    209,
    10,
    88,
    169,
    239,
    97,
    154,
    70,
    236,
    218,
    173,
    173,
    210,
    177,
    111,
    66,
    171,
    170,
    179,
    160,
    149,
    193,
    113,
    79,
    150,
    122,
    70,
    164,
    168,
    17,
    132,
    75,
    37,
    74,
    143,
    186,
    27,
    33,
    77,
    85,
    24,
    154,
    122,
    190,
    38,
    241,
    184,
    81,
    95,
    234,
    100,
    179,
    97,
    129,
    166,
    92,
    98,
    58,
    145,
    183,
    92,
    81,
    83,
    88,
    57,
    139,
    246,
    142,
    7,
    224,
    52,
    97,
    4,
    91,
    3,
    138,
    58,
    48,
    193,
    101,
    67,
    43,
    29,
    135,
    125,
    64,
    223,
    104,
    126,
    251,
    232,
    131,
    64,
    144,
    42,
    108,
    205,
    203,
    33,
    157,
    243,
    160,
    227,
    114,
    240,
    27,
    212,
    153,
    206,
    112,
    22,
    118,
    183,
    107,
    202,
    148,
    137,
    0,
    8,
    123,
    138,
    187,
    63,
    144,
    180,
    208,
    253,
    127,
    161,
    14,
    191,
    120,
    159,
    101,
    125,
    151,
    156,
    222,
    74,
    124,
    162,
    181,
    136,
    147,
    219,
    174,
    84,
    113,
    229,
    197,
    150,
    158,
    230,
    126,
    161,
    117,
    216,
    21,
    99,
    154,
    85,
    78,
    104,
    107,
    107,
    37,
    170,
    132,
    104,
    158,
    157,
    111,
    86,
    245,
    95,
    128,
    47,
    238,
    131,
    98,
    17,
    133,
    65,
    141,
    18,
    62,
    118,
    102,
    44,
    85,
    180,
    137,
    73,
    143,
    17,
    95,
    119,
    228,
    211,
    176,
    116,
    95,
    228,
    91,
    74,
    52,
    38,
    180,
    51,
    47,
    250,
    86,
    13,
    68,
    56,
    185,
    14,
    255,
    15,
    82,
    48,
    148,
    205,
    189,
    189,
    207,
    198,
    76,
    131,
    164,
    4,
    163,
    128,
    31,
    51,
    72,
    190,
    116,
    241,
    167,
    199,
    111,
    45,
    69,
    249,
    4,
    239,
    170,
    250,
    191,
    216,
    65,
    196,
    212,
    26,
    174,
    113,
    13,
    226,
    55,
    79,
    102,
    32,
    216,
    76,
    221,
    23,
    51,
    114,
    182,
    213,
    220,
    11,
    173,
    9,
    62,
    53,
    198,
    203,
    209,
    54,
    125,
    252,
    58,
    8,
    22,
    62,
    213,
    133,
    77,
    53,
    36,
    187,
    38,
    247,
    203,
    184,
    157,
    192,
    32,
    134,
    246,
    2,
    207,
    255,
    237,
    222,
    45,
    193,
    134,
    28,
    194,
    194,
    61,
    43,
    41,
    252,
    86,
    233,
    198,
    153,
    140,
    76,
    16,
    167,
    231,
    142,
    255,
    164,
    92,
    185,
    20,
    154,
    55,
    123,
    251,
    227,
    44,
    167,
    25,
    221,
    71,
    101,
    246,
    222,
    252,
    82,
    29,
    224,
    151,
    144,
    242,
    109,
    204,
    155,
    3,
    83,
    167,
    89,
    236,
    80,
    28,
    110,
    7,
    110,
    119,
    172,
    232,
    23,
    108,
    112,
    10,
    41,
    7,
    178,
    229,
    42,
    188,
    133,
    14,
    20,
    215,
    71,
    225,
    0,
    0,
    0,
    0,
    192,
    223,
    142,
    193,
    193,
    185,
    108,
    88,
    1,
    102,
    226,
    153,
    130,
    115,
    217,
    176,
    66,
    172,
    87,
    113,
    67,
    202,
    181,
    232,
    131,
    21,
    59,
    41,
    69,
    225,
    195,
    186,
    133,
    62,
    77,
    123,
    132,
    88,
    175,
    226,
    68,
    135,
    33,
    35,
    199,
    146,
    26,
    10,
    7,
    77,
    148,
    203,
    6,
    43,
    118,
    82,
    198,
    244,
    248,
    147,
    203,
    196,
    246,
    174,
    11,
    27,
    120,
    111,
    10,
    125,
    154,
    246,
    202,
    162,
    20,
    55,
    73,
    183,
    47,
    30,
    137,
    104,
    161,
    223,
    136,
    14,
    67,
    70,
    72,
    209,
    205,
    135,
    142,
    37,
    53,
    20,
    78,
    250,
    187,
    213,
    79,
    156,
    89,
    76,
    143,
    67,
    215,
    141,
    12,
    86,
    236,
    164,
    204,
    137,
    98,
    101,
    205,
    239,
    128,
    252,
    13,
    48,
    14,
    61,
    215,
    143,
    156,
    134,
    23,
    80,
    18,
    71,
    22,
    54,
    240,
    222,
    214,
    233,
    126,
    31,
    85,
    252,
    69,
    54,
    149,
    35,
    203,
    247,
    148,
    69,
    41,
    110,
    84,
    154,
    167,
    175,
    146,
    110,
    95,
    60,
    82,
    177,
    209,
    253,
    83,
    215,
    51,
    100,
    147,
    8,
    189,
    165,
    16,
    29,
    134,
    140,
    208,
    194,
    8,
    77,
    209,
    164,
    234,
    212,
    17,
    123,
    100,
    21,
    28,
    75,
    106,
    40,
    220,
    148,
    228,
    233,
    221,
    242,
    6,
    112,
    29,
    45,
    136,
    177,
    158,
    56,
    179,
    152,
    94,
    231,
    61,
    89,
    95,
    129,
    223,
    192,
    159,
    94,
    81,
    1,
    89,
    170,
    169,
    146,
    153,
    117,
    39,
    83,
    152,
    19,
    197,
    202,
    88,
    204,
    75,
    11,
    219,
    217,
    112,
    34,
    27,
    6,
    254,
    227,
    26,
    96,
    28,
    122,
    218,
    191,
    146,
    187,
    239,
    25,
    72,
    214,
    47,
    198,
    198,
    23,
    46,
    160,
    36,
    142,
    238,
    127,
    170,
    79,
    109,
    106,
    145,
    102,
    173,
    181,
    31,
    167,
    172,
    211,
    253,
    62,
    108,
    12,
    115,
    255,
    170,
    248,
    139,
    108,
    106,
    39,
    5,
    173,
    107,
    65,
    231,
    52,
    171,
    158,
    105,
    245,
    40,
    139,
    82,
    220,
    232,
    84,
    220,
    29,
    233,
    50,
    62,
    132,
    41,
    237,
    176,
    69,
    36,
    221,
    190,
    120,
    228,
    2,
    48,
    185,
    229,
    100,
    210,
    32,
    37,
    187,
    92,
    225,
    166,
    174,
    103,
    200,
    102,
    113,
    233,
    9,
    103,
    23,
    11,
    144,
    167,
    200,
    133,
    81,
    97,
    60,
    125,
    194,
    161,
    227,
    243,
    3,
    160,
    133,
    17,
    154,
    96,
    90,
    159,
    91,
    227,
    79,
    164,
    114,
    35,
    144,
    42,
    179,
    34,
    246,
    200,
    42,
    226,
    41,
    70,
    235,
    56,
    150,
    212,
    80,
    248,
    73,
    90,
    145,
    249,
    47,
    184,
    8,
    57,
    240,
    54,
    201,
    186,
    229,
    13,
    224,
    122,
    58,
    131,
    33,
    123,
    92,
    97,
    184,
    187,
    131,
    239,
    121,
    125,
    119,
    23,
    234,
    189,
    168,
    153,
    43,
    188,
    206,
    123,
    178,
    124,
    17,
    245,
    115,
    255,
    4,
    206,
    90,
    63,
    219,
    64,
    155,
    62,
    189,
    162,
    2,
    254,
    98,
    44,
    195,
    243,
    82,
    34,
    254,
    51,
    141,
    172,
    63,
    50,
    235,
    78,
    166,
    242,
    52,
    192,
    103,
    113,
    33,
    251,
    78,
    177,
    254,
    117,
    143,
    176,
    152,
    151,
    22,
    112,
    71,
    25,
    215,
    182,
    179,
    225,
    68,
    118,
    108,
    111,
    133,
    119,
    10,
    141,
    28,
    183,
    213,
    3,
    221,
    52,
    192,
    56,
    244,
    244,
    31,
    182,
    53,
    245,
    121,
    84,
    172,
    53,
    166,
    218,
    109,
    159,
    53,
    225,
    119,
    95,
    234,
    111,
    182,
    94,
    140,
    141,
    47,
    158,
    83,
    3,
    238,
    29,
    70,
    56,
    199,
    221,
    153,
    182,
    6,
    220,
    255,
    84,
    159,
    28,
    32,
    218,
    94,
    218,
    212,
    34,
    205,
    26,
    11,
    172,
    12,
    27,
    109,
    78,
    149,
    219,
    178,
    192,
    84,
    88,
    167,
    251,
    125,
    152,
    120,
    117,
    188,
    153,
    30,
    151,
    37,
    89,
    193,
    25,
    228,
    84,
    241,
    23,
    217,
    148,
    46,
    153,
    24,
    149,
    72,
    123,
    129,
    85,
    151,
    245,
    64,
    214,
    130,
    206,
    105,
    22,
    93,
    64,
    168,
    23,
    59,
    162,
    49,
    215,
    228,
    44,
    240,
    17,
    16,
    212,
    99,
    209,
    207,
    90,
    162,
    208,
    169,
    184,
    59,
    16,
    118,
    54,
    250,
    147,
    99,
    13,
    211,
    83,
    188,
    131,
    18,
    82,
    218,
    97,
    139,
    146,
    5,
    239,
    74,
    72,
    186,
    125,
    241,
    136,
    101,
    243,
    48,
    137,
    3,
    17,
    169,
    73,
    220,
    159,
    104,
    202,
    201,
    164,
    65,
    10,
    22,
    42,
    128,
    11,
    112,
    200,
    25,
    203,
    175,
    70,
    216,
    13,
    91,
    190,
    75,
    205,
    132,
    48,
    138,
    204,
    226,
    210,
    19,
    12,
    61,
    92,
    210,
    143,
    40,
    103,
    251,
    79,
    247,
    233,
    58,
    78,
    145,
    11,
    163,
    142,
    78,
    133,
    98,
    131,
    126,
    139,
    95,
    67,
    161,
    5,
    158,
    66,
    199,
    231,
    7,
    130,
    24,
    105,
    198,
    1,
    13,
    82,
    239,
    193,
    210,
    220,
    46,
    192,
    180,
    62,
    183,
    0,
    107,
    176,
    118,
    198,
    159,
    72,
    229,
    6,
    64,
    198,
    36,
    7,
    38,
    36,
    189,
    199,
    249,
    170,
    124,
    68,
    236,
    145,
    85,
    132,
    51,
    31,
    148,
    133,
    85,
    253,
    13,
    69,
    138,
    115,
    204,
    112,
    44,
    169,
    161,
    176,
    243,
    39,
    96,
    177,
    149,
    197,
    249,
    113,
    74,
    75,
    56,
    242,
    95,
    112,
    17,
    50,
    128,
    254,
    208,
    51,
    230,
    28,
    73,
    243,
    57,
    146,
    136,
    53,
    205,
    106,
    27,
    245,
    18,
    228,
    218,
    244,
    116,
    6,
    67,
    52,
    171,
    136,
    130,
    183,
    190,
    179,
    171,
    119,
    97,
    61,
    106,
    118,
    7,
    223,
    243,
    182,
    216,
    81,
    50,
    187,
    232,
    95,
    15,
    123,
    55,
    209,
    206,
    122,
    81,
    51,
    87,
    186,
    142,
    189,
    150,
    57,
    155,
    134,
    191,
    249,
    68,
    8,
    126,
    248,
    34,
    234,
    231,
    56,
    253,
    100,
    38,
    254,
    9,
    156,
    181,
    62,
    214,
    18,
    116,
    63,
    176,
    240,
    237,
    255,
    111,
    126,
    44,
    124,
    122,
    69,
    5,
    188,
    165,
    203,
    196,
    189,
    195,
    41,
    93,
    125,
    28,
    167,
    156,
    167,
    163,
    53,
    39,
    103,
    124,
    187,
    230,
    102,
    26,
    89,
    127,
    166,
    197,
    215,
    190,
    37,
    208,
    236,
    151,
    229,
    15,
    98,
    86,
    228,
    105,
    128,
    207,
    36,
    182,
    14,
    14,
    226,
    66,
    246,
    157,
    34,
    157,
    120,
    92,
    35,
    251,
    154,
    197,
    227,
    36,
    20,
    4,
    96,
    49,
    47,
    45,
    160,
    238,
    161,
    236,
    161,
    136,
    67,
    117,
    97,
    87,
    205,
    180,
    108,
    103,
    195,
    137,
    172,
    184,
    77,
    72,
    173,
    222,
    175,
    209,
    109,
    1,
    33,
    16,
    238,
    20,
    26,
    57,
    46,
    203,
    148,
    248,
    47,
    173,
    118,
    97,
    239,
    114,
    248,
    160,
    41,
    134,
    0,
    51,
    233,
    89,
    142,
    242,
    232,
    63,
    108,
    107,
    40,
    224,
    226,
    170,
    171,
    245,
    217,
    131,
    107,
    42,
    87,
    66,
    106,
    76,
    181,
    219,
    170,
    147,
    59,
    26,
    0,
    0,
    0,
    0,
    111,
    76,
    165,
    155,
    159,
    158,
    59,
    236,
    240,
    210,
    158,
    119,
    127,
    59,
    6,
    3,
    16,
    119,
    163,
    152,
    224,
    165,
    61,
    239,
    143,
    233,
    152,
    116,
    254,
    118,
    12,
    6,
    145,
    58,
    169,
    157,
    97,
    232,
    55,
    234,
    14,
    164,
    146,
    113,
    129,
    77,
    10,
    5,
    238,
    1,
    175,
    158,
    30,
    211,
    49,
    233,
    113,
    159,
    148,
    114,
    252,
    237,
    24,
    12,
    147,
    161,
    189,
    151,
    99,
    115,
    35,
    224,
    12,
    63,
    134,
    123,
    131,
    214,
    30,
    15,
    236,
    154,
    187,
    148,
    28,
    72,
    37,
    227,
    115,
    4,
    128,
    120,
    2,
    155,
    20,
    10,
    109,
    215,
    177,
    145,
    157,
    5,
    47,
    230,
    242,
    73,
    138,
    125,
    125,
    160,
    18,
    9,
    18,
    236,
    183,
    146,
    226,
    62,
    41,
    229,
    141,
    114,
    140,
    126,
    248,
    219,
    49,
    24,
    151,
    151,
    148,
    131,
    103,
    69,
    10,
    244,
    8,
    9,
    175,
    111,
    135,
    224,
    55,
    27,
    232,
    172,
    146,
    128,
    24,
    126,
    12,
    247,
    119,
    50,
    169,
    108,
    6,
    173,
    61,
    30,
    105,
    225,
    152,
    133,
    153,
    51,
    6,
    242,
    246,
    127,
    163,
    105,
    121,
    150,
    59,
    29,
    22,
    218,
    158,
    134,
    230,
    8,
    0,
    241,
    137,
    68,
    165,
    106,
    4,
    54,
    41,
    20,
    107,
    122,
    140,
    143,
    155,
    168,
    18,
    248,
    244,
    228,
    183,
    99,
    123,
    13,
    47,
    23,
    20,
    65,
    138,
    140,
    228,
    147,
    20,
    251,
    139,
    223,
    177,
    96,
    250,
    64,
    37,
    18,
    149,
    12,
    128,
    137,
    101,
    222,
    30,
    254,
    10,
    146,
    187,
    101,
    133,
    123,
    35,
    17,
    234,
    55,
    134,
    138,
    26,
    229,
    24,
    253,
    117,
    169,
    189,
    102,
    240,
    183,
    99,
    48,
    159,
    251,
    198,
    171,
    111,
    41,
    88,
    220,
    0,
    101,
    253,
    71,
    143,
    140,
    101,
    51,
    224,
    192,
    192,
    168,
    16,
    18,
    94,
    223,
    127,
    94,
    251,
    68,
    14,
    193,
    111,
    54,
    97,
    141,
    202,
    173,
    145,
    95,
    84,
    218,
    254,
    19,
    241,
    65,
    113,
    250,
    105,
    53,
    30,
    182,
    204,
    174,
    238,
    100,
    82,
    217,
    129,
    40,
    247,
    66,
    12,
    90,
    123,
    60,
    99,
    22,
    222,
    167,
    147,
    196,
    64,
    208,
    252,
    136,
    229,
    75,
    115,
    97,
    125,
    63,
    28,
    45,
    216,
    164,
    236,
    255,
    70,
    211,
    131,
    179,
    227,
    72,
    242,
    44,
    119,
    58,
    157,
    96,
    210,
    161,
    109,
    178,
    76,
    214,
    2,
    254,
    233,
    77,
    141,
    23,
    113,
    57,
    226,
    91,
    212,
    162,
    18,
    137,
    74,
    213,
    125,
    197,
    239,
    78,
    8,
    108,
    82,
    40,
    103,
    32,
    247,
    179,
    151,
    242,
    105,
    196,
    248,
    190,
    204,
    95,
    119,
    87,
    84,
    43,
    24,
    27,
    241,
    176,
    232,
    201,
    111,
    199,
    135,
    133,
    202,
    92,
    246,
    26,
    94,
    46,
    153,
    86,
    251,
    181,
    105,
    132,
    101,
    194,
    6,
    200,
    192,
    89,
    137,
    33,
    88,
    45,
    230,
    109,
    253,
    182,
    22,
    191,
    99,
    193,
    121,
    243,
    198,
    90,
    244,
    129,
    74,
    36,
    155,
    205,
    239,
    191,
    107,
    31,
    113,
    200,
    4,
    83,
    212,
    83,
    139,
    186,
    76,
    39,
    228,
    246,
    233,
    188,
    20,
    36,
    119,
    203,
    123,
    104,
    210,
    80,
    10,
    247,
    70,
    34,
    101,
    187,
    227,
    185,
    149,
    105,
    125,
    206,
    250,
    37,
    216,
    85,
    117,
    204,
    64,
    33,
    26,
    128,
    229,
    186,
    234,
    82,
    123,
    205,
    133,
    30,
    222,
    86,
    224,
    111,
    199,
    96,
    143,
    35,
    98,
    251,
    127,
    241,
    252,
    140,
    16,
    189,
    89,
    23,
    159,
    84,
    193,
    99,
    240,
    24,
    100,
    248,
    0,
    202,
    250,
    143,
    111,
    134,
    95,
    20,
    30,
    25,
    203,
    102,
    113,
    85,
    110,
    253,
    129,
    135,
    240,
    138,
    238,
    203,
    85,
    17,
    97,
    34,
    205,
    101,
    14,
    110,
    104,
    254,
    254,
    188,
    246,
    137,
    145,
    240,
    83,
    18,
    28,
    130,
    223,
    108,
    115,
    206,
    122,
    247,
    131,
    28,
    228,
    128,
    236,
    80,
    65,
    27,
    99,
    185,
    217,
    111,
    12,
    245,
    124,
    244,
    252,
    39,
    226,
    131,
    147,
    107,
    71,
    24,
    226,
    244,
    211,
    106,
    141,
    184,
    118,
    241,
    125,
    106,
    232,
    134,
    18,
    38,
    77,
    29,
    157,
    207,
    213,
    105,
    242,
    131,
    112,
    242,
    2,
    81,
    238,
    133,
    109,
    29,
    75,
    30,
    24,
    180,
    246,
    120,
    119,
    248,
    83,
    227,
    135,
    42,
    205,
    148,
    232,
    102,
    104,
    15,
    103,
    143,
    240,
    123,
    8,
    195,
    85,
    224,
    248,
    17,
    203,
    151,
    151,
    93,
    110,
    12,
    230,
    194,
    250,
    126,
    137,
    142,
    95,
    229,
    121,
    92,
    193,
    146,
    22,
    16,
    100,
    9,
    153,
    249,
    252,
    125,
    246,
    181,
    89,
    230,
    6,
    103,
    199,
    145,
    105,
    43,
    98,
    10,
    228,
    89,
    238,
    116,
    139,
    21,
    75,
    239,
    123,
    199,
    213,
    152,
    20,
    139,
    112,
    3,
    155,
    98,
    232,
    119,
    244,
    46,
    77,
    236,
    4,
    252,
    211,
    155,
    107,
    176,
    118,
    0,
    26,
    47,
    226,
    114,
    117,
    99,
    71,
    233,
    133,
    177,
    217,
    158,
    234,
    253,
    124,
    5,
    101,
    20,
    228,
    113,
    10,
    88,
    65,
    234,
    250,
    138,
    223,
    157,
    149,
    198,
    122,
    6,
    16,
    216,
    164,
    80,
    127,
    148,
    1,
    203,
    143,
    70,
    159,
    188,
    224,
    10,
    58,
    39,
    111,
    227,
    162,
    83,
    0,
    175,
    7,
    200,
    240,
    125,
    153,
    191,
    159,
    49,
    60,
    36,
    238,
    174,
    168,
    86,
    129,
    226,
    13,
    205,
    113,
    48,
    147,
    186,
    30,
    124,
    54,
    33,
    145,
    149,
    174,
    85,
    254,
    217,
    11,
    206,
    14,
    11,
    149,
    185,
    97,
    71,
    48,
    34,
    236,
    53,
    188,
    92,
    131,
    121,
    25,
    199,
    115,
    171,
    135,
    176,
    28,
    231,
    34,
    43,
    147,
    14,
    186,
    95,
    252,
    66,
    31,
    196,
    12,
    144,
    129,
    179,
    99,
    220,
    36,
    40,
    18,
    67,
    176,
    90,
    125,
    15,
    21,
    193,
    141,
    221,
    139,
    182,
    226,
    145,
    46,
    45,
    109,
    120,
    182,
    89,
    2,
    52,
    19,
    194,
    242,
    230,
    141,
    181,
    157,
    170,
    40,
    46,
    232,
    3,
    149,
    72,
    135,
    79,
    48,
    211,
    119,
    157,
    174,
    164,
    24,
    209,
    11,
    63,
    151,
    56,
    147,
    75,
    248,
    116,
    54,
    208,
    8,
    166,
    168,
    167,
    103,
    234,
    13,
    60,
    22,
    117,
    153,
    78,
    121,
    57,
    60,
    213,
    137,
    235,
    162,
    162,
    230,
    167,
    7,
    57,
    105,
    78,
    159,
    77,
    6,
    2,
    58,
    214,
    246,
    208,
    164,
    161,
    153,
    156,
    1,
    58,
    20,
    238,
    141,
    68,
    123,
    162,
    40,
    223,
    139,
    112,
    182,
    168,
    228,
    60,
    19,
    51,
    107,
    213,
    139,
    71,
    4,
    153,
    46,
    220,
    244,
    75,
    176,
    171,
    155,
    7,
    21,
    48,
    234,
    152,
    129,
    66,
    133,
    212,
    36,
    217,
    117,
    6,
    186,
    174,
    26,
    74,
    31,
    53,
    149,
    163,
    135,
    65,
    250,
    239,
    34,
    218,
    10,
    61,
    188,
    173,
    101,
    113,
    25,
    54,
    0,
    0,
    0,
    0,
    133,
    217,
    150,
    221,
    75,
    181,
    92,
    96,
    206,
    108,
    202,
    189,
    150,
    106,
    185,
    192,
    19,
    179,
    47,
    29,
    221,
    223,
    229,
    160,
    88,
    6,
    115,
    125,
    109,
    211,
    3,
    90,
    232,
    10,
    149,
    135,
    38,
    102,
    95,
    58,
    163,
    191,
    201,
    231,
    251,
    185,
    186,
    154,
    126,
    96,
    44,
    71,
    176,
    12,
    230,
    250,
    53,
    213,
    112,
    39,
    218,
    166,
    7,
    180,
    95,
    127,
    145,
    105,
    145,
    19,
    91,
    212,
    20,
    202,
    205,
    9,
    76,
    204,
    190,
    116,
    201,
    21,
    40,
    169,
    7,
    121,
    226,
    20,
    130,
    160,
    116,
    201,
    183,
    117,
    4,
    238,
    50,
    172,
    146,
    51,
    252,
    192,
    88,
    142,
    121,
    25,
    206,
    83,
    33,
    31,
    189,
    46,
    164,
    198,
    43,
    243,
    106,
    170,
    225,
    78,
    239,
    115,
    119,
    147,
    245,
    75,
    126,
    179,
    112,
    146,
    232,
    110,
    190,
    254,
    34,
    211,
    59,
    39,
    180,
    14,
    99,
    33,
    199,
    115,
    230,
    248,
    81,
    174,
    40,
    148,
    155,
    19,
    173,
    77,
    13,
    206,
    152,
    152,
    125,
    233,
    29,
    65,
    235,
    52,
    211,
    45,
    33,
    137,
    86,
    244,
    183,
    84,
    14,
    242,
    196,
    41,
    139,
    43,
    82,
    244,
    69,
    71,
    152,
    73,
    192,
    158,
    14,
    148,
    47,
    237,
    121,
    7,
    170,
    52,
    239,
    218,
    100,
    88,
    37,
    103,
    225,
    129,
    179,
    186,
    185,
    135,
    192,
    199,
    60,
    94,
    86,
    26,
    242,
    50,
    156,
    167,
    119,
    235,
    10,
    122,
    66,
    62,
    122,
    93,
    199,
    231,
    236,
    128,
    9,
    139,
    38,
    61,
    140,
    82,
    176,
    224,
    212,
    84,
    195,
    157,
    81,
    141,
    85,
    64,
    159,
    225,
    159,
    253,
    26,
    56,
    9,
    32,
    171,
    145,
    141,
    189,
    46,
    72,
    27,
    96,
    224,
    36,
    209,
    221,
    101,
    253,
    71,
    0,
    61,
    251,
    52,
    125,
    184,
    34,
    162,
    160,
    118,
    78,
    104,
    29,
    243,
    151,
    254,
    192,
    198,
    66,
    142,
    231,
    67,
    155,
    24,
    58,
    141,
    247,
    210,
    135,
    8,
    46,
    68,
    90,
    80,
    40,
    55,
    39,
    213,
    241,
    161,
    250,
    27,
    157,
    107,
    71,
    158,
    68,
    253,
    154,
    113,
    55,
    138,
    9,
    244,
    238,
    28,
    212,
    58,
    130,
    214,
    105,
    191,
    91,
    64,
    180,
    231,
    93,
    51,
    201,
    98,
    132,
    165,
    20,
    172,
    232,
    111,
    169,
    41,
    49,
    249,
    116,
    28,
    228,
    137,
    83,
    153,
    61,
    31,
    142,
    87,
    81,
    213,
    51,
    210,
    136,
    67,
    238,
    138,
    142,
    48,
    147,
    15,
    87,
    166,
    78,
    193,
    59,
    108,
    243,
    68,
    226,
    250,
    46,
    94,
    218,
    243,
    14,
    219,
    3,
    101,
    211,
    21,
    111,
    175,
    110,
    144,
    182,
    57,
    179,
    200,
    176,
    74,
    206,
    77,
    105,
    220,
    19,
    131,
    5,
    22,
    174,
    6,
    220,
    128,
    115,
    51,
    9,
    240,
    84,
    182,
    208,
    102,
    137,
    120,
    188,
    172,
    52,
    253,
    101,
    58,
    233,
    165,
    99,
    73,
    148,
    32,
    186,
    223,
    73,
    238,
    214,
    21,
    244,
    107,
    15,
    131,
    41,
    132,
    124,
    244,
    186,
    1,
    165,
    98,
    103,
    207,
    201,
    168,
    218,
    74,
    16,
    62,
    7,
    18,
    22,
    77,
    122,
    151,
    207,
    219,
    167,
    89,
    163,
    17,
    26,
    220,
    122,
    135,
    199,
    233,
    175,
    247,
    224,
    108,
    118,
    97,
    61,
    162,
    26,
    171,
    128,
    39,
    195,
    61,
    93,
    127,
    197,
    78,
    32,
    250,
    28,
    216,
    253,
    52,
    112,
    18,
    64,
    177,
    169,
    132,
    157,
    23,
    37,
    106,
    160,
    146,
    252,
    252,
    125,
    92,
    144,
    54,
    192,
    217,
    73,
    160,
    29,
    129,
    79,
    211,
    96,
    4,
    150,
    69,
    189,
    202,
    250,
    143,
    0,
    79,
    35,
    25,
    221,
    122,
    246,
    105,
    250,
    255,
    47,
    255,
    39,
    49,
    67,
    53,
    154,
    180,
    154,
    163,
    71,
    236,
    156,
    208,
    58,
    105,
    69,
    70,
    231,
    167,
    41,
    140,
    90,
    34,
    240,
    26,
    135,
    205,
    131,
    109,
    20,
    72,
    90,
    251,
    201,
    134,
    54,
    49,
    116,
    3,
    239,
    167,
    169,
    91,
    233,
    212,
    212,
    222,
    48,
    66,
    9,
    16,
    92,
    136,
    180,
    149,
    133,
    30,
    105,
    160,
    80,
    110,
    78,
    37,
    137,
    248,
    147,
    235,
    229,
    50,
    46,
    110,
    60,
    164,
    243,
    54,
    58,
    215,
    142,
    179,
    227,
    65,
    83,
    125,
    143,
    139,
    238,
    248,
    86,
    29,
    51,
    226,
    110,
    20,
    19,
    103,
    183,
    130,
    206,
    169,
    219,
    72,
    115,
    44,
    2,
    222,
    174,
    116,
    4,
    173,
    211,
    241,
    221,
    59,
    14,
    63,
    177,
    241,
    179,
    186,
    104,
    103,
    110,
    143,
    189,
    23,
    73,
    10,
    100,
    129,
    148,
    196,
    8,
    75,
    41,
    65,
    209,
    221,
    244,
    25,
    215,
    174,
    137,
    156,
    14,
    56,
    84,
    82,
    98,
    242,
    233,
    215,
    187,
    100,
    52,
    56,
    200,
    19,
    167,
    189,
    17,
    133,
    122,
    115,
    125,
    79,
    199,
    246,
    164,
    217,
    26,
    174,
    162,
    170,
    103,
    43,
    123,
    60,
    186,
    229,
    23,
    246,
    7,
    96,
    206,
    96,
    218,
    85,
    27,
    16,
    253,
    208,
    194,
    134,
    32,
    30,
    174,
    76,
    157,
    155,
    119,
    218,
    64,
    195,
    113,
    169,
    61,
    70,
    168,
    63,
    224,
    136,
    196,
    245,
    93,
    13,
    29,
    99,
    128,
    188,
    180,
    231,
    29,
    57,
    109,
    113,
    192,
    247,
    1,
    187,
    125,
    114,
    216,
    45,
    160,
    42,
    222,
    94,
    221,
    175,
    7,
    200,
    0,
    97,
    107,
    2,
    189,
    228,
    178,
    148,
    96,
    209,
    103,
    228,
    71,
    84,
    190,
    114,
    154,
    154,
    210,
    184,
    39,
    31,
    11,
    46,
    250,
    71,
    13,
    93,
    135,
    194,
    212,
    203,
    90,
    12,
    184,
    1,
    231,
    137,
    97,
    151,
    58,
    102,
    18,
    224,
    169,
    227,
    203,
    118,
    116,
    45,
    167,
    188,
    201,
    168,
    126,
    42,
    20,
    240,
    120,
    89,
    105,
    117,
    161,
    207,
    180,
    187,
    205,
    5,
    9,
    62,
    20,
    147,
    212,
    11,
    193,
    227,
    243,
    142,
    24,
    117,
    46,
    64,
    116,
    191,
    147,
    197,
    173,
    41,
    78,
    157,
    171,
    90,
    51,
    24,
    114,
    204,
    238,
    214,
    30,
    6,
    83,
    83,
    199,
    144,
    142,
    73,
    255,
    153,
    174,
    204,
    38,
    15,
    115,
    2,
    74,
    197,
    206,
    135,
    147,
    83,
    19,
    223,
    149,
    32,
    110,
    90,
    76,
    182,
    179,
    148,
    32,
    124,
    14,
    17,
    249,
    234,
    211,
    36,
    44,
    154,
    244,
    161,
    245,
    12,
    41,
    111,
    153,
    198,
    148,
    234,
    64,
    80,
    73,
    178,
    70,
    35,
    52,
    55,
    159,
    181,
    233,
    249,
    243,
    127,
    84,
    124,
    42,
    233,
    137,
    147,
    89,
    158,
    26,
    22,
    128,
    8,
    199,
    216,
    236,
    194,
    122,
    93,
    53,
    84,
    167,
    5,
    51,
    39,
    218,
    128,
    234,
    177,
    7,
    78,
    134,
    123,
    186,
    203,
    95,
    237,
    103,
    254,
    138,
    157,
    64,
    123,
    83,
    11,
    157,
    181,
    63,
    193,
    32,
    48,
    230,
    87,
    253,
    104,
    224,
    36,
    128,
    237,
    57,
    178,
    93,
    35,
    85,
    120,
    224,
    166,
    140,
    238,
    61,
    0,
    0,
    0,
    0,
    118,
    225,
    15,
    157,
    173,
    196,
    110,
    225,
    219,
    37,
    97,
    124,
    27,
    143,
    172,
    25,
    109,
    110,
    163,
    132,
    182,
    75,
    194,
    248,
    192,
    170,
    205,
    101,
    54,
    30,
    89,
    51,
    64,
    255,
    86,
    174,
    155,
    218,
    55,
    210,
    237,
    59,
    56,
    79,
    45,
    145,
    245,
    42,
    91,
    112,
    250,
    183,
    128,
    85,
    155,
    203,
    246,
    180,
    148,
    86,
    108,
    60,
    178,
    102,
    26,
    221,
    189,
    251,
    193,
    248,
    220,
    135,
    183,
    25,
    211,
    26,
    119,
    179,
    30,
    127,
    1,
    82,
    17,
    226,
    218,
    119,
    112,
    158,
    172,
    150,
    127,
    3,
    90,
    34,
    235,
    85,
    44,
    195,
    228,
    200,
    247,
    230,
    133,
    180,
    129,
    7,
    138,
    41,
    65,
    173,
    71,
    76,
    55,
    76,
    72,
    209,
    236,
    105,
    41,
    173,
    154,
    136,
    38,
    48,
    216,
    120,
    100,
    205,
    174,
    153,
    107,
    80,
    117,
    188,
    10,
    44,
    3,
    93,
    5,
    177,
    195,
    247,
    200,
    212,
    181,
    22,
    199,
    73,
    110,
    51,
    166,
    53,
    24,
    210,
    169,
    168,
    238,
    102,
    61,
    254,
    152,
    135,
    50,
    99,
    67,
    162,
    83,
    31,
    53,
    67,
    92,
    130,
    245,
    233,
    145,
    231,
    131,
    8,
    158,
    122,
    88,
    45,
    255,
    6,
    46,
    204,
    240,
    155,
    180,
    68,
    214,
    171,
    194,
    165,
    217,
    54,
    25,
    128,
    184,
    74,
    111,
    97,
    183,
    215,
    175,
    203,
    122,
    178,
    217,
    42,
    117,
    47,
    2,
    15,
    20,
    83,
    116,
    238,
    27,
    206,
    130,
    90,
    143,
    152,
    244,
    187,
    128,
    5,
    47,
    158,
    225,
    121,
    89,
    127,
    238,
    228,
    153,
    213,
    35,
    129,
    239,
    52,
    44,
    28,
    52,
    17,
    77,
    96,
    66,
    240,
    66,
    253,
    241,
    247,
    185,
    65,
    135,
    22,
    182,
    220,
    92,
    51,
    215,
    160,
    42,
    210,
    216,
    61,
    234,
    120,
    21,
    88,
    156,
    153,
    26,
    197,
    71,
    188,
    123,
    185,
    49,
    93,
    116,
    36,
    199,
    233,
    224,
    114,
    177,
    8,
    239,
    239,
    106,
    45,
    142,
    147,
    28,
    204,
    129,
    14,
    220,
    102,
    76,
    107,
    170,
    135,
    67,
    246,
    113,
    162,
    34,
    138,
    7,
    67,
    45,
    23,
    157,
    203,
    11,
    39,
    235,
    42,
    4,
    186,
    48,
    15,
    101,
    198,
    70,
    238,
    106,
    91,
    134,
    68,
    167,
    62,
    240,
    165,
    168,
    163,
    43,
    128,
    201,
    223,
    93,
    97,
    198,
    66,
    171,
    213,
    82,
    20,
    221,
    52,
    93,
    137,
    6,
    17,
    60,
    245,
    112,
    240,
    51,
    104,
    176,
    90,
    254,
    13,
    198,
    187,
    241,
    144,
    29,
    158,
    144,
    236,
    107,
    127,
    159,
    113,
    41,
    143,
    221,
    140,
    95,
    110,
    210,
    17,
    132,
    75,
    179,
    109,
    242,
    170,
    188,
    240,
    50,
    0,
    113,
    149,
    68,
    225,
    126,
    8,
    159,
    196,
    31,
    116,
    233,
    37,
    16,
    233,
    31,
    145,
    132,
    191,
    105,
    112,
    139,
    34,
    178,
    85,
    234,
    94,
    196,
    180,
    229,
    195,
    4,
    30,
    40,
    166,
    114,
    255,
    39,
    59,
    169,
    218,
    70,
    71,
    223,
    59,
    73,
    218,
    69,
    179,
    111,
    234,
    51,
    82,
    96,
    119,
    232,
    119,
    1,
    11,
    158,
    150,
    14,
    150,
    94,
    60,
    195,
    243,
    40,
    221,
    204,
    110,
    243,
    248,
    173,
    18,
    133,
    25,
    162,
    143,
    115,
    173,
    54,
    217,
    5,
    76,
    57,
    68,
    222,
    105,
    88,
    56,
    168,
    136,
    87,
    165,
    104,
    34,
    154,
    192,
    30,
    195,
    149,
    93,
    197,
    230,
    244,
    33,
    179,
    7,
    251,
    188,
    226,
    239,
    115,
    131,
    148,
    14,
    124,
    30,
    79,
    43,
    29,
    98,
    57,
    202,
    18,
    255,
    249,
    96,
    223,
    154,
    143,
    129,
    208,
    7,
    84,
    164,
    177,
    123,
    34,
    69,
    190,
    230,
    212,
    241,
    42,
    176,
    162,
    16,
    37,
    45,
    121,
    53,
    68,
    81,
    15,
    212,
    75,
    204,
    207,
    126,
    134,
    169,
    185,
    159,
    137,
    52,
    98,
    186,
    232,
    72,
    20,
    91,
    231,
    213,
    142,
    211,
    193,
    229,
    248,
    50,
    206,
    120,
    35,
    23,
    175,
    4,
    85,
    246,
    160,
    153,
    149,
    92,
    109,
    252,
    227,
    189,
    98,
    97,
    56,
    152,
    3,
    29,
    78,
    121,
    12,
    128,
    184,
    205,
    152,
    214,
    206,
    44,
    151,
    75,
    21,
    9,
    246,
    55,
    99,
    232,
    249,
    170,
    163,
    66,
    52,
    207,
    213,
    163,
    59,
    82,
    14,
    134,
    90,
    46,
    120,
    103,
    85,
    179,
    58,
    151,
    23,
    78,
    76,
    118,
    24,
    211,
    151,
    83,
    121,
    175,
    225,
    178,
    118,
    50,
    33,
    24,
    187,
    87,
    87,
    249,
    180,
    202,
    140,
    220,
    213,
    182,
    250,
    61,
    218,
    43,
    12,
    137,
    78,
    125,
    122,
    104,
    65,
    224,
    161,
    77,
    32,
    156,
    215,
    172,
    47,
    1,
    23,
    6,
    226,
    100,
    97,
    231,
    237,
    249,
    186,
    194,
    140,
    133,
    204,
    35,
    131,
    24,
    86,
    171,
    165,
    40,
    32,
    74,
    170,
    181,
    251,
    111,
    203,
    201,
    141,
    142,
    196,
    84,
    77,
    36,
    9,
    49,
    59,
    197,
    6,
    172,
    224,
    224,
    103,
    208,
    150,
    1,
    104,
    77,
    96,
    181,
    252,
    27,
    22,
    84,
    243,
    134,
    205,
    113,
    146,
    250,
    187,
    144,
    157,
    103,
    123,
    58,
    80,
    2,
    13,
    219,
    95,
    159,
    214,
    254,
    62,
    227,
    160,
    31,
    49,
    126,
    19,
    24,
    202,
    194,
    101,
    249,
    197,
    95,
    190,
    220,
    164,
    35,
    200,
    61,
    171,
    190,
    8,
    151,
    102,
    219,
    126,
    118,
    105,
    70,
    165,
    83,
    8,
    58,
    211,
    178,
    7,
    167,
    37,
    6,
    147,
    241,
    83,
    231,
    156,
    108,
    136,
    194,
    253,
    16,
    254,
    35,
    242,
    141,
    62,
    137,
    63,
    232,
    72,
    104,
    48,
    117,
    147,
    77,
    81,
    9,
    229,
    172,
    94,
    148,
    127,
    36,
    120,
    164,
    9,
    197,
    119,
    57,
    210,
    224,
    22,
    69,
    164,
    1,
    25,
    216,
    100,
    171,
    212,
    189,
    18,
    74,
    219,
    32,
    201,
    111,
    186,
    92,
    191,
    142,
    181,
    193,
    73,
    58,
    33,
    151,
    63,
    219,
    46,
    10,
    228,
    254,
    79,
    118,
    146,
    31,
    64,
    235,
    82,
    181,
    141,
    142,
    36,
    84,
    130,
    19,
    255,
    113,
    227,
    111,
    137,
    144,
    236,
    242,
    203,
    96,
    174,
    15,
    189,
    129,
    161,
    146,
    102,
    164,
    192,
    238,
    16,
    69,
    207,
    115,
    208,
    239,
    2,
    22,
    166,
    14,
    13,
    139,
    125,
    43,
    108,
    247,
    11,
    202,
    99,
    106,
    253,
    126,
    247,
    60,
    139,
    159,
    248,
    161,
    80,
    186,
    153,
    221,
    38,
    91,
    150,
    64,
    230,
    241,
    91,
    37,
    144,
    16,
    84,
    184,
    75,
    53,
    53,
    196,
    61,
    212,
    58,
    89,
    167,
    92,
    28,
    105,
    209,
    189,
    19,
    244,
    10,
    152,
    114,
    136,
    124,
    121,
    125,
    21,
    188,
    211,
    176,
    112,
    202,
    50,
    191,
    237,
    17,
    23,
    222,
    145,
    103,
    246,
    209,
    12,
    145,
    66,
    69,
    90,
    231,
    163,
    74,
    199,
    60,
    134,
    43,
    187,
    74,
    103,
    36,
    38,
    138,
    205,
    233,
    67,
    252,
    44,
    230,
    222,
    39,
    9,
    135,
    162,
    81,
    232,
    136,
    63,
    0,
    0,
    0,
    0,
    232,
    219,
    251,
    185,
    145,
    177,
    134,
    168,
    121,
    106,
    125,
    17,
    99,
    101,
    124,
    138,
    139,
    190,
    135,
    51,
    242,
    212,
    250,
    34,
    26,
    15,
    1,
    155,
    135,
    204,
    137,
    207,
    111,
    23,
    114,
    118,
    22,
    125,
    15,
    103,
    254,
    166,
    244,
    222,
    228,
    169,
    245,
    69,
    12,
    114,
    14,
    252,
    117,
    24,
    115,
    237,
    157,
    195,
    136,
    84,
    79,
    159,
    98,
    68,
    167,
    68,
    153,
    253,
    222,
    46,
    228,
    236,
    54,
    245,
    31,
    85,
    44,
    250,
    30,
    206,
    196,
    33,
    229,
    119,
    189,
    75,
    152,
    102,
    85,
    144,
    99,
    223,
    200,
    83,
    235,
    139,
    32,
    136,
    16,
    50,
    89,
    226,
    109,
    35,
    177,
    57,
    150,
    154,
    171,
    54,
    151,
    1,
    67,
    237,
    108,
    184,
    58,
    135,
    17,
    169,
    210,
    92,
    234,
    16,
    158,
    62,
    197,
    136,
    118,
    229,
    62,
    49,
    15,
    143,
    67,
    32,
    231,
    84,
    184,
    153,
    253,
    91,
    185,
    2,
    21,
    128,
    66,
    187,
    108,
    234,
    63,
    170,
    132,
    49,
    196,
    19,
    25,
    242,
    76,
    71,
    241,
    41,
    183,
    254,
    136,
    67,
    202,
    239,
    96,
    152,
    49,
    86,
    122,
    151,
    48,
    205,
    146,
    76,
    203,
    116,
    235,
    38,
    182,
    101,
    3,
    253,
    77,
    220,
    209,
    161,
    167,
    204,
    57,
    122,
    92,
    117,
    64,
    16,
    33,
    100,
    168,
    203,
    218,
    221,
    178,
    196,
    219,
    70,
    90,
    31,
    32,
    255,
    35,
    117,
    93,
    238,
    203,
    174,
    166,
    87,
    86,
    109,
    46,
    3,
    190,
    182,
    213,
    186,
    199,
    220,
    168,
    171,
    47,
    7,
    83,
    18,
    53,
    8,
    82,
    137,
    221,
    211,
    169,
    48,
    164,
    185,
    212,
    33,
    76,
    98,
    47,
    152,
    125,
    123,
    251,
    202,
    149,
    160,
    0,
    115,
    236,
    202,
    125,
    98,
    4,
    17,
    134,
    219,
    30,
    30,
    135,
    64,
    246,
    197,
    124,
    249,
    143,
    175,
    1,
    232,
    103,
    116,
    250,
    81,
    250,
    183,
    114,
    5,
    18,
    108,
    137,
    188,
    107,
    6,
    244,
    173,
    131,
    221,
    15,
    20,
    153,
    210,
    14,
    143,
    113,
    9,
    245,
    54,
    8,
    99,
    136,
    39,
    224,
    184,
    115,
    158,
    50,
    228,
    153,
    142,
    218,
    63,
    98,
    55,
    163,
    85,
    31,
    38,
    75,
    142,
    228,
    159,
    81,
    129,
    229,
    4,
    185,
    90,
    30,
    189,
    192,
    48,
    99,
    172,
    40,
    235,
    152,
    21,
    181,
    40,
    16,
    65,
    93,
    243,
    235,
    248,
    36,
    153,
    150,
    233,
    204,
    66,
    109,
    80,
    214,
    77,
    108,
    203,
    62,
    150,
    151,
    114,
    71,
    252,
    234,
    99,
    175,
    39,
    17,
    218,
    227,
    69,
    62,
    66,
    11,
    158,
    197,
    251,
    114,
    244,
    184,
    234,
    154,
    47,
    67,
    83,
    128,
    32,
    66,
    200,
    104,
    251,
    185,
    113,
    17,
    145,
    196,
    96,
    249,
    74,
    63,
    217,
    100,
    137,
    183,
    141,
    140,
    82,
    76,
    52,
    245,
    56,
    49,
    37,
    29,
    227,
    202,
    156,
    7,
    236,
    203,
    7,
    239,
    55,
    48,
    190,
    150,
    93,
    77,
    175,
    126,
    134,
    182,
    22,
    172,
    218,
    92,
    6,
    68,
    1,
    167,
    191,
    61,
    107,
    218,
    174,
    213,
    176,
    33,
    23,
    207,
    191,
    32,
    140,
    39,
    100,
    219,
    53,
    94,
    14,
    166,
    36,
    182,
    213,
    93,
    157,
    43,
    22,
    213,
    201,
    195,
    205,
    46,
    112,
    186,
    167,
    83,
    97,
    82,
    124,
    168,
    216,
    72,
    115,
    169,
    67,
    160,
    168,
    82,
    250,
    217,
    194,
    47,
    235,
    49,
    25,
    212,
    82,
    187,
    240,
    135,
    78,
    83,
    43,
    124,
    247,
    42,
    65,
    1,
    230,
    194,
    154,
    250,
    95,
    216,
    149,
    251,
    196,
    48,
    78,
    0,
    125,
    73,
    36,
    125,
    108,
    161,
    255,
    134,
    213,
    60,
    60,
    14,
    129,
    212,
    231,
    245,
    56,
    173,
    141,
    136,
    41,
    69,
    86,
    115,
    144,
    95,
    89,
    114,
    11,
    183,
    130,
    137,
    178,
    206,
    232,
    244,
    163,
    38,
    51,
    15,
    26,
    244,
    111,
    229,
    10,
    28,
    180,
    30,
    179,
    101,
    222,
    99,
    162,
    141,
    5,
    152,
    27,
    151,
    10,
    153,
    128,
    127,
    209,
    98,
    57,
    6,
    187,
    31,
    40,
    238,
    96,
    228,
    145,
    115,
    163,
    108,
    197,
    155,
    120,
    151,
    124,
    226,
    18,
    234,
    109,
    10,
    201,
    17,
    212,
    16,
    198,
    16,
    79,
    248,
    29,
    235,
    246,
    129,
    119,
    150,
    231,
    105,
    172,
    109,
    94,
    37,
    206,
    66,
    198,
    205,
    21,
    185,
    127,
    180,
    127,
    196,
    110,
    92,
    164,
    63,
    215,
    70,
    171,
    62,
    76,
    174,
    112,
    197,
    245,
    215,
    26,
    184,
    228,
    63,
    193,
    67,
    93,
    162,
    2,
    203,
    9,
    74,
    217,
    48,
    176,
    51,
    179,
    77,
    161,
    219,
    104,
    182,
    24,
    193,
    103,
    183,
    131,
    41,
    188,
    76,
    58,
    80,
    214,
    49,
    43,
    184,
    13,
    202,
    146,
    106,
    81,
    32,
    130,
    130,
    138,
    219,
    59,
    251,
    224,
    166,
    42,
    19,
    59,
    93,
    147,
    9,
    52,
    92,
    8,
    225,
    239,
    167,
    177,
    152,
    133,
    218,
    160,
    112,
    94,
    33,
    25,
    237,
    157,
    169,
    77,
    5,
    70,
    82,
    244,
    124,
    44,
    47,
    229,
    148,
    247,
    212,
    92,
    142,
    248,
    213,
    199,
    102,
    35,
    46,
    126,
    31,
    73,
    83,
    111,
    247,
    146,
    168,
    214,
    198,
    139,
    124,
    132,
    46,
    80,
    135,
    61,
    87,
    58,
    250,
    44,
    191,
    225,
    1,
    149,
    165,
    238,
    0,
    14,
    77,
    53,
    251,
    183,
    52,
    95,
    134,
    166,
    220,
    132,
    125,
    31,
    65,
    71,
    245,
    75,
    169,
    156,
    14,
    242,
    208,
    246,
    115,
    227,
    56,
    45,
    136,
    90,
    34,
    34,
    137,
    193,
    202,
    249,
    114,
    120,
    179,
    147,
    15,
    105,
    91,
    72,
    244,
    208,
    137,
    20,
    30,
    192,
    97,
    207,
    229,
    121,
    24,
    165,
    152,
    104,
    240,
    126,
    99,
    209,
    234,
    113,
    98,
    74,
    2,
    170,
    153,
    243,
    123,
    192,
    228,
    226,
    147,
    27,
    31,
    91,
    14,
    216,
    151,
    15,
    230,
    3,
    108,
    182,
    159,
    105,
    17,
    167,
    119,
    178,
    234,
    30,
    109,
    189,
    235,
    133,
    133,
    102,
    16,
    60,
    252,
    12,
    109,
    45,
    20,
    215,
    150,
    148,
    88,
    181,
    185,
    12,
    176,
    110,
    66,
    181,
    201,
    4,
    63,
    164,
    33,
    223,
    196,
    29,
    59,
    208,
    197,
    134,
    211,
    11,
    62,
    63,
    170,
    97,
    67,
    46,
    66,
    186,
    184,
    151,
    223,
    121,
    48,
    195,
    55,
    162,
    203,
    122,
    78,
    200,
    182,
    107,
    166,
    19,
    77,
    210,
    188,
    28,
    76,
    73,
    84,
    199,
    183,
    240,
    45,
    173,
    202,
    225,
    197,
    118,
    49,
    88,
    23,
    42,
    219,
    72,
    255,
    241,
    32,
    241,
    134,
    155,
    93,
    224,
    110,
    64,
    166,
    89,
    116,
    79,
    167,
    194,
    156,
    148,
    92,
    123,
    229,
    254,
    33,
    106,
    13,
    37,
    218,
    211,
    144,
    230,
    82,
    135,
    120,
    61,
    169,
    62,
    1,
    87,
    212,
    47,
    233,
    140,
    47,
    150,
    243,
    131,
    46,
    13,
    27,
    88,
    213,
    180,
    98,
    50,
    168,
    165,
    138,
    233,
    83,
    28,
    0,
    0,
    0,
    0,
    145,
    145,
    104,
    174,
    99,
    37,
    160,
    135,
    242,
    180,
    200,
    41,
    135,
    76,
    49,
    212,
    22,
    221,
    89,
    122,
    228,
    105,
    145,
    83,
    117,
    248,
    249,
    253,
    79,
    159,
    19,
    115,
    222,
    14,
    123,
    221,
    44,
    186,
    179,
    244,
    189,
    43,
    219,
    90,
    200,
    211,
    34,
    167,
    89,
    66,
    74,
    9,
    171,
    246,
    130,
    32,
    58,
    103,
    234,
    142,
    158,
    62,
    39,
    230,
    15,
    175,
    79,
    72,
    253,
    27,
    135,
    97,
    108,
    138,
    239,
    207,
    25,
    114,
    22,
    50,
    136,
    227,
    126,
    156,
    122,
    87,
    182,
    181,
    235,
    198,
    222,
    27,
    209,
    161,
    52,
    149,
    64,
    48,
    92,
    59,
    178,
    132,
    148,
    18,
    35,
    21,
    252,
    188,
    86,
    237,
    5,
    65,
    199,
    124,
    109,
    239,
    53,
    200,
    165,
    198,
    164,
    89,
    205,
    104,
    125,
    123,
    63,
    23,
    236,
    234,
    87,
    185,
    30,
    94,
    159,
    144,
    143,
    207,
    247,
    62,
    250,
    55,
    14,
    195,
    107,
    166,
    102,
    109,
    153,
    18,
    174,
    68,
    8,
    131,
    198,
    234,
    50,
    228,
    44,
    100,
    163,
    117,
    68,
    202,
    81,
    193,
    140,
    227,
    192,
    80,
    228,
    77,
    181,
    168,
    29,
    176,
    36,
    57,
    117,
    30,
    214,
    141,
    189,
    55,
    71,
    28,
    213,
    153,
    227,
    69,
    24,
    241,
    114,
    212,
    112,
    95,
    128,
    96,
    184,
    118,
    17,
    241,
    208,
    216,
    100,
    9,
    41,
    37,
    245,
    152,
    65,
    139,
    7,
    44,
    137,
    162,
    150,
    189,
    225,
    12,
    172,
    218,
    11,
    130,
    61,
    75,
    99,
    44,
    207,
    255,
    171,
    5,
    94,
    110,
    195,
    171,
    43,
    150,
    58,
    86,
    186,
    7,
    82,
    248,
    72,
    179,
    154,
    209,
    217,
    34,
    242,
    127,
    250,
    246,
    126,
    46,
    107,
    103,
    22,
    128,
    153,
    211,
    222,
    169,
    8,
    66,
    182,
    7,
    125,
    186,
    79,
    250,
    236,
    43,
    39,
    84,
    30,
    159,
    239,
    125,
    143,
    14,
    135,
    211,
    181,
    105,
    109,
    93,
    36,
    248,
    5,
    243,
    214,
    76,
    205,
    218,
    71,
    221,
    165,
    116,
    50,
    37,
    92,
    137,
    163,
    180,
    52,
    39,
    81,
    0,
    252,
    14,
    192,
    145,
    148,
    160,
    100,
    200,
    89,
    200,
    245,
    89,
    49,
    102,
    7,
    237,
    249,
    79,
    150,
    124,
    145,
    225,
    227,
    132,
    104,
    28,
    114,
    21,
    0,
    178,
    128,
    161,
    200,
    155,
    17,
    48,
    160,
    53,
    43,
    87,
    74,
    187,
    186,
    198,
    34,
    21,
    72,
    114,
    234,
    60,
    217,
    227,
    130,
    146,
    172,
    27,
    123,
    111,
    61,
    138,
    19,
    193,
    207,
    62,
    219,
    232,
    94,
    175,
    179,
    70,
    135,
    141,
    65,
    57,
    22,
    28,
    41,
    151,
    228,
    168,
    225,
    190,
    117,
    57,
    137,
    16,
    0,
    193,
    112,
    237,
    145,
    80,
    24,
    67,
    99,
    228,
    208,
    106,
    242,
    117,
    184,
    196,
    200,
    18,
    82,
    74,
    89,
    131,
    58,
    228,
    171,
    55,
    242,
    205,
    58,
    166,
    154,
    99,
    79,
    94,
    99,
    158,
    222,
    207,
    11,
    48,
    44,
    123,
    195,
    25,
    189,
    234,
    171,
    183,
    25,
    179,
    102,
    223,
    136,
    34,
    14,
    113,
    122,
    150,
    198,
    88,
    235,
    7,
    174,
    246,
    158,
    255,
    87,
    11,
    15,
    110,
    63,
    165,
    253,
    218,
    247,
    140,
    108,
    75,
    159,
    34,
    86,
    44,
    117,
    172,
    199,
    189,
    29,
    2,
    53,
    9,
    213,
    43,
    164,
    152,
    189,
    133,
    209,
    96,
    68,
    120,
    64,
    241,
    44,
    214,
    178,
    69,
    228,
    255,
    35,
    212,
    140,
    81,
    244,
    237,
    253,
    92,
    101,
    124,
    149,
    242,
    151,
    200,
    93,
    219,
    6,
    89,
    53,
    117,
    115,
    161,
    204,
    136,
    226,
    48,
    164,
    38,
    16,
    132,
    108,
    15,
    129,
    21,
    4,
    161,
    187,
    114,
    238,
    47,
    42,
    227,
    134,
    129,
    216,
    87,
    78,
    168,
    73,
    198,
    38,
    6,
    60,
    62,
    223,
    251,
    173,
    175,
    183,
    85,
    95,
    27,
    127,
    124,
    206,
    138,
    23,
    210,
    106,
    211,
    218,
    186,
    251,
    66,
    178,
    20,
    9,
    246,
    122,
    61,
    152,
    103,
    18,
    147,
    237,
    159,
    235,
    110,
    124,
    14,
    131,
    192,
    142,
    186,
    75,
    233,
    31,
    43,
    35,
    71,
    37,
    76,
    201,
    201,
    180,
    221,
    161,
    103,
    70,
    105,
    105,
    78,
    215,
    248,
    1,
    224,
    162,
    0,
    248,
    29,
    51,
    145,
    144,
    179,
    193,
    37,
    88,
    154,
    80,
    180,
    48,
    52,
    137,
    150,
    194,
    75,
    24,
    7,
    170,
    229,
    234,
    179,
    98,
    204,
    123,
    34,
    10,
    98,
    14,
    218,
    243,
    159,
    159,
    75,
    155,
    49,
    109,
    255,
    83,
    24,
    252,
    110,
    59,
    182,
    198,
    9,
    209,
    56,
    87,
    152,
    185,
    150,
    165,
    44,
    113,
    191,
    52,
    189,
    25,
    17,
    65,
    69,
    224,
    236,
    208,
    212,
    136,
    66,
    34,
    96,
    64,
    107,
    179,
    241,
    40,
    197,
    23,
    168,
    229,
    173,
    134,
    57,
    141,
    3,
    116,
    141,
    69,
    42,
    229,
    28,
    45,
    132,
    144,
    228,
    212,
    121,
    1,
    117,
    188,
    215,
    243,
    193,
    116,
    254,
    98,
    80,
    28,
    80,
    88,
    55,
    246,
    222,
    201,
    166,
    158,
    112,
    59,
    18,
    86,
    89,
    170,
    131,
    62,
    247,
    223,
    123,
    199,
    10,
    78,
    234,
    175,
    164,
    188,
    94,
    103,
    141,
    45,
    207,
    15,
    35,
    14,
    27,
    131,
    114,
    159,
    138,
    235,
    220,
    109,
    62,
    35,
    245,
    252,
    175,
    75,
    91,
    137,
    87,
    178,
    166,
    24,
    198,
    218,
    8,
    234,
    114,
    18,
    33,
    123,
    227,
    122,
    143,
    65,
    132,
    144,
    1,
    208,
    21,
    248,
    175,
    34,
    161,
    48,
    134,
    179,
    48,
    88,
    40,
    198,
    200,
    161,
    213,
    87,
    89,
    201,
    123,
    165,
    237,
    1,
    82,
    52,
    124,
    105,
    252,
    144,
    37,
    164,
    148,
    1,
    180,
    204,
    58,
    243,
    0,
    4,
    19,
    98,
    145,
    108,
    189,
    23,
    105,
    149,
    64,
    134,
    248,
    253,
    238,
    116,
    76,
    53,
    199,
    229,
    221,
    93,
    105,
    223,
    186,
    183,
    231,
    78,
    43,
    223,
    73,
    188,
    159,
    23,
    96,
    45,
    14,
    127,
    206,
    88,
    246,
    134,
    51,
    201,
    103,
    238,
    157,
    59,
    211,
    38,
    180,
    170,
    66,
    78,
    26,
    115,
    96,
    188,
    101,
    226,
    241,
    212,
    203,
    16,
    69,
    28,
    226,
    129,
    212,
    116,
    76,
    244,
    44,
    141,
    177,
    101,
    189,
    229,
    31,
    151,
    9,
    45,
    54,
    6,
    152,
    69,
    152,
    60,
    255,
    175,
    22,
    173,
    110,
    199,
    184,
    95,
    218,
    15,
    145,
    206,
    75,
    103,
    63,
    187,
    179,
    158,
    194,
    42,
    34,
    246,
    108,
    216,
    150,
    62,
    69,
    73,
    7,
    86,
    235,
    237,
    94,
    155,
    131,
    124,
    207,
    243,
    45,
    142,
    123,
    59,
    4,
    31,
    234,
    83,
    170,
    106,
    18,
    170,
    87,
    251,
    131,
    194,
    249,
    9,
    55,
    10,
    208,
    152,
    166,
    98,
    126,
    162,
    193,
    136,
    240,
    51,
    80,
    224,
    94,
    193,
    228,
    40,
    119,
    80,
    117,
    64,
    217,
    37,
    141,
    185,
    36,
    180,
    28,
    209,
    138,
    70,
    168,
    25,
    163,
    215,
    57,
    113,
    13,
    43,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    44,
    0,
    0,
    0,
    45,
    0,
    0,
    0,
    46,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    47,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    0,
    68,
    94,
    16,
    0,
    0,
    0,
    0,
    0,
    117,
    110,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    102,
    105,
    108,
    101,
    111,
    116,
    104,
    101,
    114,
    32,
    111,
    115,
    32,
    101,
    114,
    114,
    111,
    114,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    119,
    114,
    105,
    116,
    101,
    32,
    122,
    101,
    114,
    111,
    116,
    105,
    109,
    101,
    100,
    32,
    111,
    117,
    116,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    100,
    97,
    116,
    97,
    105,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    105,
    110,
    112,
    117,
    116,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    98,
    108,
    111,
    99,
    107,
    101,
    110,
    116,
    105,
    116,
    121,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    32,
    101,
    120,
    105,
    115,
    116,
    115,
    98,
    114,
    111,
    107,
    101,
    110,
    32,
    112,
    105,
    112,
    101,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    105,
    110,
    32,
    117,
    115,
    101,
    110,
    111,
    116,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    98,
    111,
    114,
    116,
    101,
    100,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    112,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    32,
    100,
    101,
    110,
    105,
    101,
    100,
    101,
    110,
    116,
    105,
    116,
    121,
    32,
    110,
    111,
    116,
    32,
    102,
    111,
    117,
    110,
    100,
    32,
    40,
    111,
    115,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    41,
    0,
    0,
    0,
    68,
    94,
    16,
    0,
    0,
    0,
    0,
    0,
    177,
    95,
    16,
    0,
    11,
    0,
    0,
    0,
    188,
    95,
    16,
    0,
    1,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    115,
    116,
    100,
    47,
    115,
    114,
    99,
    47,
    112,
    97,
    110,
    105,
    99,
    107,
    105,
    110,
    103,
    46,
    114,
    115,
    216,
    95,
    16,
    0,
    28,
    0,
    0,
    0,
    235,
    1,
    0,
    0,
    31,
    0,
    0,
    0,
    216,
    95,
    16,
    0,
    28,
    0,
    0,
    0,
    236,
    1,
    0,
    0,
    30,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    49,
    0,
    0,
    0,
    50,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    51,
    0,
    0,
    0,
    52,
    0,
    0,
    0,
    53,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    55,
    0,
    0,
    0,
    85,
    110,
    101,
    120,
    112,
    101,
    99,
    116,
    101,
    100,
    69,
    111,
    102,
    79,
    116,
    104,
    101,
    114,
    73,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    87,
    114,
    105,
    116,
    101,
    90,
    101,
    114,
    111,
    84,
    105,
    109,
    101,
    100,
    79,
    117,
    116,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    68,
    97,
    116,
    97,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    73,
    110,
    112,
    117,
    116,
    87,
    111,
    117,
    108,
    100,
    66,
    108,
    111,
    99,
    107,
    65,
    108,
    114,
    101,
    97,
    100,
    121,
    69,
    120,
    105,
    115,
    116,
    115,
    66,
    114,
    111,
    107,
    101,
    110,
    80,
    105,
    112,
    101,
    65,
    100,
    100,
    114,
    78,
    111,
    116,
    65,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    65,
    100,
    100,
    114,
    73,
    110,
    85,
    115,
    101,
    78,
    111,
    116,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    65,
    98,
    111,
    114,
    116,
    101,
    100,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    82,
    101,
    115,
    101,
    116,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    82,
    101,
    102,
    117,
    115,
    101,
    100,
    80,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    68,
    101,
    110,
    105,
    101,
    100,
    78,
    111,
    116,
    70,
    111,
    117,
    110,
    100,
    111,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    115,
    117,
    99,
    99,
    101,
    115,
    115,
    102,
    117,
    108,
    56,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    57,
    0,
    0,
    0,
    58,
    0,
    0,
    0,
    59,
    0,
    0,
    0,
    47,
    114,
    117,
    115,
    116,
    99,
    47,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    52,
    54,
    57,
    51,
    53,
    55,
    97,
    49,
    50,
    99,
    50,
    99,
    57,
    55,
    52,
    99,
    49,
    52,
    48,
    102,
    54,
    55,
    101,
    55,
    99,
    100,
    100,
    55,
    54,
    100,
    48,
    47,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    92,
    97,
    16,
    0,
    75,
    0,
    0,
    0,
    90,
    1,
    0,
    0,
    19,
    0,
    0,
    0,
    56,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    60,
    0,
    0,
    0,
    97,
    32,
    102,
    111,
    114,
    109,
    97,
    116,
    116,
    105,
    110,
    103,
    32,
    116,
    114,
    97,
    105,
    116,
    32,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    97,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    101,
    100,
    32,
    97,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    46,
    114,
    115,
    0,
    251,
    97,
    16,
    0,
    24,
    0,
    0,
    0,
    66,
    2,
    0,
    0,
    28,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    97,
    108,
    108,
    111,
    99,
    47,
    115,
    114,
    99,
    47,
    114,
    97,
    119,
    95,
    118,
    101,
    99,
    46,
    114,
    115,
    99,
    97,
    112,
    97,
    99,
    105,
    116,
    121,
    32,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    0,
    0,
    0,
    36,
    98,
    16,
    0,
    28,
    0,
    0,
    0,
    24,
    2,
    0,
    0,
    5,
    0,
    0,
    0,
    96,
    46,
    46,
    0,
    101,
    98,
    16,
    0,
    2,
    0,
    0,
    0,
    99,
    97,
    108,
    108,
    101,
    100,
    32,
    96,
    79,
    112,
    116,
    105,
    111,
    110,
    58,
    58,
    117,
    110,
    119,
    114,
    97,
    112,
    40,
    41,
    96,
    32,
    111,
    110,
    32,
    97,
    32,
    96,
    78,
    111,
    110,
    101,
    96,
    32,
    118,
    97,
    108,
    117,
    101,
    58,
    32,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    0,
    0,
    0,
    0,
    155,
    98,
    16,
    0,
    2,
    0,
    0,
    0,
    67,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    68,
    0,
    0,
    0,
    105,
    110,
    100,
    101,
    120,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    98,
    111,
    117,
    110,
    100,
    115,
    58,
    32,
    116,
    104,
    101,
    32,
    108,
    101,
    110,
    32,
    105,
    115,
    32,
    32,
    98,
    117,
    116,
    32,
    116,
    104,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    105,
    115,
    32,
    0,
    0,
    192,
    98,
    16,
    0,
    32,
    0,
    0,
    0,
    224,
    98,
    16,
    0,
    18,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    98,
    117,
    105,
    108,
    100,
    101,
    114,
    115,
    46,
    114,
    115,
    67,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    69,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    71,
    0,
    0,
    0,
    32,
    32,
    32,
    32,
    4,
    99,
    16,
    0,
    32,
    0,
    0,
    0,
    50,
    0,
    0,
    0,
    33,
    0,
    0,
    0,
    4,
    99,
    16,
    0,
    32,
    0,
    0,
    0,
    51,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    32,
    123,
    10,
    44,
    10,
    44,
    32,
    32,
    123,
    32,
    125,
    32,
    125,
    40,
    10,
    40,
    44,
    41,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    110,
    117,
    109,
    46,
    114,
    115,
    0,
    0,
    0,
    114,
    99,
    16,
    0,
    27,
    0,
    0,
    0,
    101,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    48,
    120,
    48,
    48,
    48,
    49,
    48,
    50,
    48,
    51,
    48,
    52,
    48,
    53,
    48,
    54,
    48,
    55,
    48,
    56,
    48,
    57,
    49,
    48,
    49,
    49,
    49,
    50,
    49,
    51,
    49,
    52,
    49,
    53,
    49,
    54,
    49,
    55,
    49,
    56,
    49,
    57,
    50,
    48,
    50,
    49,
    50,
    50,
    50,
    51,
    50,
    52,
    50,
    53,
    50,
    54,
    50,
    55,
    50,
    56,
    50,
    57,
    51,
    48,
    51,
    49,
    51,
    50,
    51,
    51,
    51,
    52,
    51,
    53,
    51,
    54,
    51,
    55,
    51,
    56,
    51,
    57,
    52,
    48,
    52,
    49,
    52,
    50,
    52,
    51,
    52,
    52,
    52,
    53,
    52,
    54,
    52,
    55,
    52,
    56,
    52,
    57,
    53,
    48,
    53,
    49,
    53,
    50,
    53,
    51,
    53,
    52,
    53,
    53,
    53,
    54,
    53,
    55,
    53,
    56,
    53,
    57,
    54,
    48,
    54,
    49,
    54,
    50,
    54,
    51,
    54,
    52,
    54,
    53,
    54,
    54,
    54,
    55,
    54,
    56,
    54,
    57,
    55,
    48,
    55,
    49,
    55,
    50,
    55,
    51,
    55,
    52,
    55,
    53,
    55,
    54,
    55,
    55,
    55,
    56,
    55,
    57,
    56,
    48,
    56,
    49,
    56,
    50,
    56,
    51,
    56,
    52,
    56,
    53,
    56,
    54,
    56,
    55,
    56,
    56,
    56,
    57,
    57,
    48,
    57,
    49,
    57,
    50,
    57,
    51,
    57,
    52,
    57,
    53,
    57,
    54,
    57,
    55,
    57,
    56,
    57,
    57,
    0,
    0,
    67,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    72,
    0,
    0,
    0,
    73,
    0,
    0,
    0,
    74,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    102,
    109,
    116,
    47,
    109,
    111,
    100,
    46,
    114,
    115,
    0,
    132,
    100,
    16,
    0,
    27,
    0,
    0,
    0,
    16,
    8,
    0,
    0,
    30,
    0,
    0,
    0,
    132,
    100,
    16,
    0,
    27,
    0,
    0,
    0,
    23,
    8,
    0,
    0,
    22,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    115,
    108,
    105,
    99,
    101,
    47,
    109,
    101,
    109,
    99,
    104,
    114,
    46,
    114,
    115,
    192,
    100,
    16,
    0,
    32,
    0,
    0,
    0,
    90,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    114,
    97,
    110,
    103,
    101,
    32,
    115,
    116,
    97,
    114,
    116,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    114,
    97,
    110,
    103,
    101,
    32,
    102,
    111,
    114,
    32,
    115,
    108,
    105,
    99,
    101,
    32,
    111,
    102,
    32,
    108,
    101,
    110,
    103,
    116,
    104,
    32,
    240,
    100,
    16,
    0,
    18,
    0,
    0,
    0,
    2,
    101,
    16,
    0,
    34,
    0,
    0,
    0,
    114,
    97,
    110,
    103,
    101,
    32,
    101,
    110,
    100,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    52,
    101,
    16,
    0,
    16,
    0,
    0,
    0,
    2,
    101,
    16,
    0,
    34,
    0,
    0,
    0,
    115,
    108,
    105,
    99,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    115,
    116,
    97,
    114,
    116,
    115,
    32,
    97,
    116,
    32,
    32,
    98,
    117,
    116,
    32,
    101,
    110,
    100,
    115,
    32,
    97,
    116,
    32,
    0,
    84,
    101,
    16,
    0,
    22,
    0,
    0,
    0,
    106,
    101,
    16,
    0,
    13,
    0,
    0,
    0,
    91,
    46,
    46,
    46,
    93,
    98,
    121,
    116,
    101,
    32,
    105,
    110,
    100,
    101,
    120,
    32,
    32,
    105,
    115,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    98,
    111,
    117,
    110,
    100,
    115,
    32,
    111,
    102,
    32,
    96,
    0,
    0,
    141,
    101,
    16,
    0,
    11,
    0,
    0,
    0,
    152,
    101,
    16,
    0,
    22,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    98,
    101,
    103,
    105,
    110,
    32,
    60,
    61,
    32,
    101,
    110,
    100,
    32,
    40,
    32,
    60,
    61,
    32,
    41,
    32,
    119,
    104,
    101,
    110,
    32,
    115,
    108,
    105,
    99,
    105,
    110,
    103,
    32,
    96,
    0,
    0,
    200,
    101,
    16,
    0,
    14,
    0,
    0,
    0,
    214,
    101,
    16,
    0,
    4,
    0,
    0,
    0,
    218,
    101,
    16,
    0,
    16,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    32,
    105,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    32,
    99,
    104,
    97,
    114,
    32,
    98,
    111,
    117,
    110,
    100,
    97,
    114,
    121,
    59,
    32,
    105,
    116,
    32,
    105,
    115,
    32,
    105,
    110,
    115,
    105,
    100,
    101,
    32,
    32,
    40,
    98,
    121,
    116,
    101,
    115,
    32,
    41,
    32,
    111,
    102,
    32,
    96,
    141,
    101,
    16,
    0,
    11,
    0,
    0,
    0,
    12,
    102,
    16,
    0,
    38,
    0,
    0,
    0,
    50,
    102,
    16,
    0,
    8,
    0,
    0,
    0,
    58,
    102,
    16,
    0,
    6,
    0,
    0,
    0,
    100,
    98,
    16,
    0,
    1,
    0,
    0,
    0,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    47,
    112,
    114,
    105,
    110,
    116,
    97,
    98,
    108,
    101,
    46,
    114,
    115,
    0,
    0,
    0,
    104,
    102,
    16,
    0,
    37,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    28,
    0,
    0,
    0,
    104,
    102,
    16,
    0,
    37,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    0,
    1,
    3,
    5,
    5,
    6,
    6,
    3,
    7,
    6,
    8,
    8,
    9,
    17,
    10,
    28,
    11,
    25,
    12,
    20,
    13,
    16,
    14,
    13,
    15,
    4,
    16,
    3,
    18,
    18,
    19,
    9,
    22,
    1,
    23,
    5,
    24,
    2,
    25,
    3,
    26,
    7,
    28,
    2,
    29,
    1,
    31,
    22,
    32,
    3,
    43,
    3,
    44,
    2,
    45,
    11,
    46,
    1,
    48,
    3,
    49,
    2,
    50,
    1,
    167,
    2,
    169,
    2,
    170,
    4,
    171,
    8,
    250,
    2,
    251,
    5,
    253,
    4,
    254,
    3,
    255,
    9,
    173,
    120,
    121,
    139,
    141,
    162,
    48,
    87,
    88,
    139,
    140,
    144,
    28,
    29,
    221,
    14,
    15,
    75,
    76,
    251,
    252,
    46,
    47,
    63,
    92,
    93,
    95,
    181,
    226,
    132,
    141,
    142,
    145,
    146,
    169,
    177,
    186,
    187,
    197,
    198,
    201,
    202,
    222,
    228,
    229,
    255,
    0,
    4,
    17,
    18,
    41,
    49,
    52,
    55,
    58,
    59,
    61,
    73,
    74,
    93,
    132,
    142,
    146,
    169,
    177,
    180,
    186,
    187,
    198,
    202,
    206,
    207,
    228,
    229,
    0,
    4,
    13,
    14,
    17,
    18,
    41,
    49,
    52,
    58,
    59,
    69,
    70,
    73,
    74,
    94,
    100,
    101,
    132,
    145,
    155,
    157,
    201,
    206,
    207,
    13,
    17,
    41,
    69,
    73,
    87,
    100,
    101,
    141,
    145,
    169,
    180,
    186,
    187,
    197,
    201,
    223,
    228,
    229,
    240,
    13,
    17,
    69,
    73,
    100,
    101,
    128,
    132,
    178,
    188,
    190,
    191,
    213,
    215,
    240,
    241,
    131,
    133,
    139,
    164,
    166,
    190,
    191,
    197,
    199,
    206,
    207,
    218,
    219,
    72,
    152,
    189,
    205,
    198,
    206,
    207,
    73,
    78,
    79,
    87,
    89,
    94,
    95,
    137,
    142,
    143,
    177,
    182,
    183,
    191,
    193,
    198,
    199,
    215,
    17,
    22,
    23,
    91,
    92,
    246,
    247,
    254,
    255,
    128,
    13,
    109,
    113,
    222,
    223,
    14,
    15,
    31,
    110,
    111,
    28,
    29,
    95,
    125,
    126,
    174,
    175,
    187,
    188,
    250,
    22,
    23,
    30,
    31,
    70,
    71,
    78,
    79,
    88,
    90,
    92,
    94,
    126,
    127,
    181,
    197,
    212,
    213,
    220,
    240,
    241,
    245,
    114,
    115,
    143,
    116,
    117,
    150,
    47,
    95,
    38,
    46,
    47,
    167,
    175,
    183,
    191,
    199,
    207,
    215,
    223,
    154,
    64,
    151,
    152,
    48,
    143,
    31,
    192,
    193,
    206,
    255,
    78,
    79,
    90,
    91,
    7,
    8,
    15,
    16,
    39,
    47,
    238,
    239,
    110,
    111,
    55,
    61,
    63,
    66,
    69,
    144,
    145,
    254,
    255,
    83,
    103,
    117,
    200,
    201,
    208,
    209,
    216,
    217,
    231,
    254,
    255,
    0,
    32,
    95,
    34,
    130,
    223,
    4,
    130,
    68,
    8,
    27,
    4,
    6,
    17,
    129,
    172,
    14,
    128,
    171,
    53,
    40,
    11,
    128,
    224,
    3,
    25,
    8,
    1,
    4,
    47,
    4,
    52,
    4,
    7,
    3,
    1,
    7,
    6,
    7,
    17,
    10,
    80,
    15,
    18,
    7,
    85,
    7,
    3,
    4,
    28,
    10,
    9,
    3,
    8,
    3,
    7,
    3,
    2,
    3,
    3,
    3,
    12,
    4,
    5,
    3,
    11,
    6,
    1,
    14,
    21,
    5,
    58,
    3,
    17,
    7,
    6,
    5,
    16,
    7,
    87,
    7,
    2,
    7,
    21,
    13,
    80,
    4,
    67,
    3,
    45,
    3,
    1,
    4,
    17,
    6,
    15,
    12,
    58,
    4,
    29,
    37,
    95,
    32,
    109,
    4,
    106,
    37,
    128,
    200,
    5,
    130,
    176,
    3,
    26,
    6,
    130,
    253,
    3,
    89,
    7,
    21,
    11,
    23,
    9,
    20,
    12,
    20,
    12,
    106,
    6,
    10,
    6,
    26,
    6,
    89,
    7,
    43,
    5,
    70,
    10,
    44,
    4,
    12,
    4,
    1,
    3,
    49,
    11,
    44,
    4,
    26,
    6,
    11,
    3,
    128,
    172,
    6,
    10,
    6,
    33,
    63,
    76,
    4,
    45,
    3,
    116,
    8,
    60,
    3,
    15,
    3,
    60,
    7,
    56,
    8,
    43,
    5,
    130,
    255,
    17,
    24,
    8,
    47,
    17,
    45,
    3,
    32,
    16,
    33,
    15,
    128,
    140,
    4,
    130,
    151,
    25,
    11,
    21,
    136,
    148,
    5,
    47,
    5,
    59,
    7,
    2,
    14,
    24,
    9,
    128,
    179,
    45,
    116,
    12,
    128,
    214,
    26,
    12,
    5,
    128,
    255,
    5,
    128,
    223,
    12,
    238,
    13,
    3,
    132,
    141,
    3,
    55,
    9,
    129,
    92,
    20,
    128,
    184,
    8,
    128,
    203,
    42,
    56,
    3,
    10,
    6,
    56,
    8,
    70,
    8,
    12,
    6,
    116,
    11,
    30,
    3,
    90,
    4,
    89,
    9,
    128,
    131,
    24,
    28,
    10,
    22,
    9,
    76,
    4,
    128,
    138,
    6,
    171,
    164,
    12,
    23,
    4,
    49,
    161,
    4,
    129,
    218,
    38,
    7,
    12,
    5,
    5,
    128,
    165,
    17,
    129,
    109,
    16,
    120,
    40,
    42,
    6,
    76,
    4,
    128,
    141,
    4,
    128,
    190,
    3,
    27,
    3,
    15,
    13,
    0,
    6,
    1,
    1,
    3,
    1,
    4,
    2,
    8,
    8,
    9,
    2,
    10,
    5,
    11,
    2,
    14,
    4,
    16,
    1,
    17,
    2,
    18,
    5,
    19,
    17,
    20,
    1,
    21,
    2,
    23,
    2,
    25,
    13,
    28,
    5,
    29,
    8,
    36,
    1,
    106,
    3,
    107,
    2,
    188,
    2,
    209,
    2,
    212,
    12,
    213,
    9,
    214,
    2,
    215,
    2,
    218,
    1,
    224,
    5,
    225,
    2,
    232,
    2,
    238,
    32,
    240,
    4,
    248,
    2,
    249,
    2,
    250,
    2,
    251,
    1,
    12,
    39,
    59,
    62,
    78,
    79,
    143,
    158,
    158,
    159,
    6,
    7,
    9,
    54,
    61,
    62,
    86,
    243,
    208,
    209,
    4,
    20,
    24,
    54,
    55,
    86,
    87,
    127,
    170,
    174,
    175,
    189,
    53,
    224,
    18,
    135,
    137,
    142,
    158,
    4,
    13,
    14,
    17,
    18,
    41,
    49,
    52,
    58,
    69,
    70,
    73,
    74,
    78,
    79,
    100,
    101,
    92,
    182,
    183,
    27,
    28,
    7,
    8,
    10,
    11,
    20,
    23,
    54,
    57,
    58,
    168,
    169,
    216,
    217,
    9,
    55,
    144,
    145,
    168,
    7,
    10,
    59,
    62,
    102,
    105,
    143,
    146,
    111,
    95,
    238,
    239,
    90,
    98,
    154,
    155,
    39,
    40,
    85,
    157,
    160,
    161,
    163,
    164,
    167,
    168,
    173,
    186,
    188,
    196,
    6,
    11,
    12,
    21,
    29,
    58,
    63,
    69,
    81,
    166,
    167,
    204,
    205,
    160,
    7,
    25,
    26,
    34,
    37,
    62,
    63,
    197,
    198,
    4,
    32,
    35,
    37,
    38,
    40,
    51,
    56,
    58,
    72,
    74,
    76,
    80,
    83,
    85,
    86,
    88,
    90,
    92,
    94,
    96,
    99,
    101,
    102,
    107,
    115,
    120,
    125,
    127,
    138,
    164,
    170,
    175,
    176,
    192,
    208,
    174,
    175,
    121,
    204,
    110,
    111,
    147,
    94,
    34,
    123,
    5,
    3,
    4,
    45,
    3,
    102,
    3,
    1,
    47,
    46,
    128,
    130,
    29,
    3,
    49,
    15,
    28,
    4,
    36,
    9,
    30,
    5,
    43,
    5,
    68,
    4,
    14,
    42,
    128,
    170,
    6,
    36,
    4,
    36,
    4,
    40,
    8,
    52,
    11,
    1,
    128,
    144,
    129,
    55,
    9,
    22,
    10,
    8,
    128,
    152,
    57,
    3,
    99,
    8,
    9,
    48,
    22,
    5,
    33,
    3,
    27,
    5,
    1,
    64,
    56,
    4,
    75,
    5,
    47,
    4,
    10,
    7,
    9,
    7,
    64,
    32,
    39,
    4,
    12,
    9,
    54,
    3,
    58,
    5,
    26,
    7,
    4,
    12,
    7,
    80,
    73,
    55,
    51,
    13,
    51,
    7,
    46,
    8,
    10,
    129,
    38,
    82,
    78,
    40,
    8,
    42,
    86,
    28,
    20,
    23,
    9,
    78,
    4,
    30,
    15,
    67,
    14,
    25,
    7,
    10,
    6,
    72,
    8,
    39,
    9,
    117,
    11,
    63,
    65,
    42,
    6,
    59,
    5,
    10,
    6,
    81,
    6,
    1,
    5,
    16,
    3,
    5,
    128,
    139,
    98,
    30,
    72,
    8,
    10,
    128,
    166,
    94,
    34,
    69,
    11,
    10,
    6,
    13,
    19,
    57,
    7,
    10,
    54,
    44,
    4,
    16,
    128,
    192,
    60,
    100,
    83,
    12,
    72,
    9,
    10,
    70,
    69,
    27,
    72,
    8,
    83,
    29,
    57,
    129,
    7,
    70,
    10,
    29,
    3,
    71,
    73,
    55,
    3,
    14,
    8,
    10,
    6,
    57,
    7,
    10,
    129,
    54,
    25,
    128,
    183,
    1,
    15,
    50,
    13,
    131,
    155,
    102,
    117,
    11,
    128,
    196,
    138,
    188,
    132,
    47,
    143,
    209,
    130,
    71,
    161,
    185,
    130,
    57,
    7,
    42,
    4,
    2,
    96,
    38,
    10,
    70,
    10,
    40,
    5,
    19,
    130,
    176,
    91,
    101,
    75,
    4,
    57,
    7,
    17,
    64,
    5,
    11,
    2,
    14,
    151,
    248,
    8,
    132,
    214,
    42,
    9,
    162,
    247,
    129,
    31,
    49,
    3,
    17,
    4,
    8,
    129,
    140,
    137,
    4,
    107,
    5,
    13,
    3,
    9,
    7,
    16,
    147,
    96,
    128,
    246,
    10,
    115,
    8,
    110,
    23,
    70,
    128,
    154,
    20,
    12,
    87,
    9,
    25,
    128,
    135,
    129,
    71,
    3,
    133,
    66,
    15,
    21,
    133,
    80,
    43,
    128,
    213,
    45,
    3,
    26,
    4,
    2,
    129,
    112,
    58,
    5,
    1,
    133,
    0,
    128,
    215,
    41,
    76,
    4,
    10,
    4,
    2,
    131,
    17,
    68,
    76,
    61,
    128,
    194,
    60,
    6,
    1,
    4,
    85,
    5,
    27,
    52,
    2,
    129,
    14,
    44,
    4,
    100,
    12,
    86,
    10,
    128,
    174,
    56,
    29,
    13,
    44,
    4,
    9,
    7,
    2,
    14,
    6,
    128,
    154,
    131,
    216,
    8,
    13,
    3,
    13,
    3,
    116,
    12,
    89,
    7,
    12,
    20,
    12,
    4,
    56,
    8,
    10,
    6,
    40,
    8,
    34,
    78,
    129,
    84,
    12,
    21,
    3,
    3,
    5,
    7,
    9,
    25,
    7,
    7,
    9,
    3,
    13,
    7,
    41,
    128,
    203,
    37,
    10,
    132,
    6,
    108,
    105,
    98,
    114,
    97,
    114,
    121,
    47,
    99,
    111,
    114,
    101,
    47,
    115,
    114,
    99,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    47,
    117,
    110,
    105,
    99,
    111,
    100,
    101,
    95,
    100,
    97,
    116,
    97,
    46,
    114,
    115,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    75,
    0,
    0,
    0,
    40,
    0,
    0,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    87,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    247,
    107,
    16,
    0,
    40,
    0,
    0,
    0,
    82,
    0,
    0,
    0,
    62,
    0,
    0,
    0,
    69,
    114,
    114,
    111,
    114,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    131,
    4,
    32,
    0,
    145,
    5,
    96,
    0,
    93,
    19,
    160,
    0,
    18,
    23,
    160,
    30,
    12,
    32,
    224,
    30,
    239,
    44,
    32,
    43,
    42,
    48,
    160,
    43,
    111,
    166,
    96,
    44,
    2,
    168,
    224,
    44,
    30,
    251,
    224,
    45,
    0,
    254,
    160,
    53,
    158,
    255,
    224,
    53,
    253,
    1,
    97,
    54,
    1,
    10,
    161,
    54,
    36,
    13,
    97,
    55,
    171,
    14,
    225,
    56,
    47,
    24,
    33,
    57,
    48,
    28,
    97,
    70,
    243,
    30,
    161,
    74,
    240,
    106,
    97,
    78,
    79,
    111,
    161,
    78,
    157,
    188,
    33,
    79,
    101,
    209,
    225,
    79,
    0,
    218,
    33,
    80,
    0,
    224,
    225,
    81,
    48,
    225,
    97,
    83,
    236,
    226,
    161,
    84,
    208,
    232,
    225,
    84,
    32,
    0,
    46,
    85,
    240,
    1,
    191,
    85,
    0,
    112,
    0,
    7,
    0,
    45,
    1,
    1,
    1,
    2,
    1,
    2,
    1,
    1,
    72,
    11,
    48,
    21,
    16,
    1,
    101,
    7,
    2,
    6,
    2,
    2,
    1,
    4,
    35,
    1,
    30,
    27,
    91,
    11,
    58,
    9,
    9,
    1,
    24,
    4,
    1,
    9,
    1,
    3,
    1,
    5,
    43,
    3,
    119,
    15,
    1,
    32,
    55,
    1,
    1,
    1,
    4,
    8,
    4,
    1,
    3,
    7,
    10,
    2,
    29,
    1,
    58,
    1,
    1,
    1,
    2,
    4,
    8,
    1,
    9,
    1,
    10,
    2,
    26,
    1,
    2,
    2,
    57,
    1,
    4,
    2,
    4,
    2,
    2,
    3,
    3,
    1,
    30,
    2,
    3,
    1,
    11,
    2,
    57,
    1,
    4,
    5,
    1,
    2,
    4,
    1,
    20,
    2,
    22,
    6,
    1,
    1,
    58,
    1,
    1,
    2,
    1,
    4,
    8,
    1,
    7,
    3,
    10,
    2,
    30,
    1,
    59,
    1,
    1,
    1,
    12,
    1,
    9,
    1,
    40,
    1,
    3,
    1,
    57,
    3,
    5,
    3,
    1,
    4,
    7,
    2,
    11,
    2,
    29,
    1,
    58,
    1,
    2,
    1,
    2,
    1,
    3,
    1,
    5,
    2,
    7,
    2,
    11,
    2,
    28,
    2,
    57,
    2,
    1,
    1,
    2,
    4,
    8,
    1,
    9,
    1,
    10,
    2,
    29,
    1,
    72,
    1,
    4,
    1,
    2,
    3,
    1,
    1,
    8,
    1,
    81,
    1,
    2,
    7,
    12,
    8,
    98,
    1,
    2,
    9,
    11,
    6,
    74,
    2,
    27,
    1,
    1,
    1,
    1,
    1,
    55,
    14,
    1,
    5,
    1,
    2,
    5,
    11,
    1,
    36,
    9,
    1,
    102,
    4,
    1,
    6,
    1,
    2,
    2,
    2,
    25,
    2,
    4,
    3,
    16,
    4,
    13,
    1,
    2,
    2,
    6,
    1,
    15,
    1,
    0,
    3,
    0,
    3,
    29,
    3,
    29,
    2,
    30,
    2,
    64,
    2,
    1,
    7,
    8,
    1,
    2,
    11,
    9,
    1,
    45,
    3,
    119,
    2,
    34,
    1,
    118,
    3,
    4,
    2,
    9,
    1,
    6,
    3,
    219,
    2,
    2,
    1,
    58,
    1,
    1,
    7,
    1,
    1,
    1,
    1,
    2,
    8,
    6,
    10,
    2,
    1,
    48,
    17,
    63,
    4,
    48,
    7,
    1,
    1,
    5,
    1,
    40,
    9,
    12,
    2,
    32,
    4,
    2,
    2,
    1,
    3,
    56,
    1,
    1,
    2,
    3,
    1,
    1,
    3,
    58,
    8,
    2,
    2,
    152,
    3,
    1,
    13,
    1,
    7,
    4,
    1,
    6,
    1,
    3,
    2,
    198,
    58,
    1,
    5,
    0,
    1,
    195,
    33,
    0,
    3,
    141,
    1,
    96,
    32,
    0,
    6,
    105,
    2,
    0,
    4,
    1,
    10,
    32,
    2,
    80,
    2,
    0,
    1,
    3,
    1,
    4,
    1,
    25,
    2,
    5,
    1,
    151,
    2,
    26,
    18,
    13,
    1,
    38,
    8,
    25,
    11,
    46,
    3,
    48,
    1,
    2,
    4,
    2,
    2,
    39,
    1,
    67,
    6,
    2,
    2,
    2,
    2,
    12,
    1,
    8,
    1,
    47,
    1,
    51,
    1,
    1,
    3,
    2,
    2,
    5,
    2,
    1,
    1,
    42,
    2,
    8,
    1,
    238,
    1,
    2,
    1,
    4,
    1,
    0,
    1,
    0,
    16,
    16,
    16,
    0,
    2,
    0,
    1,
    226,
    1,
    149,
    5,
    0,
    3,
    1,
    2,
    5,
    4,
    40,
    3,
    4,
    1,
    165,
    2,
    0,
    4,
    0,
    2,
    153,
    11,
    176,
    1,
    54,
    15,
    56,
    3,
    49,
    4,
    2,
    2,
    69,
    3,
    36,
    5,
    1,
    8,
    62,
    1,
    12,
    2,
    52,
    9,
    10,
    4,
    2,
    1,
    95,
    3,
    2,
    1,
    1,
    2,
    6,
    1,
    160,
    1,
    3,
    8,
    21,
    2,
    57,
    2,
    1,
    1,
    1,
    1,
    22,
    1,
    14,
    7,
    3,
    5,
    195,
    8,
    2,
    3,
    1,
    1,
    23,
    1,
    81,
    1,
    2,
    6,
    1,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    235,
    1,
    2,
    4,
    6,
    2,
    1,
    2,
    27,
    2,
    85,
    8,
    2,
    1,
    1,
    2,
    106,
    1,
    1,
    1,
    2,
    6,
    1,
    1,
    101,
    3,
    2,
    4,
    1,
    5,
    0,
    9,
    1,
    2,
    245,
    1,
    10,
    2,
    1,
    1,
    4,
    1,
    144,
    4,
    2,
    2,
    4,
    1,
    32,
    10,
    40,
    6,
    2,
    4,
    8,
    1,
    9,
    6,
    2,
    3,
    46,
    13,
    1,
    2,
    0,
    7,
    1,
    6,
    1,
    1,
    82,
    22,
    2,
    7,
    1,
    2,
    1,
    2,
    122,
    6,
    3,
    1,
    1,
    2,
    1,
    7,
    1,
    1,
    72,
    2,
    3,
    1,
    1,
    1,
    0,
    2,
    0,
    5,
    59,
    7,
    0,
    1,
    63,
    4,
    81,
    1,
    0,
    2,
    0,
    1,
    1,
    3,
    4,
    5,
    8,
    8,
    2,
    7,
    30,
    4,
    148,
    3,
    0,
    55,
    4,
    50,
    8,
    1,
    14,
    1,
    22,
    5,
    1,
    15,
    0,
    7,
    1,
    17,
    2,
    7,
    1,
    2,
    1,
    5,
    0,
    7,
    0,
    4,
    0,
    7,
    109,
    7,
    0,
    96,
    128,
    240,
    0,
    123,
    9,
    112,
    114,
    111,
    100,
    117,
    99,
    101,
    114,
    115,
    2,
    8,
    108,
    97,
    110,
    103,
    117,
    97,
    103,
    101,
    1,
    4,
    82,
    117,
    115,
    116,
    0,
    12,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    101,
    100,
    45,
    98,
    121,
    3,
    5,
    114,
    117,
    115,
    116,
    99,
    29,
    49,
    46,
    53,
    49,
    46,
    48,
    32,
    40,
    50,
    102,
    100,
    55,
    51,
    102,
    97,
    98,
    101,
    32,
    50,
    48,
    50,
    49,
    45,
    48,
    51,
    45,
    50,
    51,
    41,
    6,
    119,
    97,
    108,
    114,
    117,
    115,
    6,
    48,
    46,
    49,
    56,
    46,
    48,
    12,
    119,
    97,
    115,
    109,
    45,
    98,
    105,
    110,
    100,
    103,
    101,
    110,
    18,
    48,
    46,
    50,
    46,
    55,
    51,
    32,
    40,
    51,
    99,
    101,
    102,
    101,
    50,
    99,
    56,
    50,
    41
]);
await init(wasm1);
const importMeta4 = {
    url: "https://deno.land/x/esbuild@v0.14.51/mod.js",
    main: false
};
var __defProp1 = Object.defineProperty;
var __export1 = (target, all)=>{
    for(var name in all)__defProp1(target, name, {
        get: all[name],
        enumerable: true
    });
};
var mod_exports = {};
__export1(mod_exports, {
    analyzeMetafile: ()=>analyzeMetafile1,
    analyzeMetafileSync: ()=>analyzeMetafileSync1,
    build: ()=>build1,
    buildSync: ()=>buildSync1,
    formatMessages: ()=>formatMessages1,
    formatMessagesSync: ()=>formatMessagesSync1,
    initialize: ()=>initialize1,
    serve: ()=>serve1,
    stop: ()=>stop1,
    transform: ()=>transform1,
    transformSync: ()=>transformSync1,
    version: ()=>version1
});
function encodePacket1(packet) {
    let visit = (value)=>{
        if (value === null) {
            bb.write8(0);
        } else if (typeof value === "boolean") {
            bb.write8(1);
            bb.write8(+value);
        } else if (typeof value === "number") {
            bb.write8(2);
            bb.write32(value | 0);
        } else if (typeof value === "string") {
            bb.write8(3);
            bb.write(encodeUTF81(value));
        } else if (value instanceof Uint8Array) {
            bb.write8(4);
            bb.write(value);
        } else if (value instanceof Array) {
            bb.write8(5);
            bb.write32(value.length);
            for (let item of value){
                visit(item);
            }
        } else {
            let keys = Object.keys(value);
            bb.write8(6);
            bb.write32(keys.length);
            for (let key of keys){
                bb.write(encodeUTF81(key));
                visit(value[key]);
            }
        }
    };
    let bb = new ByteBuffer1();
    bb.write32(0);
    bb.write32(packet.id << 1 | +!packet.isRequest);
    visit(packet.value);
    writeUInt32LE1(bb.buf, bb.len - 4, 0);
    return bb.buf.subarray(0, bb.len);
}
function decodePacket1(bytes) {
    let visit = ()=>{
        switch(bb.read8()){
            case 0:
                return null;
            case 1:
                return !!bb.read8();
            case 2:
                return bb.read32();
            case 3:
                return decodeUTF81(bb.read());
            case 4:
                return bb.read();
            case 5:
                {
                    let count = bb.read32();
                    let value2 = [];
                    for(let i = 0; i < count; i++){
                        value2.push(visit());
                    }
                    return value2;
                }
            case 6:
                {
                    let count = bb.read32();
                    let value2 = {};
                    for(let i = 0; i < count; i++){
                        value2[decodeUTF81(bb.read())] = visit();
                    }
                    return value2;
                }
            default:
                throw new Error("Invalid packet");
        }
    };
    let bb = new ByteBuffer1(bytes);
    let id = bb.read32();
    let isRequest = (id & 1) === 0;
    id >>>= 1;
    let value = visit();
    if (bb.ptr !== bytes.length) {
        throw new Error("Invalid packet");
    }
    return {
        id,
        isRequest,
        value
    };
}
var ByteBuffer1 = class {
    constructor(buf = new Uint8Array(1024)){
        this.buf = buf;
    }
    len = 0;
    ptr = 0;
    _write(delta) {
        if (this.len + delta > this.buf.length) {
            let clone = new Uint8Array((this.len + delta) * 2);
            clone.set(this.buf);
            this.buf = clone;
        }
        this.len += delta;
        return this.len - delta;
    }
    write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
    }
    write32(value) {
        let offset = this._write(4);
        writeUInt32LE1(this.buf, value, offset);
    }
    write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE1(this.buf, bytes.length, offset);
        this.buf.set(bytes, offset + 4);
    }
    _read(delta) {
        if (this.ptr + delta > this.buf.length) {
            throw new Error("Invalid packet");
        }
        this.ptr += delta;
        return this.ptr - delta;
    }
    read8() {
        return this.buf[this._read(1)];
    }
    read32() {
        return readUInt32LE1(this.buf, this._read(4));
    }
    read() {
        let length = this.read32();
        let bytes = new Uint8Array(length);
        let ptr = this._read(bytes.length);
        bytes.set(this.buf.subarray(ptr, ptr + length));
        return bytes;
    }
};
var encodeUTF81;
var decodeUTF81;
if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
    let encoder = new TextEncoder();
    let decoder = new TextDecoder();
    encodeUTF81 = (text)=>encoder.encode(text);
    decodeUTF81 = (bytes)=>decoder.decode(bytes);
} else if (typeof Buffer !== "undefined") {
    encodeUTF81 = (text)=>{
        let buffer = Buffer.from(text);
        if (!(buffer instanceof Uint8Array)) {
            buffer = new Uint8Array(buffer);
        }
        return buffer;
    };
    decodeUTF81 = (bytes)=>{
        let { buffer , byteOffset , byteLength  } = bytes;
        return Buffer.from(buffer, byteOffset, byteLength).toString();
    };
} else {
    throw new Error("No UTF-8 codec found");
}
function readUInt32LE1(buffer, offset) {
    return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
}
function writeUInt32LE1(buffer, value, offset) {
    buffer[offset++] = value;
    buffer[offset++] = value >> 8;
    buffer[offset++] = value >> 16;
    buffer[offset++] = value >> 24;
}
function validateTarget1(target) {
    target += "";
    if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
    return target;
}
var canBeAnything1 = ()=>null;
var mustBeBoolean1 = (value)=>typeof value === "boolean" ? null : "a boolean";
var mustBeBooleanOrObject1 = (value)=>typeof value === "boolean" || typeof value === "object" && !Array.isArray(value) ? null : "a boolean or an object";
var mustBeString1 = (value)=>typeof value === "string" ? null : "a string";
var mustBeRegExp1 = (value)=>value instanceof RegExp ? null : "a RegExp object";
var mustBeInteger1 = (value)=>typeof value === "number" && value === (value | 0) ? null : "an integer";
var mustBeFunction1 = (value)=>typeof value === "function" ? null : "a function";
var mustBeArray1 = (value)=>Array.isArray(value) ? null : "an array";
var mustBeObject1 = (value)=>typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object";
var mustBeWebAssemblyModule1 = (value)=>value instanceof WebAssembly.Module ? null : "a WebAssembly.Module";
var mustBeArrayOrRecord1 = (value)=>typeof value === "object" && value !== null ? null : "an array or an object";
var mustBeObjectOrNull1 = (value)=>typeof value === "object" && !Array.isArray(value) ? null : "an object or null";
var mustBeStringOrBoolean1 = (value)=>typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean";
var mustBeStringOrObject1 = (value)=>typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object";
var mustBeStringOrArray1 = (value)=>typeof value === "string" || Array.isArray(value) ? null : "a string or an array";
var mustBeStringOrUint8Array1 = (value)=>typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
function getFlag1(object, keys, key, mustBeFn) {
    let value = object[key];
    keys[key + ""] = true;
    if (value === void 0) return void 0;
    let mustBe = mustBeFn(value);
    if (mustBe !== null) throw new Error(`"${key}" must be ${mustBe}`);
    return value;
}
function checkForInvalidFlags1(object, keys, where) {
    for(let key in object){
        if (!(key in keys)) {
            throw new Error(`Invalid option ${where}: "${key}"`);
        }
    }
}
function validateInitializeOptions1(options) {
    let keys = Object.create(null);
    let wasmURL = getFlag1(options, keys, "wasmURL", mustBeString1);
    let wasmModule = getFlag1(options, keys, "wasmModule", mustBeWebAssemblyModule1);
    let worker = getFlag1(options, keys, "worker", mustBeBoolean1);
    checkForInvalidFlags1(options, keys, "in initialize() call");
    return {
        wasmURL,
        wasmModule,
        worker
    };
}
function validateMangleCache1(mangleCache) {
    let validated;
    if (mangleCache !== void 0) {
        validated = Object.create(null);
        for (let key of Object.keys(mangleCache)){
            let value = mangleCache[key];
            if (typeof value === "string" || value === false) {
                validated[key] = value;
            } else {
                throw new Error(`Expected ${JSON.stringify(key)} in mangle cache to map to either a string or false`);
            }
        }
    }
    return validated;
}
function pushLogFlags1(flags, options, keys, isTTY, logLevelDefault) {
    let color = getFlag1(options, keys, "color", mustBeBoolean1);
    let logLevel = getFlag1(options, keys, "logLevel", mustBeString1);
    let logLimit = getFlag1(options, keys, "logLimit", mustBeInteger1);
    if (color !== void 0) flags.push(`--color=${color}`);
    else if (isTTY) flags.push(`--color=true`);
    flags.push(`--log-level=${logLevel || logLevelDefault}`);
    flags.push(`--log-limit=${logLimit || 0}`);
}
function pushCommonFlags1(flags, options, keys) {
    let legalComments = getFlag1(options, keys, "legalComments", mustBeString1);
    let sourceRoot = getFlag1(options, keys, "sourceRoot", mustBeString1);
    let sourcesContent = getFlag1(options, keys, "sourcesContent", mustBeBoolean1);
    let target = getFlag1(options, keys, "target", mustBeStringOrArray1);
    let format = getFlag1(options, keys, "format", mustBeString1);
    let globalName = getFlag1(options, keys, "globalName", mustBeString1);
    let mangleProps = getFlag1(options, keys, "mangleProps", mustBeRegExp1);
    let reserveProps = getFlag1(options, keys, "reserveProps", mustBeRegExp1);
    let mangleQuoted = getFlag1(options, keys, "mangleQuoted", mustBeBoolean1);
    let minify = getFlag1(options, keys, "minify", mustBeBoolean1);
    let minifySyntax = getFlag1(options, keys, "minifySyntax", mustBeBoolean1);
    let minifyWhitespace = getFlag1(options, keys, "minifyWhitespace", mustBeBoolean1);
    let minifyIdentifiers = getFlag1(options, keys, "minifyIdentifiers", mustBeBoolean1);
    let drop = getFlag1(options, keys, "drop", mustBeArray1);
    let charset = getFlag1(options, keys, "charset", mustBeString1);
    let treeShaking = getFlag1(options, keys, "treeShaking", mustBeBoolean1);
    let ignoreAnnotations = getFlag1(options, keys, "ignoreAnnotations", mustBeBoolean1);
    let jsx = getFlag1(options, keys, "jsx", mustBeString1);
    let jsxFactory = getFlag1(options, keys, "jsxFactory", mustBeString1);
    let jsxFragment = getFlag1(options, keys, "jsxFragment", mustBeString1);
    let jsxImportSource = getFlag1(options, keys, "jsxImportSource", mustBeString1);
    let jsxDev = getFlag1(options, keys, "jsxDev", mustBeBoolean1);
    let define = getFlag1(options, keys, "define", mustBeObject1);
    let logOverride = getFlag1(options, keys, "logOverride", mustBeObject1);
    let supported = getFlag1(options, keys, "supported", mustBeObject1);
    let pure = getFlag1(options, keys, "pure", mustBeArray1);
    let keepNames = getFlag1(options, keys, "keepNames", mustBeBoolean1);
    let platform = getFlag1(options, keys, "platform", mustBeString1);
    if (legalComments) flags.push(`--legal-comments=${legalComments}`);
    if (sourceRoot !== void 0) flags.push(`--source-root=${sourceRoot}`);
    if (sourcesContent !== void 0) flags.push(`--sources-content=${sourcesContent}`);
    if (target) {
        if (Array.isArray(target)) flags.push(`--target=${Array.from(target).map(validateTarget1).join(",")}`);
        else flags.push(`--target=${validateTarget1(target)}`);
    }
    if (format) flags.push(`--format=${format}`);
    if (globalName) flags.push(`--global-name=${globalName}`);
    if (platform) flags.push(`--platform=${platform}`);
    if (minify) flags.push("--minify");
    if (minifySyntax) flags.push("--minify-syntax");
    if (minifyWhitespace) flags.push("--minify-whitespace");
    if (minifyIdentifiers) flags.push("--minify-identifiers");
    if (charset) flags.push(`--charset=${charset}`);
    if (treeShaking !== void 0) flags.push(`--tree-shaking=${treeShaking}`);
    if (ignoreAnnotations) flags.push(`--ignore-annotations`);
    if (drop) for (let what of drop)flags.push(`--drop:${what}`);
    if (mangleProps) flags.push(`--mangle-props=${mangleProps.source}`);
    if (reserveProps) flags.push(`--reserve-props=${reserveProps.source}`);
    if (mangleQuoted !== void 0) flags.push(`--mangle-quoted=${mangleQuoted}`);
    if (jsx) flags.push(`--jsx=${jsx}`);
    if (jsxFactory) flags.push(`--jsx-factory=${jsxFactory}`);
    if (jsxFragment) flags.push(`--jsx-fragment=${jsxFragment}`);
    if (jsxImportSource) flags.push(`--jsx-import-source=${jsxImportSource}`);
    if (jsxDev) flags.push(`--jsx-dev`);
    if (define) {
        for(let key in define){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
            flags.push(`--define:${key}=${define[key]}`);
        }
    }
    if (logOverride) {
        for(let key in logOverride){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid log override: ${key}`);
            flags.push(`--log-override:${key}=${logOverride[key]}`);
        }
    }
    if (supported) {
        for(let key in supported){
            if (key.indexOf("=") >= 0) throw new Error(`Invalid supported: ${key}`);
            flags.push(`--supported:${key}=${supported[key]}`);
        }
    }
    if (pure) for (let fn of pure)flags.push(`--pure:${fn}`);
    if (keepNames) flags.push(`--keep-names`);
}
function flagsForBuildOptions1(callName, options, isTTY, logLevelDefault, writeDefault) {
    let flags = [];
    let entries = [];
    let keys = Object.create(null);
    let stdinContents = null;
    let stdinResolveDir = null;
    let watchMode = null;
    pushLogFlags1(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags1(flags, options, keys);
    let sourcemap = getFlag1(options, keys, "sourcemap", mustBeStringOrBoolean1);
    let bundle = getFlag1(options, keys, "bundle", mustBeBoolean1);
    let watch = getFlag1(options, keys, "watch", mustBeBooleanOrObject1);
    let splitting = getFlag1(options, keys, "splitting", mustBeBoolean1);
    let preserveSymlinks = getFlag1(options, keys, "preserveSymlinks", mustBeBoolean1);
    let metafile = getFlag1(options, keys, "metafile", mustBeBoolean1);
    let outfile = getFlag1(options, keys, "outfile", mustBeString1);
    let outdir = getFlag1(options, keys, "outdir", mustBeString1);
    let outbase = getFlag1(options, keys, "outbase", mustBeString1);
    let tsconfig = getFlag1(options, keys, "tsconfig", mustBeString1);
    let resolveExtensions = getFlag1(options, keys, "resolveExtensions", mustBeArray1);
    let nodePathsInput = getFlag1(options, keys, "nodePaths", mustBeArray1);
    let mainFields = getFlag1(options, keys, "mainFields", mustBeArray1);
    let conditions = getFlag1(options, keys, "conditions", mustBeArray1);
    let external = getFlag1(options, keys, "external", mustBeArray1);
    let loader = getFlag1(options, keys, "loader", mustBeObject1);
    let outExtension = getFlag1(options, keys, "outExtension", mustBeObject1);
    let publicPath = getFlag1(options, keys, "publicPath", mustBeString1);
    let entryNames = getFlag1(options, keys, "entryNames", mustBeString1);
    let chunkNames = getFlag1(options, keys, "chunkNames", mustBeString1);
    let assetNames = getFlag1(options, keys, "assetNames", mustBeString1);
    let inject = getFlag1(options, keys, "inject", mustBeArray1);
    let banner = getFlag1(options, keys, "banner", mustBeObject1);
    let footer = getFlag1(options, keys, "footer", mustBeObject1);
    let entryPoints = getFlag1(options, keys, "entryPoints", mustBeArrayOrRecord1);
    let absWorkingDir = getFlag1(options, keys, "absWorkingDir", mustBeString1);
    let stdin = getFlag1(options, keys, "stdin", mustBeObject1);
    let write = getFlag1(options, keys, "write", mustBeBoolean1) ?? writeDefault;
    let allowOverwrite = getFlag1(options, keys, "allowOverwrite", mustBeBoolean1);
    let incremental = getFlag1(options, keys, "incremental", mustBeBoolean1) === true;
    let mangleCache = getFlag1(options, keys, "mangleCache", mustBeObject1);
    keys.plugins = true;
    checkForInvalidFlags1(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
    if (bundle) flags.push("--bundle");
    if (allowOverwrite) flags.push("--allow-overwrite");
    if (watch) {
        flags.push("--watch");
        if (typeof watch === "boolean") {
            watchMode = {};
        } else {
            let watchKeys = Object.create(null);
            let onRebuild = getFlag1(watch, watchKeys, "onRebuild", mustBeFunction1);
            checkForInvalidFlags1(watch, watchKeys, `on "watch" in ${callName}() call`);
            watchMode = {
                onRebuild
            };
        }
    }
    if (splitting) flags.push("--splitting");
    if (preserveSymlinks) flags.push("--preserve-symlinks");
    if (metafile) flags.push(`--metafile`);
    if (outfile) flags.push(`--outfile=${outfile}`);
    if (outdir) flags.push(`--outdir=${outdir}`);
    if (outbase) flags.push(`--outbase=${outbase}`);
    if (tsconfig) flags.push(`--tsconfig=${tsconfig}`);
    if (resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
            values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
    }
    if (publicPath) flags.push(`--public-path=${publicPath}`);
    if (entryNames) flags.push(`--entry-names=${entryNames}`);
    if (chunkNames) flags.push(`--chunk-names=${chunkNames}`);
    if (assetNames) flags.push(`--asset-names=${assetNames}`);
    if (mainFields) {
        let values = [];
        for (let value of mainFields){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
            values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
    }
    if (conditions) {
        let values = [];
        for (let value of conditions){
            value += "";
            if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
            values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
    }
    if (external) for (let name of external)flags.push(`--external:${name}`);
    if (banner) {
        for(let type in banner){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
            flags.push(`--banner:${type}=${banner[type]}`);
        }
    }
    if (footer) {
        for(let type in footer){
            if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
            flags.push(`--footer:${type}=${footer[type]}`);
        }
    }
    if (inject) for (let path of inject)flags.push(`--inject:${path}`);
    if (loader) {
        for(let ext in loader){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
            flags.push(`--loader:${ext}=${loader[ext]}`);
        }
    }
    if (outExtension) {
        for(let ext in outExtension){
            if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
            flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
    }
    if (entryPoints) {
        if (Array.isArray(entryPoints)) {
            for (let entryPoint of entryPoints){
                entries.push([
                    "",
                    entryPoint + ""
                ]);
            }
        } else {
            for (let [key, value] of Object.entries(entryPoints)){
                entries.push([
                    key + "",
                    value + ""
                ]);
            }
        }
    }
    if (stdin) {
        let stdinKeys = Object.create(null);
        let contents = getFlag1(stdin, stdinKeys, "contents", mustBeString1);
        let resolveDir = getFlag1(stdin, stdinKeys, "resolveDir", mustBeString1);
        let sourcefile = getFlag1(stdin, stdinKeys, "sourcefile", mustBeString1);
        let loader2 = getFlag1(stdin, stdinKeys, "loader", mustBeString1);
        checkForInvalidFlags1(stdin, stdinKeys, 'in "stdin" object');
        if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
        if (loader2) flags.push(`--loader=${loader2}`);
        if (resolveDir) stdinResolveDir = resolveDir + "";
        stdinContents = contents ? contents + "" : "";
    }
    let nodePaths = [];
    if (nodePathsInput) {
        for (let value of nodePathsInput){
            value += "";
            nodePaths.push(value);
        }
    }
    return {
        entries,
        flags,
        write,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode,
        mangleCache: validateMangleCache1(mangleCache)
    };
}
function flagsForTransformOptions1(callName, options, isTTY, logLevelDefault) {
    let flags = [];
    let keys = Object.create(null);
    pushLogFlags1(flags, options, keys, isTTY, logLevelDefault);
    pushCommonFlags1(flags, options, keys);
    let sourcemap = getFlag1(options, keys, "sourcemap", mustBeStringOrBoolean1);
    let tsconfigRaw = getFlag1(options, keys, "tsconfigRaw", mustBeStringOrObject1);
    let sourcefile = getFlag1(options, keys, "sourcefile", mustBeString1);
    let loader = getFlag1(options, keys, "loader", mustBeString1);
    let banner = getFlag1(options, keys, "banner", mustBeString1);
    let footer = getFlag1(options, keys, "footer", mustBeString1);
    let mangleCache = getFlag1(options, keys, "mangleCache", mustBeObject1);
    checkForInvalidFlags1(options, keys, `in ${callName}() call`);
    if (sourcemap) flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
    if (tsconfigRaw) flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
    if (sourcefile) flags.push(`--sourcefile=${sourcefile}`);
    if (loader) flags.push(`--loader=${loader}`);
    if (banner) flags.push(`--banner=${banner}`);
    if (footer) flags.push(`--footer=${footer}`);
    return {
        flags,
        mangleCache: validateMangleCache1(mangleCache)
    };
}
function createChannel1(streamIn) {
    let responseCallbacks = new Map();
    let pluginCallbacks = new Map();
    let watchCallbacks = new Map();
    let serveCallbacks = new Map();
    let closeData = null;
    let nextRequestID = 0;
    let nextBuildKey = 0;
    let stdout = new Uint8Array(16 * 1024);
    let stdoutUsed = 0;
    let readFromStdout = (chunk)=>{
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
            let swap = new Uint8Array(limit * 2);
            swap.set(stdout);
            stdout = swap;
        }
        stdout.set(chunk, stdoutUsed);
        stdoutUsed += chunk.length;
        let offset = 0;
        while(offset + 4 <= stdoutUsed){
            let length = readUInt32LE1(stdout, offset);
            if (offset + 4 + length > stdoutUsed) {
                break;
            }
            offset += 4;
            handleIncomingPacket(stdout.subarray(offset, offset + length));
            offset += length;
        }
        if (offset > 0) {
            stdout.copyWithin(0, offset, stdoutUsed);
            stdoutUsed -= offset;
        }
    };
    let afterClose = (error)=>{
        closeData = {
            reason: error ? ": " + (error.message || error) : ""
        };
        const text = "The service was stopped" + closeData.reason;
        for (let callback of responseCallbacks.values()){
            callback(text, null);
        }
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values()){
            callbacks.onWait(text);
        }
        serveCallbacks.clear();
        for (let callback of watchCallbacks.values()){
            try {
                callback(new Error(text), null);
            } catch (e) {
                console.error(e);
            }
        }
        watchCallbacks.clear();
    };
    let sendRequest = (refs, value, callback)=>{
        if (closeData) return callback("The service is no longer running" + closeData.reason, null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response)=>{
            try {
                callback(error, response);
            } finally{
                if (refs) refs.unref();
            }
        });
        if (refs) refs.ref();
        streamIn.writeToStdin(encodePacket1({
            id,
            isRequest: true,
            value
        }));
    };
    let sendResponse = (id, value)=>{
        if (closeData) throw new Error("The service is no longer running" + closeData.reason);
        streamIn.writeToStdin(encodePacket1({
            id,
            isRequest: false,
            value
        }));
    };
    let handleRequest = async (id, request)=>{
        try {
            switch(request.command){
                case "ping":
                    {
                        sendResponse(id, {});
                        break;
                    }
                case "on-start":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "on-resolve":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "on-load":
                    {
                        let callback = pluginCallbacks.get(request.key);
                        if (!callback) sendResponse(id, {});
                        else sendResponse(id, await callback(request));
                        break;
                    }
                case "serve-request":
                    {
                        let callbacks = serveCallbacks.get(request.key);
                        if (callbacks && callbacks.onRequest) callbacks.onRequest(request.args);
                        sendResponse(id, {});
                        break;
                    }
                case "serve-wait":
                    {
                        let callbacks = serveCallbacks.get(request.key);
                        if (callbacks) callbacks.onWait(request.error);
                        sendResponse(id, {});
                        break;
                    }
                case "watch-rebuild":
                    {
                        let callback = watchCallbacks.get(request.key);
                        try {
                            if (callback) callback(null, request.args);
                        } catch (err) {
                            console.error(err);
                        }
                        sendResponse(id, {});
                        break;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        } catch (e) {
            sendResponse(id, {
                errors: [
                    extractErrorMessageV81(e, streamIn, null, void 0, "")
                ]
            });
        }
    };
    let isFirstPacket = true;
    let handleIncomingPacket = (bytes)=>{
        if (isFirstPacket) {
            isFirstPacket = false;
            let binaryVersion = String.fromCharCode(...bytes);
            if (binaryVersion !== "0.14.51") {
                throw new Error(`Cannot start service: Host version "${"0.14.51"}" does not match binary version ${JSON.stringify(binaryVersion)}`);
            }
            return;
        }
        let packet = decodePacket1(bytes);
        if (packet.isRequest) {
            handleRequest(packet.id, packet.value);
        } else {
            let callback = responseCallbacks.get(packet.id);
            responseCallbacks.delete(packet.id);
            if (packet.value.error) callback(packet.value.error, {});
            else callback(null, packet.value);
        }
    };
    let handlePlugins = async (initialOptions, plugins, buildKey, stash, refs)=>{
        let onStartCallbacks = [];
        let onEndCallbacks = [];
        let onResolveCallbacks = {};
        let onLoadCallbacks = {};
        let nextCallbackID = 0;
        let i = 0;
        let requestPlugins = [];
        let isSetupDone = false;
        plugins = [
            ...plugins
        ];
        for (let item of plugins){
            let keys = {};
            if (typeof item !== "object") throw new Error(`Plugin at index ${i} must be an object`);
            const name = getFlag1(item, keys, "name", mustBeString1);
            if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i} is missing a name`);
            try {
                let setup = getFlag1(item, keys, "setup", mustBeFunction1);
                if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
                checkForInvalidFlags1(item, keys, `on plugin ${JSON.stringify(name)}`);
                let plugin = {
                    name,
                    onResolve: [],
                    onLoad: []
                };
                i++;
                let resolve = (path, options = {})=>{
                    if (!isSetupDone) throw new Error('Cannot call "resolve" before plugin setup has completed');
                    if (typeof path !== "string") throw new Error(`The path to resolve must be a string`);
                    let keys2 = Object.create(null);
                    let pluginName = getFlag1(options, keys2, "pluginName", mustBeString1);
                    let importer = getFlag1(options, keys2, "importer", mustBeString1);
                    let namespace = getFlag1(options, keys2, "namespace", mustBeString1);
                    let resolveDir = getFlag1(options, keys2, "resolveDir", mustBeString1);
                    let kind = getFlag1(options, keys2, "kind", mustBeString1);
                    let pluginData = getFlag1(options, keys2, "pluginData", canBeAnything1);
                    checkForInvalidFlags1(options, keys2, "in resolve() call");
                    return new Promise((resolve2, reject)=>{
                        const request = {
                            command: "resolve",
                            path,
                            key: buildKey,
                            pluginName: name
                        };
                        if (pluginName != null) request.pluginName = pluginName;
                        if (importer != null) request.importer = importer;
                        if (namespace != null) request.namespace = namespace;
                        if (resolveDir != null) request.resolveDir = resolveDir;
                        if (kind != null) request.kind = kind;
                        if (pluginData != null) request.pluginData = stash.store(pluginData);
                        sendRequest(refs, request, (error, response)=>{
                            if (error !== null) reject(new Error(error));
                            else resolve2({
                                errors: replaceDetailsInMessages1(response.errors, stash),
                                warnings: replaceDetailsInMessages1(response.warnings, stash),
                                path: response.path,
                                external: response.external,
                                sideEffects: response.sideEffects,
                                namespace: response.namespace,
                                suffix: response.suffix,
                                pluginData: stash.load(response.pluginData)
                            });
                        });
                    });
                };
                let promise = setup({
                    initialOptions,
                    resolve,
                    onStart (callback2) {
                        let registeredText = `This error came from the "onStart" callback registered here:`;
                        let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onStart");
                        onStartCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onEnd (callback2) {
                        let registeredText = `This error came from the "onEnd" callback registered here:`;
                        let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onEnd");
                        onEndCallbacks.push({
                            name,
                            callback: callback2,
                            note: registeredNote
                        });
                    },
                    onResolve (options, callback2) {
                        let registeredText = `This error came from the "onResolve" callback registered here:`;
                        let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onResolve");
                        let keys2 = {};
                        let filter = getFlag1(options, keys2, "filter", mustBeRegExp1);
                        let namespace = getFlag1(options, keys2, "namespace", mustBeString1);
                        checkForInvalidFlags1(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onResolve() call is missing a filter`);
                        let id = nextCallbackID++;
                        onResolveCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onResolve.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    },
                    onLoad (options, callback2) {
                        let registeredText = `This error came from the "onLoad" callback registered here:`;
                        let registeredNote = extractCallerV81(new Error(registeredText), streamIn, "onLoad");
                        let keys2 = {};
                        let filter = getFlag1(options, keys2, "filter", mustBeRegExp1);
                        let namespace = getFlag1(options, keys2, "namespace", mustBeString1);
                        checkForInvalidFlags1(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);
                        if (filter == null) throw new Error(`onLoad() call is missing a filter`);
                        let id = nextCallbackID++;
                        onLoadCallbacks[id] = {
                            name,
                            callback: callback2,
                            note: registeredNote
                        };
                        plugin.onLoad.push({
                            id,
                            filter: filter.source,
                            namespace: namespace || ""
                        });
                    },
                    esbuild: streamIn.esbuild
                });
                if (promise) await promise;
                requestPlugins.push(plugin);
            } catch (e) {
                return {
                    ok: false,
                    error: e,
                    pluginName: name
                };
            }
        }
        const callback = async (request)=>{
            switch(request.command){
                case "on-start":
                    {
                        let response = {
                            errors: [],
                            warnings: []
                        };
                        await Promise.all(onStartCallbacks.map(async ({ name , callback: callback2 , note  })=>{
                            try {
                                let result = await callback2();
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                    let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                    checkForInvalidFlags1(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);
                                    if (errors != null) response.errors.push(...sanitizeMessages1(errors, "errors", stash, name));
                                    if (warnings != null) response.warnings.push(...sanitizeMessages1(warnings, "warnings", stash, name));
                                }
                            } catch (e) {
                                response.errors.push(extractErrorMessageV81(e, streamIn, stash, note && note(), name));
                            }
                        }));
                        return response;
                    }
                case "on-resolve":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onResolveCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    importer: request.importer,
                                    namespace: request.namespace,
                                    resolveDir: request.resolveDir,
                                    kind: request.kind,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag1(result, keys, "pluginName", mustBeString1);
                                    let path = getFlag1(result, keys, "path", mustBeString1);
                                    let namespace = getFlag1(result, keys, "namespace", mustBeString1);
                                    let suffix = getFlag1(result, keys, "suffix", mustBeString1);
                                    let external = getFlag1(result, keys, "external", mustBeBoolean1);
                                    let sideEffects = getFlag1(result, keys, "sideEffects", mustBeBoolean1);
                                    let pluginData = getFlag1(result, keys, "pluginData", canBeAnything1);
                                    let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                    let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                    let watchFiles = getFlag1(result, keys, "watchFiles", mustBeArray1);
                                    let watchDirs = getFlag1(result, keys, "watchDirs", mustBeArray1);
                                    checkForInvalidFlags1(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (path != null) response.path = path;
                                    if (namespace != null) response.namespace = namespace;
                                    if (suffix != null) response.suffix = suffix;
                                    if (external != null) response.external = external;
                                    if (sideEffects != null) response.sideEffects = sideEffects;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (errors != null) response.errors = sanitizeMessages1(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages1(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray1(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray1(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV81(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                case "on-load":
                    {
                        let response = {}, name = "", callback2, note;
                        for (let id of request.ids){
                            try {
                                ({ name , callback: callback2 , note  } = onLoadCallbacks[id]);
                                let result = await callback2({
                                    path: request.path,
                                    namespace: request.namespace,
                                    suffix: request.suffix,
                                    pluginData: stash.load(request.pluginData)
                                });
                                if (result != null) {
                                    if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                                    let keys = {};
                                    let pluginName = getFlag1(result, keys, "pluginName", mustBeString1);
                                    let contents = getFlag1(result, keys, "contents", mustBeStringOrUint8Array1);
                                    let resolveDir = getFlag1(result, keys, "resolveDir", mustBeString1);
                                    let pluginData = getFlag1(result, keys, "pluginData", canBeAnything1);
                                    let loader = getFlag1(result, keys, "loader", mustBeString1);
                                    let errors = getFlag1(result, keys, "errors", mustBeArray1);
                                    let warnings = getFlag1(result, keys, "warnings", mustBeArray1);
                                    let watchFiles = getFlag1(result, keys, "watchFiles", mustBeArray1);
                                    let watchDirs = getFlag1(result, keys, "watchDirs", mustBeArray1);
                                    checkForInvalidFlags1(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);
                                    response.id = id;
                                    if (pluginName != null) response.pluginName = pluginName;
                                    if (contents instanceof Uint8Array) response.contents = contents;
                                    else if (contents != null) response.contents = encodeUTF81(contents);
                                    if (resolveDir != null) response.resolveDir = resolveDir;
                                    if (pluginData != null) response.pluginData = stash.store(pluginData);
                                    if (loader != null) response.loader = loader;
                                    if (errors != null) response.errors = sanitizeMessages1(errors, "errors", stash, name);
                                    if (warnings != null) response.warnings = sanitizeMessages1(warnings, "warnings", stash, name);
                                    if (watchFiles != null) response.watchFiles = sanitizeStringArray1(watchFiles, "watchFiles");
                                    if (watchDirs != null) response.watchDirs = sanitizeStringArray1(watchDirs, "watchDirs");
                                    break;
                                }
                            } catch (e) {
                                return {
                                    id,
                                    errors: [
                                        extractErrorMessageV81(e, streamIn, stash, note && note(), name)
                                    ]
                                };
                            }
                        }
                        return response;
                    }
                default:
                    throw new Error(`Invalid command: ` + request.command);
            }
        };
        let runOnEndCallbacks = (result, logPluginError, done)=>done();
        if (onEndCallbacks.length > 0) {
            runOnEndCallbacks = (result, logPluginError, done)=>{
                (async ()=>{
                    for (const { name , callback: callback2 , note  } of onEndCallbacks){
                        try {
                            await callback2(result);
                        } catch (e) {
                            result.errors.push(await new Promise((resolve)=>logPluginError(e, name, note && note(), resolve)));
                        }
                    }
                })().then(done);
            };
        }
        isSetupDone = true;
        let refCount = 0;
        return {
            ok: true,
            requestPlugins,
            runOnEndCallbacks,
            pluginRefs: {
                ref () {
                    if (++refCount === 1) pluginCallbacks.set(buildKey, callback);
                },
                unref () {
                    if (--refCount === 0) pluginCallbacks.delete(buildKey);
                }
            }
        };
    };
    let buildServeData = (refs, options, request, key)=>{
        let keys = {};
        let port = getFlag1(options, keys, "port", mustBeInteger1);
        let host = getFlag1(options, keys, "host", mustBeString1);
        let servedir = getFlag1(options, keys, "servedir", mustBeString1);
        let onRequest = getFlag1(options, keys, "onRequest", mustBeFunction1);
        let onWait;
        let wait = new Promise((resolve, reject)=>{
            onWait = (error)=>{
                serveCallbacks.delete(key);
                if (error !== null) reject(new Error(error));
                else resolve();
            };
        });
        request.serve = {};
        checkForInvalidFlags1(options, keys, `in serve() call`);
        if (port !== void 0) request.serve.port = port;
        if (host !== void 0) request.serve.host = host;
        if (servedir !== void 0) request.serve.servedir = servedir;
        serveCallbacks.set(key, {
            onRequest,
            onWait
        });
        return {
            wait,
            stop () {
                sendRequest(refs, {
                    command: "serve-stop",
                    key
                }, ()=>{});
            }
        };
    };
    const buildLogLevelDefault = "warning";
    const transformLogLevelDefault = "silent";
    let buildOrServe = (args)=>{
        let key = nextBuildKey++;
        const details = createObjectStash1();
        let plugins;
        let { refs , options , isTTY , callback  } = args;
        if (typeof options === "object") {
            let value = options.plugins;
            if (value !== void 0) {
                if (!Array.isArray(value)) throw new Error(`"plugins" must be an array`);
                plugins = value;
            }
        }
        let logPluginError = (e, pluginName, note, done)=>{
            let flags = [];
            try {
                pushLogFlags1(flags, options, {}, isTTY, buildLogLevelDefault);
            } catch  {}
            const message = extractErrorMessageV81(e, streamIn, details, note, pluginName);
            sendRequest(refs, {
                command: "error",
                flags,
                error: message
            }, ()=>{
                message.detail = details.load(message.detail);
                done(message);
            });
        };
        let handleError = (e, pluginName)=>{
            logPluginError(e, pluginName, void 0, (error)=>{
                callback(failureErrorWithLog1("Build failed", [
                    error
                ], []), null);
            });
        };
        if (plugins && plugins.length > 0) {
            if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
            handlePlugins(options, plugins, key, details, refs).then((result)=>{
                if (!result.ok) {
                    handleError(result.error, result.pluginName);
                } else {
                    try {
                        buildOrServeContinue({
                            ...args,
                            key,
                            details,
                            logPluginError,
                            requestPlugins: result.requestPlugins,
                            runOnEndCallbacks: result.runOnEndCallbacks,
                            pluginRefs: result.pluginRefs
                        });
                    } catch (e) {
                        handleError(e, "");
                    }
                }
            }, (e)=>handleError(e, ""));
        } else {
            try {
                buildOrServeContinue({
                    ...args,
                    key,
                    details,
                    logPluginError,
                    requestPlugins: null,
                    runOnEndCallbacks: (result, logPluginError2, done)=>done(),
                    pluginRefs: null
                });
            } catch (e) {
                handleError(e, "");
            }
        }
    };
    let buildOrServeContinue = ({ callName , refs: callerRefs , serveOptions , options , isTTY , defaultWD: defaultWD2 , callback , key , details , logPluginError , requestPlugins , runOnEndCallbacks , pluginRefs  })=>{
        const refs = {
            ref () {
                if (pluginRefs) pluginRefs.ref();
                if (callerRefs) callerRefs.ref();
            },
            unref () {
                if (pluginRefs) pluginRefs.unref();
                if (callerRefs) callerRefs.unref();
            }
        };
        let writeDefault = !streamIn.isWriteUnavailable;
        let { entries , flags , write , stdinContents , stdinResolveDir , absWorkingDir , incremental , nodePaths , watch , mangleCache  } = flagsForBuildOptions1(callName, options, isTTY, buildLogLevelDefault, writeDefault);
        let request = {
            command: "build",
            key,
            entries,
            flags,
            write,
            stdinContents,
            stdinResolveDir,
            absWorkingDir: absWorkingDir || defaultWD2,
            incremental,
            nodePaths
        };
        if (requestPlugins) request.plugins = requestPlugins;
        if (mangleCache) request.mangleCache = mangleCache;
        let serve2 = serveOptions && buildServeData(refs, serveOptions, request, key);
        let rebuild;
        let stop2;
        let copyResponseToResult = (response, result)=>{
            if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles1);
            if (response.metafile) result.metafile = JSON.parse(response.metafile);
            if (response.mangleCache) result.mangleCache = response.mangleCache;
            if (response.writeToStdout !== void 0) console.log(decodeUTF81(response.writeToStdout).replace(/\n$/, ""));
        };
        let buildResponseToResult = (response, callback2)=>{
            let result = {
                errors: replaceDetailsInMessages1(response.errors, details),
                warnings: replaceDetailsInMessages1(response.warnings, details)
            };
            copyResponseToResult(response, result);
            runOnEndCallbacks(result, logPluginError, ()=>{
                if (result.errors.length > 0) {
                    return callback2(failureErrorWithLog1("Build failed", result.errors, result.warnings), null);
                }
                if (response.rebuild) {
                    if (!rebuild) {
                        let isDisposed = false;
                        rebuild = ()=>new Promise((resolve, reject)=>{
                                if (isDisposed || closeData) throw new Error("Cannot rebuild");
                                sendRequest(refs, {
                                    command: "rebuild",
                                    key
                                }, (error2, response2)=>{
                                    if (error2) {
                                        const message = {
                                            id: "",
                                            pluginName: "",
                                            text: error2,
                                            location: null,
                                            notes: [],
                                            detail: void 0
                                        };
                                        return callback2(failureErrorWithLog1("Build failed", [
                                            message
                                        ], []), null);
                                    }
                                    buildResponseToResult(response2, (error3, result3)=>{
                                        if (error3) reject(error3);
                                        else resolve(result3);
                                    });
                                });
                            });
                        refs.ref();
                        rebuild.dispose = ()=>{
                            if (isDisposed) return;
                            isDisposed = true;
                            sendRequest(refs, {
                                command: "rebuild-dispose",
                                key
                            }, ()=>{});
                            refs.unref();
                        };
                    }
                    result.rebuild = rebuild;
                }
                if (response.watch) {
                    if (!stop2) {
                        let isStopped = false;
                        refs.ref();
                        stop2 = ()=>{
                            if (isStopped) return;
                            isStopped = true;
                            watchCallbacks.delete(key);
                            sendRequest(refs, {
                                command: "watch-stop",
                                key
                            }, ()=>{});
                            refs.unref();
                        };
                        if (watch) {
                            watchCallbacks.set(key, (serviceStopError, watchResponse)=>{
                                if (serviceStopError) {
                                    if (watch.onRebuild) watch.onRebuild(serviceStopError, null);
                                    return;
                                }
                                let result2 = {
                                    errors: replaceDetailsInMessages1(watchResponse.errors, details),
                                    warnings: replaceDetailsInMessages1(watchResponse.warnings, details)
                                };
                                copyResponseToResult(watchResponse, result2);
                                runOnEndCallbacks(result2, logPluginError, ()=>{
                                    if (result2.errors.length > 0) {
                                        if (watch.onRebuild) watch.onRebuild(failureErrorWithLog1("Build failed", result2.errors, result2.warnings), null);
                                        return;
                                    }
                                    if (watchResponse.rebuildID !== void 0) result2.rebuild = rebuild;
                                    result2.stop = stop2;
                                    if (watch.onRebuild) watch.onRebuild(null, result2);
                                });
                            });
                        }
                    }
                    result.stop = stop2;
                }
                callback2(null, result);
            });
        };
        if (write && streamIn.isWriteUnavailable) throw new Error(`The "write" option is unavailable in this environment`);
        if (incremental && streamIn.isSync) throw new Error(`Cannot use "incremental" with a synchronous build`);
        if (watch && streamIn.isSync) throw new Error(`Cannot use "watch" with a synchronous build`);
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            if (serve2) {
                let serveResponse = response;
                let isStopped = false;
                refs.ref();
                let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop () {
                        if (isStopped) return;
                        isStopped = true;
                        serve2.stop();
                        refs.unref();
                    }
                };
                refs.ref();
                serve2.wait.then(refs.unref, refs.unref);
                return callback(null, result);
            }
            return buildResponseToResult(response, callback);
        });
    };
    let transform2 = ({ callName , refs , input , options , isTTY , fs , callback  })=>{
        const details = createObjectStash1();
        let start = (inputPath)=>{
            try {
                if (typeof input !== "string") throw new Error('The input to "transform" must be a string');
                let { flags , mangleCache  } = flagsForTransformOptions1(callName, options, isTTY, transformLogLevelDefault);
                let request = {
                    command: "transform",
                    flags,
                    inputFS: inputPath !== null,
                    input: inputPath !== null ? inputPath : input
                };
                if (mangleCache) request.mangleCache = mangleCache;
                sendRequest(refs, request, (error, response)=>{
                    if (error) return callback(new Error(error), null);
                    let errors = replaceDetailsInMessages1(response.errors, details);
                    let warnings = replaceDetailsInMessages1(response.warnings, details);
                    let outstanding = 1;
                    let next = ()=>{
                        if (--outstanding === 0) {
                            let result = {
                                warnings,
                                code: response.code,
                                map: response.map
                            };
                            if (response.mangleCache) result.mangleCache = response?.mangleCache;
                            callback(null, result);
                        }
                    };
                    if (errors.length > 0) return callback(failureErrorWithLog1("Transform failed", errors, warnings), null);
                    if (response.codeFS) {
                        outstanding++;
                        fs.readFile(response.code, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.code = contents;
                                next();
                            }
                        });
                    }
                    if (response.mapFS) {
                        outstanding++;
                        fs.readFile(response.map, (err, contents)=>{
                            if (err !== null) {
                                callback(err, null);
                            } else {
                                response.map = contents;
                                next();
                            }
                        });
                    }
                    next();
                });
            } catch (e) {
                let flags = [];
                try {
                    pushLogFlags1(flags, options, {}, isTTY, transformLogLevelDefault);
                } catch  {}
                const error = extractErrorMessageV81(e, streamIn, details, void 0, "");
                sendRequest(refs, {
                    command: "error",
                    flags,
                    error
                }, ()=>{
                    error.detail = details.load(error.detail);
                    callback(failureErrorWithLog1("Transform failed", [
                        error
                    ], []), null);
                });
            }
        };
        if (typeof input === "string" && input.length > 1024 * 1024) {
            let next = start;
            start = ()=>fs.writeFile(input, next);
        }
        start(null);
    };
    let formatMessages2 = ({ callName , refs , messages , options , callback  })=>{
        let result = sanitizeMessages1(messages, "messages", null, "");
        if (!options) throw new Error(`Missing second argument in ${callName}() call`);
        let keys = {};
        let kind = getFlag1(options, keys, "kind", mustBeString1);
        let color = getFlag1(options, keys, "color", mustBeBoolean1);
        let terminalWidth = getFlag1(options, keys, "terminalWidth", mustBeInteger1);
        checkForInvalidFlags1(options, keys, `in ${callName}() call`);
        if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
        if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
        let request = {
            command: "format-msgs",
            messages: result,
            isWarning: kind === "warning"
        };
        if (color !== void 0) request.color = color;
        if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.messages);
        });
    };
    let analyzeMetafile2 = ({ callName , refs , metafile , options , callback  })=>{
        if (options === void 0) options = {};
        let keys = {};
        let color = getFlag1(options, keys, "color", mustBeBoolean1);
        let verbose = getFlag1(options, keys, "verbose", mustBeBoolean1);
        checkForInvalidFlags1(options, keys, `in ${callName}() call`);
        let request = {
            command: "analyze-metafile",
            metafile
        };
        if (color !== void 0) request.color = color;
        if (verbose !== void 0) request.verbose = verbose;
        sendRequest(refs, request, (error, response)=>{
            if (error) return callback(new Error(error), null);
            callback(null, response.result);
        });
    };
    return {
        readFromStdout,
        afterClose,
        service: {
            buildOrServe,
            transform: transform2,
            formatMessages: formatMessages2,
            analyzeMetafile: analyzeMetafile2
        }
    };
}
function createObjectStash1() {
    const map = new Map();
    let nextID = 0;
    return {
        load (id) {
            return map.get(id);
        },
        store (value) {
            if (value === void 0) return -1;
            const id = nextID++;
            map.set(id, value);
            return id;
        }
    };
}
function extractCallerV81(e, streamIn, ident) {
    let note;
    let tried = false;
    return ()=>{
        if (tried) return note;
        tried = true;
        try {
            let lines = (e.stack + "").split("\n");
            lines.splice(1, 1);
            let location = parseStackLinesV81(streamIn, lines, ident);
            if (location) {
                note = {
                    text: e.message,
                    location
                };
                return note;
            }
        } catch  {}
    };
}
function extractErrorMessageV81(e, streamIn, stash, note, pluginName) {
    let text = "Internal error";
    let location = null;
    try {
        text = (e && e.message || e) + "";
    } catch  {}
    try {
        location = parseStackLinesV81(streamIn, (e.stack + "").split("\n"), "");
    } catch  {}
    return {
        id: "",
        pluginName,
        text,
        location,
        notes: note ? [
            note
        ] : [],
        detail: stash ? stash.store(e) : -1
    };
}
function parseStackLinesV81(streamIn, lines, ident) {
    let at = "    at ";
    if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
        for(let i = 1; i < lines.length; i++){
            let line = lines[i];
            if (!line.startsWith(at)) continue;
            line = line.slice(at.length);
            while(true){
                let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
                if (match) {
                    line = match[1];
                    continue;
                }
                match = /^(\S+):(\d+):(\d+)$/.exec(line);
                if (match) {
                    let contents;
                    try {
                        contents = streamIn.readFileSync(match[1], "utf8");
                    } catch  {
                        break;
                    }
                    let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
                    let column = +match[3] - 1;
                    let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                    return {
                        file: match[1],
                        namespace: "file",
                        line: +match[2],
                        column: encodeUTF81(lineText.slice(0, column)).length,
                        length: encodeUTF81(lineText.slice(column, column + length)).length,
                        lineText: lineText + "\n" + lines.slice(1).join("\n"),
                        suggestion: ""
                    };
                }
                break;
            }
        }
    }
    return null;
}
function failureErrorWithLog1(text, errors, warnings) {
    let limit = 5;
    let summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i)=>{
        if (i === limit) return "\n...";
        if (!e.location) return `
error: ${e.text}`;
        let { file , line , column  } = e.location;
        let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : "";
        return `
${file}:${line}:${column}: ERROR: ${pluginText}${e.text}`;
    }).join("");
    let error = new Error(`${text}${summary}`);
    error.errors = errors;
    error.warnings = warnings;
    return error;
}
function replaceDetailsInMessages1(messages, stash) {
    for (const message of messages){
        message.detail = stash.load(message.detail);
    }
    return messages;
}
function sanitizeLocation1(location, where) {
    if (location == null) return null;
    let keys = {};
    let file = getFlag1(location, keys, "file", mustBeString1);
    let namespace = getFlag1(location, keys, "namespace", mustBeString1);
    let line = getFlag1(location, keys, "line", mustBeInteger1);
    let column = getFlag1(location, keys, "column", mustBeInteger1);
    let length = getFlag1(location, keys, "length", mustBeInteger1);
    let lineText = getFlag1(location, keys, "lineText", mustBeString1);
    let suggestion = getFlag1(location, keys, "suggestion", mustBeString1);
    checkForInvalidFlags1(location, keys, where);
    return {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || "",
        suggestion: suggestion || ""
    };
}
function sanitizeMessages1(messages, property, stash, fallbackPluginName) {
    let messagesClone = [];
    let index = 0;
    for (const message of messages){
        let keys = {};
        let id = getFlag1(message, keys, "id", mustBeString1);
        let pluginName = getFlag1(message, keys, "pluginName", mustBeString1);
        let text = getFlag1(message, keys, "text", mustBeString1);
        let location = getFlag1(message, keys, "location", mustBeObjectOrNull1);
        let notes = getFlag1(message, keys, "notes", mustBeArray1);
        let detail = getFlag1(message, keys, "detail", canBeAnything1);
        let where = `in element ${index} of "${property}"`;
        checkForInvalidFlags1(message, keys, where);
        let notesClone = [];
        if (notes) {
            for (const note of notes){
                let noteKeys = {};
                let noteText = getFlag1(note, noteKeys, "text", mustBeString1);
                let noteLocation = getFlag1(note, noteKeys, "location", mustBeObjectOrNull1);
                checkForInvalidFlags1(note, noteKeys, where);
                notesClone.push({
                    text: noteText || "",
                    location: sanitizeLocation1(noteLocation, where)
                });
            }
        }
        messagesClone.push({
            id: id || "",
            pluginName: pluginName || fallbackPluginName,
            text: text || "",
            location: sanitizeLocation1(location, where),
            notes: notesClone,
            detail: stash ? stash.store(detail) : -1
        });
        index++;
    }
    return messagesClone;
}
function sanitizeStringArray1(values, property) {
    const result = [];
    for (const value of values){
        if (typeof value !== "string") throw new Error(`${JSON.stringify(property)} must be an array of strings`);
        result.push(value);
    }
    return result;
}
function convertOutputFiles1({ path , contents  }) {
    let text = null;
    return {
        path,
        contents,
        get text () {
            if (text === null) text = decodeUTF81(contents);
            return text;
        }
    };
}
var version1 = "0.14.51";
var build1 = (options)=>ensureServiceIsRunning1().then((service)=>service.build(options));
var serve1 = (serveOptions, buildOptions)=>ensureServiceIsRunning1().then((service)=>service.serve(serveOptions, buildOptions));
var transform1 = (input, options)=>ensureServiceIsRunning1().then((service)=>service.transform(input, options));
var formatMessages1 = (messages, options)=>ensureServiceIsRunning1().then((service)=>service.formatMessages(messages, options));
var analyzeMetafile1 = (metafile, options)=>ensureServiceIsRunning1().then((service)=>service.analyzeMetafile(metafile, options));
var buildSync1 = ()=>{
    throw new Error(`The "buildSync" API does not work in Deno`);
};
var transformSync1 = ()=>{
    throw new Error(`The "transformSync" API does not work in Deno`);
};
var formatMessagesSync1 = ()=>{
    throw new Error(`The "formatMessagesSync" API does not work in Deno`);
};
var analyzeMetafileSync1 = ()=>{
    throw new Error(`The "analyzeMetafileSync" API does not work in Deno`);
};
var stop1 = ()=>{
    if (stopService1) stopService1();
};
var initializeWasCalled = false;
var initialize1 = async (options)=>{
    options = validateInitializeOptions1(options || {});
    if (options.wasmURL) throw new Error(`The "wasmURL" option only works in the browser`);
    if (options.wasmModule) throw new Error(`The "wasmModule" option only works in the browser`);
    if (options.worker) throw new Error(`The "worker" option only works in the browser`);
    if (initializeWasCalled) throw new Error('Cannot call "initialize" more than once');
    await ensureServiceIsRunning1();
    initializeWasCalled = true;
};
async function installFromNPM(name, subpath) {
    const { finalPath , finalDir  } = getCachePath(name);
    try {
        await Deno.stat(finalPath);
        return finalPath;
    } catch (e) {}
    const url = `https://registry.npmjs.org/${name}/-/${name}-${version1}.tgz`;
    const buffer = await fetch(url).then((r)=>r.arrayBuffer());
    const executable = extractFileFromTarGzip(new Uint8Array(buffer), subpath);
    await Deno.mkdir(finalDir, {
        recursive: true,
        mode: 448
    });
    await Deno.writeFile(finalPath, executable, {
        mode: 493
    });
    return finalPath;
}
function getCachePath(name) {
    let baseDir;
    switch(Deno.build.os){
        case "darwin":
            baseDir = Deno.env.get("HOME");
            if (baseDir) baseDir += "/Library/Caches";
            break;
        case "windows":
            baseDir = Deno.env.get("LOCALAPPDATA");
            if (!baseDir) {
                baseDir = Deno.env.get("USERPROFILE");
                if (baseDir) baseDir += "/AppData/Local";
            }
            if (baseDir) baseDir += "/Cache";
            break;
        case "linux":
            const xdg = Deno.env.get("XDG_CACHE_HOME");
            if (xdg && xdg[0] === "/") baseDir = xdg;
            break;
    }
    if (!baseDir) {
        baseDir = Deno.env.get("HOME");
        if (baseDir) baseDir += "/.cache";
    }
    if (!baseDir) throw new Error("Failed to find cache directory");
    const finalDir = baseDir + `/esbuild/bin`;
    const finalPath = finalDir + `/${name}@${version1}`;
    return {
        finalPath,
        finalDir
    };
}
function extractFileFromTarGzip(buffer, file) {
    try {
        buffer = gunzip(buffer);
    } catch (err) {
        throw new Error(`Invalid gzip data in archive: ${err && err.message || err}`);
    }
    let str = (i, n)=>String.fromCharCode(...buffer.subarray(i, i + n)).replace(/\0.*$/, "");
    let offset = 0;
    file = `package/${file}`;
    while(offset < buffer.length){
        let name = str(offset, 100);
        let size = parseInt(str(offset + 124, 12), 8);
        offset += 512;
        if (!isNaN(size)) {
            if (name === file) return buffer.subarray(offset, offset + size);
            offset += size + 511 & ~511;
        }
    }
    throw new Error(`Could not find ${JSON.stringify(file)} in archive`);
}
async function install() {
    const overridePath = Deno.env.get("ESBUILD_BINARY_PATH");
    if (overridePath) return overridePath;
    const platformKey = Deno.build.target;
    const knownWindowsPackages = {
        "x86_64-pc-windows-msvc": "esbuild-windows-64"
    };
    const knownUnixlikePackages = {
        "aarch64-apple-darwin": "esbuild-darwin-arm64",
        "aarch64-unknown-linux-gnu": "esbuild-linux-arm64",
        "x86_64-apple-darwin": "esbuild-darwin-64",
        "x86_64-unknown-linux-gnu": "esbuild-linux-64",
        "x86_64-unknown-freebsd": "esbuild-freebsd-64"
    };
    if (platformKey in knownWindowsPackages) {
        return await installFromNPM(knownWindowsPackages[platformKey], "esbuild.exe");
    } else if (platformKey in knownUnixlikePackages) {
        return await installFromNPM(knownUnixlikePackages[platformKey], "bin/esbuild");
    } else {
        throw new Error(`Unsupported platform: ${platformKey}`);
    }
}
var defaultWD = Deno.cwd();
var longLivedService;
var stopService1;
var ensureServiceIsRunning1 = ()=>{
    if (!longLivedService) {
        longLivedService = (async ()=>{
            const binPath = await install();
            const isTTY = Deno.isatty(Deno.stderr.rid);
            const child = Deno.run({
                cmd: [
                    binPath,
                    `--service=${version1}`
                ],
                cwd: defaultWD,
                stdin: "piped",
                stdout: "piped",
                stderr: "inherit"
            });
            stopService1 = ()=>{
                child.stdin.close();
                child.stdout.close();
                child.close();
                initializeWasCalled = false;
                longLivedService = void 0;
                stopService1 = void 0;
            };
            let writeQueue = [];
            let isQueueLocked = false;
            const startWriteFromQueueWorker = ()=>{
                if (isQueueLocked || writeQueue.length === 0) return;
                isQueueLocked = true;
                child.stdin.write(writeQueue[0]).then((bytesWritten)=>{
                    isQueueLocked = false;
                    if (bytesWritten === writeQueue[0].length) writeQueue.shift();
                    else writeQueue[0] = writeQueue[0].subarray(bytesWritten);
                    startWriteFromQueueWorker();
                });
            };
            const { readFromStdout , afterClose , service  } = createChannel1({
                writeToStdin (bytes) {
                    writeQueue.push(bytes);
                    startWriteFromQueueWorker();
                },
                isSync: false,
                isWriteUnavailable: false,
                esbuild: mod_exports
            });
            const stdoutBuffer = new Uint8Array(4 * 1024 * 1024);
            const readMoreStdout = ()=>child.stdout.read(stdoutBuffer).then((n)=>{
                    if (n === null) {
                        afterClose(null);
                    } else {
                        readFromStdout(stdoutBuffer.subarray(0, n));
                        readMoreStdout();
                    }
                }).catch((e)=>{
                    if (e instanceof Deno.errors.Interrupted || e instanceof Deno.errors.BadResource) {
                        afterClose(e);
                    } else {
                        throw e;
                    }
                });
            readMoreStdout();
            return {
                build: (options)=>{
                    return new Promise((resolve, reject)=>{
                        service.buildOrServe({
                            callName: "build",
                            refs: null,
                            serveOptions: null,
                            options,
                            isTTY,
                            defaultWD,
                            callback: (err, res)=>err ? reject(err) : resolve(res)
                        });
                    });
                },
                serve: (serveOptions, buildOptions)=>{
                    if (serveOptions === null || typeof serveOptions !== "object") throw new Error("The first argument must be an object");
                    return new Promise((resolve, reject)=>service.buildOrServe({
                            callName: "serve",
                            refs: null,
                            serveOptions,
                            options: buildOptions,
                            isTTY,
                            defaultWD,
                            callback: (err, res)=>err ? reject(err) : resolve(res)
                        }));
                },
                transform: (input, options)=>{
                    return new Promise((resolve, reject)=>service.transform({
                            callName: "transform",
                            refs: null,
                            input,
                            options: options || {},
                            isTTY,
                            fs: {
                                readFile (tempFile, callback) {
                                    Deno.readFile(tempFile).then((bytes)=>{
                                        let text = new TextDecoder().decode(bytes);
                                        try {
                                            Deno.remove(tempFile);
                                        } catch (e) {}
                                        callback(null, text);
                                    }, (err)=>callback(err, null));
                                },
                                writeFile (contents, callback) {
                                    Deno.makeTempFile().then((tempFile)=>Deno.writeFile(tempFile, new TextEncoder().encode(contents)).then(()=>callback(tempFile), ()=>callback(null)), ()=>callback(null));
                                }
                            },
                            callback: (err, res)=>err ? reject(err) : resolve(res)
                        }));
                },
                formatMessages: (messages, options)=>{
                    return new Promise((resolve, reject)=>service.formatMessages({
                            callName: "formatMessages",
                            refs: null,
                            messages,
                            options,
                            callback: (err, res)=>err ? reject(err) : resolve(res)
                        }));
                },
                analyzeMetafile: (metafile, options)=>{
                    return new Promise((resolve, reject)=>service.analyzeMetafile({
                            callName: "analyzeMetafile",
                            refs: null,
                            metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
                            options,
                            callback: (err, res)=>err ? reject(err) : resolve(res)
                        }));
                }
            };
        })();
    }
    return longLivedService;
};
if (importMeta4.main) {
    Deno.run({
        cmd: [
            await install()
        ].concat(Deno.args),
        cwd: defaultWD,
        stdin: "inherit",
        stdout: "inherit",
        stderr: "inherit"
    }).status().then(({ code  })=>{
        Deno.exit(code);
    });
}
const mod2 = {
    analyzeMetafile: analyzeMetafile1,
    analyzeMetafileSync: analyzeMetafileSync1,
    build: build1,
    buildSync: buildSync1,
    formatMessages: formatMessages1,
    formatMessagesSync: formatMessagesSync1,
    initialize: initialize1,
    serve: serve1,
    stop: stop1,
    transform: transform1,
    transformSync: transformSync1,
    version: version1
};
const osType = (()=>{
    const { Deno: Deno1  } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows = osType === "windows";
const CHAR_FORWARD_SLASH = 47;
function assertPath(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return isPosixPathSeparator(code) || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS[c] ?? c;
    });
}
class DenoStdInternalError extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError(msg);
    }
}
const sep = "\\";
const delimiter = ";";
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno: Deno1  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart != null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function relative(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    const fromOrig = resolve(from);
    const toOrig = resolve(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path.slice(0, end);
}
function basename(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= start; --i){
            const code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= start; --i){
            if (isPathSeparator(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname(path) {
    assertPath(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("\\", pathObject);
}
function parse(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path;
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl(path) {
    if (!isAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod3 = {
    sep: sep,
    delimiter: delimiter,
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    toNamespacedPath: toNamespacedPath,
    dirname: dirname,
    basename: basename,
    extname: extname,
    format: format,
    parse: parse,
    fromFileUrl: fromFileUrl,
    toFileUrl: toFileUrl
};
const sep1 = "/";
const delimiter1 = ":";
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno: Deno1  } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize1(path) {
    assertPath(path);
    if (path.length === 0) return ".";
    const isAbsolute = path.charCodeAt(0) === 47;
    const trailingSeparator = path.charCodeAt(path.length - 1) === 47;
    path = normalizeString(path, !isAbsolute, "/", isPosixPathSeparator);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function isAbsolute1(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47;
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function relative1(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    from = resolve1(from);
    to = resolve1(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath1(path) {
    return path;
}
function dirname1(path) {
    assertPath(path);
    if (path.length === 0) return ".";
    const hasRoot = path.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path.length - 1; i >= 1; --i){
        if (path.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path.slice(0, end);
}
function basename1(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= 0; --i){
            const code = path.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= 0; --i){
            if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname1(path) {
    assertPath(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("/", pathObject);
}
function parse1(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = path.charCodeAt(0) === 47;
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
    else if (isAbsolute) ret.dir = "/";
    return ret;
}
function fromFileUrl1(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl1(path) {
    if (!isAbsolute1(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod4 = {
    sep: sep1,
    delimiter: delimiter1,
    resolve: resolve1,
    normalize: normalize1,
    isAbsolute: isAbsolute1,
    join: join1,
    relative: relative1,
    toNamespacedPath: toNamespacedPath1,
    dirname: dirname1,
    basename: basename1,
    extname: extname1,
    format: format1,
    parse: parse1,
    fromFileUrl: fromFileUrl1,
    toFileUrl: toFileUrl1
};
const path = isWindows ? mod3 : mod4;
const { join: join2 , normalize: normalize2  } = path;
const path1 = isWindows ? mod3 : mod4;
const { basename: basename2 , delimiter: delimiter2 , dirname: dirname2 , extname: extname2 , format: format2 , fromFileUrl: fromFileUrl2 , isAbsolute: isAbsolute2 , join: join3 , normalize: normalize3 , parse: parse2 , relative: relative2 , resolve: resolve2 , sep: sep2 , toFileUrl: toFileUrl2 , toNamespacedPath: toNamespacedPath2  } = path1;
async function createWalkEntry(path) {
    path = normalize3(path);
    const name = basename2(path);
    const info = await Deno.stat(path);
    return {
        path,
        name,
        isFile: info.isFile,
        isDirectory: info.isDirectory,
        isSymlink: info.isSymlink
    };
}
function include(path, exts, match, skip) {
    if (exts && !exts.some((ext)=>path.endsWith(ext))) {
        return false;
    }
    if (match && !match.some((pattern)=>!!path.match(pattern))) {
        return false;
    }
    if (skip && skip.some((pattern)=>!!path.match(pattern))) {
        return false;
    }
    return true;
}
function wrapErrorWithRootPath(err, root) {
    if (err instanceof Error && "root" in err) return err;
    const e = new Error();
    e.root = root;
    e.message = err instanceof Error ? `${err.message} for path "${root}"` : `[non-error thrown] for path "${root}"`;
    e.stack = err instanceof Error ? err.stack : undefined;
    e.cause = err instanceof Error ? err.cause : undefined;
    return e;
}
async function* walk(root, { maxDepth =Infinity , includeFiles =true , includeDirs =true , followSymlinks =false , exts =undefined , match =undefined , skip =undefined  } = {}) {
    if (maxDepth < 0) {
        return;
    }
    if (includeDirs && include(root, exts, match, skip)) {
        yield await createWalkEntry(root);
    }
    if (maxDepth < 1 || !include(root, undefined, undefined, skip)) {
        return;
    }
    try {
        for await (const entry of Deno.readDir(root)){
            assert(entry.name != null);
            let path = join3(root, entry.name);
            let { isSymlink , isDirectory  } = entry;
            if (isSymlink) {
                if (!followSymlinks) continue;
                path = await Deno.realPath(path);
                ({ isSymlink , isDirectory  } = await Deno.lstat(path));
            }
            if (isSymlink || isDirectory) {
                yield* walk(path, {
                    maxDepth: maxDepth - 1,
                    includeFiles,
                    includeDirs,
                    followSymlinks,
                    exts,
                    match,
                    skip
                });
            } else if (includeFiles && include(path, exts, match, skip)) {
                yield {
                    path,
                    ...entry
                };
            }
        }
    } catch (err) {
        throw wrapErrorWithRootPath(err, normalize3(root));
    }
}
function deferred() {
    let methods;
    let state = "pending";
    const promise = new Promise((resolve, reject)=>{
        methods = {
            async resolve (value) {
                await value;
                state = "fulfilled";
                resolve(value);
            },
            reject (reason) {
                state = "rejected";
                reject(reason);
            }
        };
    });
    Object.defineProperty(promise, "state", {
        get: ()=>state
    });
    return Object.assign(promise, methods);
}
function delay(ms, options = {}) {
    const { signal  } = options;
    if (signal?.aborted) {
        return Promise.reject(new DOMException("Delay was aborted.", "AbortError"));
    }
    return new Promise((resolve, reject)=>{
        const abort = ()=>{
            clearTimeout(i);
            reject(new DOMException("Delay was aborted.", "AbortError"));
        };
        const done = ()=>{
            signal?.removeEventListener("abort", abort);
            resolve();
        };
        const i = setTimeout(done, ms);
        signal?.addEventListener("abort", abort, {
            once: true
        });
    });
}
class MuxAsyncIterator {
    #iteratorCount = 0;
    #yields = [];
    #throws = [];
    #signal = deferred();
    add(iterable) {
        ++this.#iteratorCount;
        this.#callIteratorNext(iterable[Symbol.asyncIterator]());
    }
    async #callIteratorNext(iterator) {
        try {
            const { value , done  } = await iterator.next();
            if (done) {
                --this.#iteratorCount;
            } else {
                this.#yields.push({
                    iterator,
                    value
                });
            }
        } catch (e) {
            this.#throws.push(e);
        }
        this.#signal.resolve();
    }
    async *iterate() {
        while(this.#iteratorCount > 0){
            await this.#signal;
            for(let i = 0; i < this.#yields.length; i++){
                const { iterator , value  } = this.#yields[i];
                yield value;
                this.#callIteratorNext(iterator);
            }
            if (this.#throws.length) {
                for (const e of this.#throws){
                    throw e;
                }
                this.#throws.length = 0;
            }
            this.#yields.length = 0;
            this.#signal = deferred();
        }
    }
    [Symbol.asyncIterator]() {
        return this.iterate();
    }
}
const ERROR_SERVER_CLOSED = "Server closed";
const INITIAL_ACCEPT_BACKOFF_DELAY = 5;
const MAX_ACCEPT_BACKOFF_DELAY = 1000;
class Server {
    #port;
    #host;
    #handler;
    #closed = false;
    #listeners = new Set();
    #httpConnections = new Set();
    #onError;
    constructor(serverInit){
        this.#port = serverInit.port;
        this.#host = serverInit.hostname;
        this.#handler = serverInit.handler;
        this.#onError = serverInit.onError ?? function(error) {
            console.error(error);
            return new Response("Internal Server Error", {
                status: 500
            });
        };
    }
    async serve(listener) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#trackListener(listener);
        try {
            return await this.#accept(listener);
        } finally{
            this.#untrackListener(listener);
            try {
                listener.close();
            } catch  {}
        }
    }
    async listenAndServe() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const listener = Deno.listen({
            port: this.#port ?? 80,
            hostname: this.#host ?? "0.0.0.0",
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    async listenAndServeTls(certFile, keyFile) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const listener = Deno.listenTls({
            port: this.#port ?? 443,
            hostname: this.#host ?? "0.0.0.0",
            certFile,
            keyFile,
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    close() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#closed = true;
        for (const listener of this.#listeners){
            try {
                listener.close();
            } catch  {}
        }
        this.#listeners.clear();
        for (const httpConn of this.#httpConnections){
            this.#closeHttpConn(httpConn);
        }
        this.#httpConnections.clear();
    }
    get closed() {
        return this.#closed;
    }
    get addrs() {
        return Array.from(this.#listeners).map((listener)=>listener.addr);
    }
    async #respond(requestEvent, httpConn, connInfo) {
        let response;
        try {
            response = await this.#handler(requestEvent.request, connInfo);
        } catch (error) {
            response = await this.#onError(error);
        }
        try {
            await requestEvent.respondWith(response);
        } catch  {
            return this.#closeHttpConn(httpConn);
        }
    }
    async #serveHttp(httpConn1, connInfo1) {
        while(!this.#closed){
            let requestEvent;
            try {
                requestEvent = await httpConn1.nextRequest();
            } catch  {
                break;
            }
            if (requestEvent === null) {
                break;
            }
            this.#respond(requestEvent, httpConn1, connInfo1);
        }
        this.#closeHttpConn(httpConn1);
    }
    async #accept(listener) {
        let acceptBackoffDelay;
        while(!this.#closed){
            let conn;
            try {
                conn = await listener.accept();
            } catch (error) {
                if (error instanceof Deno.errors.BadResource || error instanceof Deno.errors.InvalidData || error instanceof Deno.errors.UnexpectedEof || error instanceof Deno.errors.ConnectionReset || error instanceof Deno.errors.NotConnected) {
                    if (!acceptBackoffDelay) {
                        acceptBackoffDelay = INITIAL_ACCEPT_BACKOFF_DELAY;
                    } else {
                        acceptBackoffDelay *= 2;
                    }
                    if (acceptBackoffDelay >= 1000) {
                        acceptBackoffDelay = MAX_ACCEPT_BACKOFF_DELAY;
                    }
                    await delay(acceptBackoffDelay);
                    continue;
                }
                throw error;
            }
            acceptBackoffDelay = undefined;
            let httpConn;
            try {
                httpConn = Deno.serveHttp(conn);
            } catch  {
                continue;
            }
            this.#trackHttpConnection(httpConn);
            const connInfo = {
                localAddr: conn.localAddr,
                remoteAddr: conn.remoteAddr
            };
            this.#serveHttp(httpConn, connInfo);
        }
    }
    #closeHttpConn(httpConn2) {
        this.#untrackHttpConnection(httpConn2);
        try {
            httpConn2.close();
        } catch  {}
    }
    #trackListener(listener1) {
        this.#listeners.add(listener1);
    }
    #untrackListener(listener2) {
        this.#listeners.delete(listener2);
    }
    #trackHttpConnection(httpConn3) {
        this.#httpConnections.add(httpConn3);
    }
    #untrackHttpConnection(httpConn4) {
        this.#httpConnections.delete(httpConn4);
    }
}
function hostnameForDisplay(hostname) {
    return hostname === "0.0.0.0" ? "localhost" : hostname;
}
async function serve2(handler, options = {}) {
    let port = options.port ?? 8000;
    const hostname = options.hostname ?? "0.0.0.0";
    const server = new Server({
        port,
        hostname,
        handler,
        onError: options.onError
    });
    options?.signal?.addEventListener("abort", ()=>server.close(), {
        once: true
    });
    const s = server.listenAndServe();
    port = server.addrs[0].port;
    if ("onListen" in options) {
        options.onListen?.({
            port,
            hostname
        });
    } else {
        console.log(`Listening on http://${hostnameForDisplay(hostname)}:${port}/`);
    }
    return await s;
}
var Status;
(function(Status) {
    Status[Status["Continue"] = 100] = "Continue";
    Status[Status["SwitchingProtocols"] = 101] = "SwitchingProtocols";
    Status[Status["Processing"] = 102] = "Processing";
    Status[Status["EarlyHints"] = 103] = "EarlyHints";
    Status[Status["OK"] = 200] = "OK";
    Status[Status["Created"] = 201] = "Created";
    Status[Status["Accepted"] = 202] = "Accepted";
    Status[Status["NonAuthoritativeInfo"] = 203] = "NonAuthoritativeInfo";
    Status[Status["NoContent"] = 204] = "NoContent";
    Status[Status["ResetContent"] = 205] = "ResetContent";
    Status[Status["PartialContent"] = 206] = "PartialContent";
    Status[Status["MultiStatus"] = 207] = "MultiStatus";
    Status[Status["AlreadyReported"] = 208] = "AlreadyReported";
    Status[Status["IMUsed"] = 226] = "IMUsed";
    Status[Status["MultipleChoices"] = 300] = "MultipleChoices";
    Status[Status["MovedPermanently"] = 301] = "MovedPermanently";
    Status[Status["Found"] = 302] = "Found";
    Status[Status["SeeOther"] = 303] = "SeeOther";
    Status[Status["NotModified"] = 304] = "NotModified";
    Status[Status["UseProxy"] = 305] = "UseProxy";
    Status[Status["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    Status[Status["PermanentRedirect"] = 308] = "PermanentRedirect";
    Status[Status["BadRequest"] = 400] = "BadRequest";
    Status[Status["Unauthorized"] = 401] = "Unauthorized";
    Status[Status["PaymentRequired"] = 402] = "PaymentRequired";
    Status[Status["Forbidden"] = 403] = "Forbidden";
    Status[Status["NotFound"] = 404] = "NotFound";
    Status[Status["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    Status[Status["NotAcceptable"] = 406] = "NotAcceptable";
    Status[Status["ProxyAuthRequired"] = 407] = "ProxyAuthRequired";
    Status[Status["RequestTimeout"] = 408] = "RequestTimeout";
    Status[Status["Conflict"] = 409] = "Conflict";
    Status[Status["Gone"] = 410] = "Gone";
    Status[Status["LengthRequired"] = 411] = "LengthRequired";
    Status[Status["PreconditionFailed"] = 412] = "PreconditionFailed";
    Status[Status["RequestEntityTooLarge"] = 413] = "RequestEntityTooLarge";
    Status[Status["RequestURITooLong"] = 414] = "RequestURITooLong";
    Status[Status["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    Status[Status["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
    Status[Status["ExpectationFailed"] = 417] = "ExpectationFailed";
    Status[Status["Teapot"] = 418] = "Teapot";
    Status[Status["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    Status[Status["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    Status[Status["Locked"] = 423] = "Locked";
    Status[Status["FailedDependency"] = 424] = "FailedDependency";
    Status[Status["TooEarly"] = 425] = "TooEarly";
    Status[Status["UpgradeRequired"] = 426] = "UpgradeRequired";
    Status[Status["PreconditionRequired"] = 428] = "PreconditionRequired";
    Status[Status["TooManyRequests"] = 429] = "TooManyRequests";
    Status[Status["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
    Status[Status["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
    Status[Status["InternalServerError"] = 500] = "InternalServerError";
    Status[Status["NotImplemented"] = 501] = "NotImplemented";
    Status[Status["BadGateway"] = 502] = "BadGateway";
    Status[Status["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    Status[Status["GatewayTimeout"] = 504] = "GatewayTimeout";
    Status[Status["HTTPVersionNotSupported"] = 505] = "HTTPVersionNotSupported";
    Status[Status["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    Status[Status["InsufficientStorage"] = 507] = "InsufficientStorage";
    Status[Status["LoopDetected"] = 508] = "LoopDetected";
    Status[Status["NotExtended"] = 510] = "NotExtended";
    Status[Status["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(Status || (Status = {}));
({
    [Status.Accepted]: "Accepted",
    [Status.AlreadyReported]: "Already Reported",
    [Status.BadGateway]: "Bad Gateway",
    [Status.BadRequest]: "Bad Request",
    [Status.Conflict]: "Conflict",
    [Status.Continue]: "Continue",
    [Status.Created]: "Created",
    [Status.EarlyHints]: "Early Hints",
    [Status.ExpectationFailed]: "Expectation Failed",
    [Status.FailedDependency]: "Failed Dependency",
    [Status.Forbidden]: "Forbidden",
    [Status.Found]: "Found",
    [Status.GatewayTimeout]: "Gateway Timeout",
    [Status.Gone]: "Gone",
    [Status.HTTPVersionNotSupported]: "HTTP Version Not Supported",
    [Status.IMUsed]: "IM Used",
    [Status.InsufficientStorage]: "Insufficient Storage",
    [Status.InternalServerError]: "Internal Server Error",
    [Status.LengthRequired]: "Length Required",
    [Status.Locked]: "Locked",
    [Status.LoopDetected]: "Loop Detected",
    [Status.MethodNotAllowed]: "Method Not Allowed",
    [Status.MisdirectedRequest]: "Misdirected Request",
    [Status.MovedPermanently]: "Moved Permanently",
    [Status.MultiStatus]: "Multi Status",
    [Status.MultipleChoices]: "Multiple Choices",
    [Status.NetworkAuthenticationRequired]: "Network Authentication Required",
    [Status.NoContent]: "No Content",
    [Status.NonAuthoritativeInfo]: "Non Authoritative Info",
    [Status.NotAcceptable]: "Not Acceptable",
    [Status.NotExtended]: "Not Extended",
    [Status.NotFound]: "Not Found",
    [Status.NotImplemented]: "Not Implemented",
    [Status.NotModified]: "Not Modified",
    [Status.OK]: "OK",
    [Status.PartialContent]: "Partial Content",
    [Status.PaymentRequired]: "Payment Required",
    [Status.PermanentRedirect]: "Permanent Redirect",
    [Status.PreconditionFailed]: "Precondition Failed",
    [Status.PreconditionRequired]: "Precondition Required",
    [Status.Processing]: "Processing",
    [Status.ProxyAuthRequired]: "Proxy Auth Required",
    [Status.RequestEntityTooLarge]: "Request Entity Too Large",
    [Status.RequestHeaderFieldsTooLarge]: "Request Header Fields Too Large",
    [Status.RequestTimeout]: "Request Timeout",
    [Status.RequestURITooLong]: "Request URI Too Long",
    [Status.RequestedRangeNotSatisfiable]: "Requested Range Not Satisfiable",
    [Status.ResetContent]: "Reset Content",
    [Status.SeeOther]: "See Other",
    [Status.ServiceUnavailable]: "Service Unavailable",
    [Status.SwitchingProtocols]: "Switching Protocols",
    [Status.Teapot]: "I'm a teapot",
    [Status.TemporaryRedirect]: "Temporary Redirect",
    [Status.TooEarly]: "Too Early",
    [Status.TooManyRequests]: "Too Many Requests",
    [Status.Unauthorized]: "Unauthorized",
    [Status.UnavailableForLegalReasons]: "Unavailable For Legal Reasons",
    [Status.UnprocessableEntity]: "Unprocessable Entity",
    [Status.UnsupportedMediaType]: "Unsupported Media Type",
    [Status.UpgradeRequired]: "Upgrade Required",
    [Status.UseProxy]: "Use Proxy",
    [Status.VariantAlsoNegotiates]: "Variant Also Negotiates"
});
const __default1 = {
    "application/1d-interleaved-parityfec": {
        "source": "iana"
    },
    "application/3gpdash-qoe-report+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/3gpp-ims+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/3gpphal+json": {
        "source": "iana",
        "compressible": true
    },
    "application/3gpphalforms+json": {
        "source": "iana",
        "compressible": true
    },
    "application/a2l": {
        "source": "iana"
    },
    "application/ace+cbor": {
        "source": "iana"
    },
    "application/activemessage": {
        "source": "iana"
    },
    "application/activity+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-costmap+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-costmapfilter+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-directory+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-endpointcost+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-endpointcostparams+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-endpointprop+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-endpointpropparams+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-error+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-networkmap+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-networkmapfilter+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-updatestreamcontrol+json": {
        "source": "iana",
        "compressible": true
    },
    "application/alto-updatestreamparams+json": {
        "source": "iana",
        "compressible": true
    },
    "application/aml": {
        "source": "iana"
    },
    "application/andrew-inset": {
        "source": "iana",
        "extensions": [
            "ez"
        ]
    },
    "application/applefile": {
        "source": "iana"
    },
    "application/applixware": {
        "source": "apache",
        "extensions": [
            "aw"
        ]
    },
    "application/at+jwt": {
        "source": "iana"
    },
    "application/atf": {
        "source": "iana"
    },
    "application/atfx": {
        "source": "iana"
    },
    "application/atom+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "atom"
        ]
    },
    "application/atomcat+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "atomcat"
        ]
    },
    "application/atomdeleted+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "atomdeleted"
        ]
    },
    "application/atomicmail": {
        "source": "iana"
    },
    "application/atomsvc+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "atomsvc"
        ]
    },
    "application/atsc-dwd+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "dwd"
        ]
    },
    "application/atsc-dynamic-event-message": {
        "source": "iana"
    },
    "application/atsc-held+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "held"
        ]
    },
    "application/atsc-rdt+json": {
        "source": "iana",
        "compressible": true
    },
    "application/atsc-rsat+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rsat"
        ]
    },
    "application/atxml": {
        "source": "iana"
    },
    "application/auth-policy+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/bacnet-xdd+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/batch-smtp": {
        "source": "iana"
    },
    "application/bdoc": {
        "compressible": false,
        "extensions": [
            "bdoc"
        ]
    },
    "application/beep+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/calendar+json": {
        "source": "iana",
        "compressible": true
    },
    "application/calendar+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xcs"
        ]
    },
    "application/call-completion": {
        "source": "iana"
    },
    "application/cals-1840": {
        "source": "iana"
    },
    "application/captive+json": {
        "source": "iana",
        "compressible": true
    },
    "application/cbor": {
        "source": "iana"
    },
    "application/cbor-seq": {
        "source": "iana"
    },
    "application/cccex": {
        "source": "iana"
    },
    "application/ccmp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/ccxml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ccxml"
        ]
    },
    "application/cdfx+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "cdfx"
        ]
    },
    "application/cdmi-capability": {
        "source": "iana",
        "extensions": [
            "cdmia"
        ]
    },
    "application/cdmi-container": {
        "source": "iana",
        "extensions": [
            "cdmic"
        ]
    },
    "application/cdmi-domain": {
        "source": "iana",
        "extensions": [
            "cdmid"
        ]
    },
    "application/cdmi-object": {
        "source": "iana",
        "extensions": [
            "cdmio"
        ]
    },
    "application/cdmi-queue": {
        "source": "iana",
        "extensions": [
            "cdmiq"
        ]
    },
    "application/cdni": {
        "source": "iana"
    },
    "application/cea": {
        "source": "iana"
    },
    "application/cea-2018+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/cellml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/cfw": {
        "source": "iana"
    },
    "application/city+json": {
        "source": "iana",
        "compressible": true
    },
    "application/clr": {
        "source": "iana"
    },
    "application/clue+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/clue_info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/cms": {
        "source": "iana"
    },
    "application/cnrp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/coap-group+json": {
        "source": "iana",
        "compressible": true
    },
    "application/coap-payload": {
        "source": "iana"
    },
    "application/commonground": {
        "source": "iana"
    },
    "application/conference-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/cose": {
        "source": "iana"
    },
    "application/cose-key": {
        "source": "iana"
    },
    "application/cose-key-set": {
        "source": "iana"
    },
    "application/cpl+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "cpl"
        ]
    },
    "application/csrattrs": {
        "source": "iana"
    },
    "application/csta+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/cstadata+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/csvm+json": {
        "source": "iana",
        "compressible": true
    },
    "application/cu-seeme": {
        "source": "apache",
        "extensions": [
            "cu"
        ]
    },
    "application/cwt": {
        "source": "iana"
    },
    "application/cybercash": {
        "source": "iana"
    },
    "application/dart": {
        "compressible": true
    },
    "application/dash+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mpd"
        ]
    },
    "application/dash-patch+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mpp"
        ]
    },
    "application/dashdelta": {
        "source": "iana"
    },
    "application/davmount+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "davmount"
        ]
    },
    "application/dca-rft": {
        "source": "iana"
    },
    "application/dcd": {
        "source": "iana"
    },
    "application/dec-dx": {
        "source": "iana"
    },
    "application/dialog-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/dicom": {
        "source": "iana"
    },
    "application/dicom+json": {
        "source": "iana",
        "compressible": true
    },
    "application/dicom+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/dii": {
        "source": "iana"
    },
    "application/dit": {
        "source": "iana"
    },
    "application/dns": {
        "source": "iana"
    },
    "application/dns+json": {
        "source": "iana",
        "compressible": true
    },
    "application/dns-message": {
        "source": "iana"
    },
    "application/docbook+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "dbk"
        ]
    },
    "application/dots+cbor": {
        "source": "iana"
    },
    "application/dskpp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/dssc+der": {
        "source": "iana",
        "extensions": [
            "dssc"
        ]
    },
    "application/dssc+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xdssc"
        ]
    },
    "application/dvcs": {
        "source": "iana"
    },
    "application/ecmascript": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "es",
            "ecma"
        ]
    },
    "application/edi-consent": {
        "source": "iana"
    },
    "application/edi-x12": {
        "source": "iana",
        "compressible": false
    },
    "application/edifact": {
        "source": "iana",
        "compressible": false
    },
    "application/efi": {
        "source": "iana"
    },
    "application/elm+json": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/elm+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.cap+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/emergencycalldata.comment+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.control+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.deviceinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.ecall.msd": {
        "source": "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.serviceinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emergencycalldata.veds+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/emma+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "emma"
        ]
    },
    "application/emotionml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "emotionml"
        ]
    },
    "application/encaprtp": {
        "source": "iana"
    },
    "application/epp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/epub+zip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "epub"
        ]
    },
    "application/eshop": {
        "source": "iana"
    },
    "application/exi": {
        "source": "iana",
        "extensions": [
            "exi"
        ]
    },
    "application/expect-ct-report+json": {
        "source": "iana",
        "compressible": true
    },
    "application/express": {
        "source": "iana",
        "extensions": [
            "exp"
        ]
    },
    "application/fastinfoset": {
        "source": "iana"
    },
    "application/fastsoap": {
        "source": "iana"
    },
    "application/fdt+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "fdt"
        ]
    },
    "application/fhir+json": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/fhir+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/fido.trusted-apps+json": {
        "compressible": true
    },
    "application/fits": {
        "source": "iana"
    },
    "application/flexfec": {
        "source": "iana"
    },
    "application/font-sfnt": {
        "source": "iana"
    },
    "application/font-tdpfr": {
        "source": "iana",
        "extensions": [
            "pfr"
        ]
    },
    "application/font-woff": {
        "source": "iana",
        "compressible": false
    },
    "application/framework-attributes+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/geo+json": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "geojson"
        ]
    },
    "application/geo+json-seq": {
        "source": "iana"
    },
    "application/geopackage+sqlite3": {
        "source": "iana"
    },
    "application/geoxacml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/gltf-buffer": {
        "source": "iana"
    },
    "application/gml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "gml"
        ]
    },
    "application/gpx+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "gpx"
        ]
    },
    "application/gxf": {
        "source": "apache",
        "extensions": [
            "gxf"
        ]
    },
    "application/gzip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "gz"
        ]
    },
    "application/h224": {
        "source": "iana"
    },
    "application/held+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/hjson": {
        "extensions": [
            "hjson"
        ]
    },
    "application/http": {
        "source": "iana"
    },
    "application/hyperstudio": {
        "source": "iana",
        "extensions": [
            "stk"
        ]
    },
    "application/ibe-key-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/ibe-pkg-reply+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/ibe-pp-data": {
        "source": "iana"
    },
    "application/iges": {
        "source": "iana"
    },
    "application/im-iscomposing+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/index": {
        "source": "iana"
    },
    "application/index.cmd": {
        "source": "iana"
    },
    "application/index.obj": {
        "source": "iana"
    },
    "application/index.response": {
        "source": "iana"
    },
    "application/index.vnd": {
        "source": "iana"
    },
    "application/inkml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ink",
            "inkml"
        ]
    },
    "application/iotp": {
        "source": "iana"
    },
    "application/ipfix": {
        "source": "iana",
        "extensions": [
            "ipfix"
        ]
    },
    "application/ipp": {
        "source": "iana"
    },
    "application/isup": {
        "source": "iana"
    },
    "application/its+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "its"
        ]
    },
    "application/java-archive": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "jar",
            "war",
            "ear"
        ]
    },
    "application/java-serialized-object": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "ser"
        ]
    },
    "application/java-vm": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "class"
        ]
    },
    "application/javascript": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "js",
            "mjs"
        ]
    },
    "application/jf2feed+json": {
        "source": "iana",
        "compressible": true
    },
    "application/jose": {
        "source": "iana"
    },
    "application/jose+json": {
        "source": "iana",
        "compressible": true
    },
    "application/jrd+json": {
        "source": "iana",
        "compressible": true
    },
    "application/jscalendar+json": {
        "source": "iana",
        "compressible": true
    },
    "application/json": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "json",
            "map"
        ]
    },
    "application/json-patch+json": {
        "source": "iana",
        "compressible": true
    },
    "application/json-seq": {
        "source": "iana"
    },
    "application/json5": {
        "extensions": [
            "json5"
        ]
    },
    "application/jsonml+json": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "jsonml"
        ]
    },
    "application/jwk+json": {
        "source": "iana",
        "compressible": true
    },
    "application/jwk-set+json": {
        "source": "iana",
        "compressible": true
    },
    "application/jwt": {
        "source": "iana"
    },
    "application/kpml-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/kpml-response+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/ld+json": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "jsonld"
        ]
    },
    "application/lgr+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "lgr"
        ]
    },
    "application/link-format": {
        "source": "iana"
    },
    "application/load-control+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/lost+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "lostxml"
        ]
    },
    "application/lostsync+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/lpf+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/lxf": {
        "source": "iana"
    },
    "application/mac-binhex40": {
        "source": "iana",
        "extensions": [
            "hqx"
        ]
    },
    "application/mac-compactpro": {
        "source": "apache",
        "extensions": [
            "cpt"
        ]
    },
    "application/macwriteii": {
        "source": "iana"
    },
    "application/mads+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mads"
        ]
    },
    "application/manifest+json": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "webmanifest"
        ]
    },
    "application/marc": {
        "source": "iana",
        "extensions": [
            "mrc"
        ]
    },
    "application/marcxml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mrcx"
        ]
    },
    "application/mathematica": {
        "source": "iana",
        "extensions": [
            "ma",
            "nb",
            "mb"
        ]
    },
    "application/mathml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mathml"
        ]
    },
    "application/mathml-content+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mathml-presentation+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-associated-procedure-description+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-deregister+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-envelope+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-msk+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-msk-response+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-protection-description+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-reception-report+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-register+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-register-response+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-schedule+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbms-user-service-description+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mbox": {
        "source": "iana",
        "extensions": [
            "mbox"
        ]
    },
    "application/media-policy-dataset+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mpf"
        ]
    },
    "application/media_control+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mediaservercontrol+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mscml"
        ]
    },
    "application/merge-patch+json": {
        "source": "iana",
        "compressible": true
    },
    "application/metalink+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "metalink"
        ]
    },
    "application/metalink4+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "meta4"
        ]
    },
    "application/mets+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mets"
        ]
    },
    "application/mf4": {
        "source": "iana"
    },
    "application/mikey": {
        "source": "iana"
    },
    "application/mipc": {
        "source": "iana"
    },
    "application/missing-blocks+cbor-seq": {
        "source": "iana"
    },
    "application/mmt-aei+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "maei"
        ]
    },
    "application/mmt-usd+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "musd"
        ]
    },
    "application/mods+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mods"
        ]
    },
    "application/moss-keys": {
        "source": "iana"
    },
    "application/moss-signature": {
        "source": "iana"
    },
    "application/mosskey-data": {
        "source": "iana"
    },
    "application/mosskey-request": {
        "source": "iana"
    },
    "application/mp21": {
        "source": "iana",
        "extensions": [
            "m21",
            "mp21"
        ]
    },
    "application/mp4": {
        "source": "iana",
        "extensions": [
            "mp4s",
            "m4p"
        ]
    },
    "application/mpeg4-generic": {
        "source": "iana"
    },
    "application/mpeg4-iod": {
        "source": "iana"
    },
    "application/mpeg4-iod-xmt": {
        "source": "iana"
    },
    "application/mrb-consumer+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/mrb-publish+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/msc-ivr+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/msc-mixer+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/msword": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "doc",
            "dot"
        ]
    },
    "application/mud+json": {
        "source": "iana",
        "compressible": true
    },
    "application/multipart-core": {
        "source": "iana"
    },
    "application/mxf": {
        "source": "iana",
        "extensions": [
            "mxf"
        ]
    },
    "application/n-quads": {
        "source": "iana",
        "extensions": [
            "nq"
        ]
    },
    "application/n-triples": {
        "source": "iana",
        "extensions": [
            "nt"
        ]
    },
    "application/nasdata": {
        "source": "iana"
    },
    "application/news-checkgroups": {
        "source": "iana",
        "charset": "US-ASCII"
    },
    "application/news-groupinfo": {
        "source": "iana",
        "charset": "US-ASCII"
    },
    "application/news-transmission": {
        "source": "iana"
    },
    "application/nlsml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/node": {
        "source": "iana",
        "extensions": [
            "cjs"
        ]
    },
    "application/nss": {
        "source": "iana"
    },
    "application/oauth-authz-req+jwt": {
        "source": "iana"
    },
    "application/oblivious-dns-message": {
        "source": "iana"
    },
    "application/ocsp-request": {
        "source": "iana"
    },
    "application/ocsp-response": {
        "source": "iana"
    },
    "application/octet-stream": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "bin",
            "dms",
            "lrf",
            "mar",
            "so",
            "dist",
            "distz",
            "pkg",
            "bpk",
            "dump",
            "elc",
            "deploy",
            "exe",
            "dll",
            "deb",
            "dmg",
            "iso",
            "img",
            "msi",
            "msp",
            "msm",
            "buffer"
        ]
    },
    "application/oda": {
        "source": "iana",
        "extensions": [
            "oda"
        ]
    },
    "application/odm+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/odx": {
        "source": "iana"
    },
    "application/oebps-package+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "opf"
        ]
    },
    "application/ogg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "ogx"
        ]
    },
    "application/omdoc+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "omdoc"
        ]
    },
    "application/onenote": {
        "source": "apache",
        "extensions": [
            "onetoc",
            "onetoc2",
            "onetmp",
            "onepkg"
        ]
    },
    "application/opc-nodeset+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/oscore": {
        "source": "iana"
    },
    "application/oxps": {
        "source": "iana",
        "extensions": [
            "oxps"
        ]
    },
    "application/p21": {
        "source": "iana"
    },
    "application/p21+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/p2p-overlay+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "relo"
        ]
    },
    "application/parityfec": {
        "source": "iana"
    },
    "application/passport": {
        "source": "iana"
    },
    "application/patch-ops-error+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xer"
        ]
    },
    "application/pdf": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "pdf"
        ]
    },
    "application/pdx": {
        "source": "iana"
    },
    "application/pem-certificate-chain": {
        "source": "iana"
    },
    "application/pgp-encrypted": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "pgp"
        ]
    },
    "application/pgp-keys": {
        "source": "iana",
        "extensions": [
            "asc"
        ]
    },
    "application/pgp-signature": {
        "source": "iana",
        "extensions": [
            "asc",
            "sig"
        ]
    },
    "application/pics-rules": {
        "source": "apache",
        "extensions": [
            "prf"
        ]
    },
    "application/pidf+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/pidf-diff+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/pkcs10": {
        "source": "iana",
        "extensions": [
            "p10"
        ]
    },
    "application/pkcs12": {
        "source": "iana"
    },
    "application/pkcs7-mime": {
        "source": "iana",
        "extensions": [
            "p7m",
            "p7c"
        ]
    },
    "application/pkcs7-signature": {
        "source": "iana",
        "extensions": [
            "p7s"
        ]
    },
    "application/pkcs8": {
        "source": "iana",
        "extensions": [
            "p8"
        ]
    },
    "application/pkcs8-encrypted": {
        "source": "iana"
    },
    "application/pkix-attr-cert": {
        "source": "iana",
        "extensions": [
            "ac"
        ]
    },
    "application/pkix-cert": {
        "source": "iana",
        "extensions": [
            "cer"
        ]
    },
    "application/pkix-crl": {
        "source": "iana",
        "extensions": [
            "crl"
        ]
    },
    "application/pkix-pkipath": {
        "source": "iana",
        "extensions": [
            "pkipath"
        ]
    },
    "application/pkixcmp": {
        "source": "iana",
        "extensions": [
            "pki"
        ]
    },
    "application/pls+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "pls"
        ]
    },
    "application/poc-settings+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/postscript": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ai",
            "eps",
            "ps"
        ]
    },
    "application/ppsp-tracker+json": {
        "source": "iana",
        "compressible": true
    },
    "application/problem+json": {
        "source": "iana",
        "compressible": true
    },
    "application/problem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/provenance+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "provx"
        ]
    },
    "application/prs.alvestrand.titrax-sheet": {
        "source": "iana"
    },
    "application/prs.cww": {
        "source": "iana",
        "extensions": [
            "cww"
        ]
    },
    "application/prs.cyn": {
        "source": "iana",
        "charset": "7-BIT"
    },
    "application/prs.hpub+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/prs.nprend": {
        "source": "iana"
    },
    "application/prs.plucker": {
        "source": "iana"
    },
    "application/prs.rdf-xml-crypt": {
        "source": "iana"
    },
    "application/prs.xsf+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/pskc+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "pskcxml"
        ]
    },
    "application/pvd+json": {
        "source": "iana",
        "compressible": true
    },
    "application/qsig": {
        "source": "iana"
    },
    "application/raml+yaml": {
        "compressible": true,
        "extensions": [
            "raml"
        ]
    },
    "application/raptorfec": {
        "source": "iana"
    },
    "application/rdap+json": {
        "source": "iana",
        "compressible": true
    },
    "application/rdf+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rdf",
            "owl"
        ]
    },
    "application/reginfo+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rif"
        ]
    },
    "application/relax-ng-compact-syntax": {
        "source": "iana",
        "extensions": [
            "rnc"
        ]
    },
    "application/remote-printing": {
        "source": "iana"
    },
    "application/reputon+json": {
        "source": "iana",
        "compressible": true
    },
    "application/resource-lists+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rl"
        ]
    },
    "application/resource-lists-diff+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rld"
        ]
    },
    "application/rfc+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/riscos": {
        "source": "iana"
    },
    "application/rlmi+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/rls-services+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rs"
        ]
    },
    "application/route-apd+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rapd"
        ]
    },
    "application/route-s-tsid+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "sls"
        ]
    },
    "application/route-usd+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rusd"
        ]
    },
    "application/rpki-ghostbusters": {
        "source": "iana",
        "extensions": [
            "gbr"
        ]
    },
    "application/rpki-manifest": {
        "source": "iana",
        "extensions": [
            "mft"
        ]
    },
    "application/rpki-publication": {
        "source": "iana"
    },
    "application/rpki-roa": {
        "source": "iana",
        "extensions": [
            "roa"
        ]
    },
    "application/rpki-updown": {
        "source": "iana"
    },
    "application/rsd+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "rsd"
        ]
    },
    "application/rss+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "rss"
        ]
    },
    "application/rtf": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rtf"
        ]
    },
    "application/rtploopback": {
        "source": "iana"
    },
    "application/rtx": {
        "source": "iana"
    },
    "application/samlassertion+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/samlmetadata+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/sarif+json": {
        "source": "iana",
        "compressible": true
    },
    "application/sarif-external-properties+json": {
        "source": "iana",
        "compressible": true
    },
    "application/sbe": {
        "source": "iana"
    },
    "application/sbml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "sbml"
        ]
    },
    "application/scaip+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/scim+json": {
        "source": "iana",
        "compressible": true
    },
    "application/scvp-cv-request": {
        "source": "iana",
        "extensions": [
            "scq"
        ]
    },
    "application/scvp-cv-response": {
        "source": "iana",
        "extensions": [
            "scs"
        ]
    },
    "application/scvp-vp-request": {
        "source": "iana",
        "extensions": [
            "spq"
        ]
    },
    "application/scvp-vp-response": {
        "source": "iana",
        "extensions": [
            "spp"
        ]
    },
    "application/sdp": {
        "source": "iana",
        "extensions": [
            "sdp"
        ]
    },
    "application/secevent+jwt": {
        "source": "iana"
    },
    "application/senml+cbor": {
        "source": "iana"
    },
    "application/senml+json": {
        "source": "iana",
        "compressible": true
    },
    "application/senml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "senmlx"
        ]
    },
    "application/senml-etch+cbor": {
        "source": "iana"
    },
    "application/senml-etch+json": {
        "source": "iana",
        "compressible": true
    },
    "application/senml-exi": {
        "source": "iana"
    },
    "application/sensml+cbor": {
        "source": "iana"
    },
    "application/sensml+json": {
        "source": "iana",
        "compressible": true
    },
    "application/sensml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "sensmlx"
        ]
    },
    "application/sensml-exi": {
        "source": "iana"
    },
    "application/sep+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/sep-exi": {
        "source": "iana"
    },
    "application/session-info": {
        "source": "iana"
    },
    "application/set-payment": {
        "source": "iana"
    },
    "application/set-payment-initiation": {
        "source": "iana",
        "extensions": [
            "setpay"
        ]
    },
    "application/set-registration": {
        "source": "iana"
    },
    "application/set-registration-initiation": {
        "source": "iana",
        "extensions": [
            "setreg"
        ]
    },
    "application/sgml": {
        "source": "iana"
    },
    "application/sgml-open-catalog": {
        "source": "iana"
    },
    "application/shf+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "shf"
        ]
    },
    "application/sieve": {
        "source": "iana",
        "extensions": [
            "siv",
            "sieve"
        ]
    },
    "application/simple-filter+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/simple-message-summary": {
        "source": "iana"
    },
    "application/simplesymbolcontainer": {
        "source": "iana"
    },
    "application/sipc": {
        "source": "iana"
    },
    "application/slate": {
        "source": "iana"
    },
    "application/smil": {
        "source": "iana"
    },
    "application/smil+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "smi",
            "smil"
        ]
    },
    "application/smpte336m": {
        "source": "iana"
    },
    "application/soap+fastinfoset": {
        "source": "iana"
    },
    "application/soap+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/sparql-query": {
        "source": "iana",
        "extensions": [
            "rq"
        ]
    },
    "application/sparql-results+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "srx"
        ]
    },
    "application/spdx+json": {
        "source": "iana",
        "compressible": true
    },
    "application/spirits-event+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/sql": {
        "source": "iana"
    },
    "application/srgs": {
        "source": "iana",
        "extensions": [
            "gram"
        ]
    },
    "application/srgs+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "grxml"
        ]
    },
    "application/sru+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "sru"
        ]
    },
    "application/ssdl+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "ssdl"
        ]
    },
    "application/ssml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ssml"
        ]
    },
    "application/stix+json": {
        "source": "iana",
        "compressible": true
    },
    "application/swid+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "swidtag"
        ]
    },
    "application/tamp-apex-update": {
        "source": "iana"
    },
    "application/tamp-apex-update-confirm": {
        "source": "iana"
    },
    "application/tamp-community-update": {
        "source": "iana"
    },
    "application/tamp-community-update-confirm": {
        "source": "iana"
    },
    "application/tamp-error": {
        "source": "iana"
    },
    "application/tamp-sequence-adjust": {
        "source": "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
        "source": "iana"
    },
    "application/tamp-status-query": {
        "source": "iana"
    },
    "application/tamp-status-response": {
        "source": "iana"
    },
    "application/tamp-update": {
        "source": "iana"
    },
    "application/tamp-update-confirm": {
        "source": "iana"
    },
    "application/tar": {
        "compressible": true
    },
    "application/taxii+json": {
        "source": "iana",
        "compressible": true
    },
    "application/td+json": {
        "source": "iana",
        "compressible": true
    },
    "application/tei+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "tei",
            "teicorpus"
        ]
    },
    "application/tetra_isi": {
        "source": "iana"
    },
    "application/thraud+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "tfi"
        ]
    },
    "application/timestamp-query": {
        "source": "iana"
    },
    "application/timestamp-reply": {
        "source": "iana"
    },
    "application/timestamped-data": {
        "source": "iana",
        "extensions": [
            "tsd"
        ]
    },
    "application/tlsrpt+gzip": {
        "source": "iana"
    },
    "application/tlsrpt+json": {
        "source": "iana",
        "compressible": true
    },
    "application/tnauthlist": {
        "source": "iana"
    },
    "application/token-introspection+jwt": {
        "source": "iana"
    },
    "application/toml": {
        "compressible": true,
        "extensions": [
            "toml"
        ]
    },
    "application/trickle-ice-sdpfrag": {
        "source": "iana"
    },
    "application/trig": {
        "source": "iana",
        "extensions": [
            "trig"
        ]
    },
    "application/ttml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ttml"
        ]
    },
    "application/tve-trigger": {
        "source": "iana"
    },
    "application/tzif": {
        "source": "iana"
    },
    "application/tzif-leap": {
        "source": "iana"
    },
    "application/ubjson": {
        "compressible": false,
        "extensions": [
            "ubj"
        ]
    },
    "application/ulpfec": {
        "source": "iana"
    },
    "application/urc-grpsheet+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/urc-ressheet+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rsheet"
        ]
    },
    "application/urc-targetdesc+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "td"
        ]
    },
    "application/urc-uisocketdesc+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vcard+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vcard+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vemmi": {
        "source": "iana"
    },
    "application/vividence.scriptfile": {
        "source": "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "1km"
        ]
    },
    "application/vnd.3gpp-prose+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
        "source": "iana"
    },
    "application/vnd.3gpp.5gnas": {
        "source": "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.bsf+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.gmop+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.gtpc": {
        "source": "iana"
    },
    "application/vnd.3gpp.interworking-data": {
        "source": "iana"
    },
    "application/vnd.3gpp.lpp": {
        "source": "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
        "source": "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcdata-payload": {
        "source": "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcdata-signalling": {
        "source": "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.mid-call+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.ngap": {
        "source": "iana"
    },
    "application/vnd.3gpp.pfcp": {
        "source": "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
        "source": "iana",
        "extensions": [
            "plb"
        ]
    },
    "application/vnd.3gpp.pic-bw-small": {
        "source": "iana",
        "extensions": [
            "psb"
        ]
    },
    "application/vnd.3gpp.pic-bw-var": {
        "source": "iana",
        "extensions": [
            "pvb"
        ]
    },
    "application/vnd.3gpp.s1ap": {
        "source": "iana"
    },
    "application/vnd.3gpp.sms": {
        "source": "iana"
    },
    "application/vnd.3gpp.sms+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp.ussd+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.3gpp2.sms": {
        "source": "iana"
    },
    "application/vnd.3gpp2.tcap": {
        "source": "iana",
        "extensions": [
            "tcap"
        ]
    },
    "application/vnd.3lightssoftware.imagescal": {
        "source": "iana"
    },
    "application/vnd.3m.post-it-notes": {
        "source": "iana",
        "extensions": [
            "pwn"
        ]
    },
    "application/vnd.accpac.simply.aso": {
        "source": "iana",
        "extensions": [
            "aso"
        ]
    },
    "application/vnd.accpac.simply.imp": {
        "source": "iana",
        "extensions": [
            "imp"
        ]
    },
    "application/vnd.acucobol": {
        "source": "iana",
        "extensions": [
            "acu"
        ]
    },
    "application/vnd.acucorp": {
        "source": "iana",
        "extensions": [
            "atc",
            "acutc"
        ]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "air"
        ]
    },
    "application/vnd.adobe.flash.movie": {
        "source": "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
        "source": "iana",
        "extensions": [
            "fcdt"
        ]
    },
    "application/vnd.adobe.fxp": {
        "source": "iana",
        "extensions": [
            "fxp",
            "fxpl"
        ]
    },
    "application/vnd.adobe.partial-upload": {
        "source": "iana"
    },
    "application/vnd.adobe.xdp+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xdp"
        ]
    },
    "application/vnd.adobe.xfdf": {
        "source": "iana",
        "extensions": [
            "xfdf"
        ]
    },
    "application/vnd.aether.imp": {
        "source": "iana"
    },
    "application/vnd.afpc.afplinedata": {
        "source": "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
        "source": "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
        "source": "iana"
    },
    "application/vnd.afpc.foca-charset": {
        "source": "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
        "source": "iana"
    },
    "application/vnd.afpc.foca-codepage": {
        "source": "iana"
    },
    "application/vnd.afpc.modca": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-formdef": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-overlay": {
        "source": "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
        "source": "iana"
    },
    "application/vnd.age": {
        "source": "iana",
        "extensions": [
            "age"
        ]
    },
    "application/vnd.ah-barcode": {
        "source": "iana"
    },
    "application/vnd.ahead.space": {
        "source": "iana",
        "extensions": [
            "ahead"
        ]
    },
    "application/vnd.airzip.filesecure.azf": {
        "source": "iana",
        "extensions": [
            "azf"
        ]
    },
    "application/vnd.airzip.filesecure.azs": {
        "source": "iana",
        "extensions": [
            "azs"
        ]
    },
    "application/vnd.amadeus+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.amazon.ebook": {
        "source": "apache",
        "extensions": [
            "azw"
        ]
    },
    "application/vnd.amazon.mobi8-ebook": {
        "source": "iana"
    },
    "application/vnd.americandynamics.acc": {
        "source": "iana",
        "extensions": [
            "acc"
        ]
    },
    "application/vnd.amiga.ami": {
        "source": "iana",
        "extensions": [
            "ami"
        ]
    },
    "application/vnd.amundsen.maze+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.android.ota": {
        "source": "iana"
    },
    "application/vnd.android.package-archive": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "apk"
        ]
    },
    "application/vnd.anki": {
        "source": "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
        "source": "iana",
        "extensions": [
            "cii"
        ]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
        "source": "apache",
        "extensions": [
            "fti"
        ]
    },
    "application/vnd.antix.game-component": {
        "source": "iana",
        "extensions": [
            "atx"
        ]
    },
    "application/vnd.apache.arrow.file": {
        "source": "iana"
    },
    "application/vnd.apache.arrow.stream": {
        "source": "iana"
    },
    "application/vnd.apache.thrift.binary": {
        "source": "iana"
    },
    "application/vnd.apache.thrift.compact": {
        "source": "iana"
    },
    "application/vnd.apache.thrift.json": {
        "source": "iana"
    },
    "application/vnd.api+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.aplextor.warrp+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.apothekende.reservation+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.apple.installer+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mpkg"
        ]
    },
    "application/vnd.apple.keynote": {
        "source": "iana",
        "extensions": [
            "key"
        ]
    },
    "application/vnd.apple.mpegurl": {
        "source": "iana",
        "extensions": [
            "m3u8"
        ]
    },
    "application/vnd.apple.numbers": {
        "source": "iana",
        "extensions": [
            "numbers"
        ]
    },
    "application/vnd.apple.pages": {
        "source": "iana",
        "extensions": [
            "pages"
        ]
    },
    "application/vnd.apple.pkpass": {
        "compressible": false,
        "extensions": [
            "pkpass"
        ]
    },
    "application/vnd.arastra.swi": {
        "source": "iana"
    },
    "application/vnd.aristanetworks.swi": {
        "source": "iana",
        "extensions": [
            "swi"
        ]
    },
    "application/vnd.artisan+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.artsquare": {
        "source": "iana"
    },
    "application/vnd.astraea-software.iota": {
        "source": "iana",
        "extensions": [
            "iota"
        ]
    },
    "application/vnd.audiograph": {
        "source": "iana",
        "extensions": [
            "aep"
        ]
    },
    "application/vnd.autopackage": {
        "source": "iana"
    },
    "application/vnd.avalon+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.avistar+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.balsamiq.bmml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "bmml"
        ]
    },
    "application/vnd.balsamiq.bmpr": {
        "source": "iana"
    },
    "application/vnd.banana-accounting": {
        "source": "iana"
    },
    "application/vnd.bbf.usp.error": {
        "source": "iana"
    },
    "application/vnd.bbf.usp.msg": {
        "source": "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.bekitzur-stech+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.bint.med-content": {
        "source": "iana"
    },
    "application/vnd.biopax.rdf+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.blink-idb-value-wrapper": {
        "source": "iana"
    },
    "application/vnd.blueice.multipass": {
        "source": "iana",
        "extensions": [
            "mpm"
        ]
    },
    "application/vnd.bluetooth.ep.oob": {
        "source": "iana"
    },
    "application/vnd.bluetooth.le.oob": {
        "source": "iana"
    },
    "application/vnd.bmi": {
        "source": "iana",
        "extensions": [
            "bmi"
        ]
    },
    "application/vnd.bpf": {
        "source": "iana"
    },
    "application/vnd.bpf3": {
        "source": "iana"
    },
    "application/vnd.businessobjects": {
        "source": "iana",
        "extensions": [
            "rep"
        ]
    },
    "application/vnd.byu.uapi+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cab-jscript": {
        "source": "iana"
    },
    "application/vnd.canon-cpdl": {
        "source": "iana"
    },
    "application/vnd.canon-lips": {
        "source": "iana"
    },
    "application/vnd.capasystems-pg+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
        "source": "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
        "source": "iana"
    },
    "application/vnd.chemdraw+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "cdxml"
        ]
    },
    "application/vnd.chess-pgn": {
        "source": "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
        "source": "iana",
        "extensions": [
            "mmd"
        ]
    },
    "application/vnd.ciedi": {
        "source": "iana"
    },
    "application/vnd.cinderella": {
        "source": "iana",
        "extensions": [
            "cdy"
        ]
    },
    "application/vnd.cirpack.isdn-ext": {
        "source": "iana"
    },
    "application/vnd.citationstyles.style+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "csl"
        ]
    },
    "application/vnd.claymore": {
        "source": "iana",
        "extensions": [
            "cla"
        ]
    },
    "application/vnd.cloanto.rp9": {
        "source": "iana",
        "extensions": [
            "rp9"
        ]
    },
    "application/vnd.clonk.c4group": {
        "source": "iana",
        "extensions": [
            "c4g",
            "c4d",
            "c4f",
            "c4p",
            "c4u"
        ]
    },
    "application/vnd.cluetrust.cartomobile-config": {
        "source": "iana",
        "extensions": [
            "c11amc"
        ]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
        "source": "iana",
        "extensions": [
            "c11amz"
        ]
    },
    "application/vnd.coffeescript": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
        "source": "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
        "source": "iana"
    },
    "application/vnd.collection+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.collection.doc+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.collection.next+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.comicbook+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.comicbook-rar": {
        "source": "iana"
    },
    "application/vnd.commerce-battelle": {
        "source": "iana"
    },
    "application/vnd.commonspace": {
        "source": "iana",
        "extensions": [
            "csp"
        ]
    },
    "application/vnd.contact.cmsg": {
        "source": "iana",
        "extensions": [
            "cdbcmsg"
        ]
    },
    "application/vnd.coreos.ignition+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cosmocaller": {
        "source": "iana",
        "extensions": [
            "cmc"
        ]
    },
    "application/vnd.crick.clicker": {
        "source": "iana",
        "extensions": [
            "clkx"
        ]
    },
    "application/vnd.crick.clicker.keyboard": {
        "source": "iana",
        "extensions": [
            "clkk"
        ]
    },
    "application/vnd.crick.clicker.palette": {
        "source": "iana",
        "extensions": [
            "clkp"
        ]
    },
    "application/vnd.crick.clicker.template": {
        "source": "iana",
        "extensions": [
            "clkt"
        ]
    },
    "application/vnd.crick.clicker.wordbank": {
        "source": "iana",
        "extensions": [
            "clkw"
        ]
    },
    "application/vnd.criticaltools.wbs+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wbs"
        ]
    },
    "application/vnd.cryptii.pipe+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.crypto-shade-file": {
        "source": "iana"
    },
    "application/vnd.cryptomator.encrypted": {
        "source": "iana"
    },
    "application/vnd.cryptomator.vault": {
        "source": "iana"
    },
    "application/vnd.ctc-posml": {
        "source": "iana",
        "extensions": [
            "pml"
        ]
    },
    "application/vnd.ctct.ws+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cups-pdf": {
        "source": "iana"
    },
    "application/vnd.cups-postscript": {
        "source": "iana"
    },
    "application/vnd.cups-ppd": {
        "source": "iana",
        "extensions": [
            "ppd"
        ]
    },
    "application/vnd.cups-raster": {
        "source": "iana"
    },
    "application/vnd.cups-raw": {
        "source": "iana"
    },
    "application/vnd.curl": {
        "source": "iana"
    },
    "application/vnd.curl.car": {
        "source": "apache",
        "extensions": [
            "car"
        ]
    },
    "application/vnd.curl.pcurl": {
        "source": "apache",
        "extensions": [
            "pcurl"
        ]
    },
    "application/vnd.cyan.dean.root+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cybank": {
        "source": "iana"
    },
    "application/vnd.cyclonedx+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.cyclonedx+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.d3m-dataset": {
        "source": "iana"
    },
    "application/vnd.d3m-problem": {
        "source": "iana"
    },
    "application/vnd.dart": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "dart"
        ]
    },
    "application/vnd.data-vision.rdz": {
        "source": "iana",
        "extensions": [
            "rdz"
        ]
    },
    "application/vnd.datapackage+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dataresource+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dbf": {
        "source": "iana",
        "extensions": [
            "dbf"
        ]
    },
    "application/vnd.debian.binary-package": {
        "source": "iana"
    },
    "application/vnd.dece.data": {
        "source": "iana",
        "extensions": [
            "uvf",
            "uvvf",
            "uvd",
            "uvvd"
        ]
    },
    "application/vnd.dece.ttml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "uvt",
            "uvvt"
        ]
    },
    "application/vnd.dece.unspecified": {
        "source": "iana",
        "extensions": [
            "uvx",
            "uvvx"
        ]
    },
    "application/vnd.dece.zip": {
        "source": "iana",
        "extensions": [
            "uvz",
            "uvvz"
        ]
    },
    "application/vnd.denovo.fcselayout-link": {
        "source": "iana",
        "extensions": [
            "fe_launch"
        ]
    },
    "application/vnd.desmume.movie": {
        "source": "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
        "source": "iana"
    },
    "application/vnd.dm.delegation+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dna": {
        "source": "iana",
        "extensions": [
            "dna"
        ]
    },
    "application/vnd.document+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dolby.mlp": {
        "source": "apache",
        "extensions": [
            "mlp"
        ]
    },
    "application/vnd.dolby.mobile.1": {
        "source": "iana"
    },
    "application/vnd.dolby.mobile.2": {
        "source": "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
        "source": "iana"
    },
    "application/vnd.dpgraph": {
        "source": "iana",
        "extensions": [
            "dpg"
        ]
    },
    "application/vnd.dreamfactory": {
        "source": "iana",
        "extensions": [
            "dfac"
        ]
    },
    "application/vnd.drive+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ds-keypoint": {
        "source": "apache",
        "extensions": [
            "kpxx"
        ]
    },
    "application/vnd.dtg.local": {
        "source": "iana"
    },
    "application/vnd.dtg.local.flash": {
        "source": "iana"
    },
    "application/vnd.dtg.local.html": {
        "source": "iana"
    },
    "application/vnd.dvb.ait": {
        "source": "iana",
        "extensions": [
            "ait"
        ]
    },
    "application/vnd.dvb.dvbisl+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.dvbj": {
        "source": "iana"
    },
    "application/vnd.dvb.esgcontainer": {
        "source": "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
        "source": "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
        "source": "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
        "source": "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
        "source": "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
        "source": "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
        "source": "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
        "source": "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-container+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-generic+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.notif-init+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.dvb.pfr": {
        "source": "iana"
    },
    "application/vnd.dvb.service": {
        "source": "iana",
        "extensions": [
            "svc"
        ]
    },
    "application/vnd.dxr": {
        "source": "iana"
    },
    "application/vnd.dynageo": {
        "source": "iana",
        "extensions": [
            "geo"
        ]
    },
    "application/vnd.dzr": {
        "source": "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
        "source": "iana"
    },
    "application/vnd.ecdis-update": {
        "source": "iana"
    },
    "application/vnd.ecip.rlp": {
        "source": "iana"
    },
    "application/vnd.eclipse.ditto+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ecowin.chart": {
        "source": "iana",
        "extensions": [
            "mag"
        ]
    },
    "application/vnd.ecowin.filerequest": {
        "source": "iana"
    },
    "application/vnd.ecowin.fileupdate": {
        "source": "iana"
    },
    "application/vnd.ecowin.series": {
        "source": "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
        "source": "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
        "source": "iana"
    },
    "application/vnd.efi.img": {
        "source": "iana"
    },
    "application/vnd.efi.iso": {
        "source": "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.enliven": {
        "source": "iana",
        "extensions": [
            "nml"
        ]
    },
    "application/vnd.enphase.envoy": {
        "source": "iana"
    },
    "application/vnd.eprints.data+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.epson.esf": {
        "source": "iana",
        "extensions": [
            "esf"
        ]
    },
    "application/vnd.epson.msf": {
        "source": "iana",
        "extensions": [
            "msf"
        ]
    },
    "application/vnd.epson.quickanime": {
        "source": "iana",
        "extensions": [
            "qam"
        ]
    },
    "application/vnd.epson.salt": {
        "source": "iana",
        "extensions": [
            "slt"
        ]
    },
    "application/vnd.epson.ssf": {
        "source": "iana",
        "extensions": [
            "ssf"
        ]
    },
    "application/vnd.ericsson.quickcall": {
        "source": "iana"
    },
    "application/vnd.espass-espass+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.eszigno3+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "es3",
            "et3"
        ]
    },
    "application/vnd.etsi.aoc+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.asic-e+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.etsi.asic-s+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.etsi.cug+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvcommand+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvprofile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvservice+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvsync+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.mcid+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.mheg5": {
        "source": "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.pstn+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.sci+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.simservs+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.timestamp-token": {
        "source": "iana"
    },
    "application/vnd.etsi.tsl+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.etsi.tsl.der": {
        "source": "iana"
    },
    "application/vnd.eu.kasparian.car+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.eudora.data": {
        "source": "iana"
    },
    "application/vnd.evolv.ecig.profile": {
        "source": "iana"
    },
    "application/vnd.evolv.ecig.settings": {
        "source": "iana"
    },
    "application/vnd.evolv.ecig.theme": {
        "source": "iana"
    },
    "application/vnd.exstream-empower+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.exstream-package": {
        "source": "iana"
    },
    "application/vnd.ezpix-album": {
        "source": "iana",
        "extensions": [
            "ez2"
        ]
    },
    "application/vnd.ezpix-package": {
        "source": "iana",
        "extensions": [
            "ez3"
        ]
    },
    "application/vnd.f-secure.mobile": {
        "source": "iana"
    },
    "application/vnd.familysearch.gedcom+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.fastcopy-disk-image": {
        "source": "iana"
    },
    "application/vnd.fdf": {
        "source": "iana",
        "extensions": [
            "fdf"
        ]
    },
    "application/vnd.fdsn.mseed": {
        "source": "iana",
        "extensions": [
            "mseed"
        ]
    },
    "application/vnd.fdsn.seed": {
        "source": "iana",
        "extensions": [
            "seed",
            "dataless"
        ]
    },
    "application/vnd.ffsns": {
        "source": "iana"
    },
    "application/vnd.ficlab.flb+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.filmit.zfc": {
        "source": "iana"
    },
    "application/vnd.fints": {
        "source": "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
        "source": "iana"
    },
    "application/vnd.flographit": {
        "source": "iana",
        "extensions": [
            "gph"
        ]
    },
    "application/vnd.fluxtime.clip": {
        "source": "iana",
        "extensions": [
            "ftc"
        ]
    },
    "application/vnd.font-fontforge-sfd": {
        "source": "iana"
    },
    "application/vnd.framemaker": {
        "source": "iana",
        "extensions": [
            "fm",
            "frame",
            "maker",
            "book"
        ]
    },
    "application/vnd.frogans.fnc": {
        "source": "iana",
        "extensions": [
            "fnc"
        ]
    },
    "application/vnd.frogans.ltf": {
        "source": "iana",
        "extensions": [
            "ltf"
        ]
    },
    "application/vnd.fsc.weblaunch": {
        "source": "iana",
        "extensions": [
            "fsc"
        ]
    },
    "application/vnd.fujifilm.fb.docuworks": {
        "source": "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
        "source": "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
        "source": "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.fujitsu.oasys": {
        "source": "iana",
        "extensions": [
            "oas"
        ]
    },
    "application/vnd.fujitsu.oasys2": {
        "source": "iana",
        "extensions": [
            "oa2"
        ]
    },
    "application/vnd.fujitsu.oasys3": {
        "source": "iana",
        "extensions": [
            "oa3"
        ]
    },
    "application/vnd.fujitsu.oasysgp": {
        "source": "iana",
        "extensions": [
            "fg5"
        ]
    },
    "application/vnd.fujitsu.oasysprs": {
        "source": "iana",
        "extensions": [
            "bh2"
        ]
    },
    "application/vnd.fujixerox.art-ex": {
        "source": "iana"
    },
    "application/vnd.fujixerox.art4": {
        "source": "iana"
    },
    "application/vnd.fujixerox.ddd": {
        "source": "iana",
        "extensions": [
            "ddd"
        ]
    },
    "application/vnd.fujixerox.docuworks": {
        "source": "iana",
        "extensions": [
            "xdw"
        ]
    },
    "application/vnd.fujixerox.docuworks.binder": {
        "source": "iana",
        "extensions": [
            "xbd"
        ]
    },
    "application/vnd.fujixerox.docuworks.container": {
        "source": "iana"
    },
    "application/vnd.fujixerox.hbpl": {
        "source": "iana"
    },
    "application/vnd.fut-misnet": {
        "source": "iana"
    },
    "application/vnd.futoin+cbor": {
        "source": "iana"
    },
    "application/vnd.futoin+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.fuzzysheet": {
        "source": "iana",
        "extensions": [
            "fzs"
        ]
    },
    "application/vnd.genomatix.tuxedo": {
        "source": "iana",
        "extensions": [
            "txd"
        ]
    },
    "application/vnd.gentics.grd+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.geo+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.geocube+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.geogebra.file": {
        "source": "iana",
        "extensions": [
            "ggb"
        ]
    },
    "application/vnd.geogebra.slides": {
        "source": "iana"
    },
    "application/vnd.geogebra.tool": {
        "source": "iana",
        "extensions": [
            "ggt"
        ]
    },
    "application/vnd.geometry-explorer": {
        "source": "iana",
        "extensions": [
            "gex",
            "gre"
        ]
    },
    "application/vnd.geonext": {
        "source": "iana",
        "extensions": [
            "gxt"
        ]
    },
    "application/vnd.geoplan": {
        "source": "iana",
        "extensions": [
            "g2w"
        ]
    },
    "application/vnd.geospace": {
        "source": "iana",
        "extensions": [
            "g3w"
        ]
    },
    "application/vnd.gerber": {
        "source": "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
        "source": "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
        "source": "iana"
    },
    "application/vnd.gmx": {
        "source": "iana",
        "extensions": [
            "gmx"
        ]
    },
    "application/vnd.google-apps.document": {
        "compressible": false,
        "extensions": [
            "gdoc"
        ]
    },
    "application/vnd.google-apps.presentation": {
        "compressible": false,
        "extensions": [
            "gslides"
        ]
    },
    "application/vnd.google-apps.spreadsheet": {
        "compressible": false,
        "extensions": [
            "gsheet"
        ]
    },
    "application/vnd.google-earth.kml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "kml"
        ]
    },
    "application/vnd.google-earth.kmz": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "kmz"
        ]
    },
    "application/vnd.gov.sk.e-form+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.gov.sk.e-form+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.grafeq": {
        "source": "iana",
        "extensions": [
            "gqf",
            "gqs"
        ]
    },
    "application/vnd.gridmp": {
        "source": "iana"
    },
    "application/vnd.groove-account": {
        "source": "iana",
        "extensions": [
            "gac"
        ]
    },
    "application/vnd.groove-help": {
        "source": "iana",
        "extensions": [
            "ghf"
        ]
    },
    "application/vnd.groove-identity-message": {
        "source": "iana",
        "extensions": [
            "gim"
        ]
    },
    "application/vnd.groove-injector": {
        "source": "iana",
        "extensions": [
            "grv"
        ]
    },
    "application/vnd.groove-tool-message": {
        "source": "iana",
        "extensions": [
            "gtm"
        ]
    },
    "application/vnd.groove-tool-template": {
        "source": "iana",
        "extensions": [
            "tpl"
        ]
    },
    "application/vnd.groove-vcard": {
        "source": "iana",
        "extensions": [
            "vcg"
        ]
    },
    "application/vnd.hal+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hal+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "hal"
        ]
    },
    "application/vnd.handheld-entertainment+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "zmm"
        ]
    },
    "application/vnd.hbci": {
        "source": "iana",
        "extensions": [
            "hbci"
        ]
    },
    "application/vnd.hc+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hcl-bireports": {
        "source": "iana"
    },
    "application/vnd.hdt": {
        "source": "iana"
    },
    "application/vnd.heroku+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hhe.lesson-player": {
        "source": "iana",
        "extensions": [
            "les"
        ]
    },
    "application/vnd.hl7cda+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.hl7v2+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.hp-hpgl": {
        "source": "iana",
        "extensions": [
            "hpgl"
        ]
    },
    "application/vnd.hp-hpid": {
        "source": "iana",
        "extensions": [
            "hpid"
        ]
    },
    "application/vnd.hp-hps": {
        "source": "iana",
        "extensions": [
            "hps"
        ]
    },
    "application/vnd.hp-jlyt": {
        "source": "iana",
        "extensions": [
            "jlt"
        ]
    },
    "application/vnd.hp-pcl": {
        "source": "iana",
        "extensions": [
            "pcl"
        ]
    },
    "application/vnd.hp-pclxl": {
        "source": "iana",
        "extensions": [
            "pclxl"
        ]
    },
    "application/vnd.httphone": {
        "source": "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
        "source": "iana",
        "extensions": [
            "sfd-hdstx"
        ]
    },
    "application/vnd.hyper+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hyper-item+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hyperdrive+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.hzn-3d-crossword": {
        "source": "iana"
    },
    "application/vnd.ibm.afplinedata": {
        "source": "iana"
    },
    "application/vnd.ibm.electronic-media": {
        "source": "iana"
    },
    "application/vnd.ibm.minipay": {
        "source": "iana",
        "extensions": [
            "mpy"
        ]
    },
    "application/vnd.ibm.modcap": {
        "source": "iana",
        "extensions": [
            "afp",
            "listafp",
            "list3820"
        ]
    },
    "application/vnd.ibm.rights-management": {
        "source": "iana",
        "extensions": [
            "irm"
        ]
    },
    "application/vnd.ibm.secure-container": {
        "source": "iana",
        "extensions": [
            "sc"
        ]
    },
    "application/vnd.iccprofile": {
        "source": "iana",
        "extensions": [
            "icc",
            "icm"
        ]
    },
    "application/vnd.ieee.1905": {
        "source": "iana"
    },
    "application/vnd.igloader": {
        "source": "iana",
        "extensions": [
            "igl"
        ]
    },
    "application/vnd.imagemeter.folder+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.imagemeter.image+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.immervision-ivp": {
        "source": "iana",
        "extensions": [
            "ivp"
        ]
    },
    "application/vnd.immervision-ivu": {
        "source": "iana",
        "extensions": [
            "ivu"
        ]
    },
    "application/vnd.ims.imsccv1p1": {
        "source": "iana"
    },
    "application/vnd.ims.imsccv1p2": {
        "source": "iana"
    },
    "application/vnd.ims.imsccv1p3": {
        "source": "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.informedcontrol.rms+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.informix-visionary": {
        "source": "iana"
    },
    "application/vnd.infotech.project": {
        "source": "iana"
    },
    "application/vnd.infotech.project+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.innopath.wamp.notification": {
        "source": "iana"
    },
    "application/vnd.insors.igm": {
        "source": "iana",
        "extensions": [
            "igm"
        ]
    },
    "application/vnd.intercon.formnet": {
        "source": "iana",
        "extensions": [
            "xpw",
            "xpx"
        ]
    },
    "application/vnd.intergeo": {
        "source": "iana",
        "extensions": [
            "i2g"
        ]
    },
    "application/vnd.intertrust.digibox": {
        "source": "iana"
    },
    "application/vnd.intertrust.nncp": {
        "source": "iana"
    },
    "application/vnd.intu.qbo": {
        "source": "iana",
        "extensions": [
            "qbo"
        ]
    },
    "application/vnd.intu.qfx": {
        "source": "iana",
        "extensions": [
            "qfx"
        ]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ipunplugged.rcprofile": {
        "source": "iana",
        "extensions": [
            "rcprofile"
        ]
    },
    "application/vnd.irepository.package+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "irp"
        ]
    },
    "application/vnd.is-xpr": {
        "source": "iana",
        "extensions": [
            "xpr"
        ]
    },
    "application/vnd.isac.fcs": {
        "source": "iana",
        "extensions": [
            "fcs"
        ]
    },
    "application/vnd.iso11783-10+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.jam": {
        "source": "iana",
        "extensions": [
            "jam"
        ]
    },
    "application/vnd.japannet-directory-service": {
        "source": "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
        "source": "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
        "source": "iana"
    },
    "application/vnd.japannet-registration": {
        "source": "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
        "source": "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
        "source": "iana"
    },
    "application/vnd.japannet-verification": {
        "source": "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
        "source": "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
        "source": "iana",
        "extensions": [
            "rms"
        ]
    },
    "application/vnd.jisp": {
        "source": "iana",
        "extensions": [
            "jisp"
        ]
    },
    "application/vnd.joost.joda-archive": {
        "source": "iana",
        "extensions": [
            "joda"
        ]
    },
    "application/vnd.jsk.isdn-ngn": {
        "source": "iana"
    },
    "application/vnd.kahootz": {
        "source": "iana",
        "extensions": [
            "ktz",
            "ktr"
        ]
    },
    "application/vnd.kde.karbon": {
        "source": "iana",
        "extensions": [
            "karbon"
        ]
    },
    "application/vnd.kde.kchart": {
        "source": "iana",
        "extensions": [
            "chrt"
        ]
    },
    "application/vnd.kde.kformula": {
        "source": "iana",
        "extensions": [
            "kfo"
        ]
    },
    "application/vnd.kde.kivio": {
        "source": "iana",
        "extensions": [
            "flw"
        ]
    },
    "application/vnd.kde.kontour": {
        "source": "iana",
        "extensions": [
            "kon"
        ]
    },
    "application/vnd.kde.kpresenter": {
        "source": "iana",
        "extensions": [
            "kpr",
            "kpt"
        ]
    },
    "application/vnd.kde.kspread": {
        "source": "iana",
        "extensions": [
            "ksp"
        ]
    },
    "application/vnd.kde.kword": {
        "source": "iana",
        "extensions": [
            "kwd",
            "kwt"
        ]
    },
    "application/vnd.kenameaapp": {
        "source": "iana",
        "extensions": [
            "htke"
        ]
    },
    "application/vnd.kidspiration": {
        "source": "iana",
        "extensions": [
            "kia"
        ]
    },
    "application/vnd.kinar": {
        "source": "iana",
        "extensions": [
            "kne",
            "knp"
        ]
    },
    "application/vnd.koan": {
        "source": "iana",
        "extensions": [
            "skp",
            "skd",
            "skt",
            "skm"
        ]
    },
    "application/vnd.kodak-descriptor": {
        "source": "iana",
        "extensions": [
            "sse"
        ]
    },
    "application/vnd.las": {
        "source": "iana"
    },
    "application/vnd.las.las+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.las.las+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "lasxml"
        ]
    },
    "application/vnd.laszip": {
        "source": "iana"
    },
    "application/vnd.leap+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.liberty-request+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
        "source": "iana",
        "extensions": [
            "lbd"
        ]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "lbe"
        ]
    },
    "application/vnd.logipipe.circuit+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.loom": {
        "source": "iana"
    },
    "application/vnd.lotus-1-2-3": {
        "source": "iana",
        "extensions": [
            "123"
        ]
    },
    "application/vnd.lotus-approach": {
        "source": "iana",
        "extensions": [
            "apr"
        ]
    },
    "application/vnd.lotus-freelance": {
        "source": "iana",
        "extensions": [
            "pre"
        ]
    },
    "application/vnd.lotus-notes": {
        "source": "iana",
        "extensions": [
            "nsf"
        ]
    },
    "application/vnd.lotus-organizer": {
        "source": "iana",
        "extensions": [
            "org"
        ]
    },
    "application/vnd.lotus-screencam": {
        "source": "iana",
        "extensions": [
            "scm"
        ]
    },
    "application/vnd.lotus-wordpro": {
        "source": "iana",
        "extensions": [
            "lwp"
        ]
    },
    "application/vnd.macports.portpkg": {
        "source": "iana",
        "extensions": [
            "portpkg"
        ]
    },
    "application/vnd.mapbox-vector-tile": {
        "source": "iana",
        "extensions": [
            "mvt"
        ]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.marlin.drm.license+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.marlin.drm.mdcf": {
        "source": "iana"
    },
    "application/vnd.mason+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.maxar.archive.3tz+zip": {
        "source": "iana",
        "compressible": false
    },
    "application/vnd.maxmind.maxmind-db": {
        "source": "iana"
    },
    "application/vnd.mcd": {
        "source": "iana",
        "extensions": [
            "mcd"
        ]
    },
    "application/vnd.medcalcdata": {
        "source": "iana",
        "extensions": [
            "mc1"
        ]
    },
    "application/vnd.mediastation.cdkey": {
        "source": "iana",
        "extensions": [
            "cdkey"
        ]
    },
    "application/vnd.meridian-slingshot": {
        "source": "iana"
    },
    "application/vnd.mfer": {
        "source": "iana",
        "extensions": [
            "mwf"
        ]
    },
    "application/vnd.mfmp": {
        "source": "iana",
        "extensions": [
            "mfm"
        ]
    },
    "application/vnd.micro+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.micrografx.flo": {
        "source": "iana",
        "extensions": [
            "flo"
        ]
    },
    "application/vnd.micrografx.igx": {
        "source": "iana",
        "extensions": [
            "igx"
        ]
    },
    "application/vnd.microsoft.portable-executable": {
        "source": "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
        "source": "iana"
    },
    "application/vnd.miele+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.mif": {
        "source": "iana",
        "extensions": [
            "mif"
        ]
    },
    "application/vnd.minisoft-hp3000-save": {
        "source": "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
        "source": "iana"
    },
    "application/vnd.mobius.daf": {
        "source": "iana",
        "extensions": [
            "daf"
        ]
    },
    "application/vnd.mobius.dis": {
        "source": "iana",
        "extensions": [
            "dis"
        ]
    },
    "application/vnd.mobius.mbk": {
        "source": "iana",
        "extensions": [
            "mbk"
        ]
    },
    "application/vnd.mobius.mqy": {
        "source": "iana",
        "extensions": [
            "mqy"
        ]
    },
    "application/vnd.mobius.msl": {
        "source": "iana",
        "extensions": [
            "msl"
        ]
    },
    "application/vnd.mobius.plc": {
        "source": "iana",
        "extensions": [
            "plc"
        ]
    },
    "application/vnd.mobius.txf": {
        "source": "iana",
        "extensions": [
            "txf"
        ]
    },
    "application/vnd.mophun.application": {
        "source": "iana",
        "extensions": [
            "mpn"
        ]
    },
    "application/vnd.mophun.certificate": {
        "source": "iana",
        "extensions": [
            "mpc"
        ]
    },
    "application/vnd.motorola.flexsuite": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
        "source": "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
        "source": "iana"
    },
    "application/vnd.motorola.iprm": {
        "source": "iana"
    },
    "application/vnd.mozilla.xul+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xul"
        ]
    },
    "application/vnd.ms-3mfdocument": {
        "source": "iana"
    },
    "application/vnd.ms-artgalry": {
        "source": "iana",
        "extensions": [
            "cil"
        ]
    },
    "application/vnd.ms-asf": {
        "source": "iana"
    },
    "application/vnd.ms-cab-compressed": {
        "source": "iana",
        "extensions": [
            "cab"
        ]
    },
    "application/vnd.ms-color.iccprofile": {
        "source": "apache"
    },
    "application/vnd.ms-excel": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "xls",
            "xlm",
            "xla",
            "xlc",
            "xlt",
            "xlw"
        ]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "xlam"
        ]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "xlsb"
        ]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "xlsm"
        ]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "xltm"
        ]
    },
    "application/vnd.ms-fontobject": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "eot"
        ]
    },
    "application/vnd.ms-htmlhelp": {
        "source": "iana",
        "extensions": [
            "chm"
        ]
    },
    "application/vnd.ms-ims": {
        "source": "iana",
        "extensions": [
            "ims"
        ]
    },
    "application/vnd.ms-lrm": {
        "source": "iana",
        "extensions": [
            "lrm"
        ]
    },
    "application/vnd.ms-office.activex+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ms-officetheme": {
        "source": "iana",
        "extensions": [
            "thmx"
        ]
    },
    "application/vnd.ms-opentype": {
        "source": "apache",
        "compressible": true
    },
    "application/vnd.ms-outlook": {
        "compressible": false,
        "extensions": [
            "msg"
        ]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
        "source": "apache"
    },
    "application/vnd.ms-pki.seccat": {
        "source": "apache",
        "extensions": [
            "cat"
        ]
    },
    "application/vnd.ms-pki.stl": {
        "source": "apache",
        "extensions": [
            "stl"
        ]
    },
    "application/vnd.ms-playready.initiator+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ms-powerpoint": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "ppt",
            "pps",
            "pot"
        ]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "ppam"
        ]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "pptm"
        ]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "sldm"
        ]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "ppsm"
        ]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "potm"
        ]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ms-printing.printticket+xml": {
        "source": "apache",
        "compressible": true
    },
    "application/vnd.ms-printschematicket+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ms-project": {
        "source": "iana",
        "extensions": [
            "mpp",
            "mpt"
        ]
    },
    "application/vnd.ms-tnef": {
        "source": "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
        "source": "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
        "source": "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
        "source": "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
        "source": "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
        "source": "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
        "source": "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
        "source": "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
        "source": "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "docm"
        ]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
        "source": "iana",
        "extensions": [
            "dotm"
        ]
    },
    "application/vnd.ms-works": {
        "source": "iana",
        "extensions": [
            "wps",
            "wks",
            "wcm",
            "wdb"
        ]
    },
    "application/vnd.ms-wpl": {
        "source": "iana",
        "extensions": [
            "wpl"
        ]
    },
    "application/vnd.ms-xpsdocument": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "xps"
        ]
    },
    "application/vnd.msa-disk-image": {
        "source": "iana"
    },
    "application/vnd.mseq": {
        "source": "iana",
        "extensions": [
            "mseq"
        ]
    },
    "application/vnd.msign": {
        "source": "iana"
    },
    "application/vnd.multiad.creator": {
        "source": "iana"
    },
    "application/vnd.multiad.creator.cif": {
        "source": "iana"
    },
    "application/vnd.music-niff": {
        "source": "iana"
    },
    "application/vnd.musician": {
        "source": "iana",
        "extensions": [
            "mus"
        ]
    },
    "application/vnd.muvee.style": {
        "source": "iana",
        "extensions": [
            "msty"
        ]
    },
    "application/vnd.mynfc": {
        "source": "iana",
        "extensions": [
            "taglet"
        ]
    },
    "application/vnd.nacamar.ybrid+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.ncd.control": {
        "source": "iana"
    },
    "application/vnd.ncd.reference": {
        "source": "iana"
    },
    "application/vnd.nearst.inv+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nebumind.line": {
        "source": "iana"
    },
    "application/vnd.nervana": {
        "source": "iana"
    },
    "application/vnd.netfpx": {
        "source": "iana"
    },
    "application/vnd.neurolanguage.nlu": {
        "source": "iana",
        "extensions": [
            "nlu"
        ]
    },
    "application/vnd.nimn": {
        "source": "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
        "source": "iana"
    },
    "application/vnd.nintendo.snes.rom": {
        "source": "iana"
    },
    "application/vnd.nitf": {
        "source": "iana",
        "extensions": [
            "ntf",
            "nitf"
        ]
    },
    "application/vnd.noblenet-directory": {
        "source": "iana",
        "extensions": [
            "nnd"
        ]
    },
    "application/vnd.noblenet-sealer": {
        "source": "iana",
        "extensions": [
            "nns"
        ]
    },
    "application/vnd.noblenet-web": {
        "source": "iana",
        "extensions": [
            "nnw"
        ]
    },
    "application/vnd.nokia.catalogs": {
        "source": "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
        "source": "iana"
    },
    "application/vnd.nokia.conml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nokia.iptv.config+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nokia.isds-radio-presets": {
        "source": "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
        "source": "iana"
    },
    "application/vnd.nokia.landmark+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ac"
        ]
    },
    "application/vnd.nokia.n-gage.data": {
        "source": "iana",
        "extensions": [
            "ngdat"
        ]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
        "source": "iana",
        "extensions": [
            "n-gage"
        ]
    },
    "application/vnd.nokia.ncd": {
        "source": "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
        "source": "iana"
    },
    "application/vnd.nokia.pcd+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.nokia.radio-preset": {
        "source": "iana",
        "extensions": [
            "rpst"
        ]
    },
    "application/vnd.nokia.radio-presets": {
        "source": "iana",
        "extensions": [
            "rpss"
        ]
    },
    "application/vnd.novadigm.edm": {
        "source": "iana",
        "extensions": [
            "edm"
        ]
    },
    "application/vnd.novadigm.edx": {
        "source": "iana",
        "extensions": [
            "edx"
        ]
    },
    "application/vnd.novadigm.ext": {
        "source": "iana",
        "extensions": [
            "ext"
        ]
    },
    "application/vnd.ntt-local.content-share": {
        "source": "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
        "source": "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
        "source": "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
        "source": "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
        "source": "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
        "source": "iana",
        "extensions": [
            "odc"
        ]
    },
    "application/vnd.oasis.opendocument.chart-template": {
        "source": "iana",
        "extensions": [
            "otc"
        ]
    },
    "application/vnd.oasis.opendocument.database": {
        "source": "iana",
        "extensions": [
            "odb"
        ]
    },
    "application/vnd.oasis.opendocument.formula": {
        "source": "iana",
        "extensions": [
            "odf"
        ]
    },
    "application/vnd.oasis.opendocument.formula-template": {
        "source": "iana",
        "extensions": [
            "odft"
        ]
    },
    "application/vnd.oasis.opendocument.graphics": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "odg"
        ]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
        "source": "iana",
        "extensions": [
            "otg"
        ]
    },
    "application/vnd.oasis.opendocument.image": {
        "source": "iana",
        "extensions": [
            "odi"
        ]
    },
    "application/vnd.oasis.opendocument.image-template": {
        "source": "iana",
        "extensions": [
            "oti"
        ]
    },
    "application/vnd.oasis.opendocument.presentation": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "odp"
        ]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
        "source": "iana",
        "extensions": [
            "otp"
        ]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "ods"
        ]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
        "source": "iana",
        "extensions": [
            "ots"
        ]
    },
    "application/vnd.oasis.opendocument.text": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "odt"
        ]
    },
    "application/vnd.oasis.opendocument.text-master": {
        "source": "iana",
        "extensions": [
            "odm"
        ]
    },
    "application/vnd.oasis.opendocument.text-template": {
        "source": "iana",
        "extensions": [
            "ott"
        ]
    },
    "application/vnd.oasis.opendocument.text-web": {
        "source": "iana",
        "extensions": [
            "oth"
        ]
    },
    "application/vnd.obn": {
        "source": "iana"
    },
    "application/vnd.ocf+cbor": {
        "source": "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oftn.l10n+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.cspg-hexbinary": {
        "source": "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.pae.gem": {
        "source": "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.spdlist+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.ueprofile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oipf.userprofile+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.olpc-sugar": {
        "source": "iana",
        "extensions": [
            "xo"
        ]
    },
    "application/vnd.oma-scws-config": {
        "source": "iana"
    },
    "application/vnd.oma-scws-http-request": {
        "source": "iana"
    },
    "application/vnd.oma-scws-http-response": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.imd+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.ltkm": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.sgdu": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
        "source": "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.sprov+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.bcast.stkm": {
        "source": "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.cab-pcc+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.dcd": {
        "source": "iana"
    },
    "application/vnd.oma.dcdc": {
        "source": "iana"
    },
    "application/vnd.oma.dd2+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "dd2"
        ]
    },
    "application/vnd.oma.drm.risd+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.group-usage-list+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.lwm2m+cbor": {
        "source": "iana"
    },
    "application/vnd.oma.lwm2m+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.lwm2m+tlv": {
        "source": "iana"
    },
    "application/vnd.oma.pal+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.poc.final-report+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.poc.groups+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.push": {
        "source": "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oma.xcap-directory+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.omads-email+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.omads-file+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.omads-folder+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.omaloc-supl-init": {
        "source": "iana"
    },
    "application/vnd.onepager": {
        "source": "iana"
    },
    "application/vnd.onepagertamp": {
        "source": "iana"
    },
    "application/vnd.onepagertamx": {
        "source": "iana"
    },
    "application/vnd.onepagertat": {
        "source": "iana"
    },
    "application/vnd.onepagertatp": {
        "source": "iana"
    },
    "application/vnd.onepagertatx": {
        "source": "iana"
    },
    "application/vnd.openblox.game+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "obgx"
        ]
    },
    "application/vnd.openblox.game-binary": {
        "source": "iana"
    },
    "application/vnd.openeye.oeb": {
        "source": "iana"
    },
    "application/vnd.openofficeorg.extension": {
        "source": "apache",
        "extensions": [
            "oxt"
        ]
    },
    "application/vnd.openstreetmap.data+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "osm"
        ]
    },
    "application/vnd.opentimestamps.ots": {
        "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "pptx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        "source": "iana",
        "extensions": [
            "sldx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        "source": "iana",
        "extensions": [
            "ppsx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
        "source": "iana",
        "extensions": [
            "potx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "xlsx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        "source": "iana",
        "extensions": [
            "xltx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
        "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "docx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        "source": "iana",
        "extensions": [
            "dotx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oracle.resource+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.orange.indata": {
        "source": "iana"
    },
    "application/vnd.osa.netdeploy": {
        "source": "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
        "source": "iana",
        "extensions": [
            "mgp"
        ]
    },
    "application/vnd.osgi.bundle": {
        "source": "iana"
    },
    "application/vnd.osgi.dp": {
        "source": "iana",
        "extensions": [
            "dp"
        ]
    },
    "application/vnd.osgi.subsystem": {
        "source": "iana",
        "extensions": [
            "esa"
        ]
    },
    "application/vnd.otps.ct-kip+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.oxli.countgraph": {
        "source": "iana"
    },
    "application/vnd.pagerduty+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.palm": {
        "source": "iana",
        "extensions": [
            "pdb",
            "pqa",
            "oprc"
        ]
    },
    "application/vnd.panoply": {
        "source": "iana"
    },
    "application/vnd.paos.xml": {
        "source": "iana"
    },
    "application/vnd.patentdive": {
        "source": "iana"
    },
    "application/vnd.patientecommsdoc": {
        "source": "iana"
    },
    "application/vnd.pawaafile": {
        "source": "iana",
        "extensions": [
            "paw"
        ]
    },
    "application/vnd.pcos": {
        "source": "iana"
    },
    "application/vnd.pg.format": {
        "source": "iana",
        "extensions": [
            "str"
        ]
    },
    "application/vnd.pg.osasli": {
        "source": "iana",
        "extensions": [
            "ei6"
        ]
    },
    "application/vnd.piaccess.application-licence": {
        "source": "iana"
    },
    "application/vnd.picsel": {
        "source": "iana",
        "extensions": [
            "efif"
        ]
    },
    "application/vnd.pmi.widget": {
        "source": "iana",
        "extensions": [
            "wg"
        ]
    },
    "application/vnd.poc.group-advertisement+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.pocketlearn": {
        "source": "iana",
        "extensions": [
            "plf"
        ]
    },
    "application/vnd.powerbuilder6": {
        "source": "iana",
        "extensions": [
            "pbd"
        ]
    },
    "application/vnd.powerbuilder6-s": {
        "source": "iana"
    },
    "application/vnd.powerbuilder7": {
        "source": "iana"
    },
    "application/vnd.powerbuilder7-s": {
        "source": "iana"
    },
    "application/vnd.powerbuilder75": {
        "source": "iana"
    },
    "application/vnd.powerbuilder75-s": {
        "source": "iana"
    },
    "application/vnd.preminet": {
        "source": "iana"
    },
    "application/vnd.previewsystems.box": {
        "source": "iana",
        "extensions": [
            "box"
        ]
    },
    "application/vnd.proteus.magazine": {
        "source": "iana",
        "extensions": [
            "mgz"
        ]
    },
    "application/vnd.psfs": {
        "source": "iana"
    },
    "application/vnd.publishare-delta-tree": {
        "source": "iana",
        "extensions": [
            "qps"
        ]
    },
    "application/vnd.pvi.ptid1": {
        "source": "iana",
        "extensions": [
            "ptid"
        ]
    },
    "application/vnd.pwg-multiplexed": {
        "source": "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.qualcomm.brew-app-res": {
        "source": "iana"
    },
    "application/vnd.quarantainenet": {
        "source": "iana"
    },
    "application/vnd.quark.quarkxpress": {
        "source": "iana",
        "extensions": [
            "qxd",
            "qxt",
            "qwd",
            "qwt",
            "qxl",
            "qxb"
        ]
    },
    "application/vnd.quobject-quoxdocument": {
        "source": "iana"
    },
    "application/vnd.radisys.moml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-audit+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-conf+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.rainstor.data": {
        "source": "iana"
    },
    "application/vnd.rapid": {
        "source": "iana"
    },
    "application/vnd.rar": {
        "source": "iana",
        "extensions": [
            "rar"
        ]
    },
    "application/vnd.realvnc.bed": {
        "source": "iana",
        "extensions": [
            "bed"
        ]
    },
    "application/vnd.recordare.musicxml": {
        "source": "iana",
        "extensions": [
            "mxl"
        ]
    },
    "application/vnd.recordare.musicxml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "musicxml"
        ]
    },
    "application/vnd.renlearn.rlprint": {
        "source": "iana"
    },
    "application/vnd.resilient.logic": {
        "source": "iana"
    },
    "application/vnd.restful+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.rig.cryptonote": {
        "source": "iana",
        "extensions": [
            "cryptonote"
        ]
    },
    "application/vnd.rim.cod": {
        "source": "apache",
        "extensions": [
            "cod"
        ]
    },
    "application/vnd.rn-realmedia": {
        "source": "apache",
        "extensions": [
            "rm"
        ]
    },
    "application/vnd.rn-realmedia-vbr": {
        "source": "apache",
        "extensions": [
            "rmvb"
        ]
    },
    "application/vnd.route66.link66+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "link66"
        ]
    },
    "application/vnd.rs-274x": {
        "source": "iana"
    },
    "application/vnd.ruckus.download": {
        "source": "iana"
    },
    "application/vnd.s3sms": {
        "source": "iana"
    },
    "application/vnd.sailingtracker.track": {
        "source": "iana",
        "extensions": [
            "st"
        ]
    },
    "application/vnd.sar": {
        "source": "iana"
    },
    "application/vnd.sbm.cid": {
        "source": "iana"
    },
    "application/vnd.sbm.mid2": {
        "source": "iana"
    },
    "application/vnd.scribus": {
        "source": "iana"
    },
    "application/vnd.sealed.3df": {
        "source": "iana"
    },
    "application/vnd.sealed.csf": {
        "source": "iana"
    },
    "application/vnd.sealed.doc": {
        "source": "iana"
    },
    "application/vnd.sealed.eml": {
        "source": "iana"
    },
    "application/vnd.sealed.mht": {
        "source": "iana"
    },
    "application/vnd.sealed.net": {
        "source": "iana"
    },
    "application/vnd.sealed.ppt": {
        "source": "iana"
    },
    "application/vnd.sealed.tiff": {
        "source": "iana"
    },
    "application/vnd.sealed.xls": {
        "source": "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
        "source": "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
        "source": "iana"
    },
    "application/vnd.seemail": {
        "source": "iana",
        "extensions": [
            "see"
        ]
    },
    "application/vnd.seis+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.sema": {
        "source": "iana",
        "extensions": [
            "sema"
        ]
    },
    "application/vnd.semd": {
        "source": "iana",
        "extensions": [
            "semd"
        ]
    },
    "application/vnd.semf": {
        "source": "iana",
        "extensions": [
            "semf"
        ]
    },
    "application/vnd.shade-save-file": {
        "source": "iana"
    },
    "application/vnd.shana.informed.formdata": {
        "source": "iana",
        "extensions": [
            "ifm"
        ]
    },
    "application/vnd.shana.informed.formtemplate": {
        "source": "iana",
        "extensions": [
            "itp"
        ]
    },
    "application/vnd.shana.informed.interchange": {
        "source": "iana",
        "extensions": [
            "iif"
        ]
    },
    "application/vnd.shana.informed.package": {
        "source": "iana",
        "extensions": [
            "ipk"
        ]
    },
    "application/vnd.shootproof+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.shopkick+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.shp": {
        "source": "iana"
    },
    "application/vnd.shx": {
        "source": "iana"
    },
    "application/vnd.sigrok.session": {
        "source": "iana"
    },
    "application/vnd.simtech-mindmapper": {
        "source": "iana",
        "extensions": [
            "twd",
            "twds"
        ]
    },
    "application/vnd.siren+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.smaf": {
        "source": "iana",
        "extensions": [
            "mmf"
        ]
    },
    "application/vnd.smart.notebook": {
        "source": "iana"
    },
    "application/vnd.smart.teacher": {
        "source": "iana",
        "extensions": [
            "teacher"
        ]
    },
    "application/vnd.snesdev-page-table": {
        "source": "iana"
    },
    "application/vnd.software602.filler.form+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "fo"
        ]
    },
    "application/vnd.software602.filler.form-xml-zip": {
        "source": "iana"
    },
    "application/vnd.solent.sdkm+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "sdkm",
            "sdkd"
        ]
    },
    "application/vnd.spotfire.dxp": {
        "source": "iana",
        "extensions": [
            "dxp"
        ]
    },
    "application/vnd.spotfire.sfs": {
        "source": "iana",
        "extensions": [
            "sfs"
        ]
    },
    "application/vnd.sqlite3": {
        "source": "iana"
    },
    "application/vnd.sss-cod": {
        "source": "iana"
    },
    "application/vnd.sss-dtf": {
        "source": "iana"
    },
    "application/vnd.sss-ntf": {
        "source": "iana"
    },
    "application/vnd.stardivision.calc": {
        "source": "apache",
        "extensions": [
            "sdc"
        ]
    },
    "application/vnd.stardivision.draw": {
        "source": "apache",
        "extensions": [
            "sda"
        ]
    },
    "application/vnd.stardivision.impress": {
        "source": "apache",
        "extensions": [
            "sdd"
        ]
    },
    "application/vnd.stardivision.math": {
        "source": "apache",
        "extensions": [
            "smf"
        ]
    },
    "application/vnd.stardivision.writer": {
        "source": "apache",
        "extensions": [
            "sdw",
            "vor"
        ]
    },
    "application/vnd.stardivision.writer-global": {
        "source": "apache",
        "extensions": [
            "sgl"
        ]
    },
    "application/vnd.stepmania.package": {
        "source": "iana",
        "extensions": [
            "smzip"
        ]
    },
    "application/vnd.stepmania.stepchart": {
        "source": "iana",
        "extensions": [
            "sm"
        ]
    },
    "application/vnd.street-stream": {
        "source": "iana"
    },
    "application/vnd.sun.wadl+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wadl"
        ]
    },
    "application/vnd.sun.xml.calc": {
        "source": "apache",
        "extensions": [
            "sxc"
        ]
    },
    "application/vnd.sun.xml.calc.template": {
        "source": "apache",
        "extensions": [
            "stc"
        ]
    },
    "application/vnd.sun.xml.draw": {
        "source": "apache",
        "extensions": [
            "sxd"
        ]
    },
    "application/vnd.sun.xml.draw.template": {
        "source": "apache",
        "extensions": [
            "std"
        ]
    },
    "application/vnd.sun.xml.impress": {
        "source": "apache",
        "extensions": [
            "sxi"
        ]
    },
    "application/vnd.sun.xml.impress.template": {
        "source": "apache",
        "extensions": [
            "sti"
        ]
    },
    "application/vnd.sun.xml.math": {
        "source": "apache",
        "extensions": [
            "sxm"
        ]
    },
    "application/vnd.sun.xml.writer": {
        "source": "apache",
        "extensions": [
            "sxw"
        ]
    },
    "application/vnd.sun.xml.writer.global": {
        "source": "apache",
        "extensions": [
            "sxg"
        ]
    },
    "application/vnd.sun.xml.writer.template": {
        "source": "apache",
        "extensions": [
            "stw"
        ]
    },
    "application/vnd.sus-calendar": {
        "source": "iana",
        "extensions": [
            "sus",
            "susp"
        ]
    },
    "application/vnd.svd": {
        "source": "iana",
        "extensions": [
            "svd"
        ]
    },
    "application/vnd.swiftview-ics": {
        "source": "iana"
    },
    "application/vnd.sycle+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.syft+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.symbian.install": {
        "source": "apache",
        "extensions": [
            "sis",
            "sisx"
        ]
    },
    "application/vnd.syncml+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "xsm"
        ]
    },
    "application/vnd.syncml.dm+wbxml": {
        "source": "iana",
        "charset": "UTF-8",
        "extensions": [
            "bdm"
        ]
    },
    "application/vnd.syncml.dm+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "xdm"
        ]
    },
    "application/vnd.syncml.dm.notification": {
        "source": "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
        "source": "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "ddf"
        ]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
        "source": "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true
    },
    "application/vnd.syncml.ds.notification": {
        "source": "iana"
    },
    "application/vnd.tableschema+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.tao.intent-module-archive": {
        "source": "iana",
        "extensions": [
            "tao"
        ]
    },
    "application/vnd.tcpdump.pcap": {
        "source": "iana",
        "extensions": [
            "pcap",
            "cap",
            "dmp"
        ]
    },
    "application/vnd.think-cell.ppttc+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.tml": {
        "source": "iana"
    },
    "application/vnd.tmobile-livetv": {
        "source": "iana",
        "extensions": [
            "tmo"
        ]
    },
    "application/vnd.tri.onesource": {
        "source": "iana"
    },
    "application/vnd.trid.tpt": {
        "source": "iana",
        "extensions": [
            "tpt"
        ]
    },
    "application/vnd.triscape.mxs": {
        "source": "iana",
        "extensions": [
            "mxs"
        ]
    },
    "application/vnd.trueapp": {
        "source": "iana",
        "extensions": [
            "tra"
        ]
    },
    "application/vnd.truedoc": {
        "source": "iana"
    },
    "application/vnd.ubisoft.webplayer": {
        "source": "iana"
    },
    "application/vnd.ufdl": {
        "source": "iana",
        "extensions": [
            "ufd",
            "ufdl"
        ]
    },
    "application/vnd.uiq.theme": {
        "source": "iana",
        "extensions": [
            "utz"
        ]
    },
    "application/vnd.umajin": {
        "source": "iana",
        "extensions": [
            "umj"
        ]
    },
    "application/vnd.unity": {
        "source": "iana",
        "extensions": [
            "unityweb"
        ]
    },
    "application/vnd.uoml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "uoml"
        ]
    },
    "application/vnd.uplanet.alert": {
        "source": "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
        "source": "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.cacheop": {
        "source": "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.channel": {
        "source": "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.list": {
        "source": "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.listcmd": {
        "source": "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
        "source": "iana"
    },
    "application/vnd.uplanet.signal": {
        "source": "iana"
    },
    "application/vnd.uri-map": {
        "source": "iana"
    },
    "application/vnd.valve.source.material": {
        "source": "iana"
    },
    "application/vnd.vcx": {
        "source": "iana",
        "extensions": [
            "vcx"
        ]
    },
    "application/vnd.vd-study": {
        "source": "iana"
    },
    "application/vnd.vectorworks": {
        "source": "iana"
    },
    "application/vnd.vel+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.verimatrix.vcas": {
        "source": "iana"
    },
    "application/vnd.veritone.aion+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.veryant.thin": {
        "source": "iana"
    },
    "application/vnd.ves.encrypted": {
        "source": "iana"
    },
    "application/vnd.vidsoft.vidconference": {
        "source": "iana"
    },
    "application/vnd.visio": {
        "source": "iana",
        "extensions": [
            "vsd",
            "vst",
            "vss",
            "vsw"
        ]
    },
    "application/vnd.visionary": {
        "source": "iana",
        "extensions": [
            "vis"
        ]
    },
    "application/vnd.vividence.scriptfile": {
        "source": "iana"
    },
    "application/vnd.vsf": {
        "source": "iana",
        "extensions": [
            "vsf"
        ]
    },
    "application/vnd.wap.sic": {
        "source": "iana"
    },
    "application/vnd.wap.slc": {
        "source": "iana"
    },
    "application/vnd.wap.wbxml": {
        "source": "iana",
        "charset": "UTF-8",
        "extensions": [
            "wbxml"
        ]
    },
    "application/vnd.wap.wmlc": {
        "source": "iana",
        "extensions": [
            "wmlc"
        ]
    },
    "application/vnd.wap.wmlscriptc": {
        "source": "iana",
        "extensions": [
            "wmlsc"
        ]
    },
    "application/vnd.webturbo": {
        "source": "iana",
        "extensions": [
            "wtb"
        ]
    },
    "application/vnd.wfa.dpp": {
        "source": "iana"
    },
    "application/vnd.wfa.p2p": {
        "source": "iana"
    },
    "application/vnd.wfa.wsc": {
        "source": "iana"
    },
    "application/vnd.windows.devicepairing": {
        "source": "iana"
    },
    "application/vnd.wmc": {
        "source": "iana"
    },
    "application/vnd.wmf.bootstrap": {
        "source": "iana"
    },
    "application/vnd.wolfram.mathematica": {
        "source": "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
        "source": "iana"
    },
    "application/vnd.wolfram.player": {
        "source": "iana",
        "extensions": [
            "nbp"
        ]
    },
    "application/vnd.wordperfect": {
        "source": "iana",
        "extensions": [
            "wpd"
        ]
    },
    "application/vnd.wqd": {
        "source": "iana",
        "extensions": [
            "wqd"
        ]
    },
    "application/vnd.wrq-hp3000-labelled": {
        "source": "iana"
    },
    "application/vnd.wt.stf": {
        "source": "iana",
        "extensions": [
            "stf"
        ]
    },
    "application/vnd.wv.csp+wbxml": {
        "source": "iana"
    },
    "application/vnd.wv.csp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.wv.ssp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.xacml+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.xara": {
        "source": "iana",
        "extensions": [
            "xar"
        ]
    },
    "application/vnd.xfdl": {
        "source": "iana",
        "extensions": [
            "xfdl"
        ]
    },
    "application/vnd.xfdl.webform": {
        "source": "iana"
    },
    "application/vnd.xmi+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/vnd.xmpie.cpkg": {
        "source": "iana"
    },
    "application/vnd.xmpie.dpkg": {
        "source": "iana"
    },
    "application/vnd.xmpie.plan": {
        "source": "iana"
    },
    "application/vnd.xmpie.ppkg": {
        "source": "iana"
    },
    "application/vnd.xmpie.xlim": {
        "source": "iana"
    },
    "application/vnd.yamaha.hv-dic": {
        "source": "iana",
        "extensions": [
            "hvd"
        ]
    },
    "application/vnd.yamaha.hv-script": {
        "source": "iana",
        "extensions": [
            "hvs"
        ]
    },
    "application/vnd.yamaha.hv-voice": {
        "source": "iana",
        "extensions": [
            "hvp"
        ]
    },
    "application/vnd.yamaha.openscoreformat": {
        "source": "iana",
        "extensions": [
            "osf"
        ]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "osfpvg"
        ]
    },
    "application/vnd.yamaha.remote-setup": {
        "source": "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
        "source": "iana",
        "extensions": [
            "saf"
        ]
    },
    "application/vnd.yamaha.smaf-phrase": {
        "source": "iana",
        "extensions": [
            "spf"
        ]
    },
    "application/vnd.yamaha.through-ngn": {
        "source": "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
        "source": "iana"
    },
    "application/vnd.yaoweme": {
        "source": "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
        "source": "iana",
        "extensions": [
            "cmp"
        ]
    },
    "application/vnd.youtube.yt": {
        "source": "iana"
    },
    "application/vnd.zul": {
        "source": "iana",
        "extensions": [
            "zir",
            "zirz"
        ]
    },
    "application/vnd.zzazz.deck+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "zaz"
        ]
    },
    "application/voicexml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "vxml"
        ]
    },
    "application/voucher-cms+json": {
        "source": "iana",
        "compressible": true
    },
    "application/vq-rtcpxr": {
        "source": "iana"
    },
    "application/wasm": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wasm"
        ]
    },
    "application/watcherinfo+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wif"
        ]
    },
    "application/webpush-options+json": {
        "source": "iana",
        "compressible": true
    },
    "application/whoispp-query": {
        "source": "iana"
    },
    "application/whoispp-response": {
        "source": "iana"
    },
    "application/widget": {
        "source": "iana",
        "extensions": [
            "wgt"
        ]
    },
    "application/winhlp": {
        "source": "apache",
        "extensions": [
            "hlp"
        ]
    },
    "application/wita": {
        "source": "iana"
    },
    "application/wordperfect5.1": {
        "source": "iana"
    },
    "application/wsdl+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wsdl"
        ]
    },
    "application/wspolicy+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "wspolicy"
        ]
    },
    "application/x-7z-compressed": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "7z"
        ]
    },
    "application/x-abiword": {
        "source": "apache",
        "extensions": [
            "abw"
        ]
    },
    "application/x-ace-compressed": {
        "source": "apache",
        "extensions": [
            "ace"
        ]
    },
    "application/x-amf": {
        "source": "apache"
    },
    "application/x-apple-diskimage": {
        "source": "apache",
        "extensions": [
            "dmg"
        ]
    },
    "application/x-arj": {
        "compressible": false,
        "extensions": [
            "arj"
        ]
    },
    "application/x-authorware-bin": {
        "source": "apache",
        "extensions": [
            "aab",
            "x32",
            "u32",
            "vox"
        ]
    },
    "application/x-authorware-map": {
        "source": "apache",
        "extensions": [
            "aam"
        ]
    },
    "application/x-authorware-seg": {
        "source": "apache",
        "extensions": [
            "aas"
        ]
    },
    "application/x-bcpio": {
        "source": "apache",
        "extensions": [
            "bcpio"
        ]
    },
    "application/x-bdoc": {
        "compressible": false,
        "extensions": [
            "bdoc"
        ]
    },
    "application/x-bittorrent": {
        "source": "apache",
        "extensions": [
            "torrent"
        ]
    },
    "application/x-blorb": {
        "source": "apache",
        "extensions": [
            "blb",
            "blorb"
        ]
    },
    "application/x-bzip": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "bz"
        ]
    },
    "application/x-bzip2": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "bz2",
            "boz"
        ]
    },
    "application/x-cbr": {
        "source": "apache",
        "extensions": [
            "cbr",
            "cba",
            "cbt",
            "cbz",
            "cb7"
        ]
    },
    "application/x-cdlink": {
        "source": "apache",
        "extensions": [
            "vcd"
        ]
    },
    "application/x-cfs-compressed": {
        "source": "apache",
        "extensions": [
            "cfs"
        ]
    },
    "application/x-chat": {
        "source": "apache",
        "extensions": [
            "chat"
        ]
    },
    "application/x-chess-pgn": {
        "source": "apache",
        "extensions": [
            "pgn"
        ]
    },
    "application/x-chrome-extension": {
        "extensions": [
            "crx"
        ]
    },
    "application/x-cocoa": {
        "source": "nginx",
        "extensions": [
            "cco"
        ]
    },
    "application/x-compress": {
        "source": "apache"
    },
    "application/x-conference": {
        "source": "apache",
        "extensions": [
            "nsc"
        ]
    },
    "application/x-cpio": {
        "source": "apache",
        "extensions": [
            "cpio"
        ]
    },
    "application/x-csh": {
        "source": "apache",
        "extensions": [
            "csh"
        ]
    },
    "application/x-deb": {
        "compressible": false
    },
    "application/x-debian-package": {
        "source": "apache",
        "extensions": [
            "deb",
            "udeb"
        ]
    },
    "application/x-dgc-compressed": {
        "source": "apache",
        "extensions": [
            "dgc"
        ]
    },
    "application/x-director": {
        "source": "apache",
        "extensions": [
            "dir",
            "dcr",
            "dxr",
            "cst",
            "cct",
            "cxt",
            "w3d",
            "fgd",
            "swa"
        ]
    },
    "application/x-doom": {
        "source": "apache",
        "extensions": [
            "wad"
        ]
    },
    "application/x-dtbncx+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "ncx"
        ]
    },
    "application/x-dtbook+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "dtb"
        ]
    },
    "application/x-dtbresource+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "res"
        ]
    },
    "application/x-dvi": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "dvi"
        ]
    },
    "application/x-envoy": {
        "source": "apache",
        "extensions": [
            "evy"
        ]
    },
    "application/x-eva": {
        "source": "apache",
        "extensions": [
            "eva"
        ]
    },
    "application/x-font-bdf": {
        "source": "apache",
        "extensions": [
            "bdf"
        ]
    },
    "application/x-font-dos": {
        "source": "apache"
    },
    "application/x-font-framemaker": {
        "source": "apache"
    },
    "application/x-font-ghostscript": {
        "source": "apache",
        "extensions": [
            "gsf"
        ]
    },
    "application/x-font-libgrx": {
        "source": "apache"
    },
    "application/x-font-linux-psf": {
        "source": "apache",
        "extensions": [
            "psf"
        ]
    },
    "application/x-font-pcf": {
        "source": "apache",
        "extensions": [
            "pcf"
        ]
    },
    "application/x-font-snf": {
        "source": "apache",
        "extensions": [
            "snf"
        ]
    },
    "application/x-font-speedo": {
        "source": "apache"
    },
    "application/x-font-sunos-news": {
        "source": "apache"
    },
    "application/x-font-type1": {
        "source": "apache",
        "extensions": [
            "pfa",
            "pfb",
            "pfm",
            "afm"
        ]
    },
    "application/x-font-vfont": {
        "source": "apache"
    },
    "application/x-freearc": {
        "source": "apache",
        "extensions": [
            "arc"
        ]
    },
    "application/x-futuresplash": {
        "source": "apache",
        "extensions": [
            "spl"
        ]
    },
    "application/x-gca-compressed": {
        "source": "apache",
        "extensions": [
            "gca"
        ]
    },
    "application/x-glulx": {
        "source": "apache",
        "extensions": [
            "ulx"
        ]
    },
    "application/x-gnumeric": {
        "source": "apache",
        "extensions": [
            "gnumeric"
        ]
    },
    "application/x-gramps-xml": {
        "source": "apache",
        "extensions": [
            "gramps"
        ]
    },
    "application/x-gtar": {
        "source": "apache",
        "extensions": [
            "gtar"
        ]
    },
    "application/x-gzip": {
        "source": "apache"
    },
    "application/x-hdf": {
        "source": "apache",
        "extensions": [
            "hdf"
        ]
    },
    "application/x-httpd-php": {
        "compressible": true,
        "extensions": [
            "php"
        ]
    },
    "application/x-install-instructions": {
        "source": "apache",
        "extensions": [
            "install"
        ]
    },
    "application/x-iso9660-image": {
        "source": "apache",
        "extensions": [
            "iso"
        ]
    },
    "application/x-iwork-keynote-sffkey": {
        "extensions": [
            "key"
        ]
    },
    "application/x-iwork-numbers-sffnumbers": {
        "extensions": [
            "numbers"
        ]
    },
    "application/x-iwork-pages-sffpages": {
        "extensions": [
            "pages"
        ]
    },
    "application/x-java-archive-diff": {
        "source": "nginx",
        "extensions": [
            "jardiff"
        ]
    },
    "application/x-java-jnlp-file": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "jnlp"
        ]
    },
    "application/x-javascript": {
        "compressible": true
    },
    "application/x-keepass2": {
        "extensions": [
            "kdbx"
        ]
    },
    "application/x-latex": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "latex"
        ]
    },
    "application/x-lua-bytecode": {
        "extensions": [
            "luac"
        ]
    },
    "application/x-lzh-compressed": {
        "source": "apache",
        "extensions": [
            "lzh",
            "lha"
        ]
    },
    "application/x-makeself": {
        "source": "nginx",
        "extensions": [
            "run"
        ]
    },
    "application/x-mie": {
        "source": "apache",
        "extensions": [
            "mie"
        ]
    },
    "application/x-mobipocket-ebook": {
        "source": "apache",
        "extensions": [
            "prc",
            "mobi"
        ]
    },
    "application/x-mpegurl": {
        "compressible": false
    },
    "application/x-ms-application": {
        "source": "apache",
        "extensions": [
            "application"
        ]
    },
    "application/x-ms-shortcut": {
        "source": "apache",
        "extensions": [
            "lnk"
        ]
    },
    "application/x-ms-wmd": {
        "source": "apache",
        "extensions": [
            "wmd"
        ]
    },
    "application/x-ms-wmz": {
        "source": "apache",
        "extensions": [
            "wmz"
        ]
    },
    "application/x-ms-xbap": {
        "source": "apache",
        "extensions": [
            "xbap"
        ]
    },
    "application/x-msaccess": {
        "source": "apache",
        "extensions": [
            "mdb"
        ]
    },
    "application/x-msbinder": {
        "source": "apache",
        "extensions": [
            "obd"
        ]
    },
    "application/x-mscardfile": {
        "source": "apache",
        "extensions": [
            "crd"
        ]
    },
    "application/x-msclip": {
        "source": "apache",
        "extensions": [
            "clp"
        ]
    },
    "application/x-msdos-program": {
        "extensions": [
            "exe"
        ]
    },
    "application/x-msdownload": {
        "source": "apache",
        "extensions": [
            "exe",
            "dll",
            "com",
            "bat",
            "msi"
        ]
    },
    "application/x-msmediaview": {
        "source": "apache",
        "extensions": [
            "mvb",
            "m13",
            "m14"
        ]
    },
    "application/x-msmetafile": {
        "source": "apache",
        "extensions": [
            "wmf",
            "wmz",
            "emf",
            "emz"
        ]
    },
    "application/x-msmoney": {
        "source": "apache",
        "extensions": [
            "mny"
        ]
    },
    "application/x-mspublisher": {
        "source": "apache",
        "extensions": [
            "pub"
        ]
    },
    "application/x-msschedule": {
        "source": "apache",
        "extensions": [
            "scd"
        ]
    },
    "application/x-msterminal": {
        "source": "apache",
        "extensions": [
            "trm"
        ]
    },
    "application/x-mswrite": {
        "source": "apache",
        "extensions": [
            "wri"
        ]
    },
    "application/x-netcdf": {
        "source": "apache",
        "extensions": [
            "nc",
            "cdf"
        ]
    },
    "application/x-ns-proxy-autoconfig": {
        "compressible": true,
        "extensions": [
            "pac"
        ]
    },
    "application/x-nzb": {
        "source": "apache",
        "extensions": [
            "nzb"
        ]
    },
    "application/x-perl": {
        "source": "nginx",
        "extensions": [
            "pl",
            "pm"
        ]
    },
    "application/x-pilot": {
        "source": "nginx",
        "extensions": [
            "prc",
            "pdb"
        ]
    },
    "application/x-pkcs12": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "p12",
            "pfx"
        ]
    },
    "application/x-pkcs7-certificates": {
        "source": "apache",
        "extensions": [
            "p7b",
            "spc"
        ]
    },
    "application/x-pkcs7-certreqresp": {
        "source": "apache",
        "extensions": [
            "p7r"
        ]
    },
    "application/x-pki-message": {
        "source": "iana"
    },
    "application/x-rar-compressed": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "rar"
        ]
    },
    "application/x-redhat-package-manager": {
        "source": "nginx",
        "extensions": [
            "rpm"
        ]
    },
    "application/x-research-info-systems": {
        "source": "apache",
        "extensions": [
            "ris"
        ]
    },
    "application/x-sea": {
        "source": "nginx",
        "extensions": [
            "sea"
        ]
    },
    "application/x-sh": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "sh"
        ]
    },
    "application/x-shar": {
        "source": "apache",
        "extensions": [
            "shar"
        ]
    },
    "application/x-shockwave-flash": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "swf"
        ]
    },
    "application/x-silverlight-app": {
        "source": "apache",
        "extensions": [
            "xap"
        ]
    },
    "application/x-sql": {
        "source": "apache",
        "extensions": [
            "sql"
        ]
    },
    "application/x-stuffit": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "sit"
        ]
    },
    "application/x-stuffitx": {
        "source": "apache",
        "extensions": [
            "sitx"
        ]
    },
    "application/x-subrip": {
        "source": "apache",
        "extensions": [
            "srt"
        ]
    },
    "application/x-sv4cpio": {
        "source": "apache",
        "extensions": [
            "sv4cpio"
        ]
    },
    "application/x-sv4crc": {
        "source": "apache",
        "extensions": [
            "sv4crc"
        ]
    },
    "application/x-t3vm-image": {
        "source": "apache",
        "extensions": [
            "t3"
        ]
    },
    "application/x-tads": {
        "source": "apache",
        "extensions": [
            "gam"
        ]
    },
    "application/x-tar": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "tar"
        ]
    },
    "application/x-tcl": {
        "source": "apache",
        "extensions": [
            "tcl",
            "tk"
        ]
    },
    "application/x-tex": {
        "source": "apache",
        "extensions": [
            "tex"
        ]
    },
    "application/x-tex-tfm": {
        "source": "apache",
        "extensions": [
            "tfm"
        ]
    },
    "application/x-texinfo": {
        "source": "apache",
        "extensions": [
            "texinfo",
            "texi"
        ]
    },
    "application/x-tgif": {
        "source": "apache",
        "extensions": [
            "obj"
        ]
    },
    "application/x-ustar": {
        "source": "apache",
        "extensions": [
            "ustar"
        ]
    },
    "application/x-virtualbox-hdd": {
        "compressible": true,
        "extensions": [
            "hdd"
        ]
    },
    "application/x-virtualbox-ova": {
        "compressible": true,
        "extensions": [
            "ova"
        ]
    },
    "application/x-virtualbox-ovf": {
        "compressible": true,
        "extensions": [
            "ovf"
        ]
    },
    "application/x-virtualbox-vbox": {
        "compressible": true,
        "extensions": [
            "vbox"
        ]
    },
    "application/x-virtualbox-vbox-extpack": {
        "compressible": false,
        "extensions": [
            "vbox-extpack"
        ]
    },
    "application/x-virtualbox-vdi": {
        "compressible": true,
        "extensions": [
            "vdi"
        ]
    },
    "application/x-virtualbox-vhd": {
        "compressible": true,
        "extensions": [
            "vhd"
        ]
    },
    "application/x-virtualbox-vmdk": {
        "compressible": true,
        "extensions": [
            "vmdk"
        ]
    },
    "application/x-wais-source": {
        "source": "apache",
        "extensions": [
            "src"
        ]
    },
    "application/x-web-app-manifest+json": {
        "compressible": true,
        "extensions": [
            "webapp"
        ]
    },
    "application/x-www-form-urlencoded": {
        "source": "iana",
        "compressible": true
    },
    "application/x-x509-ca-cert": {
        "source": "iana",
        "extensions": [
            "der",
            "crt",
            "pem"
        ]
    },
    "application/x-x509-ca-ra-cert": {
        "source": "iana"
    },
    "application/x-x509-next-ca-cert": {
        "source": "iana"
    },
    "application/x-xfig": {
        "source": "apache",
        "extensions": [
            "fig"
        ]
    },
    "application/x-xliff+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "xlf"
        ]
    },
    "application/x-xpinstall": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "xpi"
        ]
    },
    "application/x-xz": {
        "source": "apache",
        "extensions": [
            "xz"
        ]
    },
    "application/x-zmachine": {
        "source": "apache",
        "extensions": [
            "z1",
            "z2",
            "z3",
            "z4",
            "z5",
            "z6",
            "z7",
            "z8"
        ]
    },
    "application/x400-bp": {
        "source": "iana"
    },
    "application/xacml+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xaml+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "xaml"
        ]
    },
    "application/xcap-att+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xav"
        ]
    },
    "application/xcap-caps+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xca"
        ]
    },
    "application/xcap-diff+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xdf"
        ]
    },
    "application/xcap-el+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xel"
        ]
    },
    "application/xcap-error+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xcap-ns+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xns"
        ]
    },
    "application/xcon-conference-info+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xcon-conference-info-diff+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xenc+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xenc"
        ]
    },
    "application/xhtml+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xhtml",
            "xht"
        ]
    },
    "application/xhtml-voice+xml": {
        "source": "apache",
        "compressible": true
    },
    "application/xliff+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xlf"
        ]
    },
    "application/xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xml",
            "xsl",
            "xsd",
            "rng"
        ]
    },
    "application/xml-dtd": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "dtd"
        ]
    },
    "application/xml-external-parsed-entity": {
        "source": "iana"
    },
    "application/xml-patch+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xmpp+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/xop+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xop"
        ]
    },
    "application/xproc+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "xpl"
        ]
    },
    "application/xslt+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xsl",
            "xslt"
        ]
    },
    "application/xspf+xml": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "xspf"
        ]
    },
    "application/xv+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "mxml",
            "xhvml",
            "xvml",
            "xvm"
        ]
    },
    "application/yang": {
        "source": "iana",
        "extensions": [
            "yang"
        ]
    },
    "application/yang-data+json": {
        "source": "iana",
        "compressible": true
    },
    "application/yang-data+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/yang-patch+json": {
        "source": "iana",
        "compressible": true
    },
    "application/yang-patch+xml": {
        "source": "iana",
        "compressible": true
    },
    "application/yin+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "yin"
        ]
    },
    "application/zip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "zip"
        ]
    },
    "application/zlib": {
        "source": "iana"
    },
    "application/zstd": {
        "source": "iana"
    },
    "audio/1d-interleaved-parityfec": {
        "source": "iana"
    },
    "audio/32kadpcm": {
        "source": "iana"
    },
    "audio/3gpp": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "3gpp"
        ]
    },
    "audio/3gpp2": {
        "source": "iana"
    },
    "audio/aac": {
        "source": "iana"
    },
    "audio/ac3": {
        "source": "iana"
    },
    "audio/adpcm": {
        "source": "apache",
        "extensions": [
            "adp"
        ]
    },
    "audio/amr": {
        "source": "iana",
        "extensions": [
            "amr"
        ]
    },
    "audio/amr-wb": {
        "source": "iana"
    },
    "audio/amr-wb+": {
        "source": "iana"
    },
    "audio/aptx": {
        "source": "iana"
    },
    "audio/asc": {
        "source": "iana"
    },
    "audio/atrac-advanced-lossless": {
        "source": "iana"
    },
    "audio/atrac-x": {
        "source": "iana"
    },
    "audio/atrac3": {
        "source": "iana"
    },
    "audio/basic": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "au",
            "snd"
        ]
    },
    "audio/bv16": {
        "source": "iana"
    },
    "audio/bv32": {
        "source": "iana"
    },
    "audio/clearmode": {
        "source": "iana"
    },
    "audio/cn": {
        "source": "iana"
    },
    "audio/dat12": {
        "source": "iana"
    },
    "audio/dls": {
        "source": "iana"
    },
    "audio/dsr-es201108": {
        "source": "iana"
    },
    "audio/dsr-es202050": {
        "source": "iana"
    },
    "audio/dsr-es202211": {
        "source": "iana"
    },
    "audio/dsr-es202212": {
        "source": "iana"
    },
    "audio/dv": {
        "source": "iana"
    },
    "audio/dvi4": {
        "source": "iana"
    },
    "audio/eac3": {
        "source": "iana"
    },
    "audio/encaprtp": {
        "source": "iana"
    },
    "audio/evrc": {
        "source": "iana"
    },
    "audio/evrc-qcp": {
        "source": "iana"
    },
    "audio/evrc0": {
        "source": "iana"
    },
    "audio/evrc1": {
        "source": "iana"
    },
    "audio/evrcb": {
        "source": "iana"
    },
    "audio/evrcb0": {
        "source": "iana"
    },
    "audio/evrcb1": {
        "source": "iana"
    },
    "audio/evrcnw": {
        "source": "iana"
    },
    "audio/evrcnw0": {
        "source": "iana"
    },
    "audio/evrcnw1": {
        "source": "iana"
    },
    "audio/evrcwb": {
        "source": "iana"
    },
    "audio/evrcwb0": {
        "source": "iana"
    },
    "audio/evrcwb1": {
        "source": "iana"
    },
    "audio/evs": {
        "source": "iana"
    },
    "audio/flexfec": {
        "source": "iana"
    },
    "audio/fwdred": {
        "source": "iana"
    },
    "audio/g711-0": {
        "source": "iana"
    },
    "audio/g719": {
        "source": "iana"
    },
    "audio/g722": {
        "source": "iana"
    },
    "audio/g7221": {
        "source": "iana"
    },
    "audio/g723": {
        "source": "iana"
    },
    "audio/g726-16": {
        "source": "iana"
    },
    "audio/g726-24": {
        "source": "iana"
    },
    "audio/g726-32": {
        "source": "iana"
    },
    "audio/g726-40": {
        "source": "iana"
    },
    "audio/g728": {
        "source": "iana"
    },
    "audio/g729": {
        "source": "iana"
    },
    "audio/g7291": {
        "source": "iana"
    },
    "audio/g729d": {
        "source": "iana"
    },
    "audio/g729e": {
        "source": "iana"
    },
    "audio/gsm": {
        "source": "iana"
    },
    "audio/gsm-efr": {
        "source": "iana"
    },
    "audio/gsm-hr-08": {
        "source": "iana"
    },
    "audio/ilbc": {
        "source": "iana"
    },
    "audio/ip-mr_v2.5": {
        "source": "iana"
    },
    "audio/isac": {
        "source": "apache"
    },
    "audio/l16": {
        "source": "iana"
    },
    "audio/l20": {
        "source": "iana"
    },
    "audio/l24": {
        "source": "iana",
        "compressible": false
    },
    "audio/l8": {
        "source": "iana"
    },
    "audio/lpc": {
        "source": "iana"
    },
    "audio/melp": {
        "source": "iana"
    },
    "audio/melp1200": {
        "source": "iana"
    },
    "audio/melp2400": {
        "source": "iana"
    },
    "audio/melp600": {
        "source": "iana"
    },
    "audio/mhas": {
        "source": "iana"
    },
    "audio/midi": {
        "source": "apache",
        "extensions": [
            "mid",
            "midi",
            "kar",
            "rmi"
        ]
    },
    "audio/mobile-xmf": {
        "source": "iana",
        "extensions": [
            "mxmf"
        ]
    },
    "audio/mp3": {
        "compressible": false,
        "extensions": [
            "mp3"
        ]
    },
    "audio/mp4": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "m4a",
            "mp4a"
        ]
    },
    "audio/mp4a-latm": {
        "source": "iana"
    },
    "audio/mpa": {
        "source": "iana"
    },
    "audio/mpa-robust": {
        "source": "iana"
    },
    "audio/mpeg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "mpga",
            "mp2",
            "mp2a",
            "mp3",
            "m2a",
            "m3a"
        ]
    },
    "audio/mpeg4-generic": {
        "source": "iana"
    },
    "audio/musepack": {
        "source": "apache"
    },
    "audio/ogg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "oga",
            "ogg",
            "spx",
            "opus"
        ]
    },
    "audio/opus": {
        "source": "iana"
    },
    "audio/parityfec": {
        "source": "iana"
    },
    "audio/pcma": {
        "source": "iana"
    },
    "audio/pcma-wb": {
        "source": "iana"
    },
    "audio/pcmu": {
        "source": "iana"
    },
    "audio/pcmu-wb": {
        "source": "iana"
    },
    "audio/prs.sid": {
        "source": "iana"
    },
    "audio/qcelp": {
        "source": "iana"
    },
    "audio/raptorfec": {
        "source": "iana"
    },
    "audio/red": {
        "source": "iana"
    },
    "audio/rtp-enc-aescm128": {
        "source": "iana"
    },
    "audio/rtp-midi": {
        "source": "iana"
    },
    "audio/rtploopback": {
        "source": "iana"
    },
    "audio/rtx": {
        "source": "iana"
    },
    "audio/s3m": {
        "source": "apache",
        "extensions": [
            "s3m"
        ]
    },
    "audio/scip": {
        "source": "iana"
    },
    "audio/silk": {
        "source": "apache",
        "extensions": [
            "sil"
        ]
    },
    "audio/smv": {
        "source": "iana"
    },
    "audio/smv-qcp": {
        "source": "iana"
    },
    "audio/smv0": {
        "source": "iana"
    },
    "audio/sofa": {
        "source": "iana"
    },
    "audio/sp-midi": {
        "source": "iana"
    },
    "audio/speex": {
        "source": "iana"
    },
    "audio/t140c": {
        "source": "iana"
    },
    "audio/t38": {
        "source": "iana"
    },
    "audio/telephone-event": {
        "source": "iana"
    },
    "audio/tetra_acelp": {
        "source": "iana"
    },
    "audio/tetra_acelp_bb": {
        "source": "iana"
    },
    "audio/tone": {
        "source": "iana"
    },
    "audio/tsvcis": {
        "source": "iana"
    },
    "audio/uemclip": {
        "source": "iana"
    },
    "audio/ulpfec": {
        "source": "iana"
    },
    "audio/usac": {
        "source": "iana"
    },
    "audio/vdvi": {
        "source": "iana"
    },
    "audio/vmr-wb": {
        "source": "iana"
    },
    "audio/vnd.3gpp.iufp": {
        "source": "iana"
    },
    "audio/vnd.4sb": {
        "source": "iana"
    },
    "audio/vnd.audiokoz": {
        "source": "iana"
    },
    "audio/vnd.celp": {
        "source": "iana"
    },
    "audio/vnd.cisco.nse": {
        "source": "iana"
    },
    "audio/vnd.cmles.radio-events": {
        "source": "iana"
    },
    "audio/vnd.cns.anp1": {
        "source": "iana"
    },
    "audio/vnd.cns.inf1": {
        "source": "iana"
    },
    "audio/vnd.dece.audio": {
        "source": "iana",
        "extensions": [
            "uva",
            "uvva"
        ]
    },
    "audio/vnd.digital-winds": {
        "source": "iana",
        "extensions": [
            "eol"
        ]
    },
    "audio/vnd.dlna.adts": {
        "source": "iana"
    },
    "audio/vnd.dolby.heaac.1": {
        "source": "iana"
    },
    "audio/vnd.dolby.heaac.2": {
        "source": "iana"
    },
    "audio/vnd.dolby.mlp": {
        "source": "iana"
    },
    "audio/vnd.dolby.mps": {
        "source": "iana"
    },
    "audio/vnd.dolby.pl2": {
        "source": "iana"
    },
    "audio/vnd.dolby.pl2x": {
        "source": "iana"
    },
    "audio/vnd.dolby.pl2z": {
        "source": "iana"
    },
    "audio/vnd.dolby.pulse.1": {
        "source": "iana"
    },
    "audio/vnd.dra": {
        "source": "iana",
        "extensions": [
            "dra"
        ]
    },
    "audio/vnd.dts": {
        "source": "iana",
        "extensions": [
            "dts"
        ]
    },
    "audio/vnd.dts.hd": {
        "source": "iana",
        "extensions": [
            "dtshd"
        ]
    },
    "audio/vnd.dts.uhd": {
        "source": "iana"
    },
    "audio/vnd.dvb.file": {
        "source": "iana"
    },
    "audio/vnd.everad.plj": {
        "source": "iana"
    },
    "audio/vnd.hns.audio": {
        "source": "iana"
    },
    "audio/vnd.lucent.voice": {
        "source": "iana",
        "extensions": [
            "lvp"
        ]
    },
    "audio/vnd.ms-playready.media.pya": {
        "source": "iana",
        "extensions": [
            "pya"
        ]
    },
    "audio/vnd.nokia.mobile-xmf": {
        "source": "iana"
    },
    "audio/vnd.nortel.vbk": {
        "source": "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
        "source": "iana",
        "extensions": [
            "ecelp4800"
        ]
    },
    "audio/vnd.nuera.ecelp7470": {
        "source": "iana",
        "extensions": [
            "ecelp7470"
        ]
    },
    "audio/vnd.nuera.ecelp9600": {
        "source": "iana",
        "extensions": [
            "ecelp9600"
        ]
    },
    "audio/vnd.octel.sbc": {
        "source": "iana"
    },
    "audio/vnd.presonus.multitrack": {
        "source": "iana"
    },
    "audio/vnd.qcelp": {
        "source": "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
        "source": "iana"
    },
    "audio/vnd.rip": {
        "source": "iana",
        "extensions": [
            "rip"
        ]
    },
    "audio/vnd.rn-realaudio": {
        "compressible": false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
        "source": "iana"
    },
    "audio/vnd.vmx.cvsd": {
        "source": "iana"
    },
    "audio/vnd.wave": {
        "compressible": false
    },
    "audio/vorbis": {
        "source": "iana",
        "compressible": false
    },
    "audio/vorbis-config": {
        "source": "iana"
    },
    "audio/wav": {
        "compressible": false,
        "extensions": [
            "wav"
        ]
    },
    "audio/wave": {
        "compressible": false,
        "extensions": [
            "wav"
        ]
    },
    "audio/webm": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "weba"
        ]
    },
    "audio/x-aac": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "aac"
        ]
    },
    "audio/x-aiff": {
        "source": "apache",
        "extensions": [
            "aif",
            "aiff",
            "aifc"
        ]
    },
    "audio/x-caf": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "caf"
        ]
    },
    "audio/x-flac": {
        "source": "apache",
        "extensions": [
            "flac"
        ]
    },
    "audio/x-m4a": {
        "source": "nginx",
        "extensions": [
            "m4a"
        ]
    },
    "audio/x-matroska": {
        "source": "apache",
        "extensions": [
            "mka"
        ]
    },
    "audio/x-mpegurl": {
        "source": "apache",
        "extensions": [
            "m3u"
        ]
    },
    "audio/x-ms-wax": {
        "source": "apache",
        "extensions": [
            "wax"
        ]
    },
    "audio/x-ms-wma": {
        "source": "apache",
        "extensions": [
            "wma"
        ]
    },
    "audio/x-pn-realaudio": {
        "source": "apache",
        "extensions": [
            "ram",
            "ra"
        ]
    },
    "audio/x-pn-realaudio-plugin": {
        "source": "apache",
        "extensions": [
            "rmp"
        ]
    },
    "audio/x-realaudio": {
        "source": "nginx",
        "extensions": [
            "ra"
        ]
    },
    "audio/x-tta": {
        "source": "apache"
    },
    "audio/x-wav": {
        "source": "apache",
        "extensions": [
            "wav"
        ]
    },
    "audio/xm": {
        "source": "apache",
        "extensions": [
            "xm"
        ]
    },
    "chemical/x-cdx": {
        "source": "apache",
        "extensions": [
            "cdx"
        ]
    },
    "chemical/x-cif": {
        "source": "apache",
        "extensions": [
            "cif"
        ]
    },
    "chemical/x-cmdf": {
        "source": "apache",
        "extensions": [
            "cmdf"
        ]
    },
    "chemical/x-cml": {
        "source": "apache",
        "extensions": [
            "cml"
        ]
    },
    "chemical/x-csml": {
        "source": "apache",
        "extensions": [
            "csml"
        ]
    },
    "chemical/x-pdb": {
        "source": "apache"
    },
    "chemical/x-xyz": {
        "source": "apache",
        "extensions": [
            "xyz"
        ]
    },
    "font/collection": {
        "source": "iana",
        "extensions": [
            "ttc"
        ]
    },
    "font/otf": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "otf"
        ]
    },
    "font/sfnt": {
        "source": "iana"
    },
    "font/ttf": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ttf"
        ]
    },
    "font/woff": {
        "source": "iana",
        "extensions": [
            "woff"
        ]
    },
    "font/woff2": {
        "source": "iana",
        "extensions": [
            "woff2"
        ]
    },
    "image/aces": {
        "source": "iana",
        "extensions": [
            "exr"
        ]
    },
    "image/apng": {
        "compressible": false,
        "extensions": [
            "apng"
        ]
    },
    "image/avci": {
        "source": "iana",
        "extensions": [
            "avci"
        ]
    },
    "image/avcs": {
        "source": "iana",
        "extensions": [
            "avcs"
        ]
    },
    "image/avif": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "avif"
        ]
    },
    "image/bmp": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "bmp"
        ]
    },
    "image/cgm": {
        "source": "iana",
        "extensions": [
            "cgm"
        ]
    },
    "image/dicom-rle": {
        "source": "iana",
        "extensions": [
            "drle"
        ]
    },
    "image/emf": {
        "source": "iana",
        "extensions": [
            "emf"
        ]
    },
    "image/fits": {
        "source": "iana",
        "extensions": [
            "fits"
        ]
    },
    "image/g3fax": {
        "source": "iana",
        "extensions": [
            "g3"
        ]
    },
    "image/gif": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "gif"
        ]
    },
    "image/heic": {
        "source": "iana",
        "extensions": [
            "heic"
        ]
    },
    "image/heic-sequence": {
        "source": "iana",
        "extensions": [
            "heics"
        ]
    },
    "image/heif": {
        "source": "iana",
        "extensions": [
            "heif"
        ]
    },
    "image/heif-sequence": {
        "source": "iana",
        "extensions": [
            "heifs"
        ]
    },
    "image/hej2k": {
        "source": "iana",
        "extensions": [
            "hej2"
        ]
    },
    "image/hsj2": {
        "source": "iana",
        "extensions": [
            "hsj2"
        ]
    },
    "image/ief": {
        "source": "iana",
        "extensions": [
            "ief"
        ]
    },
    "image/jls": {
        "source": "iana",
        "extensions": [
            "jls"
        ]
    },
    "image/jp2": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "jp2",
            "jpg2"
        ]
    },
    "image/jpeg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "jpeg",
            "jpg",
            "jpe"
        ]
    },
    "image/jph": {
        "source": "iana",
        "extensions": [
            "jph"
        ]
    },
    "image/jphc": {
        "source": "iana",
        "extensions": [
            "jhc"
        ]
    },
    "image/jpm": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "jpm"
        ]
    },
    "image/jpx": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "jpx",
            "jpf"
        ]
    },
    "image/jxr": {
        "source": "iana",
        "extensions": [
            "jxr"
        ]
    },
    "image/jxra": {
        "source": "iana",
        "extensions": [
            "jxra"
        ]
    },
    "image/jxrs": {
        "source": "iana",
        "extensions": [
            "jxrs"
        ]
    },
    "image/jxs": {
        "source": "iana",
        "extensions": [
            "jxs"
        ]
    },
    "image/jxsc": {
        "source": "iana",
        "extensions": [
            "jxsc"
        ]
    },
    "image/jxsi": {
        "source": "iana",
        "extensions": [
            "jxsi"
        ]
    },
    "image/jxss": {
        "source": "iana",
        "extensions": [
            "jxss"
        ]
    },
    "image/ktx": {
        "source": "iana",
        "extensions": [
            "ktx"
        ]
    },
    "image/ktx2": {
        "source": "iana",
        "extensions": [
            "ktx2"
        ]
    },
    "image/naplps": {
        "source": "iana"
    },
    "image/pjpeg": {
        "compressible": false
    },
    "image/png": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "png"
        ]
    },
    "image/prs.btif": {
        "source": "iana",
        "extensions": [
            "btif"
        ]
    },
    "image/prs.pti": {
        "source": "iana",
        "extensions": [
            "pti"
        ]
    },
    "image/pwg-raster": {
        "source": "iana"
    },
    "image/sgi": {
        "source": "apache",
        "extensions": [
            "sgi"
        ]
    },
    "image/svg+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "svg",
            "svgz"
        ]
    },
    "image/t38": {
        "source": "iana",
        "extensions": [
            "t38"
        ]
    },
    "image/tiff": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "tif",
            "tiff"
        ]
    },
    "image/tiff-fx": {
        "source": "iana",
        "extensions": [
            "tfx"
        ]
    },
    "image/vnd.adobe.photoshop": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "psd"
        ]
    },
    "image/vnd.airzip.accelerator.azv": {
        "source": "iana",
        "extensions": [
            "azv"
        ]
    },
    "image/vnd.cns.inf2": {
        "source": "iana"
    },
    "image/vnd.dece.graphic": {
        "source": "iana",
        "extensions": [
            "uvi",
            "uvvi",
            "uvg",
            "uvvg"
        ]
    },
    "image/vnd.djvu": {
        "source": "iana",
        "extensions": [
            "djvu",
            "djv"
        ]
    },
    "image/vnd.dvb.subtitle": {
        "source": "iana",
        "extensions": [
            "sub"
        ]
    },
    "image/vnd.dwg": {
        "source": "iana",
        "extensions": [
            "dwg"
        ]
    },
    "image/vnd.dxf": {
        "source": "iana",
        "extensions": [
            "dxf"
        ]
    },
    "image/vnd.fastbidsheet": {
        "source": "iana",
        "extensions": [
            "fbs"
        ]
    },
    "image/vnd.fpx": {
        "source": "iana",
        "extensions": [
            "fpx"
        ]
    },
    "image/vnd.fst": {
        "source": "iana",
        "extensions": [
            "fst"
        ]
    },
    "image/vnd.fujixerox.edmics-mmr": {
        "source": "iana",
        "extensions": [
            "mmr"
        ]
    },
    "image/vnd.fujixerox.edmics-rlc": {
        "source": "iana",
        "extensions": [
            "rlc"
        ]
    },
    "image/vnd.globalgraphics.pgb": {
        "source": "iana"
    },
    "image/vnd.microsoft.icon": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "ico"
        ]
    },
    "image/vnd.mix": {
        "source": "iana"
    },
    "image/vnd.mozilla.apng": {
        "source": "iana"
    },
    "image/vnd.ms-dds": {
        "compressible": true,
        "extensions": [
            "dds"
        ]
    },
    "image/vnd.ms-modi": {
        "source": "iana",
        "extensions": [
            "mdi"
        ]
    },
    "image/vnd.ms-photo": {
        "source": "apache",
        "extensions": [
            "wdp"
        ]
    },
    "image/vnd.net-fpx": {
        "source": "iana",
        "extensions": [
            "npx"
        ]
    },
    "image/vnd.pco.b16": {
        "source": "iana",
        "extensions": [
            "b16"
        ]
    },
    "image/vnd.radiance": {
        "source": "iana"
    },
    "image/vnd.sealed.png": {
        "source": "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
        "source": "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
        "source": "iana"
    },
    "image/vnd.svf": {
        "source": "iana"
    },
    "image/vnd.tencent.tap": {
        "source": "iana",
        "extensions": [
            "tap"
        ]
    },
    "image/vnd.valve.source.texture": {
        "source": "iana",
        "extensions": [
            "vtf"
        ]
    },
    "image/vnd.wap.wbmp": {
        "source": "iana",
        "extensions": [
            "wbmp"
        ]
    },
    "image/vnd.xiff": {
        "source": "iana",
        "extensions": [
            "xif"
        ]
    },
    "image/vnd.zbrush.pcx": {
        "source": "iana",
        "extensions": [
            "pcx"
        ]
    },
    "image/webp": {
        "source": "apache",
        "extensions": [
            "webp"
        ]
    },
    "image/wmf": {
        "source": "iana",
        "extensions": [
            "wmf"
        ]
    },
    "image/x-3ds": {
        "source": "apache",
        "extensions": [
            "3ds"
        ]
    },
    "image/x-cmu-raster": {
        "source": "apache",
        "extensions": [
            "ras"
        ]
    },
    "image/x-cmx": {
        "source": "apache",
        "extensions": [
            "cmx"
        ]
    },
    "image/x-freehand": {
        "source": "apache",
        "extensions": [
            "fh",
            "fhc",
            "fh4",
            "fh5",
            "fh7"
        ]
    },
    "image/x-icon": {
        "source": "apache",
        "compressible": true,
        "extensions": [
            "ico"
        ]
    },
    "image/x-jng": {
        "source": "nginx",
        "extensions": [
            "jng"
        ]
    },
    "image/x-mrsid-image": {
        "source": "apache",
        "extensions": [
            "sid"
        ]
    },
    "image/x-ms-bmp": {
        "source": "nginx",
        "compressible": true,
        "extensions": [
            "bmp"
        ]
    },
    "image/x-pcx": {
        "source": "apache",
        "extensions": [
            "pcx"
        ]
    },
    "image/x-pict": {
        "source": "apache",
        "extensions": [
            "pic",
            "pct"
        ]
    },
    "image/x-portable-anymap": {
        "source": "apache",
        "extensions": [
            "pnm"
        ]
    },
    "image/x-portable-bitmap": {
        "source": "apache",
        "extensions": [
            "pbm"
        ]
    },
    "image/x-portable-graymap": {
        "source": "apache",
        "extensions": [
            "pgm"
        ]
    },
    "image/x-portable-pixmap": {
        "source": "apache",
        "extensions": [
            "ppm"
        ]
    },
    "image/x-rgb": {
        "source": "apache",
        "extensions": [
            "rgb"
        ]
    },
    "image/x-tga": {
        "source": "apache",
        "extensions": [
            "tga"
        ]
    },
    "image/x-xbitmap": {
        "source": "apache",
        "extensions": [
            "xbm"
        ]
    },
    "image/x-xcf": {
        "compressible": false
    },
    "image/x-xpixmap": {
        "source": "apache",
        "extensions": [
            "xpm"
        ]
    },
    "image/x-xwindowdump": {
        "source": "apache",
        "extensions": [
            "xwd"
        ]
    },
    "message/cpim": {
        "source": "iana"
    },
    "message/delivery-status": {
        "source": "iana"
    },
    "message/disposition-notification": {
        "source": "iana",
        "extensions": [
            "disposition-notification"
        ]
    },
    "message/external-body": {
        "source": "iana"
    },
    "message/feedback-report": {
        "source": "iana"
    },
    "message/global": {
        "source": "iana",
        "extensions": [
            "u8msg"
        ]
    },
    "message/global-delivery-status": {
        "source": "iana",
        "extensions": [
            "u8dsn"
        ]
    },
    "message/global-disposition-notification": {
        "source": "iana",
        "extensions": [
            "u8mdn"
        ]
    },
    "message/global-headers": {
        "source": "iana",
        "extensions": [
            "u8hdr"
        ]
    },
    "message/http": {
        "source": "iana",
        "compressible": false
    },
    "message/imdn+xml": {
        "source": "iana",
        "compressible": true
    },
    "message/news": {
        "source": "iana"
    },
    "message/partial": {
        "source": "iana",
        "compressible": false
    },
    "message/rfc822": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "eml",
            "mime"
        ]
    },
    "message/s-http": {
        "source": "iana"
    },
    "message/sip": {
        "source": "iana"
    },
    "message/sipfrag": {
        "source": "iana"
    },
    "message/tracking-status": {
        "source": "iana"
    },
    "message/vnd.si.simp": {
        "source": "iana"
    },
    "message/vnd.wfa.wsc": {
        "source": "iana",
        "extensions": [
            "wsc"
        ]
    },
    "model/3mf": {
        "source": "iana",
        "extensions": [
            "3mf"
        ]
    },
    "model/e57": {
        "source": "iana"
    },
    "model/gltf+json": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "gltf"
        ]
    },
    "model/gltf-binary": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "glb"
        ]
    },
    "model/iges": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "igs",
            "iges"
        ]
    },
    "model/mesh": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "msh",
            "mesh",
            "silo"
        ]
    },
    "model/mtl": {
        "source": "iana",
        "extensions": [
            "mtl"
        ]
    },
    "model/obj": {
        "source": "iana",
        "extensions": [
            "obj"
        ]
    },
    "model/step": {
        "source": "iana"
    },
    "model/step+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "stpx"
        ]
    },
    "model/step+zip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "stpz"
        ]
    },
    "model/step-xml+zip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "stpxz"
        ]
    },
    "model/stl": {
        "source": "iana",
        "extensions": [
            "stl"
        ]
    },
    "model/vnd.collada+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "dae"
        ]
    },
    "model/vnd.dwf": {
        "source": "iana",
        "extensions": [
            "dwf"
        ]
    },
    "model/vnd.flatland.3dml": {
        "source": "iana"
    },
    "model/vnd.gdl": {
        "source": "iana",
        "extensions": [
            "gdl"
        ]
    },
    "model/vnd.gs-gdl": {
        "source": "apache"
    },
    "model/vnd.gs.gdl": {
        "source": "iana"
    },
    "model/vnd.gtw": {
        "source": "iana",
        "extensions": [
            "gtw"
        ]
    },
    "model/vnd.moml+xml": {
        "source": "iana",
        "compressible": true
    },
    "model/vnd.mts": {
        "source": "iana",
        "extensions": [
            "mts"
        ]
    },
    "model/vnd.opengex": {
        "source": "iana",
        "extensions": [
            "ogex"
        ]
    },
    "model/vnd.parasolid.transmit.binary": {
        "source": "iana",
        "extensions": [
            "x_b"
        ]
    },
    "model/vnd.parasolid.transmit.text": {
        "source": "iana",
        "extensions": [
            "x_t"
        ]
    },
    "model/vnd.pytha.pyox": {
        "source": "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
        "source": "iana"
    },
    "model/vnd.sap.vds": {
        "source": "iana",
        "extensions": [
            "vds"
        ]
    },
    "model/vnd.usdz+zip": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "usdz"
        ]
    },
    "model/vnd.valve.source.compiled-map": {
        "source": "iana",
        "extensions": [
            "bsp"
        ]
    },
    "model/vnd.vtu": {
        "source": "iana",
        "extensions": [
            "vtu"
        ]
    },
    "model/vrml": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "wrl",
            "vrml"
        ]
    },
    "model/x3d+binary": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "x3db",
            "x3dbz"
        ]
    },
    "model/x3d+fastinfoset": {
        "source": "iana",
        "extensions": [
            "x3db"
        ]
    },
    "model/x3d+vrml": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "x3dv",
            "x3dvz"
        ]
    },
    "model/x3d+xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "x3d",
            "x3dz"
        ]
    },
    "model/x3d-vrml": {
        "source": "iana",
        "extensions": [
            "x3dv"
        ]
    },
    "multipart/alternative": {
        "source": "iana",
        "compressible": false
    },
    "multipart/appledouble": {
        "source": "iana"
    },
    "multipart/byteranges": {
        "source": "iana"
    },
    "multipart/digest": {
        "source": "iana"
    },
    "multipart/encrypted": {
        "source": "iana",
        "compressible": false
    },
    "multipart/form-data": {
        "source": "iana",
        "compressible": false
    },
    "multipart/header-set": {
        "source": "iana"
    },
    "multipart/mixed": {
        "source": "iana"
    },
    "multipart/multilingual": {
        "source": "iana"
    },
    "multipart/parallel": {
        "source": "iana"
    },
    "multipart/related": {
        "source": "iana",
        "compressible": false
    },
    "multipart/report": {
        "source": "iana"
    },
    "multipart/signed": {
        "source": "iana",
        "compressible": false
    },
    "multipart/vnd.bint.med-plus": {
        "source": "iana"
    },
    "multipart/voice-message": {
        "source": "iana"
    },
    "multipart/x-mixed-replace": {
        "source": "iana"
    },
    "text/1d-interleaved-parityfec": {
        "source": "iana"
    },
    "text/cache-manifest": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "appcache",
            "manifest"
        ]
    },
    "text/calendar": {
        "source": "iana",
        "extensions": [
            "ics",
            "ifb"
        ]
    },
    "text/calender": {
        "compressible": true
    },
    "text/cmd": {
        "compressible": true
    },
    "text/coffeescript": {
        "extensions": [
            "coffee",
            "litcoffee"
        ]
    },
    "text/cql": {
        "source": "iana"
    },
    "text/cql-expression": {
        "source": "iana"
    },
    "text/cql-identifier": {
        "source": "iana"
    },
    "text/css": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "css"
        ]
    },
    "text/csv": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "csv"
        ]
    },
    "text/csv-schema": {
        "source": "iana"
    },
    "text/directory": {
        "source": "iana"
    },
    "text/dns": {
        "source": "iana"
    },
    "text/ecmascript": {
        "source": "iana"
    },
    "text/encaprtp": {
        "source": "iana"
    },
    "text/enriched": {
        "source": "iana"
    },
    "text/fhirpath": {
        "source": "iana"
    },
    "text/flexfec": {
        "source": "iana"
    },
    "text/fwdred": {
        "source": "iana"
    },
    "text/gff3": {
        "source": "iana"
    },
    "text/grammar-ref-list": {
        "source": "iana"
    },
    "text/html": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "html",
            "htm",
            "shtml"
        ]
    },
    "text/jade": {
        "extensions": [
            "jade"
        ]
    },
    "text/javascript": {
        "source": "iana",
        "compressible": true
    },
    "text/jcr-cnd": {
        "source": "iana"
    },
    "text/jsx": {
        "compressible": true,
        "extensions": [
            "jsx"
        ]
    },
    "text/less": {
        "compressible": true,
        "extensions": [
            "less"
        ]
    },
    "text/markdown": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "markdown",
            "md"
        ]
    },
    "text/mathml": {
        "source": "nginx",
        "extensions": [
            "mml"
        ]
    },
    "text/mdx": {
        "compressible": true,
        "extensions": [
            "mdx"
        ]
    },
    "text/mizar": {
        "source": "iana"
    },
    "text/n3": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "n3"
        ]
    },
    "text/parameters": {
        "source": "iana",
        "charset": "UTF-8"
    },
    "text/parityfec": {
        "source": "iana"
    },
    "text/plain": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "txt",
            "text",
            "conf",
            "def",
            "list",
            "log",
            "in",
            "ini"
        ]
    },
    "text/provenance-notation": {
        "source": "iana",
        "charset": "UTF-8"
    },
    "text/prs.fallenstein.rst": {
        "source": "iana"
    },
    "text/prs.lines.tag": {
        "source": "iana",
        "extensions": [
            "dsc"
        ]
    },
    "text/prs.prop.logic": {
        "source": "iana"
    },
    "text/raptorfec": {
        "source": "iana"
    },
    "text/red": {
        "source": "iana"
    },
    "text/rfc822-headers": {
        "source": "iana"
    },
    "text/richtext": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rtx"
        ]
    },
    "text/rtf": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "rtf"
        ]
    },
    "text/rtp-enc-aescm128": {
        "source": "iana"
    },
    "text/rtploopback": {
        "source": "iana"
    },
    "text/rtx": {
        "source": "iana"
    },
    "text/sgml": {
        "source": "iana",
        "extensions": [
            "sgml",
            "sgm"
        ]
    },
    "text/shaclc": {
        "source": "iana"
    },
    "text/shex": {
        "source": "iana",
        "extensions": [
            "shex"
        ]
    },
    "text/slim": {
        "extensions": [
            "slim",
            "slm"
        ]
    },
    "text/spdx": {
        "source": "iana",
        "extensions": [
            "spdx"
        ]
    },
    "text/strings": {
        "source": "iana"
    },
    "text/stylus": {
        "extensions": [
            "stylus",
            "styl"
        ]
    },
    "text/t140": {
        "source": "iana"
    },
    "text/tab-separated-values": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "tsv"
        ]
    },
    "text/troff": {
        "source": "iana",
        "extensions": [
            "t",
            "tr",
            "roff",
            "man",
            "me",
            "ms"
        ]
    },
    "text/turtle": {
        "source": "iana",
        "charset": "UTF-8",
        "extensions": [
            "ttl"
        ]
    },
    "text/ulpfec": {
        "source": "iana"
    },
    "text/uri-list": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "uri",
            "uris",
            "urls"
        ]
    },
    "text/vcard": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "vcard"
        ]
    },
    "text/vnd.a": {
        "source": "iana"
    },
    "text/vnd.abc": {
        "source": "iana"
    },
    "text/vnd.ascii-art": {
        "source": "iana"
    },
    "text/vnd.curl": {
        "source": "iana",
        "extensions": [
            "curl"
        ]
    },
    "text/vnd.curl.dcurl": {
        "source": "apache",
        "extensions": [
            "dcurl"
        ]
    },
    "text/vnd.curl.mcurl": {
        "source": "apache",
        "extensions": [
            "mcurl"
        ]
    },
    "text/vnd.curl.scurl": {
        "source": "apache",
        "extensions": [
            "scurl"
        ]
    },
    "text/vnd.debian.copyright": {
        "source": "iana",
        "charset": "UTF-8"
    },
    "text/vnd.dmclientscript": {
        "source": "iana"
    },
    "text/vnd.dvb.subtitle": {
        "source": "iana",
        "extensions": [
            "sub"
        ]
    },
    "text/vnd.esmertec.theme-descriptor": {
        "source": "iana",
        "charset": "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
        "source": "iana",
        "extensions": [
            "ged"
        ]
    },
    "text/vnd.ficlab.flt": {
        "source": "iana"
    },
    "text/vnd.fly": {
        "source": "iana",
        "extensions": [
            "fly"
        ]
    },
    "text/vnd.fmi.flexstor": {
        "source": "iana",
        "extensions": [
            "flx"
        ]
    },
    "text/vnd.gml": {
        "source": "iana"
    },
    "text/vnd.graphviz": {
        "source": "iana",
        "extensions": [
            "gv"
        ]
    },
    "text/vnd.hans": {
        "source": "iana"
    },
    "text/vnd.hgl": {
        "source": "iana"
    },
    "text/vnd.in3d.3dml": {
        "source": "iana",
        "extensions": [
            "3dml"
        ]
    },
    "text/vnd.in3d.spot": {
        "source": "iana",
        "extensions": [
            "spot"
        ]
    },
    "text/vnd.iptc.newsml": {
        "source": "iana"
    },
    "text/vnd.iptc.nitf": {
        "source": "iana"
    },
    "text/vnd.latex-z": {
        "source": "iana"
    },
    "text/vnd.motorola.reflex": {
        "source": "iana"
    },
    "text/vnd.ms-mediapackage": {
        "source": "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
        "source": "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
        "source": "iana"
    },
    "text/vnd.senx.warpscript": {
        "source": "iana"
    },
    "text/vnd.si.uricatalogue": {
        "source": "iana"
    },
    "text/vnd.sosi": {
        "source": "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
        "source": "iana",
        "charset": "UTF-8",
        "extensions": [
            "jad"
        ]
    },
    "text/vnd.trolltech.linguist": {
        "source": "iana",
        "charset": "UTF-8"
    },
    "text/vnd.wap.si": {
        "source": "iana"
    },
    "text/vnd.wap.sl": {
        "source": "iana"
    },
    "text/vnd.wap.wml": {
        "source": "iana",
        "extensions": [
            "wml"
        ]
    },
    "text/vnd.wap.wmlscript": {
        "source": "iana",
        "extensions": [
            "wmls"
        ]
    },
    "text/vtt": {
        "source": "iana",
        "charset": "UTF-8",
        "compressible": true,
        "extensions": [
            "vtt"
        ]
    },
    "text/x-asm": {
        "source": "apache",
        "extensions": [
            "s",
            "asm"
        ]
    },
    "text/x-c": {
        "source": "apache",
        "extensions": [
            "c",
            "cc",
            "cxx",
            "cpp",
            "h",
            "hh",
            "dic"
        ]
    },
    "text/x-component": {
        "source": "nginx",
        "extensions": [
            "htc"
        ]
    },
    "text/x-fortran": {
        "source": "apache",
        "extensions": [
            "f",
            "for",
            "f77",
            "f90"
        ]
    },
    "text/x-gwt-rpc": {
        "compressible": true
    },
    "text/x-handlebars-template": {
        "extensions": [
            "hbs"
        ]
    },
    "text/x-java-source": {
        "source": "apache",
        "extensions": [
            "java"
        ]
    },
    "text/x-jquery-tmpl": {
        "compressible": true
    },
    "text/x-lua": {
        "extensions": [
            "lua"
        ]
    },
    "text/x-markdown": {
        "compressible": true,
        "extensions": [
            "mkd"
        ]
    },
    "text/x-nfo": {
        "source": "apache",
        "extensions": [
            "nfo"
        ]
    },
    "text/x-opml": {
        "source": "apache",
        "extensions": [
            "opml"
        ]
    },
    "text/x-org": {
        "compressible": true,
        "extensions": [
            "org"
        ]
    },
    "text/x-pascal": {
        "source": "apache",
        "extensions": [
            "p",
            "pas"
        ]
    },
    "text/x-processing": {
        "compressible": true,
        "extensions": [
            "pde"
        ]
    },
    "text/x-sass": {
        "extensions": [
            "sass"
        ]
    },
    "text/x-scss": {
        "extensions": [
            "scss"
        ]
    },
    "text/x-setext": {
        "source": "apache",
        "extensions": [
            "etx"
        ]
    },
    "text/x-sfv": {
        "source": "apache",
        "extensions": [
            "sfv"
        ]
    },
    "text/x-suse-ymp": {
        "compressible": true,
        "extensions": [
            "ymp"
        ]
    },
    "text/x-uuencode": {
        "source": "apache",
        "extensions": [
            "uu"
        ]
    },
    "text/x-vcalendar": {
        "source": "apache",
        "extensions": [
            "vcs"
        ]
    },
    "text/x-vcard": {
        "source": "apache",
        "extensions": [
            "vcf"
        ]
    },
    "text/xml": {
        "source": "iana",
        "compressible": true,
        "extensions": [
            "xml"
        ]
    },
    "text/xml-external-parsed-entity": {
        "source": "iana"
    },
    "text/yaml": {
        "compressible": true,
        "extensions": [
            "yaml",
            "yml"
        ]
    },
    "video/1d-interleaved-parityfec": {
        "source": "iana"
    },
    "video/3gpp": {
        "source": "iana",
        "extensions": [
            "3gp",
            "3gpp"
        ]
    },
    "video/3gpp-tt": {
        "source": "iana"
    },
    "video/3gpp2": {
        "source": "iana",
        "extensions": [
            "3g2"
        ]
    },
    "video/av1": {
        "source": "iana"
    },
    "video/bmpeg": {
        "source": "iana"
    },
    "video/bt656": {
        "source": "iana"
    },
    "video/celb": {
        "source": "iana"
    },
    "video/dv": {
        "source": "iana"
    },
    "video/encaprtp": {
        "source": "iana"
    },
    "video/ffv1": {
        "source": "iana"
    },
    "video/flexfec": {
        "source": "iana"
    },
    "video/h261": {
        "source": "iana",
        "extensions": [
            "h261"
        ]
    },
    "video/h263": {
        "source": "iana",
        "extensions": [
            "h263"
        ]
    },
    "video/h263-1998": {
        "source": "iana"
    },
    "video/h263-2000": {
        "source": "iana"
    },
    "video/h264": {
        "source": "iana",
        "extensions": [
            "h264"
        ]
    },
    "video/h264-rcdo": {
        "source": "iana"
    },
    "video/h264-svc": {
        "source": "iana"
    },
    "video/h265": {
        "source": "iana"
    },
    "video/iso.segment": {
        "source": "iana",
        "extensions": [
            "m4s"
        ]
    },
    "video/jpeg": {
        "source": "iana",
        "extensions": [
            "jpgv"
        ]
    },
    "video/jpeg2000": {
        "source": "iana"
    },
    "video/jpm": {
        "source": "apache",
        "extensions": [
            "jpm",
            "jpgm"
        ]
    },
    "video/jxsv": {
        "source": "iana"
    },
    "video/mj2": {
        "source": "iana",
        "extensions": [
            "mj2",
            "mjp2"
        ]
    },
    "video/mp1s": {
        "source": "iana"
    },
    "video/mp2p": {
        "source": "iana"
    },
    "video/mp2t": {
        "source": "iana",
        "extensions": [
            "ts"
        ]
    },
    "video/mp4": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "mp4",
            "mp4v",
            "mpg4"
        ]
    },
    "video/mp4v-es": {
        "source": "iana"
    },
    "video/mpeg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "mpeg",
            "mpg",
            "mpe",
            "m1v",
            "m2v"
        ]
    },
    "video/mpeg4-generic": {
        "source": "iana"
    },
    "video/mpv": {
        "source": "iana"
    },
    "video/nv": {
        "source": "iana"
    },
    "video/ogg": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "ogv"
        ]
    },
    "video/parityfec": {
        "source": "iana"
    },
    "video/pointer": {
        "source": "iana"
    },
    "video/quicktime": {
        "source": "iana",
        "compressible": false,
        "extensions": [
            "qt",
            "mov"
        ]
    },
    "video/raptorfec": {
        "source": "iana"
    },
    "video/raw": {
        "source": "iana"
    },
    "video/rtp-enc-aescm128": {
        "source": "iana"
    },
    "video/rtploopback": {
        "source": "iana"
    },
    "video/rtx": {
        "source": "iana"
    },
    "video/scip": {
        "source": "iana"
    },
    "video/smpte291": {
        "source": "iana"
    },
    "video/smpte292m": {
        "source": "iana"
    },
    "video/ulpfec": {
        "source": "iana"
    },
    "video/vc1": {
        "source": "iana"
    },
    "video/vc2": {
        "source": "iana"
    },
    "video/vnd.cctv": {
        "source": "iana"
    },
    "video/vnd.dece.hd": {
        "source": "iana",
        "extensions": [
            "uvh",
            "uvvh"
        ]
    },
    "video/vnd.dece.mobile": {
        "source": "iana",
        "extensions": [
            "uvm",
            "uvvm"
        ]
    },
    "video/vnd.dece.mp4": {
        "source": "iana"
    },
    "video/vnd.dece.pd": {
        "source": "iana",
        "extensions": [
            "uvp",
            "uvvp"
        ]
    },
    "video/vnd.dece.sd": {
        "source": "iana",
        "extensions": [
            "uvs",
            "uvvs"
        ]
    },
    "video/vnd.dece.video": {
        "source": "iana",
        "extensions": [
            "uvv",
            "uvvv"
        ]
    },
    "video/vnd.directv.mpeg": {
        "source": "iana"
    },
    "video/vnd.directv.mpeg-tts": {
        "source": "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
        "source": "iana"
    },
    "video/vnd.dvb.file": {
        "source": "iana",
        "extensions": [
            "dvb"
        ]
    },
    "video/vnd.fvt": {
        "source": "iana",
        "extensions": [
            "fvt"
        ]
    },
    "video/vnd.hns.video": {
        "source": "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
        "source": "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
        "source": "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
        "source": "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
        "source": "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
        "source": "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
        "source": "iana"
    },
    "video/vnd.motorola.video": {
        "source": "iana"
    },
    "video/vnd.motorola.videop": {
        "source": "iana"
    },
    "video/vnd.mpegurl": {
        "source": "iana",
        "extensions": [
            "mxu",
            "m4u"
        ]
    },
    "video/vnd.ms-playready.media.pyv": {
        "source": "iana",
        "extensions": [
            "pyv"
        ]
    },
    "video/vnd.nokia.interleaved-multimedia": {
        "source": "iana"
    },
    "video/vnd.nokia.mp4vr": {
        "source": "iana"
    },
    "video/vnd.nokia.videovoip": {
        "source": "iana"
    },
    "video/vnd.objectvideo": {
        "source": "iana"
    },
    "video/vnd.radgamettools.bink": {
        "source": "iana"
    },
    "video/vnd.radgamettools.smacker": {
        "source": "iana"
    },
    "video/vnd.sealed.mpeg1": {
        "source": "iana"
    },
    "video/vnd.sealed.mpeg4": {
        "source": "iana"
    },
    "video/vnd.sealed.swf": {
        "source": "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
        "source": "iana"
    },
    "video/vnd.uvvu.mp4": {
        "source": "iana",
        "extensions": [
            "uvu",
            "uvvu"
        ]
    },
    "video/vnd.vivo": {
        "source": "iana",
        "extensions": [
            "viv"
        ]
    },
    "video/vnd.youtube.yt": {
        "source": "iana"
    },
    "video/vp8": {
        "source": "iana"
    },
    "video/vp9": {
        "source": "iana"
    },
    "video/webm": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "webm"
        ]
    },
    "video/x-f4v": {
        "source": "apache",
        "extensions": [
            "f4v"
        ]
    },
    "video/x-fli": {
        "source": "apache",
        "extensions": [
            "fli"
        ]
    },
    "video/x-flv": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "flv"
        ]
    },
    "video/x-m4v": {
        "source": "apache",
        "extensions": [
            "m4v"
        ]
    },
    "video/x-matroska": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "mkv",
            "mk3d",
            "mks"
        ]
    },
    "video/x-mng": {
        "source": "apache",
        "extensions": [
            "mng"
        ]
    },
    "video/x-ms-asf": {
        "source": "apache",
        "extensions": [
            "asf",
            "asx"
        ]
    },
    "video/x-ms-vob": {
        "source": "apache",
        "extensions": [
            "vob"
        ]
    },
    "video/x-ms-wm": {
        "source": "apache",
        "extensions": [
            "wm"
        ]
    },
    "video/x-ms-wmv": {
        "source": "apache",
        "compressible": false,
        "extensions": [
            "wmv"
        ]
    },
    "video/x-ms-wmx": {
        "source": "apache",
        "extensions": [
            "wmx"
        ]
    },
    "video/x-ms-wvx": {
        "source": "apache",
        "extensions": [
            "wvx"
        ]
    },
    "video/x-msvideo": {
        "source": "apache",
        "extensions": [
            "avi"
        ]
    },
    "video/x-sgi-movie": {
        "source": "apache",
        "extensions": [
            "movie"
        ]
    },
    "video/x-smv": {
        "source": "apache",
        "extensions": [
            "smv"
        ]
    },
    "x-conference/x-cooltalk": {
        "source": "apache",
        "extensions": [
            "ice"
        ]
    },
    "x-shader/x-fragment": {
        "compressible": true
    },
    "x-shader/x-vertex": {
        "compressible": true
    }
};
const extensions = new Map();
const types = new Map();
(function populateMaps() {
    const preference = [
        "nginx",
        "apache",
        undefined,
        "iana"
    ];
    for (const type of Object.keys(__default1)){
        const mime = __default1[type];
        const exts = mime.extensions;
        if (!exts || !exts.length) {
            continue;
        }
        extensions.set(type, exts);
        for (const ext of exts){
            const current = types.get(ext);
            if (current) {
                const from = preference.indexOf(__default1[current].source);
                const to = preference.indexOf(mime.source);
                if (current !== "application/octet-stream" && (from > to || from === to && current.startsWith("application/"))) {
                    continue;
                }
            }
            types.set(ext, type);
        }
    }
})();
function typeByExtension(extension) {
    extension = extension.startsWith(".") ? extension.slice(1) : extension;
    return types.get(extension.toLowerCase());
}
function defaultOtherHandler(_req) {
    return new Response(null, {
        status: 404
    });
}
function defaultErrorHandler(_req, _ctx, err) {
    console.error(err);
    return new Response(null, {
        status: 500
    });
}
function defaultUnknownMethodHandler(_req, _ctx, knownMethods) {
    return new Response(null, {
        status: 405,
        headers: {
            Accept: knownMethods.join(", ")
        }
    });
}
const METHODS = [
    "GET",
    "HEAD",
    "POST",
    "PUT",
    "DELETE",
    "OPTIONS",
    "PATCH"
];
const methodRegex = new RegExp(`(?<=^(?:${METHODS.join("|")}))@`);
function buildInternalRoutes(routes) {
    const internalRoutesRecord = {};
    for (const [route, handler] of Object.entries(routes)){
        let [methodOrPath, path] = route.split(methodRegex);
        let method = methodOrPath;
        if (!path) {
            path = methodOrPath;
            method = "any";
        }
        const r = internalRoutesRecord[path] ?? {
            pattern: new URLPattern({
                pathname: path
            }),
            methods: {}
        };
        r.methods[method] = handler;
        internalRoutesRecord[path] = r;
    }
    return Object.values(internalRoutesRecord);
}
function router(routes, other = defaultOtherHandler, error = defaultErrorHandler, unknownMethod = defaultUnknownMethodHandler) {
    const internalRoutes = Array.isArray(routes) ? routes : buildInternalRoutes(routes);
    return async (req, ctx)=>{
        try {
            for (const { pattern , methods  } of internalRoutes){
                let res;
                let groups;
                if (pattern instanceof URLPattern) {
                    res = pattern.exec(req.url);
                    groups = res?.pathname.groups ?? {};
                } else {
                    res = pattern.exec(req.url);
                    groups = res?.groups ?? {};
                }
                for(const key in groups){
                    groups[key] = decodeURIComponent(groups[key]);
                }
                if (res !== null) {
                    for (const [method, handler] of Object.entries(methods)){
                        if (req.method === method) {
                            return await handler(req, ctx, groups);
                        }
                    }
                    if (methods["any"]) {
                        return await methods["any"](req, ctx, groups);
                    } else {
                        return await unknownMethod(req, ctx, Object.keys(methods));
                    }
                }
            }
            return await other(req, ctx);
        } catch (err) {
            return error(req, ctx, err);
        }
    };
}
const mod5 = {
    defaultOtherHandler: defaultOtherHandler,
    defaultErrorHandler: defaultErrorHandler,
    defaultUnknownMethodHandler: defaultUnknownMethodHandler,
    METHODS: METHODS,
    buildInternalRoutes: buildInternalRoutes,
    router: router
};
function isObject(object) {
    return typeof object == "object" && object !== null && object.constructor === Object;
}
function sortObject(normalized) {
    const sorted = {};
    const sortedKeys = Object.keys(normalized).sort((a, b)=>b.length - a.length);
    for (const key of sortedKeys){
        sorted[key] = normalized[key];
    }
    return sorted;
}
function isImportMap(importMap) {
    return isObject(importMap) && (importMap.imports !== undefined ? isImports(importMap.imports) : true) && (importMap.scopes !== undefined ? isScopes(importMap.scopes) : true);
}
function isImports(importsMap) {
    return isObject(importsMap);
}
function isScopes(scopes) {
    return isObject(scopes) && Object.values(scopes).every((value)=>isSpecifierMap(value));
}
function isSpecifierMap(specifierMap) {
    return isObject(specifierMap);
}
function isURL(url) {
    try {
        new URL(url);
        return true;
    } catch  {
        return false;
    }
}
function sortAndNormalizeSpecifierMap(originalMap, baseURL) {
    const normalized = {};
    for (const [specifierKey, value] of Object.entries(originalMap)){
        const normalizedSpecifierKey = normalizeSpecifierKey(specifierKey, baseURL);
        if (normalizedSpecifierKey === null) continue;
        if (typeof value !== "string") {
            console.warn(`addresses need to be strings.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        const addressURL = parseUrlLikeImportSpecifier(value, baseURL);
        if (addressURL === null) {
            console.warn(`the address was invalid.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        if (specifierKey.endsWith("/") && !serializeURL(addressURL).endsWith("/")) {
            console.warn(`an invalid address was given for the specifier key specifierKey; since specifierKey ended in a slash, the address needs to as well.`);
            normalized[normalizedSpecifierKey] = null;
            continue;
        }
        normalized[normalizedSpecifierKey] = serializeURL(addressURL);
    }
    return sortObject(normalized);
}
function serializeURL(url) {
    return url.href;
}
function sortAndNormalizeScopes(originalMap, baseURL) {
    const normalized = {};
    for (const [scopePrefix, potentialSpecifierMap] of Object.entries(originalMap)){
        if (!isSpecifierMap(potentialSpecifierMap)) {
            throw new TypeError(`the value of the scope with prefix scopePrefix needs to be an object.`);
        }
        let scopePrefixURL;
        try {
            scopePrefixURL = new URL(scopePrefix, baseURL);
        } catch  {
            console.warn(`the scope prefix URL was not parseable.`);
            continue;
        }
        const normalizedScopePrefix = serializeURL(scopePrefixURL);
        normalized[normalizedScopePrefix] = sortAndNormalizeSpecifierMap(potentialSpecifierMap, baseURL);
    }
    const sorted = {};
    for (const key of Object.keys(normalized)){
        sorted[key] = sortObject(normalized[key]);
    }
    return sortObject(sorted);
}
function normalizeSpecifierKey(specifierKey, baseURL) {
    if (!specifierKey.length) {
        console.warn("specifier key cannot be an empty string.");
        return null;
    }
    const url = parseUrlLikeImportSpecifier(specifierKey, baseURL);
    if (url !== null) {
        return serializeURL(url);
    }
    return specifierKey;
}
function parseUrlLikeImportSpecifier(specifier, baseURL) {
    if (baseURL && (specifier.startsWith("/") || specifier.startsWith("./") || specifier.startsWith("../"))) {
        try {
            const url = new URL(specifier, baseURL);
            return url;
        } catch  {
            return null;
        }
    }
    try {
        const url = new URL(specifier);
        return url;
    } catch  {
        return null;
    }
}
const specialSchemes = [
    "ftp",
    "file",
    "http",
    "https",
    "ws",
    "wss"
];
function isSpecial(asURL) {
    return specialSchemes.some((scheme)=>serializeURL(asURL).startsWith(scheme));
}
function resolveImportsMatch(normalizedSpecifier, asURL, specifierMap) {
    for (const [specifierKey, resolutionResult] of Object.entries(specifierMap)){
        if (specifierKey === normalizedSpecifier) {
            if (resolutionResult === null) {
                throw new TypeError(`resolution of specifierKey was blocked by a null entry.`);
            }
            if (!isURL(resolutionResult)) {
                throw new TypeError(`resolutionResult must be an URL.`);
            }
            return resolutionResult;
        } else if (specifierKey.endsWith("/") && normalizedSpecifier.startsWith(specifierKey) && (asURL === null || isSpecial(asURL))) {
            if (resolutionResult === null) {
                throw new TypeError(`resolution of specifierKey was blocked by a null entry.`);
            }
            if (!isURL(resolutionResult)) {
                throw new TypeError(`resolutionResult must be an URL.`);
            }
            const afterPrefix = normalizedSpecifier.slice(specifierKey.length);
            if (!resolutionResult.endsWith("/")) {
                throw new TypeError(`resolutionResult does not end with "/"`);
            }
            try {
                const url = new URL(afterPrefix, resolutionResult);
                if (!isURL(url)) {
                    throw new TypeError(`url must be an URL.`);
                }
                if (!serializeURL(url).startsWith(resolutionResult)) {
                    throw new TypeError(`resolution of normalizedSpecifier was blocked due to it backtracking above its prefix specifierKey.`);
                }
                return serializeURL(url);
            } catch  {
                throw new TypeError(`resolution of normalizedSpecifier was blocked since the afterPrefix portion could not be URL-parsed relative to the resolutionResult mapped to by the specifierKey prefix.`);
            }
        }
    }
    return null;
}
function resolveImportMap(importMap, baseURL) {
    let sortedAndNormalizedImports = {};
    if (!isImportMap(importMap)) {
        throw new TypeError(`the top-level value needs to be a JSON object.`);
    }
    const { imports , scopes  } = importMap;
    if (imports !== undefined) {
        if (!isImports(imports)) {
            throw new TypeError(`"imports" top-level key needs to be an object.`);
        }
        sortedAndNormalizedImports = sortAndNormalizeSpecifierMap(imports, baseURL);
    }
    let sortedAndNormalizedScopes = {};
    if (scopes !== undefined) {
        if (!isScopes(scopes)) {
            throw new TypeError(`"scopes" top-level key needs to be an object.`);
        }
        sortedAndNormalizedScopes = sortAndNormalizeScopes(scopes, baseURL);
    }
    if (Object.keys(importMap).find((key)=>key !== "imports" && key !== "scopes")) {
        console.warn(`an invalid top-level key was present in the import map.`);
    }
    return {
        imports: sortedAndNormalizedImports,
        scopes: sortedAndNormalizedScopes
    };
}
function resolveModuleSpecifier(specifier, { imports ={} , scopes ={}  }, baseURL) {
    const baseURLString = serializeURL(baseURL);
    const asURL = parseUrlLikeImportSpecifier(specifier, baseURL);
    const normalizedSpecifier = asURL !== null ? serializeURL(asURL) : specifier;
    for (const [scopePrefix, scopeImports] of Object.entries(scopes)){
        if (scopePrefix === baseURLString || scopePrefix.endsWith("/") && baseURLString.startsWith(scopePrefix)) {
            const scopeImportsMatch = resolveImportsMatch(normalizedSpecifier, asURL, scopeImports);
            if (scopeImportsMatch !== null) {
                return scopeImportsMatch;
            }
        }
    }
    const topLevelImportsMatch = resolveImportsMatch(normalizedSpecifier, asURL, imports);
    if (topLevelImportsMatch !== null) {
        return topLevelImportsMatch;
    }
    if (asURL !== null) {
        return serializeURL(asURL);
    }
    throw new TypeError(`specifier was a bare specifier, but was not remapped to anything by importMap.`);
}
let tempDir;
async function info(specifier, options) {
    const cmd = [
        Deno.execPath(),
        "info",
        "--json"
    ];
    if (options.importMap !== undefined) {
        cmd.push("--import-map", options.importMap);
    }
    cmd.push(specifier.href);
    if (!tempDir) {
        tempDir = Deno.makeTempDirSync();
    }
    let proc;
    try {
        proc = Deno.run({
            cmd,
            stdout: "piped",
            cwd: tempDir
        });
        const raw = await proc.output();
        const status = await proc.status();
        if (!status.success) {
            throw new Error(`Failed to call 'deno info' on '${specifier.href}'`);
        }
        const txt = new TextDecoder().decode(raw);
        return JSON.parse(txt);
    } finally{
        try {
            proc?.stdout.close();
        } catch (err) {
            if (err instanceof Deno.errors.BadResource) {} else {
                throw err;
            }
        }
        proc?.close();
    }
}
function mediaTypeToLoader(mediaType) {
    switch(mediaType){
        case "JavaScript":
        case "Mjs":
            return "js";
        case "JSX":
            return "jsx";
        case "TypeScript":
        case "Mts":
            return "ts";
        case "TSX":
            return "tsx";
        case "Json":
            return "js";
        default:
            throw new Error(`Unhandled media type ${mediaType}.`);
    }
}
function transformRawIntoContent(raw, mediaType) {
    switch(mediaType){
        case "Json":
            return jsonToESM(raw);
        default:
            return raw;
    }
}
function jsonToESM(source) {
    const sourceString = new TextDecoder().decode(source);
    let json = JSON.stringify(JSON.parse(sourceString), null, 2);
    json = json.replaceAll(`"__proto__":`, `["__proto__"]:`);
    return `export default ${json};`;
}
async function load1(infoCache, url, options) {
    switch(url.protocol){
        case "http:":
        case "https:":
        case "data:":
            return await loadFromCLI(infoCache, url, options);
        case "file:":
            {
                const res = await loadFromCLI(infoCache, url, options);
                res.watchFiles = [
                    fromFileUrl2(url.href)
                ];
                return res;
            }
    }
    return null;
}
async function loadFromCLI(infoCache, specifier, options) {
    const specifierRaw = specifier.href;
    if (!infoCache.has(specifierRaw)) {
        const { modules , redirects  } = await info(specifier, {
            importMap: options.importMapURL?.href
        });
        for (const module of modules){
            infoCache.set(module.specifier, module);
        }
        for (const [specifier, redirect] of Object.entries(redirects)){
            const redirected = infoCache.get(redirect);
            if (!redirected) {
                throw new TypeError("Unreachable.");
            }
            infoCache.set(specifier, redirected);
        }
    }
    const module = infoCache.get(specifierRaw);
    if (!module) {
        throw new TypeError("Unreachable.");
    }
    if (module.error) throw new Error(module.error);
    if (!module.local) throw new Error("Module not downloaded yet.");
    const mediaType = module.mediaType ?? "Unknown";
    const loader = mediaTypeToLoader(mediaType);
    const raw = await Deno.readFile(module.local);
    const contents = transformRawIntoContent(raw, mediaType);
    return {
        contents,
        loader
    };
}
async function load2(url, _options) {
    switch(url.protocol){
        case "http:":
        case "https:":
        case "data:":
            return await loadWithFetch(url);
        case "file:":
            {
                const res = await loadWithReadFile(url);
                res.watchFiles = [
                    fromFileUrl2(url.href)
                ];
                return res;
            }
    }
    return null;
}
async function loadWithFetch(specifier) {
    const specifierRaw = specifier.href;
    const resp = await fetch(specifierRaw);
    if (!resp.ok) {
        throw new Error(`Encountered status code ${resp.status} while fetching ${specifierRaw}.`);
    }
    const contentType = resp.headers.get("content-type");
    const mediaType = mapContentType(new URL(resp.url || specifierRaw), contentType);
    const loader = mediaTypeToLoader(mediaType);
    const raw = new Uint8Array(await resp.arrayBuffer());
    const contents = transformRawIntoContent(raw, mediaType);
    return {
        contents,
        loader
    };
}
async function loadWithReadFile(specifier) {
    const path = fromFileUrl2(specifier);
    const mediaType = mapContentType(specifier, null);
    const loader = mediaTypeToLoader(mediaType);
    const raw = await Deno.readFile(path);
    const contents = transformRawIntoContent(raw, mediaType);
    return {
        contents,
        loader
    };
}
function mapContentType(specifier, contentType) {
    if (contentType !== null) {
        const contentTypes = contentType.split(";");
        const mediaType = contentTypes[0].toLowerCase();
        switch(mediaType){
            case "application/typescript":
            case "text/typescript":
            case "video/vnd.dlna.mpeg-tts":
            case "video/mp2t":
            case "application/x-typescript":
                return mapJsLikeExtension(specifier, "TypeScript");
            case "application/javascript":
            case "text/javascript":
            case "application/ecmascript":
            case "text/ecmascript":
            case "application/x-javascript":
            case "application/node":
                return mapJsLikeExtension(specifier, "JavaScript");
            case "text/jsx":
                return "JSX";
            case "text/tsx":
                return "TSX";
            case "application/json":
            case "text/json":
                return "Json";
            case "application/wasm":
                return "Wasm";
            case "text/plain":
            case "application/octet-stream":
                return mediaTypeFromSpecifier(specifier);
            default:
                return "Unknown";
        }
    } else {
        return mediaTypeFromSpecifier(specifier);
    }
}
function mapJsLikeExtension(specifier, defaultType) {
    const path = specifier.pathname;
    switch(extname2(path)){
        case ".jsx":
            return "JSX";
        case ".mjs":
            return "Mjs";
        case ".cjs":
            return "Cjs";
        case ".tsx":
            return "TSX";
        case ".ts":
            if (path.endsWith(".d.ts")) {
                return "Dts";
            } else {
                return defaultType;
            }
        case ".mts":
            {
                if (path.endsWith(".d.mts")) {
                    return "Dmts";
                } else {
                    return defaultType == "JavaScript" ? "Mjs" : "Mts";
                }
            }
        case ".cts":
            {
                if (path.endsWith(".d.cts")) {
                    return "Dcts";
                } else {
                    return defaultType == "JavaScript" ? "Cjs" : "Cts";
                }
            }
        default:
            return defaultType;
    }
}
function mediaTypeFromSpecifier(specifier) {
    const path = specifier.pathname;
    switch(extname2(path)){
        case "":
            if (path.endsWith("/.tsbuildinfo")) {
                return "TsBuildInfo";
            } else {
                return "Unknown";
            }
        case ".ts":
            if (path.endsWith(".d.ts")) {
                return "Dts";
            } else {
                return "TypeScript";
            }
        case ".mts":
            if (path.endsWith(".d.mts")) {
                return "Dmts";
            } else {
                return "Mts";
            }
        case ".cts":
            if (path.endsWith(".d.cts")) {
                return "Dcts";
            } else {
                return "Cts";
            }
        case ".tsx":
            return "TSX";
        case ".js":
            return "JavaScript";
        case ".jsx":
            return "JSX";
        case ".mjs":
            return "Mjs";
        case ".cjs":
            return "Cjs";
        case ".json":
            return "Json";
        case ".wasm":
            return "Wasm";
        case ".tsbuildinfo":
            return "TsBuildInfo";
        case ".map":
            return "SourceMap";
        default:
            return "Unknown";
    }
}
const DEFAULT_LOADER = typeof Deno.run === "function" ? "native" : "portable";
function denoPlugin(options = {}) {
    const loader = options.loader ?? DEFAULT_LOADER;
    return {
        name: "deno",
        setup (build) {
            const infoCache = new Map();
            let importMap = null;
            build.onStart(async function onStart() {
                if (options.importMapURL !== undefined) {
                    const resp = await fetch(options.importMapURL.href);
                    const txt = await resp.text();
                    importMap = resolveImportMap(JSON.parse(txt), options.importMapURL);
                } else {
                    importMap = null;
                }
            });
            build.onResolve({
                filter: /.*/
            }, function onResolve(args) {
                const resolveDir = args.resolveDir ? `${toFileUrl2(args.resolveDir).href}/` : "";
                const referrer = args.importer || resolveDir;
                let resolved;
                if (importMap !== null) {
                    const res = resolveModuleSpecifier(args.path, importMap, new URL(referrer) || undefined);
                    resolved = new URL(res);
                } else {
                    resolved = new URL(args.path, referrer);
                }
                return {
                    path: resolved.href,
                    namespace: "deno"
                };
            });
            build.onLoad({
                filter: /.*/
            }, function onLoad(args) {
                const url = new URL(args.path);
                switch(loader){
                    case "native":
                        return load1(infoCache, url, options);
                    case "portable":
                        return load2(url, options);
                }
            });
        }
    };
}
const esbuild = Deno.run === undefined ? mod1 : mod2;
const INTERNAL_PREFIX = "/_frsh";
const ASSET_CACHE_BUST_KEY = "__frsh_c";
function asset(path) {
    if (!path.startsWith("/") || path.startsWith("//")) return path;
    try {
        const url = new URL(path, "https://freshassetcache.local");
        if (url.protocol !== "https:" || url.host !== "freshassetcache.local" || url.searchParams.has(ASSET_CACHE_BUST_KEY)) {
            return path;
        }
        url.searchParams.set(ASSET_CACHE_BUST_KEY, __FRSH_BUILD_ID);
        return url.pathname + url.search + url.hash;
    } catch (err) {
        console.warn(`Failed to create asset() URL, falling back to regular path ('${path}'):`, err);
        return path;
    }
}
function assetSrcSet(srcset) {
    if (srcset.includes("(")) return srcset;
    const parts = srcset.split(",");
    const constructed = [];
    for (const part of parts){
        const trimmed = part.trimStart();
        const leadingWhitespace = part.length - trimmed.length;
        if (trimmed === "") return srcset;
        let urlEnd = trimmed.indexOf(" ");
        if (urlEnd === -1) urlEnd = trimmed.length;
        const leading = part.substring(0, leadingWhitespace);
        const url = trimmed.substring(0, urlEnd);
        const trailing = trimmed.substring(urlEnd);
        constructed.push(leading + asset(url) + trailing);
    }
    return constructed.join(",");
}
function assetHashingHook(vnode) {
    if (vnode.type === "img" || vnode.type === "source") {
        const { props  } = vnode;
        if (props["data-fresh-disable-lock"]) return;
        if (typeof props.src === "string") {
            props.src = asset(props.src);
        }
        if (typeof props.srcset === "string") {
            props.srcset = assetSrcSet(props.srcset);
        }
    }
}
const REFRESH_JS_URL = `${INTERNAL_PREFIX}/refresh.js`;
const ALIVE_URL = `${INTERNAL_PREFIX}/alive`;
const BUILD_ID = Deno.env.get("DENO_DEPLOYMENT_ID") || crypto.randomUUID();
const JS_PREFIX = `/js`;
const DEBUG = !Deno.env.get("DENO_DEPLOYMENT_ID");
function bundleAssetUrl(path) {
    return `${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}${path}`;
}
globalThis.__FRSH_BUILD_ID = BUILD_ID;
const importMeta5 = {
    url: "https://deno.land/x/fresh@1.1.4/src/server/bundle.ts",
    main: false
};
let esbuildInitialized = false;
async function ensureEsbuildInitialized() {
    if (esbuildInitialized === false) {
        if (Deno.run === undefined) {
            const wasmURL = new URL("./esbuild_v0.14.51.wasm", importMeta5.url).href;
            esbuildInitialized = fetch(wasmURL).then(async (r)=>{
                const resp = new Response(r.body, {
                    headers: {
                        "Content-Type": "application/wasm"
                    }
                });
                const wasmModule = await WebAssembly.compileStreaming(resp);
                await esbuild.initialize({
                    wasmModule,
                    worker: false
                });
            });
        } else {
            esbuild.initialize({});
        }
        await esbuildInitialized;
        esbuildInitialized = true;
    } else if (esbuildInitialized instanceof Promise) {
        await esbuildInitialized;
    }
}
const JSX_RUNTIME_MODE = {
    "react": "transform",
    "react-jsx": "automatic"
};
class Bundler {
    #importMapURL;
    #jsxConfig;
    #islands;
    #plugins;
    #cache = undefined;
    #dev;
    constructor(islands, plugins, importMapURL, jsxConfig, dev){
        this.#islands = islands;
        this.#plugins = plugins;
        this.#importMapURL = importMapURL;
        this.#jsxConfig = jsxConfig;
        this.#dev = dev;
    }
    async bundle() {
        const entryPoints = {
            main: this.#dev ? new URL("../../src/runtime/main_dev.ts", importMeta5.url).href : new URL("../../src/runtime/main.ts", importMeta5.url).href
        };
        for (const island of this.#islands){
            entryPoints[`island-${island.id}`] = island.url;
        }
        for (const plugin of this.#plugins){
            for (const [name, url] of Object.entries(plugin.entrypoints ?? {})){
                entryPoints[`plugin-${plugin.name}-${name}`] = url;
            }
        }
        const absWorkingDir = Deno.cwd();
        await ensureEsbuildInitialized();
        const minifyOptions = this.#dev ? {
            minifyIdentifiers: false,
            minifySyntax: true,
            minifyWhitespace: true
        } : {
            minify: true
        };
        const bundle = await esbuild.build({
            bundle: true,
            define: {
                __FRSH_BUILD_ID: `"${BUILD_ID}"`
            },
            entryPoints,
            format: "esm",
            metafile: true,
            ...minifyOptions,
            outdir: ".",
            absWorkingDir,
            outfile: "",
            platform: "neutral",
            plugins: [
                denoPlugin({
                    importMapURL: this.#importMapURL
                })
            ],
            sourcemap: this.#dev ? "linked" : false,
            splitting: true,
            target: [
                "chrome99",
                "firefox99",
                "safari15"
            ],
            treeShaking: true,
            write: false,
            jsx: JSX_RUNTIME_MODE[this.#jsxConfig.jsx],
            jsxImportSource: this.#jsxConfig.jsxImportSource
        });
        const cache = new Map();
        const absDirUrlLength = toFileUrl2(absWorkingDir).href.length;
        for (const file of bundle.outputFiles){
            cache.set(toFileUrl2(file.path).href.substring(absDirUrlLength), file.contents);
        }
        this.#cache = cache;
        return;
    }
    async cache() {
        if (this.#cache === undefined) {
            this.#cache = this.bundle();
        }
        if (this.#cache instanceof Promise) {
            await this.#cache;
        }
        return this.#cache;
    }
    async get(path) {
        const cache = await this.cache();
        return cache.get(path) ?? null;
    }
}
function DefaultErrorPage(props) {
    const { error  } = props;
    let message = undefined;
    if (DEBUG) {
        if (error instanceof Error) {
            message = error.stack;
        } else {
            message = String(error);
        }
    }
    return ee("div", {
        style: {
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        }
    }, ee("div", {
        style: {
            border: "#f3f4f6 2px solid",
            borderTop: "red 4px solid",
            background: "#f9fafb",
            margin: 16,
            minWidth: "300px",
            width: "50%"
        }
    }, ee("p", {
        style: {
            margin: 0,
            fontSize: "12pt",
            padding: 16,
            fontFamily: "sans-serif"
        }
    }, "An error occurred during route handling or page rendering."), message && ee("pre", {
        style: {
            margin: 0,
            fontSize: "12pt",
            overflowY: "auto",
            padding: 16,
            paddingTop: 0,
            fontFamily: "monospace"
        }
    }, message)));
}
var _e1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i, ie = /^(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)$/, P1 = /[\s\n\\/='"\0<>]/, se = /^xlink:?./, pe = /["&<]/;
function L1(e) {
    if (pe.test(e += "") === !1) return e;
    for(var t = 0, n = 0, l = "", d = ""; n < e.length; n++){
        switch(e.charCodeAt(n)){
            case 34:
                d = "&quot;";
                break;
            case 38:
                d = "&amp;";
                break;
            case 60:
                d = "&lt;";
                break;
            default:
                continue;
        }
        n !== t && (l += e.slice(t, n)), l += d, t = n + 1;
    }
    return n !== t && (l += e.slice(t, n)), l;
}
var I1 = function(e, t) {
    return String(e).replace(/(\n+)/g, "$1" + (t || "	"));
}, ee1 = function(e, t, n) {
    return String(e).length > (t || 40) || !n && String(e).indexOf(`
`) !== -1 || String(e).indexOf("<") !== -1;
}, te = {}, de1 = /([A-Z])/g;
function le(e) {
    var t = "";
    for(var n in e){
        var l = e[n];
        l != null && l !== "" && (t && (t += " "), t += n[0] == "-" ? n : te[n] || (te[n] = n.replace(de1, "-$1").toLowerCase()), t = typeof l == "number" && _e1.test(n) === !1 ? t + ": " + l + "px;" : t + ": " + l + ";");
    }
    return t || void 0;
}
function Y(e, t) {
    return Array.isArray(t) ? t.reduce(Y, e) : t != null && t !== !1 && e.push(t), e;
}
function ne1() {
    this.__d = !0;
}
function fe(e, t) {
    return {
        __v: e,
        context: t,
        props: e.props,
        setState: ne1,
        forceUpdate: ne1,
        __d: !0,
        __h: []
    };
}
function W1(e, t) {
    var n = e.contextType, l = n && t[n.__c];
    return n != null ? l ? l.props.value : n.__ : t;
}
var K1 = [];
function $1(e, t, n, l, d1, m) {
    if (e == null || typeof e == "boolean") return "";
    if (typeof e != "object") return L1(e);
    var h = n.pretty, _ = h && typeof h == "string" ? h : "	";
    if (Array.isArray(e)) {
        for(var y = "", C = 0; C < e.length; C++)h && C > 0 && (y += `
`), y += $1(e[C], t, n, l, d1, m);
        return y;
    }
    var k, f = e.type, u = e.props, S = !1;
    if (typeof f == "function") {
        if (S = !0, !n.shallow || !l && n.renderRootComponent !== !1) {
            if (f === L) {
                var g = [];
                return Y(g, e.props.children), $1(g, t, n, n.shallowHighOrder !== !1, d1, m);
            }
            var p, r = e.__c = fe(e, t);
            d.__b && d.__b(e);
            var D = d.__r;
            if (f.prototype && typeof f.prototype.render == "function") {
                var O = W1(f, t);
                (r = e.__c = new f(u, O)).__v = e, r._dirty = r.__d = !0, r.props = u, r.state == null && (r.state = {}), r._nextState == null && r.__s == null && (r._nextState = r.__s = r.state), r.context = O, f.getDerivedStateFromProps ? r.state = Object.assign({}, r.state, f.getDerivedStateFromProps(r.props, r.state)) : r.componentWillMount && (r.componentWillMount(), r.state = r._nextState !== r.state ? r._nextState : r.__s !== r.state ? r.__s : r.state), D && D(e), p = r.render(r.props, r.state, r.context);
            } else for(var F = W1(f, t), T = 0; r.__d && T++ < 25;)r.__d = !1, D && D(e), p = f.call(e.__c, u, F);
            return r.getChildContext && (t = Object.assign({}, t, r.getChildContext())), d.diffed && d.diffed(e), $1(p, t, n, n.shallowHighOrder !== !1, d1, m);
        }
        f = (k = f).displayName || k !== Function && k.name || function(X) {
            var B = (Function.prototype.toString.call(X).match(/^\s*function\s+([^( ]+)/) || "")[1];
            if (!B) {
                for(var z = -1, J = K1.length; J--;)if (K1[J] === X) {
                    z = J;
                    break;
                }
                z < 0 && (z = K1.push(X) - 1), B = "UnnamedComponent" + z;
            }
            return B;
        }(k);
    }
    var j, b, s = "<" + f;
    if (u) {
        var v = Object.keys(u);
        n && n.sortAttributes === !0 && v.sort();
        for(var A = 0; A < v.length; A++){
            var o = v[A], i = u[o];
            if (o !== "children") {
                if (!P1.test(o) && (n && n.allAttributes || o !== "key" && o !== "ref" && o !== "__self" && o !== "__source")) {
                    if (o === "defaultValue") o = "value";
                    else if (o === "defaultChecked") o = "checked";
                    else if (o === "defaultSelected") o = "selected";
                    else if (o === "className") {
                        if (u.class !== void 0) continue;
                        o = "class";
                    } else d1 && se.test(o) && (o = o.toLowerCase().replace(/^xlink:?/, "xlink:"));
                    if (o === "htmlFor") {
                        if (u.for) continue;
                        o = "for";
                    }
                    o === "style" && i && typeof i == "object" && (i = le(i)), o[0] === "a" && o[1] === "r" && typeof i == "boolean" && (i = String(i));
                    var a = n.attributeHook && n.attributeHook(o, i, t, n, S);
                    if (a || a === "") s += a;
                    else if (o === "dangerouslySetInnerHTML") b = i && i.__html;
                    else if (f === "textarea" && o === "value") j = i;
                    else if ((i || i === 0 || i === "") && typeof i != "function") {
                        if (!(i !== !0 && i !== "" || (i = o, n && n.xml))) {
                            s = s + " " + o;
                            continue;
                        }
                        if (o === "value") {
                            if (f === "select") {
                                m = i;
                                continue;
                            }
                            f === "option" && m == i && u.selected === void 0 && (s += " selected");
                        }
                        s = s + " " + o + '="' + L1(i) + '"';
                    }
                }
            } else j = i;
        }
    }
    if (h) {
        var x = s.replace(/\n\s*/, " ");
        x === s || ~x.indexOf(`
`) ? h && ~s.indexOf(`
`) && (s += `
`) : s = x;
    }
    if (s += ">", P1.test(f)) throw new Error(f + " is not a valid HTML tag name in " + s);
    var N, ue = ie.test(f) || n.voidElements && n.voidElements.test(f), w = [];
    if (b) h && ee1(b) && (b = `
` + _ + I1(b, _)), s += b;
    else if (j != null && Y(N = [], j).length) {
        for(var Z = h && ~s.indexOf(`
`), R = !1, U = 0; U < N.length; U++){
            var V = N[U];
            if (V != null && V !== !1) {
                var M = $1(V, t, n, !0, f === "svg" || f !== "foreignObject" && d1, m);
                if (h && !Z && ee1(M) && (Z = !0), M) if (h) {
                    var H = M.length > 0 && M[0] != "<";
                    R && H ? w[w.length - 1] += M : w.push(M), R = H;
                } else w.push(M);
            }
        }
        if (h && Z) for(var G = w.length; G--;)w[G] = `
` + _ + I1(w[G], _);
    }
    if (w.length || b) s += w.join("");
    else if (n && n.xml) return s.substring(0, s.length - 1) + " />";
    return !ue || N || b ? (h && ~s.indexOf(`
`) && (s += `
`), s = s + "</" + f + ">") : s = s.replace(/>$/, " />"), s;
}
var ve = {
    shallow: !0
};
q1.render = q1;
var he = function(e, t) {
    return q1(e, t, ve);
}, re = [];
function q1(e, t, n) {
    t = t || {};
    var l = d.__s;
    d.__s = !0;
    var d1, m = ee(L, null);
    return m.__k = [
        e
    ], d1 = n && (n.pretty || n.voidElements || n.sortAttributes || n.shallow || n.allAttributes || n.xml || n.attributeHook) ? $1(e, t, n) : E(e, t, !1, void 0, m), d.__c && d.__c(e, re), d.__s = l, re.length = 0, d1;
}
function ge(e, t) {
    return e === "className" ? "class" : e === "htmlFor" ? "for" : e === "defaultValue" ? "value" : e === "defaultChecked" ? "checked" : e === "defaultSelected" ? "selected" : t && se.test(e) ? e.toLowerCase().replace(/^xlink:?/, "xlink:") : e;
}
function me(e, t) {
    return e === "style" && t != null && typeof t == "object" ? le(t) : e[0] === "a" && e[1] === "r" && typeof t == "boolean" ? String(t) : t;
}
var oe1 = Array.isArray, ae = Object.assign;
function E(e, t, n, l, d1) {
    if (e == null || e === !0 || e === !1 || e === "") return "";
    if (typeof e != "object") return L1(e);
    if (oe1(e)) {
        var m = "";
        d1.__k = e;
        for(var h = 0; h < e.length; h++)m += E(e[h], t, n, l, d1);
        return m;
    }
    e.__ = d1, d.__b && d.__b(e);
    var _ = e.type, y = e.props;
    if (typeof _ == "function") {
        var C;
        if (_ === L) C = y.children;
        else {
            C = _.prototype && typeof _.prototype.render == "function" ? function(v, A) {
                var o = v.type, i = W1(o, A), a = new o(v.props, i);
                v.__c = a, a.__v = v, a.__d = !0, a.props = v.props, a.state == null && (a.state = {}), a.__s == null && (a.__s = a.state), a.context = i, o.getDerivedStateFromProps ? a.state = ae({}, a.state, o.getDerivedStateFromProps(a.props, a.state)) : a.componentWillMount && (a.componentWillMount(), a.state = a.__s !== a.state ? a.__s : a.state);
                var x = d.__r;
                return x && x(v), a.render(a.props, a.state, a.context);
            }(e, t) : function(v, A) {
                var o, i = fe(v, A), a = W1(v.type, A);
                v.__c = i;
                for(var x = d.__r, N = 0; i.__d && N++ < 25;)i.__d = !1, x && x(v), o = v.type.call(i, v.props, a);
                return o;
            }(e, t);
            var k = e.__c;
            k.getChildContext && (t = ae({}, t, k.getChildContext()));
        }
        var f = E(C, t, n, l, e);
        return d.diffed && d.diffed(e), e.__ = void 0, d.unmount && d.unmount(e), f;
    }
    var u, S, g = "<";
    if (g += _, y) for(var p in u = y.children, y){
        var r = y[p];
        if (!(p === "key" || p === "ref" || p === "__self" || p === "__source" || p === "children" || p === "className" && "class" in y || p === "htmlFor" && "for" in y || P1.test(p))) {
            if (r = me(p = ge(p, n), r), p === "dangerouslySetInnerHTML") S = r && r.__html;
            else if (_ === "textarea" && p === "value") u = r;
            else if ((r || r === 0 || r === "") && typeof r != "function") {
                if (r === !0 || r === "") {
                    r = p, g = g + " " + p;
                    continue;
                }
                if (p === "value") {
                    if (_ === "select") {
                        l = r;
                        continue;
                    }
                    _ !== "option" || l != r || "selected" in y || (g += " selected");
                }
                g = g + " " + p + '="' + L1(r) + '"';
            }
        }
    }
    var D = g;
    if (g += ">", P1.test(_)) throw new Error(_ + " is not a valid HTML tag name in " + g);
    var O = "", F = !1;
    if (S) O += S, F = !0;
    else if (typeof u == "string") O += L1(u), F = !0;
    else if (oe1(u)) {
        e.__k = u;
        for(var T = 0; T < u.length; T++){
            var j = u[T];
            if (j != null && j !== !1) {
                var b = E(j, t, _ === "svg" || _ !== "foreignObject" && n, l, e);
                b && (O += b, F = !0);
            }
        }
    } else if (u != null && u !== !1 && u !== !0) {
        e.__k = [
            u
        ];
        var s = E(u, t, _ === "svg" || _ !== "foreignObject" && n, l, e);
        s && (O += s, F = !0);
    }
    if (d.diffed && d.diffed(e), e.__ = void 0, d.unmount && d.unmount(e), F) g += O;
    else if (ie.test(_)) return D + " />";
    return g + "</" + _ + ">";
}
q1.shallowRender = he;
var i, n, d1, N1, f = 0, q2 = [], l = [], V1 = d.__b, g = d.__r, b = d.diffed, C1 = d.__c, A = d.unmount;
function a(_, t) {
    d.__h && d.__h(n, _, f || t), f = 0;
    var u = n.__H || (n.__H = {
        __: [],
        __h: []
    });
    return _ >= u.__.length && u.__.push({
        __V: l
    }), u.__[_];
}
function P2(_) {
    return f = 1, B1(D1, _);
}
function B1(_, t, u) {
    var o = a(i++, 2);
    if (o.t = _, !o.__c && (o.__ = [
        u ? u(t) : D1(void 0, t),
        function(v) {
            var s = o.__N ? o.__N[0] : o.__[0], h = o.t(s, v);
            s !== h && (o.__N = [
                h,
                o.__[1]
            ], o.__c.setState({}));
        }
    ], o.__c = n, !n.u)) {
        n.u = !0;
        var r = n.shouldComponentUpdate;
        n.shouldComponentUpdate = function(v, s, h) {
            if (!o.__c.__H) return !0;
            var y = o.__c.__H.__.filter(function(c) {
                return c.__c;
            });
            if (y.every(function(c) {
                return !c.__N;
            })) return !r || r.call(this, v, s, h);
            var E = !1;
            return y.forEach(function(c) {
                if (c.__N) {
                    var k = c.__[0];
                    c.__ = c.__N, c.__N = void 0, k !== c.__[0] && (E = !0);
                }
            }), !!E && (!r || r.call(this, v, s, h));
        };
    }
    return o.__N || o.__;
}
function j1(_, t) {
    var u = a(i++, 3);
    !d.__s && H(u.__H, t) && (u.__ = _, u.i = t, n.__H.__h.push(u));
}
function M1(_) {
    var t = n.context[_.__c], u = a(i++, 9);
    return u.c = _, t ? (u.__ == null && (u.__ = !0, t.sub(n)), t.props.value) : _.__;
}
function R1() {
    for(var _; _ = q2.shift();)if (_.__P && _.__H) try {
        _.__H.__h.forEach(m), _.__H.__h.forEach(p), _.__H.__h = [];
    } catch (t) {
        _.__H.__h = [], d.__e(t, _.__v);
    }
}
d.__b = function(_) {
    typeof _.type != "function" || _.o || _.type === L ? _.o || (_.o = _.__ && _.__.o ? _.__.o : "") : _.o = (_.__ && _.__.o ? _.__.o : "") + (_.__ && _.__.__k ? _.__.__k.indexOf(_) : 0), n = null, V1 && V1(_);
}, d.__r = function(_) {
    g && g(_), i = 0;
    var t = (n = _.__c).__H;
    t && (d1 === n ? (t.__h = [], n.__h = [], t.__.forEach(function(u) {
        u.__N && (u.__ = u.__N), u.__V = l, u.__N = u.i = void 0;
    })) : (t.__h.forEach(m), t.__h.forEach(p), t.__h = [])), d1 = n;
}, d.diffed = function(_) {
    b && b(_);
    var t = _.__c;
    t && t.__H && (t.__H.__h.length && (q2.push(t) !== 1 && N1 === d.requestAnimationFrame || ((N1 = d.requestAnimationFrame) || S1)(R1)), t.__H.__.forEach(function(u) {
        u.i && (u.__H = u.i), u.__V !== l && (u.__ = u.__V), u.i = void 0, u.__V = l;
    })), d1 = n = null;
}, d.__c = function(_, t) {
    t.some(function(u) {
        try {
            u.__h.forEach(m), u.__h = u.__h.filter(function(o) {
                return !o.__ || p(o);
            });
        } catch (o) {
            t.some(function(r) {
                r.__h && (r.__h = []);
            }), t = [], d.__e(o, u.__v);
        }
    }), C1 && C1(_, t);
}, d.unmount = function(_) {
    A && A(_);
    var t, u = _.__c;
    u && u.__H && (u.__H.__.forEach(function(o) {
        try {
            m(o);
        } catch (r) {
            t = r;
        }
    }), u.__H = void 0, t && d.__e(t, u.__v));
};
var F1 = typeof requestAnimationFrame == "function";
function S1(_) {
    var t, u = function() {
        clearTimeout(o), F1 && cancelAnimationFrame(t), setTimeout(_);
    }, o = setTimeout(u, 100);
    F1 && (t = requestAnimationFrame(u));
}
function m(_) {
    var t = n, u = _.__c;
    typeof u == "function" && (_.__c = void 0, u()), n = t;
}
function p(_) {
    var t = n;
    _.__c = _.__(), n = t;
}
function H(_, t) {
    return !_ || _.length !== t.length || t.some(function(u, o) {
        return u !== _[o];
    });
}
function D1(_, t) {
    return typeof t == "function" ? t(_) : t;
}
const HEAD_CONTEXT = ce([]);
function Head(props) {
    let context;
    try {
        context = M1(HEAD_CONTEXT);
    } catch (err) {
        throw new Error("<Head> component is not supported in the browser, or during suspense renders.", {
            cause: err
        });
    }
    context.push(props.children);
    return null;
}
const SELF = "'self'";
const UNSAFE_INLINE = "'unsafe-inline'";
const NONE = "'none'";
function nonce(val) {
    return `'nonce-${val}'`;
}
const CSP_CONTEXT = ce(undefined);
const ESCAPE_LOOKUP = {
    ">": "\\u003e",
    "<": "\\u003c",
    "\u2028": "\\u2028",
    "\u2029": "\\u2029"
};
const ESCAPE_REGEX = /[><\u2028\u2029]/g;
function htmlEscapeJsonString(str) {
    return str.replace(ESCAPE_REGEX, (match)=>ESCAPE_LOOKUP[match]);
}
class RenderContext {
    #id;
    #state = new Map();
    #styles = [];
    #url;
    #route;
    #lang;
    constructor(id, url, route, lang){
        this.#id = id;
        this.#url = url;
        this.#route = route;
        this.#lang = lang;
    }
    get id() {
        return this.#id;
    }
    get state() {
        return this.#state;
    }
    get styles() {
        return this.#styles;
    }
    get url() {
        return this.#url;
    }
    get route() {
        return this.#route;
    }
    get lang() {
        return this.#lang;
    }
    set lang(lang) {
        this.#lang = lang;
    }
}
function defaultCsp() {
    return {
        directives: {
            defaultSrc: [
                NONE
            ],
            styleSrc: [
                UNSAFE_INLINE
            ]
        },
        reportOnly: false
    };
}
async function render(opts) {
    const props = {
        params: opts.params,
        url: opts.url,
        route: opts.route.pattern,
        data: opts.data
    };
    if (opts.error) {
        props.error = opts.error;
    }
    const csp = opts.route.csp ? defaultCsp() : undefined;
    const headComponents = [];
    const vnode = ee(CSP_CONTEXT.Provider, {
        value: csp,
        children: ee(HEAD_CONTEXT.Provider, {
            value: headComponents,
            children: ee(opts.app.default, {
                Component () {
                    return ee(opts.route.component, props);
                }
            })
        })
    });
    const ctx = new RenderContext(crypto.randomUUID(), opts.url, opts.route.pattern, opts.lang ?? "en");
    if (csp) {
        const newCsp = defaultCsp();
        csp.directives = newCsp.directives;
        csp.reportOnly = newCsp.reportOnly;
    }
    headComponents.splice(0, headComponents.length);
    ISLANDS.splice(0, ISLANDS.length, ...opts.islands);
    ENCOUNTERED_ISLANDS.clear();
    ISLAND_PROPS = [];
    let bodyHtml = null;
    function realRender() {
        bodyHtml = q1(vnode);
        return bodyHtml;
    }
    const plugins = opts.plugins.filter((p)=>p.render !== null);
    const renderResults = [];
    function render() {
        const plugin = plugins.shift();
        if (plugin) {
            const res = plugin.render({
                render
            });
            if (res === undefined) {
                throw new Error(`${plugin?.name}'s render hook did not return a PluginRenderResult object.`);
            }
            renderResults.push([
                plugin,
                res
            ]);
        } else {
            realRender();
        }
        if (bodyHtml === null) {
            throw new Error(`The 'render' function was not called by ${plugin?.name}'s render hook.`);
        }
        return {
            htmlText: bodyHtml,
            requiresHydration: ENCOUNTERED_ISLANDS.size > 0
        };
    }
    await opts.renderFn(ctx, ()=>render().htmlText);
    if (bodyHtml === null) {
        throw new Error("The `render` function was not called by the renderer.");
    }
    bodyHtml = bodyHtml;
    const imports = opts.imports.map((url)=>{
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce)
            ];
        }
        return [
            url,
            randomNonce
        ];
    });
    const state = [
        ISLAND_PROPS,
        []
    ];
    const styleTags = [];
    let script = `const STATE_COMPONENT = document.getElementById("__FRSH_STATE");const STATE = JSON.parse(STATE_COMPONENT?.textContent ?? "[[],[]]");`;
    for (const [plugin, res] of renderResults){
        for (const hydrate of res.scripts ?? []){
            const i = state[1].push(hydrate.state) - 1;
            const randomNonce = crypto.randomUUID().replace(/-/g, "");
            if (csp) {
                csp.directives.scriptSrc = [
                    ...csp.directives.scriptSrc ?? [],
                    nonce(randomNonce)
                ];
            }
            const url = bundleAssetUrl(`/plugin-${plugin.name}-${hydrate.entrypoint}.js`);
            imports.push([
                url,
                randomNonce
            ]);
            script += `import p${i} from "${url}";p${i}(STATE[1][${i}]);`;
        }
        styleTags.splice(styleTags.length, 0, ...res.styles ?? []);
    }
    if (ENCOUNTERED_ISLANDS.size > 0) {
        {
            const randomNonce = crypto.randomUUID().replace(/-/g, "");
            if (csp) {
                csp.directives.scriptSrc = [
                    ...csp.directives.scriptSrc ?? [],
                    nonce(randomNonce)
                ];
            }
            const url = bundleAssetUrl("/main.js");
            imports.push([
                url,
                randomNonce
            ]);
        }
        script += `import { revive } from "${bundleAssetUrl("/main.js")}";`;
        let islandRegistry = "";
        for (const island of ENCOUNTERED_ISLANDS){
            const randomNonce = crypto.randomUUID().replace(/-/g, "");
            if (csp) {
                csp.directives.scriptSrc = [
                    ...csp.directives.scriptSrc ?? [],
                    nonce(randomNonce)
                ];
            }
            const url = bundleAssetUrl(`/island-${island.id}.js`);
            imports.push([
                url,
                randomNonce
            ]);
            script += `import ${island.name} from "${url}";`;
            islandRegistry += `${island.id}:${island.name},`;
        }
        script += `revive({${islandRegistry}}, STATE[0]);`;
    }
    if (state[0].length > 0 || state[1].length > 0) {
        bodyHtml += `<script id="__FRSH_STATE" type="application/json">${htmlEscapeJsonString(JSON.stringify(state))}</script>`;
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce)
            ];
        }
        bodyHtml += `<script type="module" nonce="${randomNonce}">${script}</script>`;
    }
    if (ctx.styles.length > 0) {
        const node = ee("style", {
            id: "__FRSH_STYLE",
            dangerouslySetInnerHTML: {
                __html: ctx.styles.join("\n")
            }
        });
        headComponents.splice(0, 0, node);
    }
    for (const style of styleTags){
        const node = ee("style", {
            id: style.id,
            dangerouslySetInnerHTML: {
                __html: style.cssText
            },
            media: style.media
        });
        headComponents.splice(0, 0, node);
    }
    const html = template({
        bodyHtml,
        headComponents,
        imports,
        preloads: opts.preloads,
        lang: ctx.lang
    });
    return [
        html,
        csp
    ];
}
function template(opts) {
    const page = ee("html", {
        lang: opts.lang
    }, ee("head", null, ee("meta", {
        charSet: "UTF-8"
    }), ee("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1.0"
    }), opts.preloads.map((src)=>ee("link", {
            rel: "modulepreload",
            href: src
        })), opts.imports.map(([src, nonce])=>ee("script", {
            src: src,
            nonce: nonce,
            type: "module"
        })), opts.headComponents), ee("body", {
        dangerouslySetInnerHTML: {
            __html: opts.bodyHtml
        }
    }));
    return "<!DOCTYPE html>" + q1(page);
}
const ISLANDS = [];
const ENCOUNTERED_ISLANDS = new Set([]);
let ISLAND_PROPS = [];
const originalHook = d.vnode;
let ignoreNext = false;
d.vnode = (vnode)=>{
    assetHashingHook(vnode);
    const originalType = vnode.type;
    if (typeof vnode.type === "function") {
        const island = ISLANDS.find((island)=>island.component === originalType);
        if (island) {
            if (ignoreNext) {
                ignoreNext = false;
                return;
            }
            ENCOUNTERED_ISLANDS.add(island);
            vnode.type = (props)=>{
                ignoreNext = true;
                const child = ee(originalType, props);
                ISLAND_PROPS.push(props);
                return ee(`!--frsh-${island.id}:${ISLAND_PROPS.length - 1}--`, null, child);
            };
        }
    }
    if (originalHook) originalHook(vnode);
};
class ServerContext {
    #dev;
    #routes;
    #islands;
    #staticFiles;
    #bundler;
    #renderFn;
    #middlewares;
    #app;
    #notFound;
    #error;
    #plugins;
    constructor(routes, islands, staticFiles, renderfn, middlewares, app, notFound, error, plugins, importMapURL, jsxConfig){
        this.#routes = routes;
        this.#islands = islands;
        this.#staticFiles = staticFiles;
        this.#renderFn = renderfn;
        this.#middlewares = middlewares;
        this.#app = app;
        this.#notFound = notFound;
        this.#error = error;
        this.#plugins = plugins;
        this.#dev = typeof Deno.env.get("DENO_DEPLOYMENT_ID") !== "string";
        this.#bundler = new Bundler(this.#islands, this.#plugins, importMapURL, jsxConfig, this.#dev);
    }
    static async fromManifest(manifest, opts) {
        const baseUrl = new URL("./", manifest.baseUrl).href;
        const config = manifest.config || {
            importMap: "./import_map.json"
        };
        if (typeof config.importMap !== "string") {
            throw new Error("deno.json must contain an 'importMap' property.");
        }
        const importMapURL = new URL(config.importMap, manifest.baseUrl);
        config.compilerOptions ??= {};
        let jsx;
        switch(config.compilerOptions.jsx){
            case "react":
            case undefined:
                jsx = "react";
                break;
            case "react-jsx":
                jsx = "react-jsx";
                break;
            default:
                throw new Error("Unknown jsx option: " + config.compilerOptions.jsx);
        }
        const jsxConfig = {
            jsx,
            jsxImportSource: config.compilerOptions.jsxImportSource
        };
        const routes = [];
        const islands = [];
        const middlewares = [];
        let app = DEFAULT_APP;
        let notFound = DEFAULT_NOT_FOUND;
        let error = DEFAULT_ERROR;
        for (const [self1, module] of Object.entries(manifest.routes)){
            const url = new URL(self1, baseUrl).href;
            if (!url.startsWith(baseUrl + "routes")) {
                throw new TypeError("Page is not a child of the basepath.");
            }
            const path = url.substring(baseUrl.length).substring("routes".length);
            const baseRoute = path.substring(1, path.length - extname2(path).length);
            const name = baseRoute.replace("/", "-");
            const isMiddleware = path.endsWith("/_middleware.tsx") || path.endsWith("/_middleware.ts") || path.endsWith("/_middleware.jsx") || path.endsWith("/_middleware.js");
            if (!path.startsWith("/_") && !isMiddleware) {
                const { default: component , config  } = module;
                let pattern = pathToPattern(baseRoute);
                if (config?.routeOverride) {
                    pattern = String(config.routeOverride);
                }
                let { handler  } = module;
                handler ??= {};
                if (component && typeof handler === "object" && handler.GET === undefined) {
                    handler.GET = (_req, { render  })=>render();
                }
                const route = {
                    pattern,
                    url,
                    name,
                    component,
                    handler,
                    csp: Boolean(config?.csp ?? false)
                };
                routes.push(route);
            } else if (isMiddleware) {
                middlewares.push({
                    ...middlewarePathToPattern(baseRoute),
                    ...module
                });
            } else if (path === "/_app.tsx" || path === "/_app.ts" || path === "/_app.jsx" || path === "/_app.js") {
                app = module;
            } else if (path === "/_404.tsx" || path === "/_404.ts" || path === "/_404.jsx" || path === "/_404.js") {
                const { default: component , config  } = module;
                let { handler  } = module;
                if (component && handler === undefined) {
                    handler = (_req, { render  })=>render();
                }
                notFound = {
                    pattern: pathToPattern(baseRoute),
                    url,
                    name,
                    component,
                    handler: handler ?? ((req)=>mod5.defaultOtherHandler(req)),
                    csp: Boolean(config?.csp ?? false)
                };
            } else if (path === "/_500.tsx" || path === "/_500.ts" || path === "/_500.jsx" || path === "/_500.js") {
                const { default: component , config  } = module;
                let { handler  } = module;
                if (component && handler === undefined) {
                    handler = (_req, { render  })=>render();
                }
                error = {
                    pattern: pathToPattern(baseRoute),
                    url,
                    name,
                    component,
                    handler: handler ?? ((req, ctx)=>mod5.defaultErrorHandler(req, ctx, ctx.error)),
                    csp: Boolean(config?.csp ?? false)
                };
            }
        }
        sortRoutes(routes);
        sortRoutes(middlewares);
        for (const [self1, module] of Object.entries(manifest.islands)){
            const url = new URL(self1, baseUrl).href;
            if (!url.startsWith(baseUrl)) {
                throw new TypeError("Island is not a child of the basepath.");
            }
            const path = url.substring(baseUrl.length).substring("islands".length);
            const baseRoute = path.substring(1, path.length - extname2(path).length);
            const name = sanitizeIslandName(baseRoute);
            const id = name.toLowerCase();
            if (typeof module.default !== "function") {
                throw new TypeError(`Islands must default export a component ('${self1}').`);
            }
            islands.push({
                id,
                name,
                url,
                component: module.default
            });
        }
        const staticFiles = [];
        try {
            const staticFolder = new URL(opts.staticDir ?? "./static", manifest.baseUrl);
            for await (const _ of Deno.readDir(fromFileUrl2(staticFolder))){}
            const entires = walk(fromFileUrl2(staticFolder), {
                includeFiles: true,
                includeDirs: false,
                followSymlinks: false
            });
            const encoder = new TextEncoder();
            for await (const entry of entires){
                const localUrl = toFileUrl2(entry.path);
                const path = localUrl.href.substring(staticFolder.href.length);
                const stat = await Deno.stat(localUrl);
                const contentType = typeByExtension(extname2(path)) ?? "application/octet-stream";
                const etag = await crypto.subtle.digest("SHA-1", encoder.encode(BUILD_ID + path)).then((hash)=>Array.from(new Uint8Array(hash)).map((__byte)=>__byte.toString(16).padStart(2, "0")).join(""));
                const staticFile = {
                    localUrl,
                    path,
                    size: stat.size,
                    contentType,
                    etag
                };
                staticFiles.push(staticFile);
            }
        } catch (err) {
            if (err instanceof Deno.errors.NotFound) {} else {
                throw err;
            }
        }
        return new ServerContext(routes, islands, staticFiles, opts.render ?? DEFAULT_RENDER_FN, middlewares, app, notFound, error, opts.plugins ?? [], importMapURL, jsxConfig);
    }
    handler() {
        const inner = mod5.router(...this.#handlers());
        const withMiddlewares = this.#composeMiddlewares(this.#middlewares);
        return async function handler(req, connInfo) {
            const url = new URL(req.url);
            if (url.pathname.length > 1 && url.pathname.endsWith("/")) {
                url.pathname = url.pathname.slice(0, -1);
                return Response.redirect(url.href, Status.TemporaryRedirect);
            }
            const originalMethod = req.method;
            if (req.method === "HEAD") {
                req = new Request(req.url, {
                    method: "GET",
                    headers: req.headers
                });
            }
            const res = await withMiddlewares(req, connInfo, inner);
            if (originalMethod === "HEAD") {
                res.body?.cancel();
                return new Response(null, {
                    headers: res.headers,
                    status: res.status,
                    statusText: res.statusText
                });
            }
            return res;
        };
    }
    #composeMiddlewares(middlewares) {
        return (req, connInfo, inner)=>{
            const mws = selectMiddlewares(req.url, middlewares);
            const handlers = [];
            const ctx = {
                next () {
                    const handler = handlers.shift();
                    return Promise.resolve(handler());
                },
                ...connInfo,
                state: {}
            };
            for (const mw of mws){
                if (mw.handler instanceof Array) {
                    for (const handler of mw.handler){
                        handlers.push(()=>handler(req, ctx));
                    }
                } else {
                    const handler = mw.handler;
                    handlers.push(()=>handler(req, ctx));
                }
            }
            handlers.push(()=>inner(req, ctx));
            const handler = handlers.shift();
            return handler();
        };
    }
    #handlers() {
        const routes = {};
        routes[`${INTERNAL_PREFIX}${JS_PREFIX}/${BUILD_ID}/:path*`] = this.#bundleAssetRoute();
        if (this.#dev) {
            routes[REFRESH_JS_URL] = ()=>{
                const js = `new EventSource("${ALIVE_URL}").addEventListener("message", function listener(e) { if (e.data !== "${BUILD_ID}") { this.removeEventListener('message', listener); location.reload(); } });`;
                return new Response(js, {
                    headers: {
                        "content-type": "application/javascript; charset=utf-8"
                    }
                });
            };
            routes[ALIVE_URL] = ()=>{
                let timerId = undefined;
                const body = new ReadableStream({
                    start (controller) {
                        controller.enqueue(`data: ${BUILD_ID}\nretry: 100\n\n`);
                        timerId = setInterval(()=>{
                            controller.enqueue(`data: ${BUILD_ID}\n\n`);
                        }, 1000);
                    },
                    cancel () {
                        if (timerId !== undefined) {
                            clearInterval(timerId);
                        }
                    }
                });
                return new Response(body.pipeThrough(new TextEncoderStream()), {
                    headers: {
                        "content-type": "text/event-stream"
                    }
                });
            };
        }
        for (const { localUrl , path , size , contentType , etag  } of this.#staticFiles){
            const route = sanitizePathToRegex(path);
            routes[`GET@${route}`] = this.#staticFileHandler(localUrl, size, contentType, etag);
        }
        const genRender = (route, status)=>{
            const imports = [];
            if (this.#dev) {
                imports.push(REFRESH_JS_URL);
            }
            return (req, params, error)=>{
                return async (data)=>{
                    if (route.component === undefined) {
                        throw new Error("This page does not have a component to render.");
                    }
                    if (typeof route.component === "function" && route.component.constructor.name === "AsyncFunction") {
                        throw new Error("Async components are not supported. Fetch data inside of a route handler, as described in the docs: https://fresh.deno.dev/docs/getting-started/fetching-data");
                    }
                    const preloads = [];
                    const resp = await render({
                        route,
                        islands: this.#islands,
                        plugins: this.#plugins,
                        app: this.#app,
                        imports,
                        preloads,
                        renderFn: this.#renderFn,
                        url: new URL(req.url),
                        params,
                        data,
                        error
                    });
                    const headers = {
                        "content-type": "text/html; charset=utf-8"
                    };
                    const [body, csp] = resp;
                    if (csp) {
                        if (this.#dev) {
                            csp.directives.connectSrc = [
                                ...csp.directives.connectSrc ?? [],
                                SELF
                            ];
                        }
                        const directive = serializeCSPDirectives(csp.directives);
                        if (csp.reportOnly) {
                            headers["content-security-policy-report-only"] = directive;
                        } else {
                            headers["content-security-policy"] = directive;
                        }
                    }
                    return new Response(body, {
                        status,
                        headers
                    });
                };
            };
        };
        const createUnknownRender = genRender(this.#notFound, Status.NotFound);
        for (const route of this.#routes){
            const createRender = genRender(route, Status.OK);
            if (typeof route.handler === "function") {
                routes[route.pattern] = (req, ctx, params)=>route.handler(req, {
                        ...ctx,
                        params,
                        render: createRender(req, params),
                        renderNotFound: createUnknownRender(req, {})
                    });
            } else {
                for (const [method, handler] of Object.entries(route.handler)){
                    routes[`${method}@${route.pattern}`] = (req, ctx, params)=>handler(req, {
                            ...ctx,
                            params,
                            render: createRender(req, params),
                            renderNotFound: createUnknownRender(req, {})
                        });
                }
            }
        }
        const unknownHandler = (req, ctx)=>this.#notFound.handler(req, {
                ...ctx,
                render: createUnknownRender(req, {})
            });
        const errorHandlerRender = genRender(this.#error, Status.InternalServerError);
        const errorHandler = (req, ctx, error)=>{
            console.error("%cAn error occurred during route handling or page rendering.", "color:red", error);
            return this.#error.handler(req, {
                ...ctx,
                error,
                render: errorHandlerRender(req, {}, error)
            });
        };
        return [
            routes,
            unknownHandler,
            errorHandler
        ];
    }
    #staticFileHandler(localUrl, size, contentType, etag) {
        return async (req)=>{
            const url = new URL(req.url);
            const key = url.searchParams.get(ASSET_CACHE_BUST_KEY);
            if (key !== null && BUILD_ID !== key) {
                url.searchParams.delete(ASSET_CACHE_BUST_KEY);
                const location = url.pathname + url.search;
                return new Response("", {
                    status: 307,
                    headers: {
                        "content-type": "text/plain",
                        location
                    }
                });
            }
            const headers = new Headers({
                "content-type": contentType,
                etag,
                vary: "If-None-Match"
            });
            if (key !== null) {
                headers.set("Cache-Control", "public, max-age=31536000, immutable");
            }
            const ifNoneMatch = req.headers.get("if-none-match");
            if (ifNoneMatch === etag || ifNoneMatch === "W/" + etag) {
                return new Response(null, {
                    status: 304,
                    headers
                });
            } else {
                const file = await Deno.open(localUrl);
                headers.set("content-length", String(size));
                return new Response(file.readable, {
                    headers
                });
            }
        };
    }
    #bundleAssetRoute = ()=>{
        return async (_req, _ctx, params)=>{
            const path = `/${params.path}`;
            const file = await this.#bundler.get(path);
            let res;
            if (file) {
                const headers = new Headers({
                    "Cache-Control": "public, max-age=604800, immutable"
                });
                const contentType = typeByExtension(extname2(path));
                if (contentType) {
                    headers.set("Content-Type", contentType);
                }
                res = new Response(file, {
                    status: 200,
                    headers
                });
            }
            return res ?? new Response(null, {
                status: 404
            });
        };
    };
}
const DEFAULT_RENDER_FN = (_ctx, render)=>{
    render();
};
const DEFAULT_APP = {
    default: ({ Component  })=>ee(Component, {})
};
const DEFAULT_NOT_FOUND = {
    pattern: "",
    url: "",
    name: "_404",
    handler: (req)=>mod5.defaultOtherHandler(req),
    csp: false
};
const DEFAULT_ERROR = {
    pattern: "",
    url: "",
    name: "_500",
    component: DefaultErrorPage,
    handler: (_req, ctx)=>ctx.render(),
    csp: false
};
function selectMiddlewares(url, middlewares) {
    const selectedMws = [];
    const reqURL = new URL(url);
    for (const { compiledPattern , handler  } of middlewares){
        const res = compiledPattern.exec(reqURL);
        if (res) {
            selectedMws.push({
                handler
            });
        }
    }
    return selectedMws;
}
function sortRoutes(routes) {
    routes.sort((a, b)=>{
        const partsA = a.pattern.split("/");
        const partsB = b.pattern.split("/");
        for(let i = 0; i < Math.max(partsA.length, partsB.length); i++){
            const partA = partsA[i];
            const partB = partsB[i];
            if (partA === undefined) return -1;
            if (partB === undefined) return 1;
            if (partA === partB) continue;
            const priorityA = partA.startsWith(":") ? partA.endsWith("*") ? 0 : 1 : 2;
            const priorityB = partB.startsWith(":") ? partB.endsWith("*") ? 0 : 1 : 2;
            return Math.max(Math.min(priorityB - priorityA, 1), -1);
        }
        return 0;
    });
}
function pathToPattern(path) {
    const parts = path.split("/");
    if (parts[parts.length - 1] === "index") {
        parts.pop();
    }
    const route = "/" + parts.map((part)=>{
        if (part.startsWith("[...") && part.endsWith("]")) {
            return `:${part.slice(4, part.length - 1)}*`;
        }
        if (part.startsWith("[") && part.endsWith("]")) {
            return `:${part.slice(1, part.length - 1)}`;
        }
        return part;
    }).join("/");
    return route;
}
function sanitizePathToRegex(path) {
    return path.replaceAll("\*", "\\*").replaceAll("\+", "\\+").replaceAll("\?", "\\?").replaceAll("\{", "\\{").replaceAll("\}", "\\}").replaceAll("\(", "\\(").replaceAll("\)", "\\)").replaceAll("\:", "\\:");
}
function toPascalCase(text) {
    return text.replace(/(^\w|-\w)/g, (substring)=>substring.replace(/-/, "").toUpperCase());
}
function sanitizeIslandName(name) {
    const fileName = name.replace("/", "");
    return toPascalCase(fileName);
}
function serializeCSPDirectives(csp) {
    return Object.entries(csp).filter(([_key, value])=>value !== undefined).map(([k, v])=>{
        const key = k.replace(/[A-Z]/g, (m)=>`-${m.toLowerCase()}`);
        const value = Array.isArray(v) ? v.join(" ") : v;
        return `${key} ${value}`;
    }).join("; ");
}
function middlewarePathToPattern(baseRoute) {
    baseRoute = baseRoute.slice(0, -"_middleware".length);
    let pattern = pathToPattern(baseRoute);
    if (pattern.endsWith("/")) {
        pattern = pattern.slice(0, -1) + "{/*}?";
    }
    const compiledPattern = new URLPattern({
        pathname: pattern
    });
    return {
        pattern,
        compiledPattern
    };
}
async function start(routes, opts = {}) {
    const ctx = await ServerContext.fromManifest(routes, opts);
    opts.port ??= 8000;
    if (opts.experimentalDenoServe === true) {
        await Deno.serve(ctx.handler(), opts);
    } else {
        await serve2(ctx.handler(), opts);
    }
}
const osType1 = (()=>{
    const { Deno: Deno1  } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows1 = osType1 === "windows";
const CHAR_FORWARD_SLASH1 = 47;
function assertPath1(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator1(code) {
    return code === 47;
}
function isPathSeparator1(code) {
    return isPosixPathSeparator1(code) || code === 92;
}
function isWindowsDeviceRoot1(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString1(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH1;
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format1(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS1 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace1(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS1[c] ?? c;
    });
}
class DenoStdInternalError1 extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert1(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError1(msg);
    }
}
const sep3 = "\\";
const delimiter3 = ";";
function resolve3(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno: Deno1  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath1(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator1(code)) {
                isAbsolute = true;
                if (isPathSeparator1(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator1(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot1(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator1(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator1(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString1(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator1);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize4(path) {
    assertPath1(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            isAbsolute = true;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString1(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator1);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator1(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute3(path) {
    assertPath1(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator1(code)) {
        return true;
    } else if (isWindowsDeviceRoot1(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator1(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join4(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath1(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert1(firstPart != null);
    if (isPathSeparator1(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator1(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator1(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator1(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize4(joined);
}
function relative3(from, to) {
    assertPath1(from);
    assertPath1(to);
    if (from === to) return "";
    const fromOrig = resolve3(from);
    const toOrig = resolve3(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath3(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve3(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot1(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname3(path) {
    assertPath1(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator1(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path.slice(0, end);
}
function basename3(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot1(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= start; --i){
            const code = path.charCodeAt(i);
            if (isPathSeparator1(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= start; --i){
            if (isPathSeparator1(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname3(path) {
    assertPath1(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot1(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format3(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("\\", pathObject);
}
function parse3(path) {
    assertPath1(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = 1;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        ret.root = ret.dir = path;
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl3(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl3(path) {
    if (!isAbsolute3(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod6 = {
    sep: sep3,
    delimiter: delimiter3,
    resolve: resolve3,
    normalize: normalize4,
    isAbsolute: isAbsolute3,
    join: join4,
    relative: relative3,
    toNamespacedPath: toNamespacedPath3,
    dirname: dirname3,
    basename: basename3,
    extname: extname3,
    format: format3,
    parse: parse3,
    fromFileUrl: fromFileUrl3,
    toFileUrl: toFileUrl3
};
const sep4 = "/";
const delimiter4 = ":";
function resolve4(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno: Deno1  } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath1(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH1;
    }
    resolvedPath = normalizeString1(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator1);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize5(path) {
    assertPath1(path);
    if (path.length === 0) return ".";
    const isAbsolute = path.charCodeAt(0) === 47;
    const trailingSeparator = path.charCodeAt(path.length - 1) === 47;
    path = normalizeString1(path, !isAbsolute, "/", isPosixPathSeparator1);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function isAbsolute4(path) {
    assertPath1(path);
    return path.length > 0 && path.charCodeAt(0) === 47;
}
function join5(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath1(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize5(joined);
}
function relative4(from, to) {
    assertPath1(from);
    assertPath1(to);
    if (from === to) return "";
    from = resolve4(from);
    to = resolve4(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath4(path) {
    return path;
}
function dirname4(path) {
    assertPath1(path);
    if (path.length === 0) return ".";
    const hasRoot = path.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path.length - 1; i >= 1; --i){
        if (path.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path.slice(0, end);
}
function basename4(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath1(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= 0; --i){
            const code = path.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= 0; --i){
            if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname4(path) {
    assertPath1(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format4(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format1("/", pathObject);
}
function parse4(path) {
    assertPath1(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = path.charCodeAt(0) === 47;
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
    else if (isAbsolute) ret.dir = "/";
    return ret;
}
function fromFileUrl4(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl4(path) {
    if (!isAbsolute4(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod7 = {
    sep: sep4,
    delimiter: delimiter4,
    resolve: resolve4,
    normalize: normalize5,
    isAbsolute: isAbsolute4,
    join: join5,
    relative: relative4,
    toNamespacedPath: toNamespacedPath4,
    dirname: dirname4,
    basename: basename4,
    extname: extname4,
    format: format4,
    parse: parse4,
    fromFileUrl: fromFileUrl4,
    toFileUrl: toFileUrl4
};
const path2 = isWindows1 ? mod6 : mod7;
const { join: join6 , normalize: normalize6  } = path2;
const path3 = isWindows1 ? mod6 : mod7;
const { basename: basename5 , delimiter: delimiter5 , dirname: dirname5 , extname: extname5 , format: format5 , fromFileUrl: fromFileUrl5 , isAbsolute: isAbsolute5 , join: join7 , normalize: normalize7 , parse: parse5 , relative: relative5 , resolve: resolve5 , sep: sep5 , toFileUrl: toFileUrl5 , toNamespacedPath: toNamespacedPath5  } = path3;
const { Deno: Deno1  } = globalThis;
typeof Deno1?.noColor === "boolean" ? Deno1.noColor : true;
new RegExp([
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"
].join("|"), "g");
var DiffType;
(function(DiffType) {
    DiffType["removed"] = "removed";
    DiffType["common"] = "common";
    DiffType["added"] = "added";
})(DiffType || (DiffType = {}));
function ascend(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
class BSNode {
    left;
    right;
    constructor(parent, value){
        this.parent = parent;
        this.value = value;
        this.left = null;
        this.right = null;
    }
    static from(node) {
        const copy = new BSNode(node.parent, node.value);
        copy.left = node.left;
        copy.right = node.right;
        return copy;
    }
    directionFromParent() {
        return this.parent === null ? null : this === this.parent.left ? "left" : this === this.parent.right ? "right" : null;
    }
    findMinNode() {
        let minNode = this.left;
        while(minNode?.left)minNode = minNode.left;
        return minNode ?? this;
    }
    findMaxNode() {
        let maxNode = this.right;
        while(maxNode?.right)maxNode = maxNode.right;
        return maxNode ?? this;
    }
    findSuccessorNode() {
        if (this.right !== null) return this.right.findMinNode();
        let parent = this.parent;
        let direction = this.directionFromParent();
        while(parent && direction === "right"){
            direction = parent.directionFromParent();
            parent = parent.parent;
        }
        return parent;
    }
    parent;
    value;
}
class BSTree {
    root;
    _size;
    constructor(compare = ascend){
        this.compare = compare;
        this.root = null;
        this._size = 0;
    }
    static from(collection, options) {
        let result;
        let unmappedValues = [];
        if (collection instanceof BSTree) {
            result = new BSTree(options?.compare ?? collection.compare);
            if (options?.compare || options?.map) {
                unmappedValues = collection;
            } else {
                const nodes = [];
                if (collection.root) {
                    result.root = BSNode.from(collection.root);
                    nodes.push(result.root);
                }
                while(nodes.length){
                    const node = nodes.pop();
                    const left = node.left ? BSNode.from(node.left) : null;
                    const right = node.right ? BSNode.from(node.right) : null;
                    if (left) {
                        left.parent = node;
                        nodes.push(left);
                    }
                    if (right) {
                        right.parent = node;
                        nodes.push(right);
                    }
                }
            }
        } else {
            result = options?.compare ? new BSTree(options.compare) : new BSTree();
            unmappedValues = collection;
        }
        const values = options?.map ? Array.from(unmappedValues, options.map, options.thisArg) : unmappedValues;
        for (const value of values)result.insert(value);
        return result;
    }
    get size() {
        return this._size;
    }
    findNode(value) {
        let node = this.root;
        while(node){
            const order = this.compare(value, node.value);
            if (order === 0) break;
            const direction = order < 0 ? "left" : "right";
            node = node[direction];
        }
        return node;
    }
    rotateNode(node, direction) {
        const replacementDirection = direction === "left" ? "right" : "left";
        if (!node[replacementDirection]) {
            throw new TypeError(`cannot rotate ${direction} without ${replacementDirection} child`);
        }
        const replacement = node[replacementDirection];
        node[replacementDirection] = replacement[direction] ?? null;
        if (replacement[direction]) replacement[direction].parent = node;
        replacement.parent = node.parent;
        if (node.parent) {
            const parentDirection = node === node.parent[direction] ? direction : replacementDirection;
            node.parent[parentDirection] = replacement;
        } else {
            this.root = replacement;
        }
        replacement[direction] = node;
        node.parent = replacement;
    }
    insertNode(Node, value) {
        if (!this.root) {
            this.root = new Node(null, value);
            this._size++;
            return this.root;
        } else {
            let node = this.root;
            while(true){
                const order = this.compare(value, node.value);
                if (order === 0) break;
                const direction = order < 0 ? "left" : "right";
                if (node[direction]) {
                    node = node[direction];
                } else {
                    node[direction] = new Node(node, value);
                    this._size++;
                    return node[direction];
                }
            }
        }
        return null;
    }
    removeNode(value) {
        let removeNode = this.findNode(value);
        if (removeNode) {
            const successorNode = !removeNode.left || !removeNode.right ? removeNode : removeNode.findSuccessorNode();
            const replacementNode = successorNode.left ?? successorNode.right;
            if (replacementNode) replacementNode.parent = successorNode.parent;
            if (!successorNode.parent) {
                this.root = replacementNode;
            } else {
                successorNode.parent[successorNode.directionFromParent()] = replacementNode;
            }
            if (successorNode !== removeNode) {
                removeNode.value = successorNode.value;
                removeNode = successorNode;
            }
            this._size--;
        }
        return removeNode;
    }
    insert(value) {
        return !!this.insertNode(BSNode, value);
    }
    remove(value) {
        return !!this.removeNode(value);
    }
    find(value) {
        return this.findNode(value)?.value ?? null;
    }
    min() {
        return this.root ? this.root.findMinNode().value : null;
    }
    max() {
        return this.root ? this.root.findMaxNode().value : null;
    }
    clear() {
        this.root = null;
        this._size = 0;
    }
    isEmpty() {
        return this.size === 0;
    }
    *lnrValues() {
        const nodes = [];
        let node = this.root;
        while(nodes.length || node){
            if (node) {
                nodes.push(node);
                node = node.left;
            } else {
                node = nodes.pop();
                yield node.value;
                node = node.right;
            }
        }
    }
    *rnlValues() {
        const nodes = [];
        let node = this.root;
        while(nodes.length || node){
            if (node) {
                nodes.push(node);
                node = node.right;
            } else {
                node = nodes.pop();
                yield node.value;
                node = node.left;
            }
        }
    }
    *nlrValues() {
        const nodes = [];
        if (this.root) nodes.push(this.root);
        while(nodes.length){
            const node = nodes.pop();
            yield node.value;
            if (node.right) nodes.push(node.right);
            if (node.left) nodes.push(node.left);
        }
    }
    *lrnValues() {
        const nodes = [];
        let node = this.root;
        let lastNodeVisited = null;
        while(nodes.length || node){
            if (node) {
                nodes.push(node);
                node = node.left;
            } else {
                const lastNode = nodes[nodes.length - 1];
                if (lastNode.right && lastNode.right !== lastNodeVisited) {
                    node = lastNode.right;
                } else {
                    yield lastNode.value;
                    lastNodeVisited = nodes.pop();
                }
            }
        }
    }
    *lvlValues() {
        const children = [];
        let cursor = this.root;
        while(cursor){
            yield cursor.value;
            if (cursor.left) children.push(cursor.left);
            if (cursor.right) children.push(cursor.right);
            cursor = children.shift() ?? null;
        }
    }
    *[Symbol.iterator]() {
        yield* this.lnrValues();
    }
    compare;
}
const _internals = {
    Date,
    setTimeout,
    clearTimeout,
    setInterval,
    clearInterval
};
function isFakeDate(instance) {
    return instance instanceof FakeDate;
}
function FakeDate(...args) {
    if (args.length === 0) args.push(FakeDate.now());
    if (isFakeDate(this)) {
        this.date = new _internals.Date(...args);
    } else {
        return new _internals.Date(args[0]).toString();
    }
}
FakeDate.parse = Date.parse;
FakeDate.UTC = Date.UTC;
FakeDate.now = ()=>time?.now ?? _internals.Date.now();
Object.getOwnPropertyNames(Date.prototype).forEach((name)=>{
    const propName = name;
    FakeDate.prototype[propName] = function(...args) {
        return this.date[propName].apply(this.date, args);
    };
});
Object.getOwnPropertySymbols(Date.prototype).forEach((name)=>{
    const propName = name;
    FakeDate.prototype[propName] = function(...args) {
        return this.date[propName].apply(this.date, args);
    };
});
let time = undefined;
const osType2 = (()=>{
    const { Deno: Deno1  } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows2 = osType2 === "windows";
const CHAR_FORWARD_SLASH2 = 47;
function assertPath2(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator2(code) {
    return code === 47;
}
function isPathSeparator2(code) {
    return isPosixPathSeparator2(code) || code === 92;
}
function isWindowsDeviceRoot2(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString2(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH2;
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format2(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS2 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace2(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS2[c] ?? c;
    });
}
class DenoStdInternalError2 extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert2(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError2(msg);
    }
}
const sep6 = "\\";
const delimiter6 = ";";
function resolve6(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno: Deno1  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath2(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator2(code)) {
                isAbsolute = true;
                if (isPathSeparator2(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator2(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator2(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator2(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot2(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator2(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator2(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString2(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator2);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize8(path) {
    assertPath2(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            isAbsolute = true;
            if (isPathSeparator2(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator2(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator2(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator2(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator2(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString2(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator2);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator2(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute6(path) {
    assertPath2(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator2(code)) {
        return true;
    } else if (isWindowsDeviceRoot2(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator2(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join8(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath2(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert2(firstPart != null);
    if (isPathSeparator2(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator2(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator2(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator2(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize8(joined);
}
function relative6(from, to) {
    assertPath2(from);
    assertPath2(to);
    if (from === to) return "";
    const fromOrig = resolve6(from);
    const toOrig = resolve6(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath6(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve6(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot2(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname6(path) {
    assertPath2(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator2(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator2(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator2(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator2(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator2(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator2(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path.slice(0, end);
}
function basename6(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath2(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot2(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= start; --i){
            const code = path.charCodeAt(i);
            if (isPathSeparator2(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= start; --i){
            if (isPathSeparator2(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname6(path) {
    assertPath2(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot2(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format6(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format2("\\", pathObject);
}
function parse6(path) {
    assertPath2(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator2(code)) {
            rootEnd = 1;
            if (isPathSeparator2(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator2(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator2(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator2(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot2(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator2(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator2(code)) {
        ret.root = ret.dir = path;
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl6(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl6(path) {
    if (!isAbsolute6(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace2(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod8 = {
    sep: sep6,
    delimiter: delimiter6,
    resolve: resolve6,
    normalize: normalize8,
    isAbsolute: isAbsolute6,
    join: join8,
    relative: relative6,
    toNamespacedPath: toNamespacedPath6,
    dirname: dirname6,
    basename: basename6,
    extname: extname6,
    format: format6,
    parse: parse6,
    fromFileUrl: fromFileUrl6,
    toFileUrl: toFileUrl6
};
const sep7 = "/";
const delimiter7 = ":";
function resolve7(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno: Deno1  } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath2(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH2;
    }
    resolvedPath = normalizeString2(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator2);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize9(path) {
    assertPath2(path);
    if (path.length === 0) return ".";
    const isAbsolute = path.charCodeAt(0) === 47;
    const trailingSeparator = path.charCodeAt(path.length - 1) === 47;
    path = normalizeString2(path, !isAbsolute, "/", isPosixPathSeparator2);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function isAbsolute7(path) {
    assertPath2(path);
    return path.length > 0 && path.charCodeAt(0) === 47;
}
function join9(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath2(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize9(joined);
}
function relative7(from, to) {
    assertPath2(from);
    assertPath2(to);
    if (from === to) return "";
    from = resolve7(from);
    to = resolve7(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath7(path) {
    return path;
}
function dirname7(path) {
    assertPath2(path);
    if (path.length === 0) return ".";
    const hasRoot = path.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path.length - 1; i >= 1; --i){
        if (path.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path.slice(0, end);
}
function basename7(path, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath2(path);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
        if (ext.length === path.length && ext === path) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path.length - 1; i >= 0; --i){
            const code = path.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path.length;
        return path.slice(start, end);
    } else {
        for(i = path.length - 1; i >= 0; --i){
            if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path.slice(start, end);
    }
}
function extname7(path) {
    assertPath2(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format7(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format2("/", pathObject);
}
function parse7(path) {
    assertPath2(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = path.charCodeAt(0) === 47;
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
    else if (isAbsolute) ret.dir = "/";
    return ret;
}
function fromFileUrl7(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl7(path) {
    if (!isAbsolute7(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace2(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod9 = {
    sep: sep7,
    delimiter: delimiter7,
    resolve: resolve7,
    normalize: normalize9,
    isAbsolute: isAbsolute7,
    join: join9,
    relative: relative7,
    toNamespacedPath: toNamespacedPath7,
    dirname: dirname7,
    basename: basename7,
    extname: extname7,
    format: format7,
    parse: parse7,
    fromFileUrl: fromFileUrl7,
    toFileUrl: toFileUrl7
};
const path4 = isWindows2 ? mod8 : mod9;
const { join: join10 , normalize: normalize10  } = path4;
const path5 = isWindows2 ? mod8 : mod9;
const { basename: basename8 , delimiter: delimiter8 , dirname: dirname8 , extname: extname8 , format: format8 , fromFileUrl: fromFileUrl8 , isAbsolute: isAbsolute8 , join: join11 , normalize: normalize11 , parse: parse8 , relative: relative8 , resolve: resolve8 , sep: sep8 , toFileUrl: toFileUrl8 , toNamespacedPath: toNamespacedPath8  } = path5;
var EOL;
(function(EOL) {
    EOL["LF"] = "\n";
    EOL["CRLF"] = "\r\n";
})(EOL || (EOL = {}));
class SitemapContext {
    #url;
    #manifest;
    #globalIgnore = [
        "sitemap.xml"
    ];
    #routes = [];
    constructor(url, manifest){
        this.#url = url;
        this.#manifest = manifest;
        this.#routes = Object.entries(this.#manifest.routes).filter(([path])=>{
            const file = basename5(path);
            const fileName = file.replace(extname5(file), "");
            const isDynamic = !!fileName.match(/^\[.+\]$/)?.length;
            if (isDynamic || fileName.startsWith("_") || this.#globalIgnore.includes(fileName)) {
                return false;
            }
            return true;
        }).map(([path, route])=>{
            return {
                pathName: path.replace(extname5(path), "").replace("./routes", "").replace("index", "")
            };
        });
    }
    get routes() {
        return this.#routes;
    }
    add(route, props) {
        if (typeof props === "undefined") {
            this.#routes.push({
                pathName: route.replace(/(^\/?)|(\/?$)/, "/")
            });
            return this;
        }
        const { changefreq , priority , lastmod  } = props;
        this.#routes.push({
            pathName: route.replace(/(^\/?)|(\/?$)/, "/"),
            changefreq,
            priority,
            lastmod
        });
        return this;
    }
    set(route, props) {
        if (typeof props === "undefined") return this;
        const i = this.#routes.findIndex((v)=>v.pathName === route.replace(/(^\/?)|(\/?$)/, "/"));
        if (i === -1) return this;
        const { changefreq , priority , lastmod  } = props;
        const currentRoute = this.#routes[i];
        this.#routes[i] = {
            ...currentRoute,
            changefreq: changefreq ?? currentRoute.changefreq,
            priority: priority ?? currentRoute.priority,
            lastmod: lastmod ?? currentRoute.lastmod
        };
        return this;
    }
    remove(route) {
        this.#routes = this.#routes.filter((r)=>r.pathName !== route);
        return this;
    }
    generate() {
        return `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml">
      ${this.routes.map((route)=>{
            return `<url>
          <loc>${this.#url}${route.pathName}</loc>
          <lastmod>${formatYearMonthDate(route.lastmod ?? new Date())}</lastmod>
          <changefreq>${route.changefreq ?? "daily"}</changefreq>
          <priority>${route.priority ?? "0.8"}</priority>
        </url>`;
        }).join("\n")}
    </urlset>`;
    }
    render() {
        return new Response(this.generate(), {
            headers: {
                "Content-Type": "application/xml"
            }
        });
    }
}
function formatYearMonthDate(date) {
    return `${date.getFullYear()}-${("00" + (date.getMonth() + 1)).slice(-2)}-${("00" + date.getDate()).slice(-2)}`;
}
const countries = [
    {
        name: "Sverige",
        id: "sv",
        cty: "Sweden (SE)",
        cta: "CTA|SE",
        interval: "PT60M",
        areas: [
            {
                name: "SE1",
                "id": "BZN|SE1",
                "long": "Norra Sverige",
                color: 1
            },
            {
                name: "SE2",
                "id": "BZN|SE2",
                "long": "Norra Mellansverige",
                color: 2
            },
            {
                name: "SE3",
                "id": "BZN|SE3",
                "long": "Södra Mellansverige",
                color: 3
            },
            {
                name: "SE4",
                "id": "BZN|SE4",
                "long": "Södra sverige",
                color: 4
            }
        ]
    },
    {
        name: "Norge",
        cty: "Norway (NO)",
        cta: "CTA|NO",
        interval: "PT60M",
        id: "no",
        areas: [
            {
                name: "NO1",
                "id": "IBA|NO1",
                "long": "Oslo",
                color: 1
            },
            {
                name: "NO2",
                "id": "IBA|NO2",
                "long": "Kristiansand",
                color: 2
            },
            {
                name: "NO3",
                "id": "IBA|NO3",
                "long": "Molde",
                color: 3
            },
            {
                name: "NO4",
                "id": "IBA|NO4",
                "long": "Tromsø",
                color: 4
            },
            {
                name: "NO5",
                "id": "IBA|NO5",
                "long": "Bergen",
                color: 5
            }
        ]
    },
    {
        name: "Finland",
        cty: "Finland (FI)",
        cta: "CTA|FI",
        interval: "PT60M",
        id: "fi",
        areas: [
            {
                name: "FI",
                "id": "FI",
                "long": "Suomi",
                color: 1
            }
        ]
    },
    {
        name: "Danmark",
        cty: "Denmark (DK)",
        cta: "CTA|DK",
        interval: "PT60M",
        id: "dk",
        areas: [
            {
                name: "DK1",
                "id": "IBA|DK1",
                "long": "Jylland",
                color: 1
            },
            {
                name: "DK2",
                "id": "IBA|DK2",
                "long": "Sjaelland",
                color: 2
            }
        ]
    },
    {
        name: "Deutschland",
        cty: "Germany (DE)",
        cta: "CTA|DE",
        interval: "PT15M",
        id: "de",
        areas: [
            {
                name: "DE-LU",
                "id": "BZN|DE-LU",
                "long": "Deutschland",
                color: 1
            }
        ]
    },
    {
        name: "Österreich",
        cty: "Austria (AT)",
        cta: "CTA|AT",
        interval: "PT15M",
        id: "at",
        areas: [
            {
                name: "AT",
                "id": "BZN|AT",
                "long": "Österreich",
                color: 1
            }
        ]
    },
    {
        name: "Switzerland",
        cty: "Switzerland (CH)",
        cta: "CTA|CH",
        interval: "PT60M",
        id: "ch",
        areas: [
            {
                name: "CH",
                "id": "BZN|CH",
                "long": "Switzerland",
                color: 1
            }
        ]
    },
    {
        name: "Spain",
        cty: "Spain (ES)",
        cta: "CTA|ES",
        interval: "PT60M",
        id: "es",
        areas: [
            {
                name: "ES",
                "id": "BZN|ES",
                "long": "Spain",
                color: 1
            }
        ]
    },
    {
        name: "France",
        cty: "France (FR)",
        cta: "CTA|FR",
        interval: "PT60M",
        id: "fr",
        areas: [
            {
                name: "FR",
                "id": "BZN|FR",
                "long": "France",
                color: 1
            }
        ]
    },
    {
        name: "Poland",
        cty: "Poland (PL)",
        cta: "CTA|PL",
        interval: "PT60M",
        id: "pl",
        areas: [
            {
                name: "PL",
                "id": "BZN|PL",
                "long": "Poland",
                color: 1
            }
        ]
    }
];
const __default2 = JSON.parse("{\n  \"tasks\": {\n    \"build\": \"deno bundle main.ts dist/main.ts && deno bundle backend/scheduler/jobs/daily.currencyupdate.ts dist/daily.currencyupdate.ts && deno bundle backend/scheduler/jobs/daily.outageupdate.ts dist/daily.outageupdate.ts && deno bundle backend/scheduler/jobs/daily.priceupdate.ts dist/daily.priceupdate.ts && deno bundle backend/scheduler/jobs/hourly.consumptionupdate.ts dist/hourly.consumptionupdate.ts && deno bundle backend/scheduler/jobs/hourly.productionupdate.ts dist/hourly.productionupdate.ts\",\n    \"dev\": \"deno run -A --watch=static/,routes/ dev.ts --no-schedules\",\n    \"debug\": \"deno task dev --debug\",\n    \"precommit\": \"deno fmt --check && deno lint && deno check main.ts && deno test\",\n    \"up\": \"deno run --allow-run --allow-read --allow-write --allow-net --allow-env https://deno.land/x/pup@0.0.4/pup.ts\",\n    \"prod\": \"deno run --allow-run --allow-read --allow-write --allow-net --allow-env dist/main.ts\",\n    \"update-deps\": \"deno run --allow-read=. --allow-write=. --allow-net https://deno.land/x/udd/main.ts --dry-run import_map.json\",\n    \"update-fresh\": \"deno run -A -r https://fresh.deno.dev/update .\"\n  },\n  \"importMap\": \"./import_map.json\",\n  \"fmt\": {\n    \"files\": {\n      \"exclude\": [\"components/\", \"islands/\"]\n    },\n    \"options\": {\n      \"lineWidth\": 150\n    }\n  },\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    \"types\": [\n      \"https://cdn.jsdelivr.net/npm/apexcharts@3.36.3/types/apexcharts.d.ts\",\n      \"./types/halfmoon.d.ts\",\n      \"./types/hljs.d.ts\"\n    ]\n  }\n}");
var a1 = 0;
function p1(n, s, t, f, u) {
    var r, o, _ = {};
    for(o in s)o == "ref" ? r = s[o] : _[o] = s[o];
    var e = {
        type: n,
        props: _,
        key: t,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --a1,
        __source: u,
        __self: f
    };
    if (typeof n == "function" && (r = n.defaultProps)) for(o in r)_[o] === void 0 && (_[o] = r[o]);
    return d.vnode && d.vnode(e), e;
}
const processPrice = (price, props)=>{
    if (price === null || price === undefined) return "-";
    price = price / 1000;
    if (props.priceFactor) {
        price += props.extra;
        price *= props.factor;
    }
    if (props.currency === "öre") {
        price *= 100;
    }
    return price.toFixed(props.decimals);
};
const maxPrice = (rs)=>{
    if (rs && rs.length) {
        const result = Math.max(...rs.filter((e)=>e.price !== null).map((e)=>e.price));
        if (result !== Infinity && result !== -Infinity) {
            return result;
        } else {
            return null;
        }
    } else {
        return null;
    }
};
const minPrice = (rs)=>{
    if (rs && rs.length) {
        const result = Math.min(...rs.filter((e)=>e.price !== null).map((e)=>e.price));
        if (result !== Infinity && result !== -Infinity) {
            return result;
        } else {
            return null;
        }
    } else {
        return null;
    }
};
const avgPrice = (rs)=>{
    if (rs && rs.length) {
        const filtered = rs.filter((e)=>e.price !== null);
        return filtered.reduce((a, b)=>a + b.price, 0) / filtered.length;
    } else {
        return null;
    }
};
const nowPrice = (rs)=>{
    if (rs && rs.length > 0) {
        const result = rs.find((e)=>e.time <= new Date().getTime() && e.time + 3600 * 1000 >= new Date().getTime());
        return result ? result.price : null;
    } else {
        return null;
    }
};
const applyExchangeRate = (rs, ex, currency)=>{
    if (currency === "EUR") return rs;
    if (currency === "öre") currency = "SEK";
    const rsCopy = [];
    if (rs) {
        for (const d of rs){
            const dCopy = {
                ...d
            };
            dCopy.price = dCopy.price * ex.entries[currency];
            rsCopy.push(dCopy);
        }
    }
    return rsCopy;
};
const applyExchangeRateSingle = (rs, ex, currency)=>{
    if (currency === "EUR") return rs;
    if (currency === "öre") currency = "SEK";
    const converted = rs * ex.entries[currency];
    return converted;
};
const defaultCurrency = (lang)=>{
    if (lang == "sv") {
        return "öre";
    } else if (lang == "no") {
        return "NOK";
    } else if (lang == "fi" || lang == "de" || lang == "at" || lang == "es" || lang == "fr") {
        return "EUR";
    } else if (lang == "dk") {
        return "DKK";
    } else if (lang == "pl") {
        return "PLN";
    } else {
        return "EUR";
    }
};
const defaultExtra = ()=>{
    return "0";
};
const defaultFactor = ()=>{
    return "1";
};
const defaultDecimals = (lang)=>{
    const usedCurrency = localStorage.getItem("sw_currency") ?? defaultCurrency(lang);
    if (usedCurrency === "öre") {
        return "1";
    } else if (usedCurrency === "EUR") {
        return "3";
    } else {
        return "2";
    }
};
const defaultPricefactor = ()=>{
    return false;
};
const preferences = {
    lang: (lang)=>localStorage.getItem("sw_lang") ?? lang,
    currency: (lang)=>localStorage.getItem("sw_currency") ?? defaultCurrency(lang),
    unit: ()=>localStorage.getItem("sw_unit") ?? "kWh",
    factor: (lang)=>parseFloat(localStorage.getItem("sw_factor") ?? defaultFactor(lang)),
    extra: (lang)=>parseFloat(localStorage.getItem("sw_extra") ?? defaultExtra(lang)),
    decimals: (lang)=>parseInt(localStorage.getItem("sw_decimals") ?? defaultDecimals(lang), 10),
    pricefactor: (lang)=>localStorage.getItem("sw_pricefactor") === "false" ? false : localStorage.getItem("sw_pricefactor") === "true" ? true : defaultPricefactor(lang)
};
function SwHead(props) {
    const priceProps = {
        currency: preferences.currency(props.data.lang),
        unit: preferences.unit(),
        factor: 1,
        extra: 0,
        decimals: 5,
        priceFactor: false
    };
    let jsonLdPriceFlag = true;
    let jsonLdPriceDocument = "";
    if (props.data.area) {
        const dataTodayExchanged = applyExchangeRate(props.data.area.dataToday, props.data.er, priceProps.currency), maxPriceResult = processPrice(maxPrice(dataTodayExchanged), priceProps), minPriceResult = processPrice(minPrice(dataTodayExchanged), priceProps), avgPriceResult = processPrice(avgPrice(dataTodayExchanged), priceProps);
        jsonLdPriceFlag = true;
        jsonLdPriceDocument = `
{
  "@context": "https://schema.org",
  "@type": "UnitPriceSpecification",
  "@id": "UnitPriceSpecification",
  "maxPrice": "${maxPriceResult}",
  "minPrice": "${minPriceResult}",
  "name": "${lang_svc.t("common.header.avg_today_short", {
            lang: props.data.lang
        })} ${props.data.area.name} - ${props.data.area.long}",
  "price": "${avgPriceResult}",
  "priceCurrency": [
    "${priceProps.currency}"
  ],
  "unitCode": "kWh",
  "validFrom": "${new Date().toLocaleDateString('sv-SE')}",
  "validThrough": "${new Date().toLocaleDateString('sv-SE')}"
}`;
    }
    const jsonLdPageDocument = `
  {
      "@context": "http://schema.org",
      "@type": "WebPage",
      "name": "${lang_svc.t("common.page.title", {
        lang: props.data.lang
    })}",
      "description": "${lang_svc.t("common.header.title", {
        lang: props.data.lang
    })} - ${props.title}.",
      "datePublished": "${new Date().toLocaleDateString('sv-SE')}",
      "dateModified": "${new Date().toLocaleDateString('sv-SE')}"
  }`;
    return p1(Head, {
        children: [
            p1("title", {
                children: [
                    lang_svc.t("common.page.title", {
                        lang: props.data.lang
                    }),
                    "  - ",
                    props.title
                ]
            }),
            p1("link", {
                rel: "icon",
                type: "image/png",
                href: asset("/icon-192x192.png")
            }),
            p1("meta", {
                name: "description",
                content: lang_svc.t("common.header.title", {
                    lang: props.data.lang
                }) + " - " + props.title
            }),
            p1("link", {
                href: "https://cdn.jsdelivr.net/npm/halfmoon@1.1.1/css/halfmoon.min.css",
                rel: "stylesheet"
            }),
            p1("script", {
                src: "https://cdn.jsdelivr.net/npm/halfmoon@1.1.1/js/halfmoon.min.js"
            }),
            p1("link", {
                rel: "stylesheet",
                href: "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css",
                integrity: "sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w==",
                crossOrigin: "anonymous",
                referrerpolicy: "no-referrer"
            }),
            p1("link", {
                rel: "stylesheet",
                href: "https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.36.3/apexcharts.min.css",
                integrity: "sha512-tJYqW5NWrT0JEkWYxrI4IK2jvT7PAiOwElIGTjALSyr8ZrilUQf+gjw2z6woWGSZqeXASyBXUr+WbtqiQgxUYg==",
                crossOrigin: "anonymous",
                referrerpolicy: "no-referrer"
            }),
            p1("script", {
                src: "https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.36.3/apexcharts.min.js",
                integrity: "sha512-sa449wQ9TM6SvZV7TK7Zx/SjVR6bc7lR8tRz1Ar4/R6X2jOLaFln/9C+6Ak2OkAKZ/xBAKJ94dQMeYa0JT1RLg==",
                crossOrigin: "anonymous",
                referrerpolicy: "no-referrer"
            }),
            props.page === "homeassistant" && p1(L, {
                children: [
                    p1("link", {
                        rel: "stylesheet",
                        href: "//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/dark.min.css"
                    }),
                    p1("script", {
                        src: "//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"
                    }),
                    p1("script", {
                        children: "hljs.highlightAll();"
                    })
                ]
            }),
            p1("script", {
                type: "module",
                src: asset("/initworker.js")
            }),
            p1("link", {
                rel: "manifest",
                href: asset("/manifest.json")
            }),
            p1("link", {
                href: "https://fonts.cdnfonts.com/css/seven-segment",
                rel: "stylesheet"
            }),
            p1("link", {
                rel: "stylesheet",
                href: asset("/css/custom.css")
            }),
            p1("script", {
                type: "application/ld+json",
                dangerouslySetInnerHTML: {
                    __html: jsonLdPageDocument
                }
            }),
            jsonLdPriceFlag && p1("script", {
                type: "application/ld+json",
                dangerouslySetInnerHTML: {
                    __html: jsonLdPriceDocument
                }
            })
        ]
    });
}
function minitz(y, m, d, h, i, s, tz, throwOnInvalid) {
    return minitz.fromTZ(minitz.tp(y, m, d, h, i, s, tz), throwOnInvalid);
}
minitz.fromTZISO = (localTimeStr, tz, throwOnInvalid)=>{
    return minitz.fromTZ(parseISOLocal(localTimeStr, tz), throwOnInvalid);
};
minitz.fromTZ = function(tp, throwOnInvalid) {
    const inDate = new Date(Date.UTC(tp.y, tp.m - 1, tp.d, tp.h, tp.i, tp.s)), offset = getTimezoneOffset(tp.tz, inDate), dateGuess = new Date(inDate.getTime() - offset), dateOffsGuess = getTimezoneOffset(tp.tz, dateGuess);
    if (dateOffsGuess - offset === 0) {
        return dateGuess;
    } else {
        const dateGuess2 = new Date(inDate.getTime() - dateOffsGuess), dateOffsGuess2 = getTimezoneOffset(tp.tz, dateGuess2);
        if (dateOffsGuess2 - dateOffsGuess === 0) {
            return dateGuess2;
        } else if (!throwOnInvalid && dateOffsGuess2 - dateOffsGuess > 0) {
            return dateGuess2;
        } else if (!throwOnInvalid) {
            return dateGuess;
        } else {
            throw new Error("Invalid date passed to fromTZ()");
        }
    }
};
minitz.toTZ = function(d, tzStr) {
    const localDateString = d.toLocaleString("en-US", {
        timeZone: tzStr
    }).replace(/[\u202f]/, " ");
    const td = new Date(localDateString);
    return {
        y: td.getFullYear(),
        m: td.getMonth() + 1,
        d: td.getDate(),
        h: td.getHours(),
        i: td.getMinutes(),
        s: td.getSeconds(),
        tz: tzStr
    };
};
minitz.tp = (y, m, d, h, i, s, tz)=>{
    return {
        y,
        m,
        d,
        h,
        i,
        s,
        tz: tz
    };
};
function getTimezoneOffset(timeZone, date = new Date()) {
    const tz = date.toLocaleString("en-US", {
        timeZone: timeZone,
        timeZoneName: "short"
    }).split(" ").slice(-1)[0];
    const dateString = date.toLocaleString("en-US").replace(/[\u202f]/, " ");
    return Date.parse(`${dateString} GMT`) - Date.parse(`${dateString} ${tz}`);
}
function parseISOLocal(dtStr, tz) {
    const pd = new Date(Date.parse(dtStr));
    if (isNaN(pd)) {
        throw new Error("minitz: Invalid ISO8601 passed to parser.");
    }
    const stringEnd = dtStr.substring(9);
    if (dtStr.includes("Z") || stringEnd.includes("-") || stringEnd.includes("+")) {
        return minitz.tp(pd.getUTCFullYear(), pd.getUTCMonth() + 1, pd.getUTCDate(), pd.getUTCHours(), pd.getUTCMinutes(), pd.getUTCSeconds(), "Etc/UTC");
    } else {
        return minitz.tp(pd.getFullYear(), pd.getMonth() + 1, pd.getDate(), pd.getHours(), pd.getMinutes(), pd.getSeconds(), tz);
    }
}
minitz.minitz = minitz;
function CronOptions(options) {
    if (options === void 0) {
        options = {};
    }
    delete options.name;
    options.legacyMode = options.legacyMode === void 0 ? true : options.legacyMode;
    options.paused = options.paused === void 0 ? false : options.paused;
    options.maxRuns = options.maxRuns === void 0 ? Infinity : options.maxRuns;
    options.catch = options.catch === void 0 ? false : options.catch;
    options.interval = options.interval === void 0 ? 0 : parseInt(options.interval, 10);
    options.utcOffset = options.utcOffset === void 0 ? void 0 : parseInt(options.utcOffset, 10);
    options.unref = options.unref === void 0 ? false : options.unref;
    if (options.startAt) {
        options.startAt = new CronDate(options.startAt, options.timezone);
    }
    if (options.stopAt) {
        options.stopAt = new CronDate(options.stopAt, options.timezone);
    }
    if (options.interval !== null) {
        if (isNaN(options.interval)) {
            throw new Error("CronOptions: Supplied value for interval is not a number");
        } else if (options.interval < 0) {
            throw new Error("CronOptions: Supplied value for interval can not be negative");
        }
    }
    if (options.utcOffset !== void 0) {
        if (isNaN(options.utcOffset)) {
            throw new Error("CronOptions: Invalid value passed for utcOffset, should be number representing minutes offset from UTC.");
        } else if (options.utcOffset < -870 || options.utcOffset > 870) {
            throw new Error("CronOptions: utcOffset out of bounds.");
        }
        if (options.utcOffset !== void 0 && options.timezone) {
            throw new Error("CronOptions: Combining 'utcOffset' with 'timezone' is not allowed.");
        }
    }
    if (options.unref !== true && options.unref !== false) {
        throw new Error("CronOptions: Unref should be either true, false or undefined(false).");
    }
    return options;
}
const DaysOfMonth = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const RecursionSteps = [
    [
        "month",
        "year",
        0
    ],
    [
        "day",
        "month",
        -1
    ],
    [
        "hour",
        "day",
        0
    ],
    [
        "minute",
        "hour",
        0
    ],
    [
        "second",
        "minute",
        0
    ]
];
function CronDate(d, tz) {
    this.tz = tz;
    if (d && d instanceof Date) {
        if (!isNaN(d)) {
            this.fromDate(d);
        } else {
            throw new TypeError("CronDate: Invalid date passed to CronDate constructor");
        }
    } else if (d === void 0) {
        this.fromDate(new Date());
    } else if (d && typeof d === "string") {
        this.fromString(d);
    } else if (d instanceof CronDate) {
        this.fromCronDate(d);
    } else {
        throw new TypeError("CronDate: Invalid type (" + typeof d + ") passed to CronDate constructor");
    }
}
CronDate.prototype.fromDate = function(inDate) {
    if (this.tz !== void 0) {
        if (typeof this.tz === "number") {
            this.ms = inDate.getUTCMilliseconds();
            this.second = inDate.getUTCSeconds();
            this.minute = inDate.getUTCMinutes() + this.tz;
            this.hour = inDate.getUTCHours();
            this.day = inDate.getUTCDate();
            this.month = inDate.getUTCMonth();
            this.year = inDate.getUTCFullYear();
            this.apply();
        } else {
            const d = minitz.toTZ(inDate, this.tz);
            this.ms = inDate.getMilliseconds();
            this.second = d.s;
            this.minute = d.i;
            this.hour = d.h;
            this.day = d.d;
            this.month = d.m - 1;
            this.year = d.y;
        }
    } else {
        this.ms = inDate.getMilliseconds();
        this.second = inDate.getSeconds();
        this.minute = inDate.getMinutes();
        this.hour = inDate.getHours();
        this.day = inDate.getDate();
        this.month = inDate.getMonth();
        this.year = inDate.getFullYear();
    }
};
CronDate.prototype.fromCronDate = function(d) {
    this.tz = d.tz;
    this.year = d.year;
    this.month = d.month;
    this.day = d.day;
    this.hour = d.hour;
    this.minute = d.minute;
    this.second = d.second;
    this.ms = d.ms;
};
CronDate.prototype.apply = function() {
    if (this.month > 11 || this.day > DaysOfMonth[this.month] || this.hour > 59 || this.minute > 59 || this.second > 59 || this.hour < 0 || this.minute < 0 || this.second < 0) {
        const d = new Date(Date.UTC(this.year, this.month, this.day, this.hour, this.minute, this.second, this.ms));
        this.ms = d.getUTCMilliseconds();
        this.second = d.getUTCSeconds();
        this.minute = d.getUTCMinutes();
        this.hour = d.getUTCHours();
        this.day = d.getUTCDate();
        this.month = d.getUTCMonth();
        this.year = d.getUTCFullYear();
        return true;
    } else {
        return false;
    }
};
CronDate.prototype.fromString = function(str) {
    return this.fromDate(minitz.fromTZISO(str, this.tz));
};
CronDate.prototype.findNext = function(options, target, pattern, offset) {
    const originalTarget = this[target];
    let lastDayOfMonth;
    if (pattern.lastDayOfMonth || pattern.lastWeekdayOfMonth) {
        if (this.month !== 1) {
            lastDayOfMonth = DaysOfMonth[this.month];
        } else {
            lastDayOfMonth = new Date(Date.UTC(this.year, this.month + 1, 0, 0, 0, 0, 0)).getUTCDate();
        }
    }
    const fDomWeekDay = !pattern.starDOW && target == "day" ? new Date(Date.UTC(this.year, this.month, 1, 0, 0, 0, 0)).getUTCDay() : undefined;
    for(let i = this[target] + offset; i < pattern[target].length; i++){
        let match = pattern[target][i];
        if (target === "day" && pattern.lastDayOfMonth && i - offset == lastDayOfMonth) {
            match = true;
        }
        if (target === "day" && !pattern.starDOW) {
            let dowMatch = pattern.dayOfWeek[(fDomWeekDay + (i - offset - 1)) % 7];
            if (dowMatch && pattern.lastWeekdayOfMonth) {
                dowMatch = dowMatch && i - offset > lastDayOfMonth - 7;
            }
            if (options.legacyMode && !pattern.starDOM) {
                match = match || dowMatch;
            } else {
                match = match && dowMatch;
            }
        }
        if (match) {
            this[target] = i - offset;
            return originalTarget !== this[target] ? 2 : 1;
        }
    }
    return 3;
};
CronDate.prototype.recurse = function(pattern, options, doing) {
    const res = this.findNext(options, RecursionSteps[doing][0], pattern, RecursionSteps[doing][2]);
    if (res > 1) {
        let resetLevel = doing + 1;
        while(resetLevel < RecursionSteps.length){
            this[RecursionSteps[resetLevel][0]] = -RecursionSteps[resetLevel][2];
            resetLevel++;
        }
        if (res === 3) {
            this[RecursionSteps[doing][1]]++;
            this[RecursionSteps[doing][0]] = -RecursionSteps[doing][2];
            this.apply();
            return this.recurse(pattern, options, 0);
        } else if (this.apply()) {
            return this.recurse(pattern, options, doing - 1);
        }
    }
    doing += 1;
    if (doing >= RecursionSteps.length) {
        return this;
    } else if (this.year >= 3000) {
        return null;
    } else {
        return this.recurse(pattern, options, doing);
    }
};
CronDate.prototype.increment = function(pattern, options, hasPreviousRun) {
    this.second += options.interval > 1 && hasPreviousRun ? options.interval : 1;
    this.ms = 0;
    this.apply();
    return this.recurse(pattern, options, 0);
};
CronDate.prototype.getDate = function(internal) {
    if (internal || this.tz === void 0) {
        return new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.ms);
    } else {
        if (typeof this.tz === "number") {
            return new Date(Date.UTC(this.year, this.month, this.day, this.hour, this.minute - this.tz, this.second, this.ms));
        } else {
            return minitz(this.year, this.month + 1, this.day, this.hour, this.minute, this.second, this.tz);
        }
    }
};
CronDate.prototype.getTime = function() {
    return this.getDate().getTime();
};
function CronPattern(pattern, timezone) {
    this.pattern = pattern;
    this.timezone = timezone;
    this.second = Array(60).fill(0);
    this.minute = Array(60).fill(0);
    this.hour = Array(24).fill(0);
    this.day = Array(31).fill(0);
    this.month = Array(12).fill(0);
    this.dayOfWeek = Array(8).fill(0);
    this.lastDayOfMonth = false;
    this.lastWeekdayOfMonth = false;
    this.starDOM = false;
    this.starDOW = false;
    this.parse();
}
CronPattern.prototype.parse = function() {
    if (!(typeof this.pattern === "string" || this.pattern.constructor === String)) {
        throw new TypeError("CronPattern: Pattern has to be of type string.");
    }
    if (this.pattern.indexOf("@") >= 0) this.pattern = this.handleNicknames(this.pattern).trim();
    const parts = this.pattern.replace(/\s+/g, " ").split(" ");
    if (parts.length < 5 || parts.length > 6) {
        throw new TypeError("CronPattern: invalid configuration format ('" + this.pattern + "'), exacly five or six space separated parts required.");
    }
    if (parts.length === 5) {
        parts.unshift("0");
    }
    if (parts[3].indexOf("L") >= 0) {
        parts[3] = parts[3].replace("L", "");
        this.lastDayOfMonth = true;
    }
    if (parts[5].indexOf("L") >= 0) {
        parts[5] = parts[5].replace("L", "");
        this.lastWeekdayOfMonth = true;
    }
    if (parts[3] == "*") {
        this.starDOM = true;
    }
    if (parts[4].length >= 3) parts[4] = this.replaceAlphaMonths(parts[4]);
    if (parts[5].length >= 3) parts[5] = this.replaceAlphaDays(parts[5]);
    if (parts[5] == "*") {
        this.starDOW = true;
    }
    if (this.pattern.indexOf("?") >= 0) {
        const initDate = new CronDate(new Date(), this.timezone).getDate(true);
        parts[0] = parts[0].replace("?", initDate.getSeconds());
        parts[1] = parts[1].replace("?", initDate.getMinutes());
        parts[2] = parts[2].replace("?", initDate.getHours());
        if (!this.starDOM) parts[3] = parts[3].replace("?", initDate.getDate());
        parts[4] = parts[4].replace("?", initDate.getMonth() + 1);
        if (!this.starDOW) parts[5] = parts[5].replace("?", initDate.getDay());
    }
    this.throwAtIllegalCharacters(parts);
    this.partToArray("second", parts[0], 0);
    this.partToArray("minute", parts[1], 0);
    this.partToArray("hour", parts[2], 0);
    this.partToArray("day", parts[3], -1);
    this.partToArray("month", parts[4], -1);
    this.partToArray("dayOfWeek", parts[5], 0);
    if (this.dayOfWeek[7]) {
        this.dayOfWeek[0] = 1;
    }
};
CronPattern.prototype.partToArray = function(type, conf, valueIndexOffset) {
    const arr = this[type];
    if (conf === "*") return arr.fill(1);
    const split = conf.split(",");
    if (split.length > 1) {
        for(let i = 0; i < split.length; i++){
            this.partToArray(type, split[i], valueIndexOffset);
        }
    } else if (conf.indexOf("-") !== -1 && conf.indexOf("/") !== -1) {
        this.handleRangeWithStepping(conf, type, valueIndexOffset);
    } else if (conf.indexOf("-") !== -1) {
        this.handleRange(conf, type, valueIndexOffset);
    } else if (conf.indexOf("/") !== -1) {
        this.handleStepping(conf, type, valueIndexOffset);
    } else if (conf !== "") {
        this.handleNumber(conf, type, valueIndexOffset);
    }
};
CronPattern.prototype.throwAtIllegalCharacters = function(parts) {
    const reValidCron = /[^/*0-9,-]+/;
    for(let i = 0; i < parts.length; i++){
        if (reValidCron.test(parts[i])) {
            throw new TypeError("CronPattern: configuration entry " + i + " (" + parts[i] + ") contains illegal characters.");
        }
    }
};
CronPattern.prototype.handleNumber = function(conf, type, valueIndexOffset) {
    const i = parseInt(conf, 10) + valueIndexOffset;
    if (isNaN(i)) {
        throw new TypeError("CronPattern: " + type + " is not a number: '" + conf + "'");
    }
    if (i < 0 || i >= this[type].length) {
        throw new TypeError("CronPattern: " + type + " value out of range: '" + conf + "'");
    }
    this[type][i] = 1;
};
CronPattern.prototype.handleRangeWithStepping = function(conf, type, valueIndexOffset) {
    const matches = conf.match(/^(\d+)-(\d+)\/(\d+)$/);
    if (matches === null) throw new TypeError("CronPattern: Syntax error, illegal range with stepping: '" + conf + "'");
    let [, lower, upper, steps] = matches;
    lower = parseInt(lower, 10) + valueIndexOffset;
    upper = parseInt(upper, 10) + valueIndexOffset;
    steps = parseInt(steps, 10);
    if (isNaN(lower)) throw new TypeError("CronPattern: Syntax error, illegal lower range (NaN)");
    if (isNaN(upper)) throw new TypeError("CronPattern: Syntax error, illegal upper range (NaN)");
    if (isNaN(steps)) throw new TypeError("CronPattern: Syntax error, illegal stepping: (NaN)");
    if (steps === 0) throw new TypeError("CronPattern: Syntax error, illegal stepping: 0");
    if (steps > this[type].length) throw new TypeError("CronPattern: Syntax error, steps cannot be greater than maximum value of part (" + this[type].length + ")");
    if (lower < 0 || upper >= this[type].length) throw new TypeError("CronPattern: Value out of range: '" + conf + "'");
    if (lower > upper) throw new TypeError("CronPattern: From value is larger than to value: '" + conf + "'");
    for(let i = lower; i <= upper; i += steps){
        this[type][i] = 1;
    }
};
CronPattern.prototype.handleRange = function(conf, type, valueIndexOffset) {
    const split = conf.split("-");
    if (split.length !== 2) {
        throw new TypeError("CronPattern: Syntax error, illegal range: '" + conf + "'");
    }
    const lower = parseInt(split[0], 10) + valueIndexOffset, upper = parseInt(split[1], 10) + valueIndexOffset;
    if (isNaN(lower)) {
        throw new TypeError("CronPattern: Syntax error, illegal lower range (NaN)");
    } else if (isNaN(upper)) {
        throw new TypeError("CronPattern: Syntax error, illegal upper range (NaN)");
    }
    if (lower < 0 || upper >= this[type].length) {
        throw new TypeError("CronPattern: Value out of range: '" + conf + "'");
    }
    if (lower > upper) {
        throw new TypeError("CronPattern: From value is larger than to value: '" + conf + "'");
    }
    for(let i = lower; i <= upper; i++){
        this[type][i] = 1;
    }
};
CronPattern.prototype.handleStepping = function(conf, type) {
    const split = conf.split("/");
    if (split.length !== 2) {
        throw new TypeError("CronPattern: Syntax error, illegal stepping: '" + conf + "'");
    }
    let start = 0;
    if (split[0] !== "*") {
        start = parseInt(split[0], 10);
    }
    const steps = parseInt(split[1], 10);
    if (isNaN(steps)) throw new TypeError("CronPattern: Syntax error, illegal stepping: (NaN)");
    if (steps === 0) throw new TypeError("CronPattern: Syntax error, illegal stepping: 0");
    if (steps > this[type].length) throw new TypeError("CronPattern: Syntax error, max steps for part is (" + this[type].length + ")");
    for(let i = start; i < this[type].length; i += steps){
        this[type][i] = 1;
    }
};
CronPattern.prototype.replaceAlphaDays = function(conf) {
    return conf.replace(/-sun/gi, "-7").replace(/sun/gi, "0").replace(/mon/gi, "1").replace(/tue/gi, "2").replace(/wed/gi, "3").replace(/thu/gi, "4").replace(/fri/gi, "5").replace(/sat/gi, "6");
};
CronPattern.prototype.replaceAlphaMonths = function(conf) {
    return conf.replace(/jan/gi, "1").replace(/feb/gi, "2").replace(/mar/gi, "3").replace(/apr/gi, "4").replace(/may/gi, "5").replace(/jun/gi, "6").replace(/jul/gi, "7").replace(/aug/gi, "8").replace(/sep/gi, "9").replace(/oct/gi, "10").replace(/nov/gi, "11").replace(/dec/gi, "12");
};
CronPattern.prototype.handleNicknames = function(pattern) {
    const cleanPattern = pattern.trim().toLowerCase();
    if (cleanPattern === "@yearly" || cleanPattern === "@annually") {
        return "0 0 1 1 *";
    } else if (cleanPattern === "@monthly") {
        return "0 0 1 * *";
    } else if (cleanPattern === "@weekly") {
        return "0 0 * * 0";
    } else if (cleanPattern === "@daily") {
        return "0 0 * * *";
    } else if (cleanPattern === "@hourly") {
        return "0 * * * *";
    } else {
        return pattern;
    }
};
function isFunction(v) {
    return Object.prototype.toString.call(v) === "[object Function]" || "function" === typeof v || v instanceof Function;
}
function unrefTimer(timer) {
    if (typeof Deno !== "undefined" && typeof Deno.unrefTimer !== "undefined") {
        Deno.unrefTimer(timer);
    } else if (timer && typeof timer.unref !== "undefined") {
        timer.unref();
    }
}
const maxDelay = Math.pow(2, 32 - 1) - 1;
const scheduledJobs = [];
function Cron(pattern, fnOrOptions1, fnOrOptions2) {
    if (!(this instanceof Cron)) {
        return new Cron(pattern, fnOrOptions1, fnOrOptions2);
    }
    let options, func;
    if (isFunction(fnOrOptions1)) {
        func = fnOrOptions1;
    } else if (typeof fnOrOptions1 === "object") {
        options = fnOrOptions1;
    } else if (fnOrOptions1 !== void 0) {
        throw new Error("Cron: Invalid argument passed for optionsIn. Should be one of function, or object (options).");
    }
    if (isFunction(fnOrOptions2)) {
        func = fnOrOptions2;
    } else if (typeof fnOrOptions2 === "object") {
        options = fnOrOptions2;
    } else if (fnOrOptions2 !== void 0) {
        throw new Error("Cron: Invalid argument passed for funcIn. Should be one of function, or object (options).");
    }
    this.name = options ? options.name : void 0;
    this.options = CronOptions(options);
    this._states = {
        kill: false,
        blocking: false,
        previousRun: void 0,
        currentRun: void 0,
        once: void 0,
        currentTimeout: void 0,
        maxRuns: options ? options.maxRuns : void 0,
        paused: options ? options.paused : false,
        pattern: void 0
    };
    if (pattern && (pattern instanceof Date || typeof pattern === "string" && pattern.indexOf(":") > 0)) {
        this._states.once = new CronDate(pattern, this.options.timezone || this.options.utcOffset);
    } else {
        this._states.pattern = new CronPattern(pattern, this.options.timezone);
    }
    if (this.name) {
        const existing = scheduledJobs.find((j)=>j.name === this.name);
        if (existing) {
            throw new Error("Cron: Tried to initialize new named job '" + this.name + "', but name already taken.");
        } else {
            scheduledJobs.push(this);
        }
    }
    if (func !== void 0) {
        this.fn = func;
        this.schedule();
    }
    return this;
}
Cron.prototype.nextRun = function(prev) {
    const next = this._next(prev);
    return next ? next.getDate() : null;
};
Cron.prototype.nextRuns = function(n, previous) {
    if (n > this._states.maxRuns) {
        n = this._states.maxRuns;
    }
    const enumeration = [];
    let prev = previous || this._states.currentRun;
    while(n-- && (prev = this.nextRun(prev))){
        enumeration.push(prev);
    }
    return enumeration;
};
Cron.prototype.getPattern = function() {
    return this._states.pattern ? this._states.pattern.pattern : void 0;
};
Cron.prototype.isRunning = function() {
    const msLeft = this.msToNext(this._states.currentRun);
    const isRunning = !this._states.paused;
    const isScheduled = this.fn !== void 0;
    const notIsKilled = !this._states.kill;
    return isRunning && isScheduled && notIsKilled && msLeft !== null;
};
Cron.prototype.isStopped = function() {
    return this._states.kill;
};
Cron.prototype.isBusy = function() {
    return this._states.blocking;
};
Cron.prototype.currentRun = function() {
    return this._states.currentRun ? this._states.currentRun.getDate() : null;
};
Cron.prototype.previousRun = function() {
    return this._states.previousRun ? this._states.previousRun.getDate() : null;
};
Cron.prototype.msToNext = function(prev) {
    const next = this._next(prev);
    prev = new CronDate(prev, this.options.timezone || this.options.utcOffset);
    if (next) {
        return next.getTime(true) - prev.getTime(true);
    } else {
        return null;
    }
};
Cron.prototype.stop = function() {
    this._states.kill = true;
    if (this._states.currentTimeout) {
        clearTimeout(this._states.currentTimeout);
    }
    const jobIndex = scheduledJobs.indexOf(this);
    if (jobIndex >= 0) {
        scheduledJobs.splice(jobIndex, 1);
    }
};
Cron.prototype.pause = function() {
    this._states.paused = true;
    return !this._states.kill;
};
Cron.prototype.resume = function() {
    this._states.paused = false;
    return !this._states.kill;
};
Cron.prototype.schedule = function(func, partial) {
    if (func && this.fn) {
        throw new Error("Cron: It is not allowed to schedule two functions using the same Croner instance.");
    } else if (func) {
        this.fn = func;
    }
    let waitMs = this.msToNext(partial ? partial : this._states.currentRun);
    const target = this.nextRun(partial ? partial : this._states.currentRun);
    if (waitMs === null || target === null) return this;
    if (waitMs > maxDelay) {
        waitMs = maxDelay;
    }
    this._states.currentTimeout = setTimeout(()=>this._checkTrigger(target), waitMs);
    if (this._states.currentTimeout && this.options.unref) {
        unrefTimer(this._states.currentTimeout);
    }
    return this;
};
Cron.prototype._trigger = async function(initiationDate) {
    this._states.blocking = true;
    this._states.currentRun = new CronDate(void 0, this.options.timezone || this.options.utcOffset);
    if (this.options.catch) {
        try {
            await this.fn(this, this.options.context);
        } catch (_e) {
            if (isFunction(this.options.catch)) {
                this.options.catch(_e, this);
            }
        }
    } else {
        await this.fn(this, this.options.context);
    }
    this._states.previousRun = new CronDate(initiationDate, this.options.timezone || this.options.utcOffset);
    this._states.blocking = false;
};
Cron.prototype.trigger = async function() {
    await this._trigger();
};
Cron.prototype._checkTrigger = function(target) {
    const now = new Date(), shouldRun = !this._states.paused && now.getTime() >= target, isBlocked = this._states.blocking && this.options.protect;
    if (shouldRun && !isBlocked) {
        this._states.maxRuns--;
        this._trigger();
    } else {
        if (shouldRun && isBlocked && isFunction(this.options.protect)) {
            setTimeout(()=>this.options.protect(this), 0);
        }
    }
    this.schedule(undefined, now);
};
Cron.prototype._next = function(prev) {
    const hasPreviousRun = prev || this._states.currentRun ? true : false;
    prev = new CronDate(prev, this.options.timezone || this.options.utcOffset);
    if (this.options.startAt && prev && prev.getTime() < this.options.startAt.getTime()) {
        prev = this.options.startAt;
    }
    const nextRun = this._states.once || new CronDate(prev, this.options.timezone || this.options.utcOffset).increment(this._states.pattern, this.options, hasPreviousRun);
    if (this._states.once && this._states.once.getTime() <= prev.getTime()) {
        return null;
    } else if (nextRun === null || this._states.maxRuns <= 0 || this._states.kill || this.options.stopAt && nextRun.getTime() >= this.options.stopAt.getTime()) {
        return null;
    } else {
        return nextRun;
    }
};
Cron.Cron = Cron;
Cron.scheduledJobs = scheduledJobs;
function Navbar(props) {
    return p1("nav", {
        class: "navbar",
        children: [
            p1("div", {
                class: "navbar-content d-none d-lg-flex",
                children: p1("button", {
                    id: "toggle-sidebar-btn",
                    class: "btn btn-action",
                    type: "button",
                    onClick: ()=>halfmoon.toggleSidebar(),
                    children: p1("i", {
                        class: "fa-solid fa-gear"
                    })
                })
            }),
            p1("ul", {
                class: "navbar-nav",
                children: [
                    p1("li", {
                        class: "nav-item d-none d-lg-flex" + (props.page === "index" ? " active" : ""),
                        children: p1("a", {
                            class: "nav-link",
                            href: "/",
                            children: p1("span", {
                                "data-t-key": "common.nav.index",
                                lang: props.lang,
                                children: "Overview"
                            })
                        })
                    }),
                    p1("li", {
                        class: "nav-item hidden-lg-and-up" + (props.page === "index" ? " active" : ""),
                        children: [
                            !props.country && p1("a", {
                                class: "nav-link pl-0",
                                href: "/",
                                children: p1("i", {
                                    class: "fa-solid fa-bolt"
                                })
                            }),
                            props.country && p1("a", {
                                class: "nav-link pl-0",
                                href: props.area ? "/" + props.country?.id : "/",
                                children: p1("i", {
                                    class: "fa fa-angle-left"
                                })
                            })
                        ]
                    }),
                    p1("li", {
                        class: "nav-item dropdown with-arrow",
                        children: [
                            p1("a", {
                                class: "nav-link",
                                "data-toggle": "dropdown",
                                id: "nav-link-dropdown-toggle",
                                children: [
                                    props.country && p1("span", {
                                        "data-t-key": "common.countries." + props.country.id,
                                        lang: props.lang,
                                        children: props.country.name
                                    }),
                                    !props.country && p1("span", {
                                        "data-t-key": "common.nav.country",
                                        lang: props.lang,
                                        children: "Land"
                                    }),
                                    p1("i", {
                                        class: "fa fa-angle-down ml-5",
                                        "aria-hidden": "true"
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "dropdown-menu dropdown-menu-left",
                                "aria-labelledby": "nav-link-dropdown-toggle",
                                children: countries && countries.map((c)=>p1("a", {
                                        class: "nav-link",
                                        href: "/" + c.id,
                                        children: p1("span", {
                                            "data-t-key": "common.countries." + c.id,
                                            lang: props.lang,
                                            children: c.name
                                        })
                                    }, c.id))
                            })
                        ]
                    }),
                    props.country?.areas && props.country?.areas.length > 1 && p1("li", {
                        class: "nav-item dropdown with-arrow hidden-lg-and-up",
                        children: [
                            p1("a", {
                                class: "nav-link",
                                "data-toggle": "dropdown",
                                id: "nav-link-dropdown-toggle",
                                children: [
                                    props.area && p1("span", {
                                        children: props.area.name
                                    }),
                                    !props.area && p1("span", {
                                        "data-t-key": "common.nav.area",
                                        lang: props.lang,
                                        children: "Elomr\xe5de"
                                    }),
                                    p1("i", {
                                        class: "fa fa-angle-down ml-5",
                                        "aria-hidden": "true"
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "dropdown-menu dropdown-menu-left",
                                "aria-labelledby": "nav-link-dropdown-toggle",
                                children: props.country.areas && props.country.areas.map((a)=>p1("a", {
                                        class: "nav-link",
                                        href: "/" + props.country?.id + "/" + a.name,
                                        children: p1("span", {
                                            children: a.name
                                        })
                                    }, a.id))
                            })
                        ]
                    }),
                    countries && countries.map((c)=>{
                        if (c.id === props.country?.id) return p1(L, {
                            children: c.areas && c.areas.length > 1 && c.areas.map((a)=>{
                                return p1("li", {
                                    class: "nav-item d-none d-lg-flex" + (props.page === a.id ? " active" : ""),
                                    children: p1("a", {
                                        class: "nav-link",
                                        href: "/" + c.id + "/" + a.name,
                                        children: a.name
                                    }, c.id)
                                });
                            })
                        });
                    }),
                    !props.country && p1("li", {
                        class: "nav-item" + (props.page === "homeassistant" ? " active" : ""),
                        children: p1("a", {
                            class: "nav-link",
                            href: "/homeassistant",
                            children: p1("span", {
                                children: "Home Assistant"
                            })
                        })
                    }),
                    p1("li", {
                        class: "nav-item" + (props.page === "help" ? " active" : ""),
                        children: p1("a", {
                            class: "nav-link",
                            href: "/help",
                            children: p1("span", {
                                "data-t-key": "common.nav.help",
                                lang: props.lang,
                                children: "Help"
                            })
                        })
                    })
                ]
            }),
            p1("div", {
                class: "navbar-content ml-auto hidden-lg-and-up",
                children: p1("button", {
                    id: "toggle-sidebar-btn",
                    class: "btn btn-action",
                    type: "button",
                    onClick: ()=>halfmoon.toggleSidebar(),
                    children: p1("i", {
                        class: "fa-solid fa-gear"
                    })
                })
            })
        ]
    });
}
function Table(props) {
    const setCurrencyStored = (u)=>{
        localStorage.setItem("sw_currency", u);
        props.setCurrency(u);
    };
    const setFactorStored = (f)=>{
        localStorage.setItem("sw_factor", f);
        props.setFactor(parseFloat(f));
    };
    const setExtraStored = (e)=>{
        localStorage.setItem("sw_extra", e);
        props.setExtra(parseFloat(e));
    };
    const setDecimalsStored = (e)=>{
        localStorage.setItem("sw_decimals", e);
        props.setDecimals(parseInt(e, 10));
    };
    return p1(L, {
        children: [
            p1("div", {
                class: "sidebar-content",
                children: [
                    p1("label", {
                        for: "currency",
                        "data-t-key": "common.customize.currency",
                        lang: props.lang,
                        children: "Valuta"
                    }),
                    p1("select", {
                        class: "form-control",
                        name: "currency",
                        disabled: !props.disabled,
                        value: props.currency,
                        onInput: (e)=>setCurrencyStored(e.target.value),
                        required: true,
                        children: [
                            p1("option", {
                                value: "SEK",
                                children: "SEK"
                            }),
                            p1("option", {
                                value: "NOK",
                                children: "NOK"
                            }),
                            p1("option", {
                                value: "EUR",
                                children: "EUR"
                            }),
                            p1("option", {
                                value: "DKK",
                                children: "DKK"
                            }),
                            p1("option", {
                                value: "PLN",
                                children: "PLN"
                            })
                        ]
                    })
                ]
            }),
            p1("div", {
                class: "sidebar-content",
                children: [
                    p1("label", {
                        for: "extra",
                        "data-t-key": "common.customize.fees",
                        lang: props.lang,
                        children: "Avgifter"
                    }),
                    p1("input", {
                        class: "form-control",
                        type: "text",
                        name: "extra",
                        disabled: !props.disabled,
                        value: props.extra,
                        onChange: (e)=>setExtraStored(e.target.value),
                        placeholder: "Totala avgifter exklsive moms"
                    })
                ]
            }),
            p1("div", {
                class: "sidebar-content",
                children: [
                    p1("label", {
                        for: "factor",
                        "data-toggle": "tooltip",
                        "data-t-key": "common.customize.factor",
                        lang: props.lang,
                        children: "Faktor"
                    }),
                    p1("input", {
                        class: "form-control",
                        type: "text",
                        name: "factor",
                        disabled: !props.disabled,
                        value: props.factor,
                        onChange: (e)=>setFactorStored(e.target.value),
                        placeholder: "Faktor (t.ex. 1.25 f\xf6r 25% moms)"
                    })
                ]
            }),
            p1("div", {
                class: "sidebar-content",
                children: [
                    p1("label", {
                        for: "decimals",
                        "data-t-key": "common.customize.decimals",
                        lang: props.lang,
                        children: "Decimaler"
                    }),
                    p1("input", {
                        class: "form-control",
                        type: "text",
                        name: "decimals",
                        value: props.decimals,
                        disabled: !props.disabled,
                        onChange: (e)=>setDecimalsStored(e.target.value),
                        placeholder: "Number of decimals to show"
                    })
                ]
            })
        ]
    });
}
function Sidebar(props) {
    return p1("div", {
        class: "sidebar",
        children: p1("div", {
            class: "sidebar-menu",
            children: [
                p1("div", {
                    class: "sidebar-content custom-switch pr-10",
                    children: [
                        p1("input", {
                            type: "checkbox",
                            checked: props.priceFactor,
                            id: "price-selector-sb",
                            onInput: (e)=>props.setPriceFactor(e.target.checked)
                        }),
                        p1("label", {
                            for: "price-selector-sb",
                            children: p1("i", {
                                children: p1("small", {
                                    "data-t-key": "common.nav.actual_price_instead",
                                    lang: props.lang,
                                    children: "Actual price instead of spot price"
                                })
                            })
                        })
                    ]
                }),
                p1("div", {
                    class: "sidebar-content",
                    children: [
                        p1("h5", {
                            class: "sidebar-title",
                            "data-t-key": "common.customize.title",
                            lang: props.lang,
                            children: "Customize price"
                        }),
                        p1("div", {
                            class: "sidebar-divider"
                        }),
                        p1(Table, {
                            ...props,
                            disabled: props.priceFactor
                        })
                    ]
                })
            ]
        })
    });
}
const baseChart = {
    chart: {
        foreColor: "#ccc",
        toolbar: {
            show: false
        },
        height: 350,
        animations: {
            enabled: false
        }
    },
    yaxis: {
        min: 0,
        forceNiceScale: true
    },
    xaxis: {
        type: "datetime",
        labels: {
            datetimeUTC: false
        }
    },
    legend: {
        show: true
    },
    stroke: {
        width: 3,
        curve: "stepline"
    },
    dataLabels: {
        enabled: false
    },
    tooltip: {
        theme: "dark",
        followCursor: true,
        x: {
            format: "yyyy MM dd HH:mm"
        }
    },
    grid: {
        borderColor: "#535A6C"
    }
};
const areaViewChartOptions = Object.assign(structuredClone(baseChart), {
    colors: [
        "rgba(24, 255, 124, 1.0)",
        "rgba(96, 96, 196, 1.0)"
    ],
    fill: {
        type: "gradient",
        gradient: {
            shade: "dark",
            gradientToColors: [
                "#FD4835"
            ],
            shadeIntensity: 1,
            type: "vertical",
            opacityFrom: 1,
            opacityTo: 1,
            stops: [
                0,
                100
            ]
        }
    },
    xaxis: {
        type: "category",
        tickAmount: 6
    }
});
const formatHhMm = (d)=>{
    const resolvedDate = typeof d === "number" ? new Date(d) : d instanceof Date ? d : new Date(Date.parse(d));
    const hours = ("" + resolvedDate.getHours()).padStart(2, "0"), minutes = ("" + resolvedDate.getMinutes()).padStart(2, "0");
    return `${hours}:${minutes}`;
};
const generateUrl = (area, startDate, endDate, interval, period)=>{
    const params = {
        area: area,
        period: period ? period : "hourly",
        startDate: startDate.toLocaleDateString("sv-SE"),
        endDate: endDate.toLocaleDateString("sv-SE"),
        interval: interval
    };
    const url = window.location || new URL("https://spot.56k.guru/"), inPath = "api/v2/spot", fullUrl = url.protocol + "//" + url.host + "/" + (inPath ? inPath : "") + "?" + new URLSearchParams(params).toString();
    return fullUrl;
};
const langFromUrl = (url)=>{
    if (url?.pathname?.startsWith("/sv")) {
        return "sv";
    } else if (url?.pathname?.startsWith("/no")) {
        return "no";
    } else if (url?.pathname?.startsWith("/fi")) {
        return "fi";
    } else if (url?.pathname?.startsWith("/dk")) {
        return "dk";
    } else if (url?.pathname?.startsWith("/es")) {
        return "es";
    } else if (url?.pathname?.startsWith("/fr")) {
        return "fr";
    } else if (url?.pathname?.startsWith("/de") || url?.pathname?.startsWith("/at") || url?.pathname?.startsWith("/ch")) {
        return "de";
    } else {
        return "en";
    }
};
function SingleAreaChart(props) {
    const [randomChartId] = P2((Math.random() * 10000).toFixed(0)), [chartElm, setChartElm] = P2();
    const renderChart = (seriesInput, props)=>{
        const series = [];
        for (const s of seriesInput){
            series.push({
                data: s.data.map((e)=>{
                    return {
                        x: formatHhMm(e.time),
                        y: processPrice(e.price, props)
                    };
                }),
                name: s.name
            });
        }
        const chartOptions = {
            ...areaViewChartOptions
        };
        chartOptions.series = series;
        const hourNow = new Date();
        hourNow.setMinutes(0);
        chartOptions.annotations = {
            xaxis: [
                {
                    x: formatHhMm(hourNow),
                    seriesIndex: 0,
                    borderColor: "#ff7Da0",
                    label: {
                        style: {
                            border: "ff7Da0",
                            color: "#EEE",
                            background: "#234"
                        },
                        text: "Nu"
                    }
                }
            ]
        };
        if (chartElm && chartElm.destroy) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    const rsToday = applyExchangeRate(props.area?.dataToday || [], props.er, props.currency), rsTomorrow = applyExchangeRate(props.area?.dataTomorrow || [], props.er, props.currency);
    j1(()=>{
        if (rsToday && rsTomorrow) {
            renderChart([
                {
                    name: lang_svc.t("common.chart.today", {
                        lang: props.lang
                    }),
                    data: rsToday
                },
                {
                    name: lang_svc.t("common.chart.tomorrow", {
                        lang: props.lang
                    }),
                    data: rsTomorrow
                }
            ], props);
        } else if (rsToday) {
            renderChart([
                {
                    name: lang_svc.t("common.chart.today", {
                        lang: props.lang
                    }),
                    data: rsToday
                }
            ], props);
        }
    }, [
        props.priceFactor,
        props.currency
    ]);
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top bg",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            "data-t-key": "common.chart.today_and_tomorrow",
                            lang: props.lang,
                            children: "Today and tomorrow"
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark text-center chart",
                        id: "chart_" + randomChartId
                    })
                ]
            })
        })
    });
}
const areaViewMonthChartOptions = Object.assign(structuredClone(baseChart), {
    colors: [
        "rgba(24, 255, 124, 1.0)",
        "rgba(79, 96, 255, 0.7)"
    ],
    fill: {
        type: "gradient",
        gradient: {
            shade: "dark",
            gradientToColors: [
                "#FD4835"
            ],
            shadeIntensity: 1,
            type: "vertical",
            opacityFrom: 1,
            opacityTo: 1,
            stops: [
                0,
                100
            ]
        }
    },
    stroke: {
        width: 2,
        curve: "smooth"
    }
});
areaViewMonthChartOptions.tooltip.x.format = "yyyy MM dd";
function SingleAreaMonthChart(props) {
    const [rsMonth, setRSMonth] = P2(), [rsComparison, setRSComparison] = P2(), [randomChartId] = P2((Math.random() * 10000).toFixed(0)), [chartElm, setChartElm] = P2();
    const [comparison, setComparison] = P2();
    const getData30d = async (area, date)=>{
        const startDate = new Date(date.getTime() - 30 * 24 * 60 * 60 * 1000), endDate = new Date(new Date(date).setDate(date.getDate() + 1));
        const response = await fetch(generateUrl(area, startDate, endDate, props.country.interval || "PT60M", "daily"));
        const resultSet = await response.json();
        return resultSet.data;
    };
    const renderChart = (seriesInput, props)=>{
        const series = [];
        for (const s of seriesInput){
            series.push({
                data: s.data.map((e)=>{
                    return {
                        x: e.time,
                        y: processPrice(e.price, props)
                    };
                }),
                name: s.name
            });
        }
        const chartOptions = {
            ...areaViewMonthChartOptions
        };
        chartOptions.series = series;
        if (seriesInput.length > 1) chartOptions.fill = {};
        const dateMow = new Date();
        dateMow.setHours(0, 0, 0, 0);
        chartOptions.annotations = {
            xaxis: [
                {
                    x: dateMow.getTime(),
                    seriesIndex: 0,
                    borderColor: "#ff7Da0",
                    label: {
                        style: {
                            border: "ff7Da0",
                            color: "#EEE",
                            background: "#234"
                        },
                        text: "Nu"
                    }
                }
            ]
        };
        if (chartElm) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    const tryGetData = async ()=>{
        if (!rsMonth && props.area) {
            let dataMonth = await getData30d(props.area.name, new Date(Date.parse(props.date)));
            dataMonth = applyExchangeRate(dataMonth, props.er, props.currency);
            setRSMonth(dataMonth);
        }
        if (comparison) {
            let dataMonth = await getData30d(comparison, new Date(Date.parse(props.date)));
            dataMonth = applyExchangeRate(dataMonth, props.er, props.currency);
            setRSComparison(dataMonth);
        }
    };
    j1(()=>{
        tryGetData();
    }, []);
    j1(()=>{
        tryGetData();
    }, [
        comparison
    ]);
    j1(()=>{
        if (rsMonth && comparison && rsComparison) {
            renderChart([
                {
                    name: props.area?.name || "",
                    data: rsMonth
                },
                {
                    name: comparison,
                    data: rsComparison
                }
            ], props);
        } else if (rsMonth) {
            renderChart([
                {
                    name: props.area?.name || "",
                    data: rsMonth
                }
            ], props);
        }
    }, [
        rsMonth,
        rsComparison,
        props.priceFactor
    ]);
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top bg pr-10",
                        children: p1("div", {
                            class: "row",
                            children: [
                                p1("div", {
                                    class: "col col-lg-9 card-title font-size-18",
                                    children: p1("h2", {
                                        class: "card-title font-size-18 m-0 text-left",
                                        "data-t-key": "common.overview.thirty_day_chart",
                                        lang: props.lang,
                                        children: "30 days history"
                                    })
                                }),
                                p1("div", {
                                    class: "col col-lg-3 text-right pr-0",
                                    children: p1("select", {
                                        class: "form-control -control-sm",
                                        id: "select-compare",
                                        name: "select-compare",
                                        onChange: (e)=>setComparison(e.target.value),
                                        children: [
                                            p1("option", {
                                                value: "",
                                                selected: true,
                                                disabled: true,
                                                "data-t-key": "common.chart.compare_to",
                                                lang: props.lang,
                                                children: "J\xe4mf\xf6r med"
                                            }),
                                            countries.map((c)=>p1(L, {
                                                    children: c.areas.map((a)=>p1(L, {
                                                            children: a.name != props.area?.name && p1(L, {
                                                                children: p1("option", {
                                                                    value: a.name,
                                                                    children: [
                                                                        a.name,
                                                                        " - ",
                                                                        a.long
                                                                    ]
                                                                })
                                                            })
                                                        }))
                                                }))
                                        ]
                                    })
                                })
                            ]
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark text-center chart",
                        id: "chart_" + randomChartId
                    })
                ]
            })
        })
    });
}
const productionTodayChartOptions = Object.assign(structuredClone(baseChart), {
    fill: {
        type: "solid",
        colors: [
            "#1890FF",
            "#E0FF18",
            "#18FF7C",
            ,
            "#E819FF",
            "#E01847"
        ],
        opacity: 0.75
    }
});
productionTodayChartOptions.stroke.width = 0;
productionTodayChartOptions.yaxis.max = (max)=>max > 0 ? max : 0;
productionTodayChartOptions.yaxis.min = (min)=>min < 0 ? min : 0;
function ProductionTodayChart(props) {
    const [chartElm, setChartElm] = P2(), [randomChartId] = P2((Math.random() * 10000).toFixed(0));
    const renderChart = (seriesInput, props)=>{
        const series = [];
        series.push({
            data: seriesInput.map((e)=>{
                return {
                    x: e[0],
                    y: e[1]
                };
            }),
            name: "net_production",
            type: 'bar'
        });
        const chartOptions = {
            ...productionTodayChartOptions
        };
        chartOptions.series = series;
        const hourNow = new Date();
        hourNow.setMinutes(0);
        chartOptions.annotations = {
            yaxis: [
                {
                    y: 0,
                    strokeDashArray: 0,
                    borderColor: '#CCC',
                    borderWidth: 3,
                    opacity: 0.9
                }
            ]
        };
        if (chartElm) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    j1(()=>{
        renderChart(props.generationAndLoad.data, props);
    }, [
        props.priceFactor
    ]);
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: [
                                p1("span", {
                                    "data-t-key": "common.chart.net_production",
                                    lang: props.lang,
                                    children: "Net production"
                                }),
                                "\xa0-\xa0",
                                props.area ? props.area.name : props.country?.name,
                                "\xa0-\xa0",
                                p1("span", {
                                    "data-t-key": "common.chart.yesterday_and_today",
                                    lang: props.lang,
                                    children: "Yesterday and today"
                                })
                            ]
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark",
                        children: props.generationAndLoad.data && p1("div", {
                            class: "col-lg",
                            id: "chart_" + randomChartId
                        })
                    })
                ]
            })
        })
    });
}
function InformationPane(props) {
    const rsER = props.er;
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: p1("div", {
                    class: "content px-card m-0 pt-10 pb-20",
                    children: [
                        p1("h5", {
                            "data-t-key": "common.information.title",
                            lang: props.lang,
                            children: "Information"
                        }),
                        p1("p", {
                            children: [
                                p1("span", {
                                    "data-t-key": "common.information.all_history",
                                    lang: props.lang,
                                    children: "All history is fetched from"
                                }),
                                " ",
                                p1("a", {
                                    href: "https://transparency.entsoe.eu/",
                                    children: "ENTSO-e transparency platform"
                                }),
                                ".",
                                " ",
                                p1("span", {
                                    "data-t-key": "common.information.currency_fetched_from",
                                    lang: props.lang,
                                    children: "currency conversion fetched from"
                                }),
                                " ",
                                p1("a", {
                                    href: "https://www.ecb.europa.eu/",
                                    children: "ECB"
                                }),
                                "."
                            ]
                        }),
                        p1("p", {
                            children: props.currency !== "EUR" && p1(L, {
                                children: [
                                    p1("span", {
                                        "data-t-key": "common.information.all_values_from",
                                        lang: props.lang,
                                        children: "All values converted from EUR"
                                    }),
                                    " ",
                                    rsER ? rsER.entries[props.currency] : "",
                                    " ",
                                    props.currency,
                                    "."
                                ]
                            })
                        }),
                        p1("p", {
                            "data-t-key": "common.information.disclaimer_and_private_use",
                            lang: props.lang,
                            children: "Only for private use, no guarantees provided."
                        }),
                        p1("p", {
                            children: [
                                p1("span", {
                                    "data-t-key": "common.information.open_source_software",
                                    lang: props.lang,
                                    children: "Powered by open source software, available at"
                                }),
                                p1("a", {
                                    href: "https://github.com/hexagon/spotweb",
                                    children: "github.com/hexagon/spotweb"
                                })
                            ]
                        }),
                        p1("p", {
                            "data-t-key": "common.information.bugs_and_issues",
                            lang: props.lang,
                            children: "Bug and issues reported at GitHub"
                        })
                    ]
                })
            })
        })
    });
}
function ProductionOverview(props) {
    const lastGeneration = {}, fromDate = new Date();
    fromDate.setHours(fromDate.getHours() - 4, 0, 0, 0);
    let lastGenerationDate = 0;
    for(let i = 0; i < props.generation.data.length; i++){
        const currentGeneration = props.generation.data[i], dateMs = currentGeneration[0], psr = currentGeneration[1] + "_" + (currentGeneration[3] || 0).toString(), value = currentGeneration[2], noPsrs = currentGeneration[4];
        if (dateMs < new Date().getTime() - 3600 * 1000 * 12) continue;
        if (!lastGenerationDate || lastGenerationDate < dateMs) lastGenerationDate = dateMs;
        if (!lastGeneration[psr] || lastGeneration[psr].date.getTime() < dateMs && lastGeneration[psr].noPsrs <= noPsrs) {
            lastGeneration[psr] = {
                date: new Date(dateMs),
                value,
                noPsrs
            };
        }
    }
    const lastGenerationSorted = Object.entries(lastGeneration);
    lastGenerationSorted.sort((a, b)=>b[1].value - a[1].value);
    const generationTotal = Object.values(lastGeneration).reduce((a, b)=>{
        return a + b.value;
    }, 0), lastGenerationDateEnd = props.generation?.data.length ? new Date(lastGenerationDate + (props.country.interval == "PT60M" ? 3600 : 900) * 1000) : undefined;
    let loadTotal = 0;
    for (const loadEntry of props.load.data){
        if (loadEntry[0] === lastGenerationDate) {
            loadTotal = loadEntry[1];
        }
    }
    if (!loadTotal && props.load?.data?.length) loadTotal = props.load.data[props.load.data.length - 1][1];
    const netTotal = generationTotal - loadTotal;
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: p1("span", {
                                "data-t-key": "common.generation.current_production",
                                lang: props.lang,
                                children: "Aktuell produktion och last"
                            })
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 pb-15 bg-very-dark",
                        children: p1("div", {
                            children: [
                                p1("table", {
                                    class: "table",
                                    children: p1("tbody", {
                                        children: [
                                            p1("tr", {
                                                children: [
                                                    p1("th", {
                                                        "data-t-key": "common.generation.production",
                                                        lang: props.lang,
                                                        children: "Produktion"
                                                    }),
                                                    p1("th", {
                                                        children: [
                                                            generationTotal,
                                                            " MW"
                                                        ]
                                                    })
                                                ]
                                            }),
                                            lastGenerationSorted.map((g)=>g[1].value !== 0 && p1(L, {
                                                    children: p1("tr", {
                                                        children: [
                                                            p1("td", {
                                                                children: [
                                                                    p1("span", {
                                                                        "data-t-key": "common.generation.psr_" + g[0].toLowerCase().replace(/[^a-zA-Z0-9]/g, "_"),
                                                                        lang: props.lang,
                                                                        children: g[0]
                                                                    }),
                                                                    " - ",
                                                                    (g[1].value / generationTotal * 100).toFixed(1),
                                                                    " %"
                                                                ]
                                                            }),
                                                            p1("td", {
                                                                children: [
                                                                    g[1].value,
                                                                    " MW"
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                })),
                                            p1("tr", {
                                                children: [
                                                    p1("th", {
                                                        "data-t-key": "common.generation.consumption",
                                                        lang: props.lang,
                                                        children: "F\xf6rbrukning"
                                                    }),
                                                    p1("th", {
                                                        children: [
                                                            loadTotal,
                                                            " MW"
                                                        ]
                                                    })
                                                ]
                                            }),
                                            p1("tr", {
                                                class: "table-" + (netTotal < 0 ? "danger" : "success"),
                                                children: [
                                                    p1("th", {
                                                        "data-t-key": "common.generation." + (netTotal < 0 ? "deficit" : "excess"),
                                                        lang: props.lang,
                                                        children: netTotal < 0 ? "Underskott" : "Överskott"
                                                    }),
                                                    p1("th", {
                                                        children: [
                                                            netTotal,
                                                            " MW"
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                p1("p", {
                                    class: "text-right mb-0 mr-15",
                                    children: p1("small", {
                                        children: p1("i", {
                                            children: [
                                                p1("span", {
                                                    "data-t-key": "common.generation.last_updated",
                                                    lang: props.lang,
                                                    children: "Senast uppdaterat"
                                                }),
                                                ": ",
                                                lastGenerationDateEnd?.toLocaleString()
                                            ]
                                        })
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    });
}
function PriceFactorWarning(props) {
    const [dismissed, setDismissed] = P2(localStorage.getItem("sw_warning_dismissed"));
    const doDismiss = ()=>{
        setDismissed("yes");
        localStorage.setItem("sw_warning_dismissed", "yes");
    };
    return p1("div", {
        class: "row mt-20 mr-20" + (!(props.priceFactor && (props.extra === 0 || !props.extra) && (props.factor === 1 || !props.factor)) || dismissed === "yes" ? " hidden" : ""),
        children: p1("div", {
            class: "alert alert-secondary",
            role: "alert",
            children: [
                p1("button", {
                    class: "close",
                    "data-dismiss": "alert",
                    onClick: ()=>doDismiss(),
                    type: "button",
                    "aria-label": "Close",
                    children: p1("span", {
                        "aria-hidden": "true",
                        children: "\xd7"
                    })
                }),
                p1("h4", {
                    class: "alert-heading",
                    "data-t-key": "common.warning.actual_price",
                    lang: props.lang,
                    children: "Currently using actual price"
                }),
                p1("p", {
                    "data-t-key": "common.warning.actual_price_text",
                    lang: props.lang,
                    children: "... but no settings entered, check your settings using the hamburger menu."
                })
            ]
        })
    });
}
function SingleAreaOverview(props) {
    const rsToday = applyExchangeRate(props.area?.dataToday || [], props.er, props.currency);
    const rsTomorrow = applyExchangeRate(props.area?.dataTomorrow || [], props.er, props.currency);
    const rsMonth = props.area?.dataMonth ? applyExchangeRate(props.area?.dataMonth, props.er, props.currency) : undefined;
    const rsPrevMonth = props.area?.dataPrevMonth ? applyExchangeRate(props.area?.dataPrevMonth, props.er, props.currency) : undefined;
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top bg-" + props.highlight,
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: props.title
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 pt-0 pb-15 bg-very-dark text-center",
                        children: [
                            p1("div", {
                                class: "font-size-64 pt-10 mb-0 pb-0 price-display",
                                children: processPrice(nowPrice(rsToday), props)
                            }),
                            p1("div", {
                                class: "mt-0 pt-0",
                                children: [
                                    props.currency,
                                    "/kWh ",
                                    p1("span", {
                                        "data-t-key": "common.overview.right_now",
                                        lang: props.lang,
                                        children: "right now"
                                    })
                                ]
                            })
                        ]
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-10 pt-10 pb-20",
                        children: [
                            p1("div", {
                                class: "row",
                                children: [
                                    p1("div", {
                                        class: "col-7",
                                        children: [
                                            p1("h5", {
                                                class: "mb-0",
                                                "data-t-key": "common.overview.average_today",
                                                lang: props.lang,
                                                children: "Average today"
                                            }),
                                            p1("div", {
                                                class: "mt-5 mb-5",
                                                children: [
                                                    p1("span", {
                                                        class: "font-size-24",
                                                        children: processPrice(avgPrice(rsToday), props)
                                                    }),
                                                    p1("span", {
                                                        children: [
                                                            props.currency,
                                                            "/kWh"
                                                        ]
                                                    })
                                                ]
                                            }),
                                            p1("span", {
                                                children: [
                                                    p1("span", {
                                                        "data-t-key": "common.overview.span",
                                                        lang: props.lang,
                                                        children: "Span:"
                                                    }),
                                                    " ",
                                                    processPrice(minPrice(rsToday), props),
                                                    " -",
                                                    " ",
                                                    processPrice(maxPrice(rsToday), props)
                                                ]
                                            })
                                        ]
                                    }),
                                    p1("div", {
                                        class: "col-5 text-right",
                                        children: [
                                            p1("h5", {
                                                class: "mb-0",
                                                "data-t-key": "common.overview.average_tomorrow",
                                                lang: props.lang,
                                                children: "tomorrow"
                                            }),
                                            p1("div", {
                                                class: "mt-5 mb-5",
                                                children: p1("span", {
                                                    class: "font-size-24",
                                                    children: processPrice(avgPrice(rsTomorrow), props)
                                                })
                                            }),
                                            p1("span", {
                                                children: [
                                                    processPrice(minPrice(rsTomorrow), props),
                                                    " - ",
                                                    processPrice(maxPrice(rsTomorrow), props)
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            props.detailed && p1("div", {
                                children: p1("div", {
                                    class: "row mt-15",
                                    children: [
                                        p1("div", {
                                            class: "col-7",
                                            children: [
                                                p1("h5", {
                                                    class: "mb-0",
                                                    children: [
                                                        p1("span", {
                                                            "data-t-key": "common.overview.so_far",
                                                            lang: props.lang,
                                                            children: "So far in"
                                                        }),
                                                        "\xa0",
                                                        rsMonth && rsMonth[0]?.time && p1("span", {
                                                            "data-t-key": "common.months_short." + new Date(rsMonth[0].time).getMonth(),
                                                            lang: props.lang,
                                                            children: "-"
                                                        })
                                                    ]
                                                }),
                                                p1("div", {
                                                    class: "mt-5 mb-5",
                                                    children: [
                                                        p1("span", {
                                                            class: "font-size-24",
                                                            children: processPrice(avgPrice(rsMonth), props)
                                                        }),
                                                        p1("span", {
                                                            children: [
                                                                props.currency,
                                                                "/kWh"
                                                            ]
                                                        })
                                                    ]
                                                }),
                                                p1("span", {
                                                    children: [
                                                        p1("span", {
                                                            "data-t-key": "common.overview.span",
                                                            lang: props.lang,
                                                            children: "Span:"
                                                        }),
                                                        " ",
                                                        processPrice(minPrice(rsMonth), props),
                                                        " - ",
                                                        processPrice(maxPrice(rsMonth), props)
                                                    ]
                                                })
                                            ]
                                        }),
                                        p1("div", {
                                            class: "col-5 text-right",
                                            children: [
                                                p1("h5", {
                                                    class: "mb-0",
                                                    children: rsPrevMonth && rsPrevMonth[0]?.time && p1("span", {
                                                        "data-t-key": "common.months_short." + new Date(rsPrevMonth[0]?.time).getMonth(),
                                                        lang: props.lang,
                                                        children: "-"
                                                    })
                                                }),
                                                p1("div", {
                                                    class: "mt-5 mb-5",
                                                    children: p1("span", {
                                                        class: "font-size-24",
                                                        children: processPrice(avgPrice(rsPrevMonth), props)
                                                    })
                                                }),
                                                p1("span", {
                                                    children: [
                                                        processPrice(minPrice(rsPrevMonth), props),
                                                        " - ",
                                                        processPrice(maxPrice(rsPrevMonth), props)
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                })
                            })
                        ]
                    }),
                    !props.detailed && p1("div", {
                        class: "content px-card m-0 p-5 pr-10 bg-very-dark text-right",
                        children: p1("a", {
                            href: "/" + props.country?.id + "/" + props.area?.name,
                            class: "link-" + props.highlight,
                            children: [
                                p1("span", {
                                    "data-t-key": "common.overview.more_about",
                                    lang: props.lang,
                                    children: "More about"
                                }),
                                " ",
                                props.area?.name,
                                " >"
                            ]
                        })
                    })
                ]
            })
        })
    });
}
const productionDetailsTodayChartOptions = Object.assign(structuredClone(baseChart), {
    fill: {
        type: "solid",
        opacity: 0.7
    }
});
productionDetailsTodayChartOptions.stroke.width = 0;
productionDetailsTodayChartOptions.chart.stacked = true;
productionDetailsTodayChartOptions.yaxis.min = (min)=>min < 0 ? min : 0;
function ProductionDetailsTodayChart(props) {
    const [chartElm, setChartElm] = P2(), [randomChartId] = P2((Math.random() * 10000).toFixed(0));
    const renderChart = (seriesInput, props)=>{
        const series = [];
        for (const s of seriesInput){
            series.push({
                data: s.data.map((e)=>{
                    return {
                        x: e.time,
                        y: e.value
                    };
                }),
                name: lang_svc.t("common.generation.psr_" + s.name, {
                    lang: props.lang
                }),
                type: 'bar'
            });
        }
        const chartOptions = {
            ...productionDetailsTodayChartOptions
        };
        chartOptions.series = series;
        const hourNow = new Date();
        hourNow.setMinutes(0);
        chartOptions.annotations = {
            yaxis: [
                {
                    y: 0,
                    strokeDashArray: 0,
                    borderColor: '#CCC',
                    borderWidth: 3,
                    opacity: 0.9
                }
            ]
        };
        if (chartElm) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    const dataArr = [], timeSet = new Set(), typeSet = new Set(), valueSet = new Map();
    for (const row of props.generation.data){
        timeSet.add(row[0]);
        typeSet.add(row[1] + "_" + row[3]);
        valueSet.set(row[1] + "_" + row[3] + "_" + row[0], row[2]);
    }
    for (const ty of typeSet.keys()){
        const typeData = [];
        for (const ti of timeSet.keys()){
            typeData.push({
                time: ti,
                value: valueSet.get(ty + "_" + ti) || 0
            });
        }
        dataArr.push({
            name: ty,
            data: typeData
        });
    }
    j1(()=>{
        renderChart(dataArr, props);
    }, []);
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: [
                                p1("span", {
                                    "data-t-key": "common.generation.production",
                                    lang: props.lang,
                                    children: "Aktuell produktion och last"
                                }),
                                "\xa0-\xa0",
                                props.area ? props.area.name : props.country?.name,
                                "\xa0-\xa0",
                                p1("span", {
                                    "data-t-key": "common.chart.yesterday_and_today",
                                    lang: props.lang,
                                    children: "Yesterday and today"
                                })
                            ]
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark",
                        children: dataArr && p1("div", {
                            class: "col-lg",
                            id: "chart_" + randomChartId
                        })
                    })
                ]
            })
        })
    });
}
function OutageOverview(props) {
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: [
                props.outages && props.outages.data.length > 0 && p1("div", {
                    class: "card p-0 m-0",
                    children: [
                        p1("div", {
                            class: "px-card py-10 m-0 rounded-top",
                            children: p1("h2", {
                                class: "card-title font-size-18 m-0 text-center",
                                children: p1("span", {
                                    "data-t-key": "common.outage.title_current",
                                    lang: props.lang,
                                    children: "Current outages"
                                })
                            })
                        }),
                        p1("div", {
                            class: "content px-card m-0 p-0 pb-15 bg-very-dark",
                            children: p1("div", {
                                children: p1("table", {
                                    class: "table",
                                    children: [
                                        p1("thead", {
                                            children: [
                                                p1("th", {
                                                    "data-t-key": "common.outage.resource",
                                                    lang: props.lang,
                                                    children: "Resource"
                                                }),
                                                p1("th", {
                                                    "data-t-key": "common.outage.status",
                                                    lang: props.lang,
                                                    children: "Status"
                                                }),
                                                p1("th", {
                                                    "data-t-key": "common.outage.capacity_now",
                                                    lang: props.lang,
                                                    children: "Kapacitet just nu"
                                                })
                                            ]
                                        }),
                                        p1("tbody", {
                                            children: props.outages.data.length && props.outages.data.map((g)=>p1(L, {
                                                    children: p1("tr", {
                                                        children: [
                                                            p1("td", {
                                                                class: "text-color-white",
                                                                children: [
                                                                    p1("strong", {
                                                                        children: g[2]
                                                                    }),
                                                                    p1("br", {}),
                                                                    g[6],
                                                                    " ",
                                                                    g[4],
                                                                    p1("br", {}),
                                                                    g[9]
                                                                ]
                                                            }),
                                                            p1("td", {
                                                                class: "text-color-white",
                                                                children: [
                                                                    p1("strong", {
                                                                        class: "text-" + ("Planned maintenance" === g[3] ? "danger" : "secondary"),
                                                                        children: g[3]
                                                                    }),
                                                                    p1("br", {}),
                                                                    new Date(g[0]).toLocaleString(),
                                                                    " - ",
                                                                    new Date(g[1]).toLocaleString(),
                                                                    p1("br", {}),
                                                                    p1("small", {
                                                                        children: g[11]
                                                                    })
                                                                ]
                                                            }),
                                                            p1("td", {
                                                                class: "text-color-white",
                                                                children: [
                                                                    p1("strong", {
                                                                        children: g[15]
                                                                    }),
                                                                    "/",
                                                                    g[7],
                                                                    " ",
                                                                    g[8]
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                }))
                                        })
                                    ]
                                })
                            })
                        })
                    ]
                }),
                props.futureOutages && props.futureOutages.data.length > 0 && p1("div", {
                    class: "card p-0 m-0",
                    children: [
                        p1("div", {
                            class: "px-card py-10 m-0",
                            children: p1("h2", {
                                class: "card-title font-size-18 m-0 text-center",
                                children: p1("span", {
                                    "data-t-key": "common.outage.title_planned",
                                    lang: props.lang,
                                    children: "Planned outages"
                                })
                            })
                        }),
                        p1("div", {
                            class: "content px-card m-0 p-0 pb-15 bg-very-dark",
                            children: p1("div", {
                                children: p1("table", {
                                    class: "table",
                                    children: [
                                        p1("thead", {
                                            children: [
                                                p1("th", {
                                                    "data-t-key": "common.outage.resource",
                                                    lang: props.lang,
                                                    children: "Resource"
                                                }),
                                                p1("th", {
                                                    "data-t-key": "common.outage.status",
                                                    lang: props.lang,
                                                    children: "Status"
                                                }),
                                                p1("th", {
                                                    "data-t-key": "common.outage.total_capacity",
                                                    lang: props.lang,
                                                    children: "Total capacity"
                                                })
                                            ]
                                        }),
                                        p1("tbody", {
                                            children: props.futureOutages.data.length && props.futureOutages.data.map((g)=>p1(L, {
                                                    children: p1("tr", {
                                                        children: [
                                                            p1("td", {
                                                                children: [
                                                                    p1("strong", {
                                                                        children: g[2]
                                                                    }),
                                                                    p1("br", {}),
                                                                    g[6],
                                                                    " ",
                                                                    g[4],
                                                                    p1("br", {}),
                                                                    g[9]
                                                                ]
                                                            }),
                                                            p1("td", {
                                                                children: [
                                                                    p1("strong", {
                                                                        children: g[3]
                                                                    }),
                                                                    p1("br", {}),
                                                                    new Date(g[0]).toLocaleString(),
                                                                    " - ",
                                                                    new Date(g[1]).toLocaleString(),
                                                                    p1("br", {}),
                                                                    p1("small", {
                                                                        children: g[11]
                                                                    })
                                                                ]
                                                            }),
                                                            p1("td", {
                                                                children: [
                                                                    g[7],
                                                                    " ",
                                                                    g[8]
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                }))
                                        })
                                    ]
                                })
                            })
                        })
                    ]
                })
            ]
        })
    });
}
function AreaIsland(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const dToday = new Date().toLocaleDateString("sv-SE");
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    const pageLoadTime = new Date();
    new Cron("0 0 * * * *", ()=>{
        if (new Date().getTime() - pageLoadTime.getTime() > 120 * 1000) {
            window?.location?.reload();
        }
    });
    return p1("div", {
        children: p1("div", {
            class: "page-wrapper with-navbar with-sidebar",
            "data-sidebar-hidden": "hidden",
            children: [
                p1(Navbar, {
                    setPriceFactor: setPriceFactorStored,
                    pageType: "area",
                    ...commonprops,
                    ...props.data
                }),
                p1(Sidebar, {
                    setUnit: setUnit,
                    setExtra: setExtra,
                    setFactor: setFactor,
                    setDecimals: setDecimals,
                    setPriceFactor: setPriceFactorStored,
                    setCurrency: setCurrency,
                    ...commonprops
                }),
                p1("div", {
                    class: "content-wrapper",
                    children: p1("div", {
                        class: "content pr-0 mr-0 ml-20 mt-0",
                        children: [
                            p1("div", {
                                class: "row mt-0",
                                children: [
                                    p1(PriceFactorWarning, {
                                        priceFactor: !!priceFactor,
                                        factor: factor,
                                        extra: extra,
                                        lang: props.data.lang
                                    }),
                                    p1("div", {
                                        class: "sticky-alerts"
                                    }),
                                    p1(SingleAreaOverview, {
                                        title: props.data.area.name + " - " + props.data.area.long,
                                        highlight: "color-" + props.data.area.color,
                                        cols: 3,
                                        detailed: true,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(SingleAreaChart, {
                                        title: props.data.area.name + " - " + props.data.area.long,
                                        highlight: "color-" + props.data.area.color,
                                        cols: 6,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(ProductionOverview, {
                                        cols: 3,
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "row",
                                children: [
                                    p1(ProductionDetailsTodayChart, {
                                        cols: 6,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(ProductionTodayChart, {
                                        cols: 6,
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "row",
                                children: [
                                    p1(SingleAreaMonthChart, {
                                        title: props.data.area.name + " - " + props.data.area.long,
                                        highlight: "color-" + props.data.area.color,
                                        cols: 6,
                                        date: dToday,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(InformationPane, {
                                        cols: 6,
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            }),
                            props.data.singleArea && p1("div", {
                                class: "row",
                                children: p1(OutageOverview, {
                                    cols: 12,
                                    ...commonprops,
                                    ...props.data
                                })
                            })
                        ]
                    })
                })
            ]
        })
    });
}
const mod10 = {
    default: AreaIsland
};
var Status1;
(function(Status) {
    Status[Status["Unknown"] = -1] = "Unknown";
    Status[Status["SqliteOk"] = 0] = "SqliteOk";
    Status[Status["SqliteError"] = 1] = "SqliteError";
    Status[Status["SqliteInternal"] = 2] = "SqliteInternal";
    Status[Status["SqlitePerm"] = 3] = "SqlitePerm";
    Status[Status["SqliteAbort"] = 4] = "SqliteAbort";
    Status[Status["SqliteBusy"] = 5] = "SqliteBusy";
    Status[Status["SqliteLocked"] = 6] = "SqliteLocked";
    Status[Status["SqliteNoMem"] = 7] = "SqliteNoMem";
    Status[Status["SqliteReadOnly"] = 8] = "SqliteReadOnly";
    Status[Status["SqliteInterrupt"] = 9] = "SqliteInterrupt";
    Status[Status["SqliteIOErr"] = 10] = "SqliteIOErr";
    Status[Status["SqliteCorrupt"] = 11] = "SqliteCorrupt";
    Status[Status["SqliteNotFound"] = 12] = "SqliteNotFound";
    Status[Status["SqliteFull"] = 13] = "SqliteFull";
    Status[Status["SqliteCantOpen"] = 14] = "SqliteCantOpen";
    Status[Status["SqliteProtocol"] = 15] = "SqliteProtocol";
    Status[Status["SqliteEmpty"] = 16] = "SqliteEmpty";
    Status[Status["SqliteSchema"] = 17] = "SqliteSchema";
    Status[Status["SqliteTooBig"] = 18] = "SqliteTooBig";
    Status[Status["SqliteConstraint"] = 19] = "SqliteConstraint";
    Status[Status["SqliteMismatch"] = 20] = "SqliteMismatch";
    Status[Status["SqliteMisuse"] = 21] = "SqliteMisuse";
    Status[Status["SqliteNoLFS"] = 22] = "SqliteNoLFS";
    Status[Status["SqliteAuth"] = 23] = "SqliteAuth";
    Status[Status["SqliteFormat"] = 24] = "SqliteFormat";
    Status[Status["SqliteRange"] = 25] = "SqliteRange";
    Status[Status["SqliteNotADB"] = 26] = "SqliteNotADB";
    Status[Status["SqliteNotice"] = 27] = "SqliteNotice";
    Status[Status["SqliteWarning"] = 28] = "SqliteWarning";
    Status[Status["SqliteRow"] = 100] = "SqliteRow";
    Status[Status["SqliteDone"] = 101] = "SqliteDone";
})(Status1 || (Status1 = {}));
var OpenFlags;
(function(OpenFlags) {
    OpenFlags[OpenFlags["ReadOnly"] = 0x00000001] = "ReadOnly";
    OpenFlags[OpenFlags["ReadWrite"] = 0x00000002] = "ReadWrite";
    OpenFlags[OpenFlags["Create"] = 0x00000004] = "Create";
    OpenFlags[OpenFlags["Uri"] = 0x00000040] = "Uri";
    OpenFlags[OpenFlags["Memory"] = 0x00000080] = "Memory";
})(OpenFlags || (OpenFlags = {}));
var DeserializeFlags;
(function(DeserializeFlags) {
    DeserializeFlags[DeserializeFlags["FreeOnClose"] = 1] = "FreeOnClose";
    DeserializeFlags[DeserializeFlags["Resizeable"] = 2] = "Resizeable";
    DeserializeFlags[DeserializeFlags["ReadOnly"] = 4] = "ReadOnly";
})(DeserializeFlags || (DeserializeFlags = {}));
var FunctionFlags;
(function(FunctionFlags) {
    FunctionFlags[FunctionFlags["Deterministic"] = 0x000000800] = "Deterministic";
    FunctionFlags[FunctionFlags["DirectOnly"] = 0x000080000] = "DirectOnly";
})(FunctionFlags || (FunctionFlags = {}));
var Types;
(function(Types) {
    Types[Types["Integer"] = 1] = "Integer";
    Types[Types["Float"] = 2] = "Float";
    Types[Types["Text"] = 3] = "Text";
    Types[Types["Blob"] = 4] = "Blob";
    Types[Types["Null"] = 5] = "Null";
    Types[Types["BigInteger"] = 6] = "BigInteger";
})(Types || (Types = {}));
var Values;
(function(Values) {
    Values[Values["Error"] = -1] = "Error";
    Values[Values["Null"] = 0] = "Null";
})(Values || (Values = {}));
function getStr(wasm, ptr) {
    const len = wasm.str_len(ptr);
    const bytes = new Uint8Array(wasm.memory.buffer, ptr, len);
    if (len > 16) {
        return new TextDecoder().decode(bytes);
    } else {
        let str = "";
        let idx = 0;
        while(idx < len){
            let u0 = bytes[idx++];
            if (!(u0 & 0x80)) {
                str += String.fromCharCode(u0);
                continue;
            }
            const u1 = bytes[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
            }
            const u2 = bytes[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | bytes[idx++] & 63;
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                const ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);
            }
        }
        return str;
    }
}
class SqliteError extends Error {
    constructor(context, code){
        let message;
        let status;
        if (typeof context === "string") {
            message = context;
            status = Status1.Unknown;
        } else {
            message = getStr(context, context.get_sqlite_error_str());
            status = context.get_status();
        }
        super(message);
        this.code = code ?? status;
        this.name = "SqliteError";
    }
    code;
    get codeName() {
        return Status1[this.code];
    }
}
function setStr(wasm, str, closure) {
    const bytes = new TextEncoder().encode(str);
    const ptr = wasm.malloc(bytes.length + 1);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, bytes.length + 1);
    mem.set(bytes);
    mem[bytes.length] = 0;
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
function setArr(wasm, arr, closure) {
    const ptr = wasm.malloc(arr.length);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, arr.length);
    mem.set(arr);
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
const isWindows3 = Deno.build.os === "windows";
function env(inst) {
    const env = {
        js_print: (str_ptr)=>{
            const text = getStr(inst.exports, str_ptr);
            console.log(text[text.length - 1] === "\n" ? text.slice(0, -1) : text);
        },
        js_open: (path_ptr, mode, flags)=>{
            let path;
            switch(mode){
                case 0:
                    path = getStr(inst.exports, path_ptr);
                    break;
                case 1:
                    path = Deno.makeTempFileSync({
                        prefix: "deno_sqlite"
                    });
                    break;
            }
            const write = !!(flags & 0x00000002);
            const create = !!(flags & 0x00000004);
            const rid = Deno.openSync(path, {
                read: true,
                write,
                create
            }).rid;
            return rid;
        },
        js_close: (rid)=>{
            Deno.close(rid);
        },
        js_delete: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            Deno.removeSync(path);
        },
        js_read: (rid, buffer_ptr, offset, amount)=>{
            const buffer = new Uint8Array(inst.exports.memory.buffer, buffer_ptr, amount);
            Deno.seekSync(rid, offset, Deno.SeekMode.Start);
            return Deno.readSync(rid, buffer);
        },
        js_write: (rid, buffer_ptr, offset, amount)=>{
            const buffer = new Uint8Array(inst.exports.memory.buffer, buffer_ptr, amount);
            Deno.seekSync(rid, offset, Deno.SeekMode.Start);
            return Deno.writeSync(rid, buffer);
        },
        js_truncate: (rid, size)=>{
            Deno.ftruncateSync(rid, size);
        },
        js_sync: (rid)=>{
            Deno.fdatasyncSync(rid);
        },
        js_size: (rid)=>{
            return Deno.fstatSync(rid).size;
        },
        js_lock: (rid, exclusive)=>{
            if (Deno.flockSync && !isWindows3) Deno.flockSync(rid, exclusive !== 0);
        },
        js_unlock: (rid)=>{
            if (Deno.funlockSync && !isWindows3) Deno.funlockSync(rid);
        },
        js_time: ()=>{
            return Date.now();
        },
        js_timezone: ()=>{
            return new Date().getTimezoneOffset();
        },
        js_exists: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            try {
                Deno.statSync(path);
            } catch (e) {
                if (e instanceof Deno.errors.NotFound) {
                    return 0;
                }
            }
            return 1;
        },
        js_access: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            try {
                Deno.statSync(path);
            } catch (e) {
                if (e instanceof Deno.errors.PermissionDenied) {
                    return 0;
                }
            }
            return 1;
        },
        js_call_user_func: (func_idx, arg_count)=>{
            inst.functions[func_idx](arg_count);
        }
    };
    return {
        env
    };
}
const wasm2 = "";
function decode(base64) {
    const bytesStr = atob(base64);
    const bytes = new Uint8Array(bytesStr.length);
    for(let i = 0, c = bytesStr.length; i < c; i++){
        bytes[i] = bytesStr.charCodeAt(i);
    }
    return bytes;
}
const moduleOrInstance = {
    module: null,
    instances: []
};
async function compile() {
    moduleOrInstance.module = await WebAssembly.compile(decode(wasm2));
}
function instantiate() {
    if (moduleOrInstance.instances.length) {
        return moduleOrInstance.instances.pop();
    } else {
        const functions = [];
        const placeholder = {
            exports: null,
            functions
        };
        const instance = new WebAssembly.Instance(moduleOrInstance.module, env(placeholder));
        placeholder.exports = instance.exports;
        instance.functions = functions;
        instance.exports.seed_rng(Date.now());
        return instance;
    }
}
class PreparedQuery {
    #wasm;
    #stmt;
    #openStatements;
    #status;
    #iterKv;
    #rowKeys;
    #finalized;
    constructor(wasm, stmt, openStatements){
        this.#wasm = wasm;
        this.#stmt = stmt;
        this.#openStatements = openStatements;
        this.#status = Status1.Unknown;
        this.#iterKv = false;
        this.#finalized = false;
    }
    #startQuery(params) {
        if (this.#finalized) {
            throw new SqliteError("Query is finalized.");
        }
        this.#wasm.reset(this.#stmt);
        this.#wasm.clear_bindings(this.#stmt);
        let parameters = [];
        if (Array.isArray(params)) {
            parameters = params;
        } else if (typeof params === "object") {
            for (const key of Object.keys(params)){
                let name = key;
                if (name[0] !== ":" && name[0] !== "@" && name[0] !== "$") {
                    name = `:${name}`;
                }
                const idx = setStr(this.#wasm, name, (ptr)=>this.#wasm.bind_parameter_index(this.#stmt, ptr));
                if (idx === Values.Error) {
                    throw new SqliteError(`No parameter named '${name}'.`);
                }
                parameters[idx - 1] = params[key];
            }
        }
        for(let i = 0; i < parameters.length; i++){
            let value = parameters[i];
            let status;
            switch(typeof value){
                case "boolean":
                    value = value ? 1 : 0;
                case "number":
                    if (Number.isSafeInteger(value)) {
                        status = this.#wasm.bind_int(this.#stmt, i + 1, value);
                    } else {
                        status = this.#wasm.bind_double(this.#stmt, i + 1, value);
                    }
                    break;
                case "bigint":
                    if (value > 9223372036854775807n || value < -9223372036854775808n) {
                        throw new SqliteError(`BigInt value ${value} overflows 64 bit integer.`);
                    } else {
                        const posVal = value >= 0n ? value : -value;
                        const sign = value >= 0n ? 1 : -1;
                        const upper = Number(BigInt.asUintN(32, posVal >> 32n));
                        const lower = Number(BigInt.asUintN(32, posVal));
                        status = this.#wasm.bind_big_int(this.#stmt, i + 1, sign, upper, lower);
                    }
                    break;
                case "string":
                    status = setStr(this.#wasm, value, (ptr)=>this.#wasm.bind_text(this.#stmt, i + 1, ptr));
                    break;
                default:
                    if (value instanceof Date) {
                        status = setStr(this.#wasm, value.toISOString(), (ptr)=>this.#wasm.bind_text(this.#stmt, i + 1, ptr));
                    } else if (value instanceof Uint8Array) {
                        const size = value.length;
                        status = setArr(this.#wasm, value, (ptr)=>this.#wasm.bind_blob(this.#stmt, i + 1, ptr, size));
                    } else if (value === null || value === undefined) {
                        status = this.#wasm.bind_null(this.#stmt, i + 1);
                    } else {
                        throw new SqliteError(`Can not bind ${typeof value}.`);
                    }
                    break;
            }
            if (status !== Status1.SqliteOk) {
                throw new SqliteError(this.#wasm, status);
            }
        }
    }
    #getQueryRow() {
        if (this.#finalized) {
            throw new SqliteError("Query is finalized.");
        }
        const columnCount = this.#wasm.column_count(this.#stmt);
        const row = new Array(columnCount);
        for(let columnIdx = 0; columnIdx < columnCount; columnIdx++){
            switch(this.#wasm.column_type(this.#stmt, columnIdx)){
                case Types.Integer:
                    row[columnIdx] = this.#wasm.column_int(this.#stmt, columnIdx);
                    break;
                case Types.Float:
                    row[columnIdx] = this.#wasm.column_double(this.#stmt, columnIdx);
                    break;
                case Types.Text:
                    row[columnIdx] = getStr(this.#wasm, this.#wasm.column_text(this.#stmt, columnIdx));
                    break;
                case Types.Blob:
                    {
                        const ptr = this.#wasm.column_blob(this.#stmt, columnIdx);
                        if (ptr === 0) {
                            row[columnIdx] = null;
                        } else {
                            const length = this.#wasm.column_bytes(this.#stmt, columnIdx);
                            row[columnIdx] = new Uint8Array(this.#wasm.memory.buffer, ptr, length).slice();
                        }
                        break;
                    }
                case Types.BigInteger:
                    {
                        const ptr = this.#wasm.column_text(this.#stmt, columnIdx);
                        row[columnIdx] = BigInt(getStr(this.#wasm, ptr));
                        break;
                    }
                default:
                    row[columnIdx] = null;
                    break;
            }
        }
        return row;
    }
    #makeRowObject(row) {
        if (this.#rowKeys == null) {
            const rowCount = this.#wasm.column_count(this.#stmt);
            this.#rowKeys = [];
            for(let i = 0; i < rowCount; i++){
                this.#rowKeys.push(getStr(this.#wasm, this.#wasm.column_name(this.#stmt, i)));
            }
        }
        const obj = row.reduce((obj, val, idx)=>{
            obj[this.#rowKeys[idx]] = val;
            return obj;
        }, {});
        return obj;
    }
    iter(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        if (this.#status !== Status1.SqliteRow && this.#status !== Status1.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        this.#iterKv = false;
        return this;
    }
    iterEntries(params) {
        this.iter(params);
        this.#iterKv = true;
        return this;
    }
    [Symbol.iterator]() {
        return this;
    }
    next() {
        if (this.#status === Status1.SqliteRow) {
            const value = this.#getQueryRow();
            this.#status = this.#wasm.step(this.#stmt);
            if (this.#iterKv) {
                return {
                    value: this.#makeRowObject(value),
                    done: false
                };
            } else {
                return {
                    value,
                    done: false
                };
            }
        } else if (this.#status === Status1.SqliteDone) {
            return {
                value: null,
                done: true
            };
        } else {
            throw new SqliteError(this.#wasm, this.#status);
        }
    }
    all(params) {
        this.#startQuery(params);
        const rows = [];
        this.#status = this.#wasm.step(this.#stmt);
        while(this.#status === Status1.SqliteRow){
            rows.push(this.#getQueryRow());
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status1.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        return rows;
    }
    allEntries(params) {
        return this.all(params).map((row)=>this.#makeRowObject(row));
    }
    first(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        let row = undefined;
        if (this.#status === Status1.SqliteRow) {
            row = this.#getQueryRow();
        }
        while(this.#status === Status1.SqliteRow){
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status1.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        return row;
    }
    firstEntry(params) {
        const row = this.first(params);
        return row === undefined ? undefined : this.#makeRowObject(row);
    }
    one(params) {
        const rows = this.all(params);
        if (rows.length === 0) {
            throw new SqliteError("The query did not return any rows.");
        } else if (rows.length > 1) {
            throw new SqliteError("The query returned more than one row.");
        } else {
            return rows[0];
        }
    }
    oneEntry(params) {
        return this.#makeRowObject(this.one(params));
    }
    execute(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        while(this.#status === Status1.SqliteRow){
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status1.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
    }
    finalize() {
        if (!this.#finalized) {
            this.#wasm.finalize(this.#stmt);
            this.#openStatements.delete(this.#stmt);
            this.#finalized = true;
        }
    }
    columns() {
        if (this.#finalized) {
            throw new SqliteError("Unable to retrieve column names from finalized transaction.");
        }
        const columnCount = this.#wasm.column_count(this.#stmt);
        const columns = [];
        for(let i = 0; i < columnCount; i++){
            const name = getStr(this.#wasm, this.#wasm.column_name(this.#stmt, i));
            const originName = getStr(this.#wasm, this.#wasm.column_origin_name(this.#stmt, i));
            const tableName = getStr(this.#wasm, this.#wasm.column_table_name(this.#stmt, i));
            columns.push({
                name,
                originName,
                tableName
            });
        }
        return columns;
    }
    expandSql(params) {
        this.#startQuery(params);
        const ptr = this.#wasm.expanded_sql(this.#stmt);
        const sql = getStr(this.#wasm, ptr);
        if (ptr != Values.Null) this.#wasm.sqlite_free(ptr);
        return sql;
    }
}
function wrapSqlFunction(wasm, name, func) {
    return (argCount)=>{
        const args = new Array(argCount);
        for(let argIdx = 0; argIdx < argCount; argIdx++){
            switch(wasm.argument_type(argIdx)){
                case Types.Integer:
                    args[argIdx] = wasm.argument_int(argIdx);
                    break;
                case Types.Float:
                    args[argIdx] = wasm.argument_double(argIdx);
                    break;
                case Types.Text:
                    args[argIdx] = getStr(wasm, wasm.argument_text(argIdx));
                    break;
                case Types.Blob:
                    {
                        const ptr = wasm.argument_blob(argIdx);
                        if (ptr === 0) {
                            args[argIdx] = null;
                        } else {
                            const length = wasm.argument_bytes(argIdx);
                            args[argIdx] = new Uint8Array(wasm.memory.buffer, ptr, length).slice();
                        }
                        break;
                    }
                case Types.BigInteger:
                    {
                        const ptr = wasm.argument_text(argIdx);
                        args[argIdx] = BigInt(getStr(wasm, ptr));
                        break;
                    }
                default:
                    args[argIdx] = null;
                    break;
            }
        }
        try {
            let result = func.apply(null, args);
            switch(typeof result){
                case "boolean":
                    result = result ? 1 : 0;
                case "number":
                    if (Number.isSafeInteger(result)) {
                        wasm.result_int(result);
                    } else {
                        wasm.result_double(result);
                    }
                    break;
                case "bigint":
                    if (result > 9223372036854775807n || result < -9223372036854775808n) {
                        throw new SqliteError(`BigInt result ${result} overflows 64 bit integer.`);
                    } else {
                        const posVal = result >= 0n ? result : -result;
                        const sign = result >= 0n ? 1 : -1;
                        const upper = Number(BigInt.asUintN(32, posVal >> 32n));
                        const lower = Number(BigInt.asUintN(32, posVal));
                        wasm.result_big_int(sign, upper, lower);
                    }
                    break;
                case "string":
                    setStr(wasm, result, (ptr)=>wasm.result_text(ptr));
                    break;
                default:
                    if (result instanceof Date) {
                        setStr(wasm, result.toISOString(), (ptr)=>wasm.result_text(ptr));
                    } else if (result instanceof Uint8Array) {
                        const size = result.length;
                        setArr(wasm, result, (ptr)=>wasm.result_blob(ptr, size));
                    } else if (result === null || result === undefined) {
                        wasm.result_null();
                    } else {
                        throw new SqliteError(`Can not return ${typeof result}.`);
                    }
                    break;
            }
        } catch (error) {
            setStr(wasm, `Error in user defined function '${name}': ${error?.message}`, (ptr)=>wasm.result_error(ptr, Status1.SqliteError));
        }
    };
}
class DB {
    #wasm;
    #functions;
    #open;
    #statements;
    #functionNames;
    #transactionDepth;
    constructor(path = ":memory:", options = {}){
        const instance = instantiate();
        this.#wasm = instance.exports;
        this.#functions = instance.functions;
        this.#open = false;
        this.#statements = new Set();
        this.#functionNames = new Map();
        this.#transactionDepth = 0;
        let flags = 0;
        switch(options.mode){
            case "read":
                flags = OpenFlags.ReadOnly;
                break;
            case "write":
                flags = OpenFlags.ReadWrite;
                break;
            case "create":
            default:
                flags = OpenFlags.ReadWrite | OpenFlags.Create;
                break;
        }
        if (options.memory === true) {
            flags |= OpenFlags.Memory;
        }
        if (options.uri === true) {
            flags |= OpenFlags.Uri;
        }
        const status = setStr(this.#wasm, path, (ptr)=>this.#wasm.open(ptr, flags));
        if (status !== Status1.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        }
        this.#open = true;
    }
    query(sql, params) {
        const query = this.prepareQuery(sql);
        try {
            const rows = query.all(params);
            query.finalize();
            return rows;
        } catch (err) {
            query.finalize();
            throw err;
        }
    }
    queryEntries(sql, params) {
        const query = this.prepareQuery(sql);
        try {
            const rows = query.allEntries(params);
            query.finalize();
            return rows;
        } catch (err) {
            query.finalize();
            throw err;
        }
    }
    prepareQuery(sql) {
        if (!this.#open) {
            throw new SqliteError("Database was closed.");
        }
        const stmt = setStr(this.#wasm, sql, (ptr)=>this.#wasm.prepare(ptr));
        if (stmt === Values.Null) {
            throw new SqliteError(this.#wasm);
        }
        this.#statements.add(stmt);
        return new PreparedQuery(this.#wasm, stmt, this.#statements);
    }
    execute(sql) {
        const status = setStr(this.#wasm, sql, (ptr)=>this.#wasm.exec(ptr));
        if (status !== Status1.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        }
    }
    transaction(closure) {
        this.#transactionDepth += 1;
        this.query(`SAVEPOINT _deno_sqlite_sp_${this.#transactionDepth}`);
        let value;
        try {
            value = closure();
        } catch (err) {
            this.query(`ROLLBACK TO _deno_sqlite_sp_${this.#transactionDepth}`);
            this.#transactionDepth -= 1;
            throw err;
        }
        this.query(`RELEASE _deno_sqlite_sp_${this.#transactionDepth}`);
        this.#transactionDepth -= 1;
        return value;
    }
    serialize(schema = "main") {
        const ptr = setStr(this.#wasm, schema, (ptr)=>this.#wasm.serialize(ptr));
        if (ptr === Values.Null) {
            throw new SqliteError(`Failed to serialize database '${schema}'`);
        }
        const length = this.#wasm.serialize_bytes();
        const data = new Uint8Array(this.#wasm.memory.buffer, ptr, length).slice();
        this.#wasm.sqlite_free(ptr);
        return data;
    }
    deserialize(data, options) {
        const dataPtr = this.#wasm.sqlite_malloc(data.length);
        if (dataPtr === Values.Null) {
            throw new SqliteError("Out of memory.", Status1.SqliteNoMem);
        } else {
            const mem = new Uint8Array(this.#wasm.memory.buffer, dataPtr, data.length);
            mem.set(data);
        }
        let flags = DeserializeFlags.FreeOnClose;
        switch(options?.mode){
            case "read":
                flags |= DeserializeFlags.ReadOnly;
                break;
            case "write":
            default:
                flags |= DeserializeFlags.Resizeable;
                break;
        }
        const schema = options?.schema ?? "main";
        const status = setStr(this.#wasm, schema, (schemaPtr)=>this.#wasm.deserialize(schemaPtr, dataPtr, data.length, flags));
        if (status !== Status1.SqliteOk) {
            throw new SqliteError(`Failed to deserialize into database '${schema}'`, status);
        }
    }
    createFunction(func, options) {
        const name = options?.name ?? func.name;
        if (name === "") {
            throw new SqliteError("Function name can not be empty");
        } else if (this.#functionNames.has(name)) {
            throw new SqliteError(`A function named '${name}' already exists`);
        }
        const argc = func.length === 0 ? -1 : func.length;
        let flags = 0;
        if (options?.deterministic ?? false) flags |= FunctionFlags.Deterministic;
        if (options?.directOnly ?? true) flags |= FunctionFlags.DirectOnly;
        let funcIdx = 0;
        while(this.#functions[funcIdx] != undefined)funcIdx++;
        const status = setStr(this.#wasm, name, (name)=>this.#wasm.create_function(name, argc, flags, funcIdx));
        if (status !== Status1.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        } else {
            this.#functions[funcIdx] = wrapSqlFunction(this.#wasm, name, func);
            this.#functionNames.set(name, funcIdx);
        }
    }
    deleteFunction(name) {
        if (this.#functionNames.has(name)) {
            const status = setStr(this.#wasm, name, (pts)=>this.#wasm.delete_function(pts));
            if (status === Status1.SqliteOk) {
                const funcIdx = this.#functionNames.get(name);
                this.#functionNames.delete(name);
                delete this.#functions[funcIdx];
            } else {
                throw new SqliteError(this.#wasm, status);
            }
        } else {
            throw new SqliteError(`User defined function '${name}' does not exist`);
        }
    }
    close(force = false) {
        if (!this.#open) {
            return;
        }
        if (force) {
            for (const stmt of this.#statements){
                if (this.#wasm.finalize(stmt) !== Status1.SqliteOk) {
                    throw new SqliteError(this.#wasm);
                }
            }
        }
        if (this.#wasm.close() !== Status1.SqliteOk) {
            throw new SqliteError(this.#wasm);
        }
        this.#open = false;
    }
    get lastInsertRowId() {
        return this.#wasm.last_insert_rowid();
    }
    get changes() {
        return this.#wasm.changes();
    }
    get totalChanges() {
        return this.#wasm.total_changes();
    }
}
await compile();
const osType3 = (()=>{
    const { Deno: Deno1  } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows4 = osType3 === "windows";
const CHAR_FORWARD_SLASH3 = 47;
function assertPath3(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator3(code) {
    return code === 47;
}
function isPathSeparator3(code) {
    return isPosixPathSeparator3(code) || code === 92;
}
function isWindowsDeviceRoot3(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString3(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH3;
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format3(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (base === sep) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS3 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace3(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS3[c] ?? c;
    });
}
function lastPathSegment(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for(let i = path.length - 1; i >= start; --i){
        if (isSep(path.charCodeAt(i))) {
            if (matchedNonSeparator) {
                start = i + 1;
                break;
            }
        } else if (!matchedNonSeparator) {
            matchedNonSeparator = true;
            end = i + 1;
        }
    }
    return path.slice(start, end);
}
function stripTrailingSeparators(segment, isSep) {
    if (segment.length <= 1) {
        return segment;
    }
    let end = segment.length;
    for(let i = segment.length - 1; i > 0; i--){
        if (isSep(segment.charCodeAt(i))) {
            end = i;
        } else {
            break;
        }
    }
    return segment.slice(0, end);
}
function stripSuffix(name, suffix) {
    if (suffix.length >= name.length) {
        return name;
    }
    const lenDiff = name.length - suffix.length;
    for(let i = suffix.length - 1; i >= 0; --i){
        if (name.charCodeAt(lenDiff + i) !== suffix.charCodeAt(i)) {
            return name;
        }
    }
    return name.slice(0, -suffix.length);
}
class DenoStdInternalError3 extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert3(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError3(msg);
    }
}
const sep9 = "\\";
const delimiter9 = ";";
function resolve9(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno: Deno1  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath3(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator3(code)) {
                isAbsolute = true;
                if (isPathSeparator3(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator3(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator3(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator3(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot3(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator3(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator3(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString3(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator3);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize12(path) {
    assertPath3(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator3(code)) {
            isAbsolute = true;
            if (isPathSeparator3(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator3(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator3(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator3(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot3(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator3(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator3(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString3(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator3);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator3(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute9(path) {
    assertPath3(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator3(code)) {
        return true;
    } else if (isWindowsDeviceRoot3(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator3(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join12(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath3(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert3(firstPart != null);
    if (isPathSeparator3(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator3(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator3(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator3(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize12(joined);
}
function relative9(from, to) {
    assertPath3(from);
    assertPath3(to);
    if (from === to) return "";
    const fromOrig = resolve9(from);
    const toOrig = resolve9(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath9(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve9(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot3(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname9(path) {
    assertPath3(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator3(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator3(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator3(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator3(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator3(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot3(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator3(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator3(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator3(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator3);
}
function basename9(path, suffix = "") {
    assertPath3(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
    let start = 0;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot3(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    const lastSegment = lastPathSegment(path, isPathSeparator3, start);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator3);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname9(path) {
    assertPath3(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot3(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator3(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format9(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format3("\\", pathObject);
}
function parse9(path) {
    assertPath3(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator3(code)) {
            rootEnd = 1;
            if (isPathSeparator3(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator3(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator3(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator3(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot3(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator3(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            ret.base = "\\";
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator3(code)) {
        ret.root = ret.dir = path;
        ret.base = "\\";
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator3(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    ret.base = ret.base || "\\";
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl9(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl9(path) {
    if (!isAbsolute9(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace3(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod11 = {
    sep: sep9,
    delimiter: delimiter9,
    resolve: resolve9,
    normalize: normalize12,
    isAbsolute: isAbsolute9,
    join: join12,
    relative: relative9,
    toNamespacedPath: toNamespacedPath9,
    dirname: dirname9,
    basename: basename9,
    extname: extname9,
    format: format9,
    parse: parse9,
    fromFileUrl: fromFileUrl9,
    toFileUrl: toFileUrl9
};
const sep10 = "/";
const delimiter10 = ":";
function resolve10(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno: Deno1  } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath3(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = isPosixPathSeparator3(path.charCodeAt(0));
    }
    resolvedPath = normalizeString3(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator3);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize13(path) {
    assertPath3(path);
    if (path.length === 0) return ".";
    const isAbsolute = isPosixPathSeparator3(path.charCodeAt(0));
    const trailingSeparator = isPosixPathSeparator3(path.charCodeAt(path.length - 1));
    path = normalizeString3(path, !isAbsolute, "/", isPosixPathSeparator3);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function isAbsolute10(path) {
    assertPath3(path);
    return path.length > 0 && isPosixPathSeparator3(path.charCodeAt(0));
}
function join13(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath3(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize13(joined);
}
function relative10(from, to) {
    assertPath3(from);
    assertPath3(to);
    if (from === to) return "";
    from = resolve10(from);
    to = resolve10(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (!isPosixPathSeparator3(from.charCodeAt(fromStart))) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (!isPosixPathSeparator3(to.charCodeAt(toStart))) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (isPosixPathSeparator3(to.charCodeAt(toStart + i))) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (isPosixPathSeparator3(from.charCodeAt(fromStart + i))) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (isPosixPathSeparator3(fromCode)) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || isPosixPathSeparator3(from.charCodeAt(i))) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (isPosixPathSeparator3(to.charCodeAt(toStart))) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath10(path) {
    return path;
}
function dirname10(path) {
    if (path.length === 0) return ".";
    let end = -1;
    let matchedNonSeparator = false;
    for(let i = path.length - 1; i >= 1; --i){
        if (isPosixPathSeparator3(path.charCodeAt(i))) {
            if (matchedNonSeparator) {
                end = i;
                break;
            }
        } else {
            matchedNonSeparator = true;
        }
    }
    if (end === -1) {
        return isPosixPathSeparator3(path.charCodeAt(0)) ? "/" : ".";
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator3);
}
function basename10(path, suffix = "") {
    assertPath3(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
    const lastSegment = lastPathSegment(path, isPosixPathSeparator3);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPosixPathSeparator3);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname10(path) {
    assertPath3(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (isPosixPathSeparator3(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format10(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format3("/", pathObject);
}
function parse10(path) {
    assertPath3(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = isPosixPathSeparator3(path.charCodeAt(0));
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPosixPathSeparator3(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
        ret.base = ret.base || "/";
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) {
        ret.dir = stripTrailingSeparators(path.slice(0, startPart - 1), isPosixPathSeparator3);
    } else if (isAbsolute) ret.dir = "/";
    return ret;
}
function fromFileUrl10(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl10(path) {
    if (!isAbsolute10(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace3(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod12 = {
    sep: sep10,
    delimiter: delimiter10,
    resolve: resolve10,
    normalize: normalize13,
    isAbsolute: isAbsolute10,
    join: join13,
    relative: relative10,
    toNamespacedPath: toNamespacedPath10,
    dirname: dirname10,
    basename: basename10,
    extname: extname10,
    format: format10,
    parse: parse10,
    fromFileUrl: fromFileUrl10,
    toFileUrl: toFileUrl10
};
const path6 = isWindows4 ? mod11 : mod12;
const { join: join14 , normalize: normalize14  } = path6;
const path7 = isWindows4 ? mod11 : mod12;
const { basename: basename11 , delimiter: delimiter11 , dirname: dirname11 , extname: extname11 , format: format11 , fromFileUrl: fromFileUrl11 , isAbsolute: isAbsolute11 , join: join15 , normalize: normalize15 , parse: parse11 , relative: relative11 , resolve: resolve11 , sep: sep11 , toFileUrl: toFileUrl11 , toNamespacedPath: toNamespacedPath11  } = path7;
const sqlCreateSpotprice = "CREATE TABLE IF NOT EXISTS spotprice (id INTEGER PRIMARY KEY AUTOINCREMENT, country VARCHAR(3), area VARCHAR(3), spotprice DOUBLE, date TEXT, period INT)";
const sqlCreateExchangeRate = "CREATE TABLE IF NOT EXISTS exchangerate (id INTEGER PRIMARY KEY AUTOINCREMENT, currency VARCHAR(3), value DOUBLE, date TEXT, period INT);";
const sqlCreateGeneration = "CREATE TABLE IF NOT EXISTS generation (id INTEGER PRIMARY KEY AUTOINCREMENT, area VARCHAR(16), period INT, value DOUBLE, psr TEXT, interval TEXT);";
const sqlCreateLoad = "CREATE TABLE IF NOT EXISTS load (id INTEGER PRIMARY KEY AUTOINCREMENT, area VARCHAR(16), period INT, value DOUBLE, interval TEXT);";
const sqlCreateUpdates = "CREATE TABLE IF NOT EXISTS updates (name TEXT, applied INT);";
const sqlCreatePsr = "CREATE TABLE IF NOT EXISTS psr (psr TEXT, psr_group TEXT);";
const sqlCurrentLoadAndGeneration = `
WITH 
distinct_generation AS (
    SELECT 
        generation.area,
        generation.period,
        generation.interval,
        generation.consumption,
        generation.value,
        generation.psr,
        ROW_NUMBER() OVER(PARTITION BY generation.area, generation.interval,generation.psr,generation.consumption ORDER BY generation.period DESC) AS row_number
    FROM
        generation
    WHERE
        period >= (?)
),
generation_per_psr_group AS (
    SELECT 
        g.area,
        MIN(g.period) as period,
        g.interval,
        psr.psr_group,
        g.consumption,
        SUM(CASE WHEN g.consumption THEN 0-g.value ELSE g.value END) as value
    FROM
        distinct_generation as g
        LEFT JOIN psr ON g.psr = psr.psr
    WHERE
        row_number = 1
    GROUP BY
        g.area,
        g.interval,
        g.consumption,
        psr.psr_group
),
generation_total AS (
    SELECT 
        gen.area,
        MIN(gen.period) as period,
        gen.interval,
        SUM(gen.value) as sum_generation_value,
        MAX(gen.value) as max_generation_value,
        FIRST_VALUE(gen.psr_group) OVER (
            PARTITION BY       
                gen.area,
                gen.interval
            ORDER BY 
                SUM(gen.value) DESC
        ) as primary_psr_group
    FROM
        generation_per_psr_group as gen
    GROUP BY
        gen.area,
        gen.interval
)
SELECT 
    generation_total.area,
    generation_total.period,
    generation_total.interval,
    generation_total.primary_psr_group,
    generation_total.max_generation_value as primary_psr_group_generation,
    generation_total.sum_generation_value as generation_total,
    [load].value as load_total,
    generation_total.sum_generation_value-[load].value as net_generation
FROM
    generation_total
    LEFT JOIN [load]
        ON 
            generation_total.area = [load].area 
            AND generation_total.period = [load].period 
            AND generation_total.interval = [load].interval`;
const sqlLoadAndGeneration = `
    WITH 
    distinct_generation AS (
        SELECT 
            DISTINCT
            generation.area,
            generation.period,
            generation.interval,
            generation.consumption,
            generation.value,
            generation.psr
        FROM
            generation
        WHERE
            area = (?)
            AND period >= (?)
            AND period <=(?)
    ),
    generation_per_psr_group AS (
        SELECT 
            g.area,
            g.period,
            g.interval,
            psr.psr_group,
            SUM(CASE WHEN g.consumption THEN 0-g.value ELSE g.value END) as value
        FROM
            distinct_generation as g
            LEFT JOIN psr ON g.psr = psr.psr
        GROUP BY
            g.area,
            g.period,
            g.interval,
            psr.psr_group
    ),
    generation_total AS (
        SELECT 
            gen.area,
            gen.period,
            gen.interval,
            SUM(gen.value) as sum_generation_value
        FROM
            generation_per_psr_group as gen
        GROUP BY
            gen.area,
            gen.period,
            gen.interval
    ),
    generation_and_load AS (
    SELECT 
        generation_total.period,
        generation_total.sum_generation_value-[load].value as net_generation
    FROM
        generation_total
        INNER JOIN [load]
            ON 
                generation_total.area = [load].area 
                AND generation_total.period = [load].period 
                AND generation_total.interval = [load].interval)
    SELECT
        *
    FROM
        generation_and_load`;
const sqlGroupBy = {
    total: "'total'",
    yearly: "unixepoch(strftime('%Y-01-01 00:00:00',datetime(spotprice.period/1000,'unixepoch'),'localtime'))*1000",
    monthly: "unixepoch(strftime('%Y-%m-01 00:00:00',datetime(spotprice.period/1000,'unixepoch'),'localtime'))*1000",
    daily: "unixepoch(strftime('%Y-%m-%d 00:00:00',datetime(spotprice.period/1000,'unixepoch'),'localtime'))*1000",
    hourly: "unixepoch(datetime(spotprice.period/1000,'unixepoch'))*1000",
    minimum: "spotprice.period"
};
const sqlRaw = `
    SELECT 
        [[groupby]] as grouping,
        AVG(spotprice.spotprice) as avg,
        min(spotprice.spotprice) as min,
        max(spotprice.spotprice) as max
    FROM
        spotprice
    WHERE 
        [[areaField]]=(?) 
        AND spotprice.period >= (?) 
        AND spotprice.period <= (?)
        AND spotprice.interval = (?)
    GROUP BY
        [[groupby]];`;
const sqlLatestPricePerCountry = `
    SELECT
        DISTINCT
        country,
        period,
        interval,
        AVG(spotprice)
    FROM
        spotprice
    WHERE
        period = (?)
    GROUP BY
        country,
        period,
        interval`;
const sqlLatestPricePerArea = `
    SELECT
        area,
        period,
        interval,
        spotprice
    FROM
        spotprice
    WHERE
        period = (?)
    GROUP BY
        area,
        period,
        interval,
        spotprice`;
const sqlConverted = `
WITH er AS (
    SELECT
        e.value
    FROM
        exchangerate e
    WHERE
        currency=(?)
    ORDER BY
        period DESC
    LIMIT
        1
)
SELECT 
    [[groupby]],
    MIN(spotprice)*er.value as avg,
    MAX(spotprice)*er.value as min,
    avg(spotprice)*er.value as max
FROM 
    spotprice 
    LEFT JOIN er 
WHERE
    [[areaField]]=(?)
    AND spotprice.period>=(?)
    AND spotprice.period<=(?)
    AND spotprice.interval=(?)
GROUP BY
    [[groupby]];
`;
const sqlLoad = `
    SELECT 
        DISTINCT
        period,
        value,
        interval
    FROM
        load
    WHERE 
        area=(?) 
        AND period >= (?) 
        AND period < (?)
        AND interval = (?);`;
const sqlGeneration = `
WITH 
distinct_generation AS (
    SELECT 
        DISTINCT
        generation.area,
        generation.period,
        generation.interval,
        generation.consumption,
        generation.value,
        generation.psr
    FROM
        generation
)
        SELECT 
            period,
            psr_group,
            SUM(CASE WHEN consumption THEN 0-value ELSE value END) as value,
            consumption,
            COUNT(distinct_generation.psr) as count_psr
        FROM
            distinct_generation
            LEFT JOIN psr ON psr.psr = distinct_generation.psr
        WHERE 
            area=(?) 
            AND period >= (?) 
            AND period < (?)
            AND interval = (?)
        GROUP BY
            period,
            psr_group,
            interval,
            consumption;`;
const sqlExchangeRates = `
SELECT
    DISTINCT
    e.currency,
    e.value
FROM
    exchangerate e
WHERE
    period=(SELECT MAX(period) FROM exchangerate);`;
const sqlAppliedUpdates = `SELECT
    name,
    applied
FROM
    updates;`;
const sqlCurrentOutagesPerArea = `
SELECT
    outage.start_date,
    outage.end_date,
    outage.resource_name,
    outage.business_type,
    outage.location,
    outage.country,
    outage.psr_name,
    outage.psr_nominal_power,
    outage.psr_nominal_power_unit,
    outage.psr_type,
    outage.reason_code,
    outage.reason_text,
    outage_availability.*
FROM
    outage
    LEFT JOIN outage_availability ON outage.mrid = outage_availability.mrid AND outage_availability.start_date < (?) AND outage_availability.end_date > (?)
WHERE
    country=(?)
    AND outage.start_date < (?)
    AND outage.end_date > (?)
`;
const sqlFutureOutagesPerArea = `
SELECT
    outage.start_date,
    outage.end_date,
    outage.resource_name,
    outage.business_type,
    outage.location,
    outage.country,
    outage.psr_name,
    outage.psr_nominal_power,
    outage.psr_nominal_power_unit,
    outage.psr_type,
    outage.reason_code,
    outage.reason_text
FROM
    outage
WHERE
    country=(?)
    AND outage.start_date > (?)
ORDER BY
    start_date ASC
`;
let level = "normal";
const setLevel = (requestedLevel)=>{
    level = requestedLevel;
};
const log = (type, t)=>{
    if (type == "debug" && level != "debug") return;
    let fn;
    if (type === "log") fn = console.log;
    else if (type === "info") fn = console.info;
    else if (type === "error") fn = console.error;
    else if (type === "debug") fn = console.debug;
    else throw new Error("Invalid log type, cannot log: " + t);
    if (fn) {
        if (false) {
            fn(new Date().toLocaleString("sv-SE"), "Backend:", t);
        } else {
            fn(t);
        }
    }
};
const MemCache = new Map();
const Timer = ()=>{
    const startTime = performance.now();
    return {
        end: ()=>{
            return performance.now() - startTime;
        }
    };
};
const DataCache = async (realm, uniqueId, seconds, liveFetch)=>{
    const timer = Timer();
    if (!MemCache.has(realm)) {
        MemCache.set(realm, new Map());
    }
    const currentRealm = MemCache.get(realm);
    let data, method;
    try {
        let cacheObj;
        if (currentRealm.has(uniqueId)) {
            cacheObj = currentRealm.get(uniqueId);
        }
        if (!cacheObj) throw new Error("Could not read cache");
        const timeLeft = Math.round((cacheObj.dt.getTime() - new Date().getTime() + seconds * 1000) / 1000);
        if (timeLeft <= 0) {
            currentRealm.delete(uniqueId);
            throw new Error("Cache expired");
        }
        data = cacheObj.data;
        method = "cache";
    } catch (_e) {
        const result = await liveFetch();
        currentRealm.set(uniqueId, {
            dt: new Date(),
            data: result
        });
        data = result;
        method = "live";
    }
    if (method === "live") {
        const t = timer.end();
        if (t > 200) {
            log("info", `SLOW Query ${realm}:${uniqueId} completed from ${method} in ${t} ms`);
        } else {
            log("debug", `Query ${realm}:${uniqueId} completed from ${method} in ${t} ms`);
        }
    }
    return data;
};
const DBUpdates = [
    {
        name: "add_consumption_to_generation",
        sql: "ALTER TABLE generation ADD consumption INTEGER DEFAULT(0);"
    },
    {
        name: "add_interval_to_spotprice",
        sql: 'ALTER TABLE spotprice ADD interval TEXT DEFAULT "PT60M";'
    },
    {
        name: "create_spotprice_area_period_index",
        sql: "CREATE INDEX spotprice_area_period ON spotprice (area,period);"
    },
    {
        name: "create_load_area_period_index",
        sql: "CREATE INDEX load_area_period ON load (area,period);"
    },
    {
        name: "create_generation_area_period_index",
        sql: "CREATE INDEX generation_area_period ON generation (area, period);"
    },
    {
        name: "delete_spotprice_date_column",
        sql: "ALTER TABLE spotprice DROP COLUMN date"
    },
    {
        name: "delete_german_and_austrian_history",
        sql: "DELETE FROM spotprice WHERE country='de' OR country='at'"
    },
    {
        name: "insert_psr_groups",
        sql: `INSERT INTO psr
        (psr,psr_group)
        VALUES
        ('B01','other'),
        ('B02','coal'),
        ('B03','gas'),
        ('B04','gas'),
        ('B05','coal'),
        ('B06','oil'),
        ('B07','oil'),
        ('B08','peat'),
        ('B09','other'),
        ('B10','water'),
        ('B11','water'),
        ('B12','water'),
        ('B13','water'),
        ('B14','nuclear'),
        ('B15','other'),
        ('B16','solar'),
        ('B17','other'),
        ('B18','wind'),
        ('B19','wind'),
        ('B20','other');`
    },
    {
        name: "bugfix_biomass_psr",
        sql: `UPDATE psr SET psr_group='other' WHERE psr='B01';`
    },
    {
        name: "add_generation_period_index",
        sql: `CREATE INDEX period ON generation (
      period
    );`
    },
    {
        name: "add_spotprice_period_index",
        sql: `CREATE INDEX spotprice_period ON spotprice (
      period
    );`
    },
    {
        name: "add_outage_table",
        sql: `CREATE TABLE outage (
        mrid                   TEXT    PRIMARY KEY
                                      UNIQUE
                                      NOT NULL,
        revision               NUMERIC,
        business_type          TEXT,
        document_type          TEXT,
        start_date             NUMERIC,
        end_date               NUMERIC,
        resource_name          TEXT,
        location               TEXT,
        country                TEXT,
        psr_name               TEXT,
        psr_nominal_power_unit TEXT,
        psr_nominal_power      NUMERIC,
        psr_type               TEXT,
        reason_code            TEXT,
        reason_text            TEXT
    );`
    },
    {
        name: "add_outage_availability_table",
        sql: `CREATE TABLE outage_availability (
        mrid     TEXT NOT NULL,
        start_date    NUMERIC,
        end_date    NUMERIC,
        quantity NUMERIC
    );`
    }
];
let database;
try {
    const path = resolve11(Deno.cwd(), "./db/"), fileName = resolve11(path, "main.db");
    await Deno.mkdir(path, {
        recursive: true
    });
    database = new DB(fileName);
    database.query(sqlCreateSpotprice);
    database.query(sqlCreateExchangeRate);
    database.query(sqlCreateGeneration);
    database.query(sqlCreateLoad);
    database.query(sqlCreateUpdates);
    database.query(sqlCreatePsr);
    const appliedUpdates = database.query(sqlAppliedUpdates);
    for (const update of DBUpdates){
        if (!appliedUpdates.find((r)=>r[0] == update.name)) {
            log("log", `Applying db update '${update.name}'`);
            try {
                database.query(update.sql);
                database.query("INSERT INTO updates(name, applied) VALUES(?,?)", [
                    update.name,
                    1
                ]);
            } catch (e) {
                log("log", `Database update '${update.name}' failed. Error: ${e.code} ${e}`);
            } finally{
                log("log", `Database update '${update.name}' finalized`);
            }
        }
    }
} catch (_e) {
    console.error("Fatal: Could not open database");
    Deno.exit(1);
}
const GetSpotprice = async (area, country, period, fromDate, toDate, interval, currency)=>{
    if (!Object.keys(sqlGroupBy).includes(period)) {
        throw new Error("Invalid group by option in query");
    }
    const parameterString = new URLSearchParams({
        period,
        area: area || "undefined",
        country: country || "undefined",
        interval,
        currency: currency || "",
        fromDate: fromDate.toISOString(),
        toDate: toDate.toISOString()
    }).toString();
    let cacheLength = 86400;
    if (toDate.getTime() < new Date().getTime()) {
        cacheLength = 3600 * 6;
    }
    if (period.toLowerCase().trim() === "monthly") {
        cacheLength = 3600 * 6;
    }
    const result = await DataCache("spotprice", parameterString, cacheLength, ()=>{
        let data;
        if (currency) {
            data = database.query(sqlConverted.replaceAll("[[groupby]]", sqlGroupBy[period]).replaceAll("[[areaField]]", country ? "country" : "area"), [
                currency,
                country || area,
                fromDate.getTime(),
                toDate.getTime(),
                interval
            ]);
        } else {
            data = database.query(sqlRaw.replaceAll("[[groupby]]", sqlGroupBy[period]).replaceAll("[[areaField]]", country ? "country" : "area"), [
                country || area,
                fromDate.getTime(),
                toDate.getTime(),
                interval
            ]);
        }
        return data.map((r)=>{
            if (r.length > 2) {
                return {
                    time: r.at(0),
                    price: r.at(1),
                    min: r.at(2),
                    max: r.at(3)
                };
            } else {
                return {
                    time: r.at(0),
                    price: r.at(1)
                };
            }
        });
    });
    return result;
};
const GetDataDay = async (areaName, date, interval, currency)=>{
    const startDate = new Date(date), endDate = new Date(date);
    startDate.setHours(0, 0, 0, 0);
    endDate.setHours(23, 59, 59, 999);
    return await GetSpotprice(areaName, undefined, "hourly", startDate, endDate, interval, currency);
};
const GetLoadDay = async (area, fromDateIn, toDateIn, interval)=>{
    const fromDate = new Date(fromDateIn.getTime()), toDate = new Date(toDateIn.getTime());
    fromDate.setHours(0, 0, 0, 0);
    toDate.setHours(23, 59, 59, 999);
    const parameterString = new URLSearchParams({
        interval,
        area,
        f: fromDate.getTime().toString(),
        t: toDate.getTime().toString()
    }).toString();
    return await DataCache("load", parameterString, 86400, ()=>{
        const data = database.query(sqlLoad, [
            area,
            fromDate.getTime(),
            toDate.getTime(),
            interval
        ]);
        return {
            data
        };
    });
};
const GetLastPricePerArea = async ()=>{
    const fromDate = new Date();
    fromDate.setMinutes(0, 0, 0);
    const parameterString = new URLSearchParams({
        query: "lastprice",
        f: fromDate.getTime().toString()
    }).toString();
    return await DataCache("spotprice", parameterString, 86400, ()=>{
        const data = database.query(sqlLatestPricePerArea, [
            fromDate.getTime()
        ]);
        return {
            data
        };
    });
};
const GetLastPricePerCountry = async ()=>{
    const fromDate = new Date();
    fromDate.setMinutes(0, 0, 0);
    const parameterString = new URLSearchParams({
        query: "lastpricec",
        f: fromDate.getTime().toString()
    }).toString();
    return await DataCache("spotprice", parameterString, 86400, ()=>{
        const data = database.query(sqlLatestPricePerCountry, [
            fromDate.getTime()
        ]);
        return {
            data
        };
    });
};
const GetLastGenerationAndLoad = async ()=>{
    const fromDate = new Date();
    fromDate.setHours(fromDate.getHours() - 12, 0, 0, 0);
    const parameterString = new URLSearchParams({
        query: "curgenload",
        f: fromDate.getTime().toString()
    }).toString();
    return await DataCache("generation", parameterString, 86400, ()=>{
        const data = database.query(sqlCurrentLoadAndGeneration, [
            fromDate.getTime()
        ]);
        return {
            data
        };
    });
};
const GetGenerationAndLoad = async (area, fromDateIn, toDateIn)=>{
    const fromDate = new Date(fromDateIn.getTime()), toDate = new Date(toDateIn.getTime());
    fromDate.setHours(0, 0, 0, 0);
    toDate.setHours(0, 0, 0, 0);
    const parameterString = new URLSearchParams({
        query: "genload",
        a: area,
        f: fromDate.getTime().toString(),
        t: toDate.getTime().toString()
    }).toString();
    return await DataCache("generation", parameterString, 86400, ()=>{
        const data = database.query(sqlLoadAndGeneration, [
            area,
            fromDate.getTime(),
            toDate.getTime()
        ]);
        return {
            data
        };
    });
};
const GetGenerationDay = async (area, fromDateIn, toDateIn, interval)=>{
    const fromDate = new Date(fromDateIn.getTime()), toDate = new Date(toDateIn.getTime());
    fromDate.setHours(0, 0, 0, 0);
    toDate.setHours(23, 59, 59, 999);
    const parameterString = new URLSearchParams({
        area,
        f: fromDate.getTime().toString(),
        t: toDate.getTime().toString(),
        interval
    }).toString();
    return await DataCache("generation", parameterString, 86400, ()=>{
        const data = database.query(sqlGeneration, [
            area,
            fromDate.getTime(),
            toDate.getTime(),
            interval
        ]);
        return {
            data
        };
    });
};
const GetDataMonth = async (areaName, date, interval, currency)=>{
    const startDate = new Date(date), endDate = new Date(date);
    startDate.setDate(1);
    startDate.setHours(0, 0, 0, 0);
    endDate.setMonth(endDate.getMonth() + 1);
    endDate.setDate(0);
    endDate.setHours(23, 59, 59, 999);
    return await GetSpotprice(areaName, undefined, "hourly", startDate, endDate, interval, currency);
};
const GetExchangeRates = async ()=>{
    const output = await DataCache("exrate", "__exrate", 86400, ()=>{
        const result = database.query(sqlExchangeRates), entries = {};
        for (const row of result){
            entries[row[0]] = row[1];
        }
        return {
            data: {
                date: new Date().toLocaleDateString("sv-SE"),
                entries
            }
        };
    });
    return output.data;
};
const GetCurrentOutages = async (area)=>{
    const parameterString = new URLSearchParams({
        f: "current",
        area
    }).toString();
    return await DataCache("outage", parameterString, 900, ()=>{
        const data = database.query(sqlCurrentOutagesPerArea, [
            new Date().getTime(),
            new Date().getTime(),
            area,
            new Date().getTime(),
            new Date().getTime()
        ]);
        return {
            data
        };
    });
};
const GetFutureOutages = async (area)=>{
    const parameterString = new URLSearchParams({
        f: "future",
        area
    }).toString();
    return await DataCache("outage", parameterString, 900, ()=>{
        const data = database.query(sqlFutureOutagesPerArea, [
            area,
            new Date().getTime()
        ]);
        return {
            data
        };
    });
};
const handler = {
    async GET (_req, ctx) {
        if (ctx.params.country == "elomrade") {
            return new Response("", {
                status: 307,
                headers: {
                    Location: "/sv/" + ctx.params.area
                }
            });
        }
        const country = countries.find((c)=>c.id === ctx.params.country);
        if (!country) {
            return ctx.renderNotFound();
        }
        const foundArea = country.areas.find((a)=>a.name === ctx.params.area);
        if (!foundArea) {
            return ctx.renderNotFound();
        }
        const er = await GetExchangeRates();
        const todayDate = new Date(), tomorrowDate = new Date(), prevMonthDate = new Date(), yesterdayDate = new Date();
        todayDate.setHours(0, 0, 0, 0);
        yesterdayDate.setDate(yesterdayDate.getDate() - 1);
        tomorrowDate.setDate(tomorrowDate.getDate() + 1);
        prevMonthDate.setDate(1);
        prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);
        const area = {
            ...foundArea,
            dataToday: await GetDataDay(foundArea.name, todayDate, country.interval),
            dataTomorrow: await GetDataDay(foundArea.name, tomorrowDate, country.interval),
            dataMonth: await GetDataMonth(foundArea.name, todayDate, country.interval),
            dataPrevMonth: await GetDataMonth(foundArea.name, prevMonthDate, country.interval)
        };
        const generationAndLoad = await GetGenerationAndLoad(area.id, yesterdayDate, tomorrowDate);
        const pageProps = {
            country,
            area,
            generationAndLoad,
            generation: await GetGenerationDay(area.id, yesterdayDate, todayDate, country.interval),
            load: await GetLoadDay(area.id, yesterdayDate, todayDate, country.interval),
            page: area.id,
            er,
            lang: ctx.state.lang || ctx.params.country
        };
        if (country.areas.length === 1) {
            pageProps.outages = await GetCurrentOutages(country.id), pageProps.futureOutages = await GetFutureOutages(country.id), pageProps.singleArea = true;
        }
        return ctx.render(pageProps);
    }
};
function Area(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: props.data.area.name + " - " + props.data.area.long,
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(AreaIsland, {
                    ...props
                })
            })
        ]
    });
}
const mod13 = {
    handler: handler,
    default: Area
};
const liveViewChartOptions = Object.assign(structuredClone(baseChart), {
    colors: [
        "rgba(224, 255, 24, 0.7)",
        "rgba(24, 255, 124, 0.7)",
        "rgba(24, 144, 255, 0.7)",
        "rgba(232, 24, 255, 0.7)",
        "rgba(224, 24, 71, 0.7)"
    ],
    xaxis: {
        type: "category",
        tickAmount: 6
    }
});
function AllAreaChart(props) {
    const [chartElm, setChartElm] = P2(), [randomChartId] = P2((Math.random() * 10000).toFixed(0));
    const renderChart = (seriesInput, props)=>{
        const series = [];
        for (const s of seriesInput){
            series.push({
                data: s.data.map((e)=>{
                    return {
                        x: formatHhMm(e.time),
                        y: processPrice(e.price, props)
                    };
                }),
                name: s.name
            });
        }
        const chartOptions = {
            ...liveViewChartOptions
        };
        chartOptions.series = series;
        if (props.title === "today") {
            const hourNow = new Date();
            hourNow.setMinutes(0);
            chartOptions.annotations = {
                xaxis: [
                    {
                        x: formatHhMm(hourNow),
                        seriesIndex: 0,
                        borderColor: "#ff7Da0",
                        label: {
                            style: {
                                border: "ff7Da0",
                                color: "#EEE",
                                background: "#234"
                            },
                            text: "Nu"
                        }
                    }
                ]
            };
        }
        if (chartElm) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    const dataArr = [];
    if (props.areas) {
        for (const area of props.areas){
            let dataSet;
            if (props.title == "today") {
                dataSet = applyExchangeRate(area.dataToday, props.er, props.currency);
            } else {
                dataSet = applyExchangeRate(area.dataTomorrow, props.er, props.currency);
            }
            if (dataSet) dataArr.push({
                name: area.name,
                data: dataSet
            });
        }
    }
    j1(()=>{
        if (dataArr?.length) {
            renderChart(dataArr, props);
        }
    }, [
        props.priceFactor
    ]);
    return p1("div", {
        class: "col-lg-6 m-0 p-0",
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: p1("span", {
                                "data-t-key": "common.overview.all_areas_" + props.title,
                                lang: props.lang,
                                children: "All areas"
                            })
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark",
                        children: [
                            !dataArr && p1("div", {
                                class: "col-lg text-center",
                                style: "height: 315px;",
                                children: p1("h6", {
                                    style: "margin:auto;",
                                    children: "Uppdaterad data kommer kring 13:00"
                                })
                            }),
                            dataArr && p1("div", {
                                class: "col-lg",
                                id: "chart_" + randomChartId
                            })
                        ]
                    })
                ]
            })
        })
    });
}
const historyChartOptions = Object.assign(structuredClone(baseChart), {
    colors: [
        "rgba(224, 255, 24, 0.7)",
        "rgba(24, 255, 124, 0.7)",
        "rgba(24, 144, 255, 0.7)",
        "rgba(232, 24, 255, 0.7)",
        "rgba(224, 24, 71, 0.7)"
    ]
});
historyChartOptions.stroke.curve = "smooth";
historyChartOptions.tooltip.x.format = "yyyy MM dd";
function AllAreaChartLongTerm(props) {
    const [chartElm, setChartElm] = P2(), [randomChartId] = P2((Math.random() * 10000).toFixed(0));
    const renderChart = async (props)=>{
        const seriesInput = [];
        for (const area of props.areas){
            let dataSet = await getDataLongTerm(area.name);
            dataSet = applyExchangeRate(dataSet, props.er, props.currency);
            if (dataSet) seriesInput.push({
                name: area.name,
                data: dataSet
            });
        }
        const series = [];
        for (const s of seriesInput){
            series.push({
                data: s.data.map((e)=>{
                    return {
                        x: e.time,
                        y: processPrice(e.price, props)
                    };
                }),
                name: s.name
            });
        }
        const chartOptions = {
            ...historyChartOptions
        };
        chartOptions.series = series;
        if (chartElm) chartElm.destroy();
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
        setChartElm(chart);
    };
    const getDataLongTerm = async (area)=>{
        const startDate = new Date(Date.parse("2021-01-01")), endDate = new Date(new Date().setDate(new Date().getDate() + 1));
        const response = await fetch(generateUrl(area, startDate, endDate, props.country.interval || "PT60M", "monthly"));
        const resultSet = await response.json();
        return resultSet.data;
    };
    j1(()=>{
        renderChart(props);
    }, [
        props.priceFactor
    ]);
    return p1("div", {
        class: "col-lg-6 m-0 p-0",
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: [
                    p1("div", {
                        class: "px-card py-10 m-0 rounded-top",
                        children: p1("h2", {
                            class: "card-title font-size-18 m-0 text-center",
                            children: p1("span", {
                                "data-t-key": "common.overview.all_areas_longterm",
                                lang: props.lang,
                                children: "All areas"
                            })
                        })
                    }),
                    p1("div", {
                        class: "content px-card m-0 p-0 bg-very-dark",
                        children: p1("div", {
                            class: "col-lg",
                            id: "chart_" + randomChartId
                        })
                    })
                ]
            })
        })
    });
}
function CountryIsland(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    const countryElms = props.data.areas?.map((a, idx)=>{
        return p1(SingleAreaOverview, {
            title: a.name + " - " + a.long,
            highlight: "color-" + a.color,
            area: a,
            cols: 3,
            ...commonprops,
            ...props.data
        }, idx);
    });
    const pageLoadTime = new Date();
    new Cron("0 0 * * * *", ()=>{
        if (new Date().getTime() - pageLoadTime.getTime() > 120 * 1000) {
            window?.location?.reload();
        }
    });
    return p1("div", {
        children: p1("div", {
            class: "page-wrapper with-navbar with-sidebar",
            "data-sidebar-hidden": "hidden",
            children: [
                p1(Navbar, {
                    setPriceFactor: setPriceFactorStored,
                    pageType: "country",
                    ...commonprops
                }),
                p1(Sidebar, {
                    setUnit: setUnit,
                    setExtra: setExtra,
                    setFactor: setFactor,
                    setDecimals: setDecimals,
                    setPriceFactor: setPriceFactorStored,
                    setCurrency: setCurrency,
                    ...commonprops
                }),
                p1("div", {
                    class: "content-wrapper",
                    children: [
                        p1("div", {
                            class: "content mt-0 mb-0 pr-0 mr-0 ml-20",
                            children: [
                                p1(PriceFactorWarning, {
                                    priceFactor: !!priceFactor,
                                    factor: factor,
                                    extra: extra,
                                    lang: props.data.lang
                                }),
                                p1("div", {
                                    class: "row",
                                    children: countryElms
                                })
                            ]
                        }),
                        p1("div", {
                            class: "content mt-0 mb-0 mr-0 ml-20",
                            children: p1("div", {
                                class: "row",
                                children: [
                                    p1(AllAreaChart, {
                                        title: "today",
                                        highlight: "color-5",
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(AllAreaChart, {
                                        title: "tomorrow",
                                        highlight: "color-6",
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            })
                        }),
                        p1("div", {
                            class: "content mt-0 mr-0 ml-20",
                            children: p1("div", {
                                class: "row mt-0",
                                children: [
                                    p1(ProductionOverview, {
                                        cols: 4,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(ProductionDetailsTodayChart, {
                                        cols: 4,
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(ProductionTodayChart, {
                                        cols: 4,
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            })
                        }),
                        p1("div", {
                            class: "content mt-0 mr-0 ml-20",
                            children: p1("div", {
                                class: "row mt-0",
                                children: [
                                    p1(AllAreaChartLongTerm, {
                                        ...commonprops,
                                        ...props.data
                                    }),
                                    p1(InformationPane, {
                                        cols: 6,
                                        ...commonprops,
                                        ...props.data
                                    })
                                ]
                            })
                        }),
                        p1("div", {
                            class: "content mt-0 mr-0 ml-20",
                            children: p1("div", {
                                class: "row mt-0",
                                children: p1(OutageOverview, {
                                    cols: 12,
                                    ...commonprops,
                                    ...props.data
                                })
                            })
                        })
                    ]
                })
            ]
        })
    });
}
const mod14 = {
    default: CountryIsland
};
const handler1 = {
    async GET (_req, ctx) {
        const country = countries.find((c)=>c.id === ctx.params.country);
        if (!country) {
            return ctx.renderNotFound();
        }
        if (country.areas.length === 1) {
            return new Response("", {
                status: 307,
                headers: {
                    Location: "/" + country.id + "/" + country.areas[0].name
                }
            });
        }
        const er = await GetExchangeRates();
        const areas = [], todayDate = new Date(), yesterdayDate = new Date(), tomorrowDate = new Date(), firstDayOfMonth = new Date();
        yesterdayDate.setDate(yesterdayDate.getDate() - 1);
        tomorrowDate.setDate(tomorrowDate.getDate() + 1);
        firstDayOfMonth.setDate(1);
        for (const areaObj of country.areas){
            areas.push({
                ...areaObj,
                dataToday: await GetDataDay(areaObj.name, todayDate, country.interval),
                dataTomorrow: await GetDataDay(areaObj.name, tomorrowDate, country.interval),
                dataMonth: await GetDataMonth(areaObj.name, todayDate, country.interval)
            });
        }
        const generationAndLoad = await GetGenerationAndLoad(country.cty, yesterdayDate, tomorrowDate);
        const pageProps = {
            country,
            generationAndLoad,
            generation: await GetGenerationDay(country.cty, yesterdayDate, todayDate, country.interval),
            load: await GetLoadDay(country.cty, yesterdayDate, todayDate, country.interval),
            outages: await GetCurrentOutages(country.id),
            futureOutages: await GetFutureOutages(country.id),
            er,
            page: country.id,
            areas,
            lang: ctx.state.lang || ctx.params.country
        };
        return ctx.render(pageProps);
    }
};
function Index(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: props.data.country?.name + " - " + props.data.country?.areas.map((a)=>a.name).join(", "),
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(CountryIsland, {
                    ...props
                })
            })
        ]
    });
}
const mod15 = {
    handler: handler1,
    default: Index
};
function NotFoundPage({ url  }) {
    return p1("p", {
        children: "404 not found"
    });
}
const mod16 = {
    default: NotFoundPage
};
function Error500Page({ error  }) {
    return p1("p", {
        children: "500 internal error"
    });
}
const mod17 = {
    default: Error500Page
};
const handler2 = [
    function languageMiddleware(req, ctx) {
        const langRaw = req.headers.get("accept-language");
        let lang;
        if (langRaw) {
            const langSplit = langRaw.split(";");
            const firstLang = langSplit[0].split(",");
            const actualLang = firstLang[0].split("-");
            if (actualLang[0].includes("sv")) {
                lang = "sv";
            } else if (actualLang[0].includes("fi")) {
                lang = "fi";
            } else if (actualLang[0].includes("no")) {
                lang = "no";
            } else if (actualLang[0].includes("dk")) {
                lang = "dk";
            } else if (actualLang[0].includes("de")) {
                lang = "de";
            } else if (actualLang[0].includes("en")) {
                lang = "en";
            } else {
                lang = langFromUrl(new URL(req.url));
            }
        } else {
            lang = langFromUrl(new URL(req.url));
        }
        const urlParsed = new URL(req.url);
        if (urlParsed.searchParams.has("lang")) {
            lang = urlParsed.searchParams.get("lang");
        }
        if (!lang) {
            lang = "en";
        }
        ctx.state.lang = lang;
        return ctx.next();
    }
];
const mod18 = {
    handler: handler2
};
const handler3 = {
    async GET (req, _ctx) {
        const url = new URL(req.url);
        const area = url.searchParams.get("area")?.trim().toUpperCase(), currency = url.searchParams.get("currency")?.trim().toUpperCase(), factor = parseFloat(url.searchParams.get("factor")?.trim() || "1"), extra = parseFloat(url.searchParams.get("extra")?.trim().toUpperCase() || "0"), decimals = parseInt(url.searchParams.get("decimals")?.trim().toUpperCase() || "5", 10), interval = url.searchParams.get("interval")?.trim().toUpperCase() || "PT60M";
        if (!area || !currency || isNaN(factor) || isNaN(extra) || isNaN(decimals) || !interval) {
            return new Response(JSON.stringify({
                status: "error",
                details: "Missing/invalid parameters"
            }), {
                status: 500
            });
        }
        try {
            const dateYesterday = new Date(), dateToday = new Date(), dateTomorrow = new Date();
            dateYesterday.setDate(dateYesterday.getDate() - 1);
            dateTomorrow.setDate(dateTomorrow.getDate() + 1);
            const tomorrow = await GetDataDay(area, dateTomorrow, interval, currency), today = await GetDataDay(area, dateToday, interval, currency), yesterday = await GetDataDay(area, dateYesterday, interval, currency);
            const data = [
                ...yesterday,
                ...today,
                ...tomorrow
            ];
            return new Response(JSON.stringify(processData(data, yesterday, today, tomorrow, currency, extra, factor, decimals)), {
                status: 200
            });
        } catch (e) {
            return new Response(JSON.stringify({
                status: "error",
                details: "Query failed"
            }), {
                status: 500
            });
        }
    }
};
const processData = (data, yesterday, today, tomorrow, currency, extra, factor, decimals)=>{
    return {
        updated: new Date(),
        now: processPrice(nowPrice(today), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        avg: processPrice(avgPrice(today), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        min: processPrice(minPrice(today), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        max: processPrice(maxPrice(today), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        avg_tomorrow: processPrice(avgPrice(tomorrow), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        min_tomorrow: processPrice(minPrice(tomorrow), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        max_tomorrow: processPrice(maxPrice(tomorrow), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        avg_yesterday: processPrice(avgPrice(yesterday), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        min_yesterday: processPrice(minPrice(yesterday), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        max_yesterday: processPrice(maxPrice(yesterday), {
            currency,
            extra,
            factor,
            unit: "kWh",
            decimals,
            priceFactor: true
        }),
        data: data.map((r)=>{
            return {
                st: new Date(r.time),
                p: processPrice(r.price, {
                    currency,
                    extra,
                    factor,
                    unit: "kWh",
                    decimals,
                    priceFactor: true
                })
            };
        })
    };
};
const mod19 = {
    handler: handler3
};
const handler4 = {
    async GET (req, _ctx) {
        const url = new URL(req.url);
        const period = url.searchParams.get("period")?.trim().toLowerCase() || "", area = url.searchParams.get("area")?.trim().toUpperCase() || "", currency = url.searchParams.get("currency")?.trim().toUpperCase() || undefined, startDate = new Date(Date.parse(url.searchParams.get("startDate") || "")), endDate = new Date(Date.parse(url.searchParams.get("endDate") || "")), interval = url.searchParams.get("interval") || "PT60M";
        const validPeriods = Object.keys(sqlGroupBy);
        if (!validPeriods.includes(period)) {
            return new Response(JSON.stringify({
                status: "error",
                details: "Period not valid"
            }), {
                status: 500
            });
        }
        startDate.setHours(0, 0, 0, 0);
        endDate.setHours(23, 59, 59, 999);
        try {
            const data = await GetSpotprice(area, undefined, period, startDate, endDate, interval, currency);
            return new Response(JSON.stringify({
                status: "ok",
                data: data
            }), {
                status: 200
            });
        } catch (e) {
            console.error(e);
            return new Response(JSON.stringify({
                status: "error",
                details: "Query failed"
            }), {
                status: 500
            });
        }
    }
};
const mod20 = {
    handler: handler4
};
const tableChartOptions = Object.assign(structuredClone(baseChart), {
    colors: [
        "#54EF54"
    ],
    fill: {
        type: "gradient",
        gradient: {
            shade: "dark",
            gradientToColors: [
                "#FD4835"
            ],
            shadeIntensity: 1,
            type: "vertical",
            opacityFrom: 1,
            opacityTo: 1,
            stops: [
                0,
                100
            ]
        }
    }
});
tableChartOptions.stroke.curve = "smooth";
function Table1(props) {
    const randomChartId = (Math.random() * 10000).toFixed(0);
    const renderChart = (result)=>{
        if (result.length > 24 * 30) return;
        const chartOptions = {
            ...tableChartOptions
        }, chartSeries = [];
        chartSeries.push({
            data: result.flatMap(({ time , price  })=>{
                if (price !== null) return [
                    [
                        time,
                        processPrice(price, props)
                    ]
                ];
                return [];
            }),
            name: ""
        });
        chartOptions.series = chartSeries;
        const chart = new ApexCharts(document.querySelector("#chart_" + randomChartId), chartOptions);
        chart.render();
    };
    j1(()=>{
        applyExchangeRate(props.resultSet, props.er, props.currency);
        renderChart(props.resultSet);
    });
    return p1("div", {
        class: "content",
        children: p1("div", {
            class: "container",
            children: [
                p1("div", {
                    class: "row",
                    children: p1("div", {
                        class: "col-md m-0 p-0",
                        children: p1("div", {
                            class: "mw-full m-0 p-0 mr-20 mt-20",
                            children: p1("div", {
                                class: "card p-0 m-0",
                                children: [
                                    p1("div", {
                                        class: "px-card py-10 m-0 rounded-top",
                                        children: p1("h2", {
                                            class: "card-title font-size-18 m-0 text-center",
                                            children: p1("span", {
                                                children: "Result"
                                            })
                                        })
                                    }),
                                    p1("div", {
                                        class: "content px-card m-0 p-0 bg-very-dark",
                                        children: p1("div", {
                                            class: "row",
                                            children: [
                                                p1("div", {
                                                    class: "col-md-8",
                                                    id: "chart_" + randomChartId
                                                }),
                                                p1("div", {
                                                    class: "col-sm-4",
                                                    children: p1("table", {
                                                        children: [
                                                            p1("tr", {
                                                                children: [
                                                                    p1("td", {
                                                                        class: "font-size-18",
                                                                        children: "Average"
                                                                    }),
                                                                    p1("td", {
                                                                        class: "font-size-24",
                                                                        children: [
                                                                            processPrice(avgPrice(props.resultSet), props),
                                                                            " ",
                                                                            props.currency
                                                                        ]
                                                                    })
                                                                ]
                                                            }),
                                                            p1("tr", {
                                                                children: [
                                                                    p1("td", {
                                                                        class: "font-size-18",
                                                                        children: "Minimum"
                                                                    }),
                                                                    p1("td", {
                                                                        class: "font-size-24",
                                                                        children: [
                                                                            processPrice(minPrice(props.resultSet), props),
                                                                            " ",
                                                                            props.currency
                                                                        ]
                                                                    })
                                                                ]
                                                            }),
                                                            p1("tr", {
                                                                children: [
                                                                    p1("td", {
                                                                        class: "font-size-18",
                                                                        children: "Maximum"
                                                                    }),
                                                                    p1("td", {
                                                                        class: "font-size-24",
                                                                        children: [
                                                                            processPrice(maxPrice(props.resultSet), props),
                                                                            " ",
                                                                            props.currency
                                                                        ]
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                })
                                            ]
                                        })
                                    })
                                ]
                            })
                        })
                    })
                }),
                p1("div", {
                    children: p1("div", {
                        class: "col-sm",
                        children: p1("div", {
                            class: "mb-10 text-right",
                            children: [
                                props.permalink && p1("a", {
                                    href: props.permalink,
                                    children: "Permalink 🔗"
                                }),
                                p1("span", {
                                    children: "|"
                                }),
                                props.permalinkJson && p1("a", {
                                    href: props.permalinkJson,
                                    children: "Json-data 🔗"
                                })
                            ]
                        })
                    })
                }),
                p1("div", {
                    class: "row",
                    children: p1("div", {
                        class: "col-sm",
                        children: p1("table", {
                            class: "table",
                            children: [
                                p1("thead", {
                                    children: p1("tr", {
                                        children: [
                                            p1("th", {
                                                scope: "col",
                                                children: "Date/Time"
                                            }),
                                            p1("th", {
                                                scope: "col",
                                                children: "Price"
                                            }),
                                            p1("th", {
                                                scope: "col",
                                                children: "Min"
                                            }),
                                            p1("th", {
                                                scope: "col",
                                                children: "Max"
                                            }),
                                            p1("th", {
                                                scope: "col",
                                                children: "Unit"
                                            })
                                        ]
                                    })
                                }),
                                p1("tbody", {
                                    children: props.resultSet.length < 24 * 30 && props.resultSet.map((e)=>{
                                        return p1("tr", {
                                            children: [
                                                p1("td", {
                                                    children: new Date(e.time).toLocaleString()
                                                }),
                                                p1("td", {
                                                    children: processPrice(e.price, props)
                                                }),
                                                p1("td", {
                                                    children: e.min ? processPrice(e.min, props) : "-"
                                                }),
                                                p1("td", {
                                                    children: e.max ? processPrice(e.max, props) : "-"
                                                }),
                                                p1("td", {
                                                    children: [
                                                        props.currency,
                                                        "/kWh"
                                                    ]
                                                })
                                            ]
                                        });
                                    })
                                })
                            ]
                        })
                    })
                })
            ]
        })
    });
}
function FilteredTable(props) {
    const [resultSet, setResultSet] = P2();
    const [area, setArea] = P2(props.area?.name || "SE1");
    const [period, setPeriod] = P2(props.period || "daily");
    const [startDate, setStartDate] = P2(props.startDate || new Date().toISOString().split("T")[0]);
    const [endDate, setEndDate] = P2(props.endDate || new Date().toISOString().split("T")[0]);
    const [permalink, setPermalink] = P2("");
    const [permalinkJson, setPermalinkJson] = P2("");
    const [loading, setLoading] = P2(false);
    const getData = async ()=>{
        setLoading(true);
        setResultSet(undefined);
        if (ensureLocalProps()) {
            const url = generateUrl(area, new Date(Date.parse(startDate)), new Date(new Date(Date.parse(endDate))), "PT60M", period);
            if (url) {
                setPermalinkJson(url);
                const response = await fetch(url);
                let result = await response.json();
                result = applyExchangeRate(result.data, props.er, props.currency);
                setResultSet(result);
            }
        }
        setLoading(false);
    };
    const ensureUrlProps = ()=>props.area && props.currency && props.period && props.startDate && props.endDate && true;
    const ensureLocalProps = ()=>area && period && startDate && endDate && true;
    const tryGetData = ()=>{
        if (ensureUrlProps()) {
            getData();
        }
    };
    j1(()=>{
        tryGetData();
    }, []);
    return p1("div", {
        class: "content-wrapper",
        children: [
            p1("div", {
                class: "content",
                children: [
                    p1("h2", {
                        class: "content-title",
                        children: "Urval"
                    }),
                    p1("div", {
                        class: "form-row row-eq-spacing-sm",
                        children: [
                            p1("div", {
                                class: "col-sm",
                                children: [
                                    p1("label", {
                                        for: "period",
                                        children: "Period"
                                    }),
                                    p1("select", {
                                        class: "form-control",
                                        name: "period",
                                        value: period,
                                        onChange: (e)=>setPeriod(e.target.value),
                                        required: true,
                                        children: [
                                            p1("option", {
                                                value: "hourly",
                                                children: "Timme"
                                            }),
                                            p1("option", {
                                                value: "daily",
                                                children: "Dag"
                                            }),
                                            p1("option", {
                                                value: "weekly",
                                                children: "Vecka"
                                            }),
                                            p1("option", {
                                                value: "monthly",
                                                children: "M\xe5nad"
                                            }),
                                            p1("option", {
                                                value: "yearly",
                                                children: "\xc5r"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "col-sm",
                                children: [
                                    p1("label", {
                                        for: "area",
                                        children: "Elprisomr\xe5de"
                                    }),
                                    p1("select", {
                                        class: "form-control",
                                        name: "area",
                                        value: area,
                                        onChange: (e)=>setArea(e.target.value),
                                        required: true,
                                        children: [
                                            countries.map((c)=>p1(L, {
                                                    children: c.areas.map((a)=>p1(L, {
                                                            children: a.name != props.area?.name && p1(L, {
                                                                children: p1("option", {
                                                                    value: a.name,
                                                                    children: [
                                                                        a.name,
                                                                        " - ",
                                                                        a.long
                                                                    ]
                                                                })
                                                            })
                                                        }))
                                                })),
                                            ";"
                                        ]
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "col-sm",
                                children: [
                                    p1("label", {
                                        for: "date",
                                        children: "Startdatum"
                                    }),
                                    p1("input", {
                                        class: "form-control",
                                        type: "date",
                                        name: "startDate",
                                        value: startDate,
                                        onInput: (e)=>setStartDate(e.target.value)
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "col-sm",
                                children: [
                                    p1("label", {
                                        for: "date",
                                        children: "Slutdatum"
                                    }),
                                    p1("input", {
                                        class: "form-control",
                                        type: "date",
                                        name: "endDate",
                                        value: endDate,
                                        onInput: (e)=>setEndDate(e.target.value)
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "col-sm",
                                children: [
                                    p1("label", {
                                        for: "ok",
                                        children: "\xa0"
                                    }),
                                    p1("button", {
                                        class: "form-control btn btn-success",
                                        type: "button",
                                        name: "ok",
                                        id: "ok",
                                        onClick: getData,
                                        children: "H\xe4mta"
                                    })
                                ]
                            })
                        ]
                    }),
                    period != "hourly" && !resultSet && p1("div", {
                        class: "alert alert-secondary",
                        role: "alert",
                        children: [
                            p1("h4", {
                                class: "alert-heading",
                                children: "Vid urval p\xe5 m\xe5nad eller vecka"
                            }),
                            "N\xe4r du g\xf6r urval per m\xe5nad eller vecka, ange det sista datumet i den sista m\xe5naden eller veckan du vill se."
                        ]
                    })
                ]
            }),
            resultSet && p1(Table1, {
                resultSet: resultSet,
                permalink: permalink,
                permalinkJson: permalinkJson,
                ...props
            }),
            loading && p1("div", {
                class: "content",
                "aria-busy": "true",
                children: p1("h5", {
                    children: "Fetching latest data ..."
                })
            })
        ]
    });
}
function CustomIsland(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    return p1("div", {
        children: p1("div", {
            class: "page-wrapper with-sidebar with-navbar",
            children: [
                p1(Navbar, {
                    setPriceFactor: setPriceFactorStored,
                    pageType: "generic",
                    ...commonprops
                }),
                p1(Sidebar, {
                    setUnit: setUnit,
                    setExtra: setExtra,
                    setFactor: setFactor,
                    setDecimals: setDecimals,
                    setPriceFactor: setPriceFactorStored,
                    setCurrency: setCurrency,
                    ...commonprops
                }),
                p1(FilteredTable, {
                    ...commonprops,
                    ...props.data
                })
            ]
        })
    });
}
const mod21 = {
    default: CustomIsland
};
const handler5 = {
    async GET (req, ctx) {
        const url = new URL(req.url), area = url.searchParams.get("area"), period = url.searchParams.get("period"), startDate = url.searchParams.get("startDate"), endDate = url.searchParams.get("endDate");
        const er = await GetExchangeRates();
        return ctx.render({
            permission: ctx.state.data,
            area,
            period,
            startDate,
            endDate,
            er,
            lang: ctx.state.lang
        });
    }
};
function Home(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: " - Anpassad period",
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(CustomIsland, {
                    ...props
                })
            })
        ]
    });
}
const mod22 = {
    handler: handler5,
    default: Home
};
function HassIsland(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    return p1("div", {
        class: "page-wrapper with-navbar with-sidebar",
        "data-sidebar-hidden": "hidden",
        children: [
            p1(Navbar, {
                setPriceFactor: setPriceFactorStored,
                pageType: "generic",
                ...commonprops
            }),
            p1(Sidebar, {
                setUnit: setUnit,
                setExtra: setExtra,
                setFactor: setFactor,
                setDecimals: setDecimals,
                setPriceFactor: setPriceFactorStored,
                setCurrency: setCurrency,
                ...commonprops
            }),
            p1("div", {
                class: "content-wrapper",
                children: p1("div", {
                    class: "row",
                    children: p1("div", {
                        class: "col-xl-12",
                        children: [
                            p1("div", {
                                class: "content",
                                children: [
                                    p1("h1", {
                                        class: "content-title",
                                        children: "Help"
                                    }),
                                    p1("h2", {
                                        class: "content-title",
                                        children: "Installing as an app"
                                    }),
                                    p1("p", {
                                        children: [
                                            "spot.56k.guru is available as an app (",
                                            p1("a", {
                                                href: "https://web.dev/what-are-pwas/",
                                                children: "PWA"
                                            }),
                                            ") for Windows, Android and Apple OS devices. Follow the instructions below to install the app."
                                        ]
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "content row",
                                children: [
                                    p1("div", {
                                        class: "px-card col-md-4",
                                        children: [
                                            p1("div", {
                                                class: "card-title",
                                                children: p1("h3", {
                                                    class: "content-title",
                                                    children: "Windows (Chrome)"
                                                })
                                            }),
                                            p1("p", {
                                                children: "On your computer, open Chrome."
                                            }),
                                            p1("ol", {
                                                children: [
                                                    p1("li", {
                                                        children: "At the top right of the address bar, click Install."
                                                    }),
                                                    p1("li", {
                                                        children: "Follow the onscreen instructions."
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    p1("div", {
                                        class: "px-card col-md-4",
                                        children: [
                                            p1("div", {
                                                class: "card-title",
                                                children: p1("h3", {
                                                    class: "content-title",
                                                    children: "Android (Chrome)"
                                                })
                                            }),
                                            p1("p", {
                                                children: "On your Android device, open Chrome."
                                            }),
                                            p1("ol", {
                                                children: [
                                                    p1("li", {
                                                        children: 'Tap Install. If you\'ve already dismissed the installation pop-up - you can use the three-dot menu, then click "Install".'
                                                    }),
                                                    p1("li", {
                                                        children: "Follow the onscreen instructions."
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    p1("div", {
                                        class: "px-card col-md-4",
                                        children: [
                                            p1("div", {
                                                class: "card-title",
                                                children: p1("h3", {
                                                    class: "content-title",
                                                    children: "Apple/iOS"
                                                })
                                            }),
                                            p1("p", {
                                                children: "On your Apple device, open Safari. It is not possible to install Progressive web apps from Chrome on Apple devices."
                                            }),
                                            p1("ol", {
                                                children: [
                                                    p1("li", {
                                                        children: 'Press the "Share" button.'
                                                    }),
                                                    p1("li", {
                                                        children: 'Select "Add to home screen"'
                                                    }),
                                                    p1("li", {
                                                        children: 'Tap "Add" in the top right corner to finish'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            p1("div", {
                                class: "col-xl on-this-page-nav-container",
                                children: p1("div", {
                                    class: "content",
                                    children: p1(InformationPane, {
                                        cols: 12,
                                        ...commonprops,
                                        ...props.data
                                    })
                                })
                            })
                        ]
                    })
                })
            })
        ]
    });
}
const mod23 = {
    default: HassIsland
};
const handler6 = {
    async GET (_req, ctx) {
        const er = await GetExchangeRates();
        const pageProps = {
            er,
            page: "index",
            lang: ctx.state.lang || ctx.params.country
        };
        return ctx.render(pageProps);
    }
};
function HomeAssistant(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: "Help - Install app, more information",
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(HassIsland, {
                    ...props
                })
            })
        ]
    });
}
const mod24 = {
    handler: handler6,
    default: HomeAssistant
};
function HassIsland1(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    j1(()=>{
        const apexConf = `type: custom:apexcharts-card
        experimental:
          color_threshold: true
        graph_span: 2day
        update_interval: 2m
        now:
          show: true
          label: Now
          color: gray
        span:
          offset: '+0day'
          start: day
        yaxis:
          - id: primary
            decimals: 0
            min: 0
        header:
          show: true
          title: Electricity Price - Today and tomorrow
          show_states: true
          colorize_states: true
        all_series_config:
          color_threshold:
            - value: 0
              color: green
            - value: 75
              color: orange
            - value: 130
              color: red
          unit: '${currency}/kWh'
          type: line
          stroke_width: 0
          show:
            legend_value: false
            in_header: true
            header_color_threshold: true
        series:
          - entity: sensor.spotprice_now
            type: column
            name: Right now
            show:
              extremas: true
              in_header: before_now
            data_generator: >
              return
              entity.attributes.data.map(e=>[Date.parse(e.st),parseFloat(e.p)]);
          - entity: sensor.spotprice_now
            name: Today (avg)
            data_generator: >
              return [[new Date(),entity.attributes.avg]]
          - entity: sensor.spotprice_now
            name: Tomorrow (avg)
            data_generator: >
              return [[new Date(),entity.attributes.avg_tomorrow]]`;
        const hassConf = `rest:
    - scan_interval: 180
      resource: https://spot.56k.guru/api/v2/hass?currency=${currency}&area=SE2&extra=${extra}&factor=${factor}&decimals=${decimals}
      sensor:
        - name: "Spotprice Now"
          unique_id: "56k_spotprice_now"
          value_template: "{{ value_json.now }}"
          unit_of_measurement: "${currency}/kWh"
          device_class: "monetary"
          json_attributes:
            - data
            - avg
            - min
            - max
            - avg_tomorrow
            - min_tomorrow
            - max_tomorrow
            - avg_yesterday
            - min_yesterday
            - max_yesterday`;
        const hassElm = document.getElementById('hass-conf'), apexElm = document.getElementById('apex-conf');
        if (apexElm) apexElm.innerHTML = apexConf;
        if (hassElm) hassElm.innerHTML = hassConf;
        hljs.highlightAll();
    }, [
        currency,
        extra,
        factor,
        decimals
    ]);
    return p1("div", {
        children: p1("div", {
            class: "page-wrapper with-navbar with-sidebar",
            "data-sidebar-hidden": "hidden",
            children: [
                p1(Navbar, {
                    setPriceFactor: setPriceFactorStored,
                    pageType: "generic",
                    ...commonprops
                }),
                p1(Sidebar, {
                    setUnit: setUnit,
                    setExtra: setExtra,
                    setFactor: setFactor,
                    setDecimals: setDecimals,
                    setPriceFactor: setPriceFactorStored,
                    setCurrency: setCurrency,
                    ...commonprops
                }),
                p1("div", {
                    class: "content-wrapper",
                    children: [
                        p1("div", {
                            class: "row",
                            children: p1("div", {
                                class: "col-lg-7",
                                children: p1("div", {
                                    class: "content",
                                    children: p1("h1", {
                                        class: "content-title font-size-24",
                                        children: "Home assistant"
                                    })
                                })
                            })
                        }),
                        p1("div", {
                            class: "row",
                            children: [
                                p1("div", {
                                    class: "col-lg-7",
                                    children: [
                                        p1("div", {
                                            class: "content mt-0",
                                            children: [
                                                p1("p", {
                                                    class: "mt-0",
                                                    children: "You can easily get current and historical electricity prices in Home Assistant by using our REST endpoint together with Home Assistant's REST integration."
                                                }),
                                                p1("p", {
                                                    children: "The example configuration gives you an entity called entities.spotprice_now, which displays the spot price right now. The device also receives a number of attributes, e.g."
                                                }),
                                                p1("ul", {
                                                    children: [
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "data"
                                                                }),
                                                                " - full hourly history, yesterday to tomorrow."
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "min/max/avg"
                                                                }),
                                                                " - Today's hourly price"
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "min/max/avg_tomorrow"
                                                                }),
                                                                " - Tomorrow's hourly price"
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "min/max/avg_yesterday"
                                                                }),
                                                                " - Yesterday's hourly price"
                                                            ]
                                                        })
                                                    ]
                                                }),
                                                p1("p", {
                                                    children: "If you customize your price settings on the page (using the hamburger menu), your changes will be immediately reflected in the configuration to the right."
                                                }),
                                                p1("p", {
                                                    children: "The service is free and open to everyone, no API key is required. However, it is used at your own risk, no guarantees are given! More information about data source and data quality can be found at the bottom of the page."
                                                })
                                            ]
                                        }),
                                        p1("div", {
                                            class: "content",
                                            children: [
                                                p1("h2", {
                                                    class: "font-size-24",
                                                    children: "Parameters"
                                                }),
                                                p1("p", {
                                                    children: [
                                                        "The base url to the endpoint is ",
                                                        p1("code", {
                                                            children: "https://spot.56k.guru/api/v2/hass"
                                                        }),
                                                        ", and the following parameters is available."
                                                    ]
                                                }),
                                                p1("p", {
                                                    children: "NOTE: If you've made any customizations on this page, the example url is already up to date with your personal settings."
                                                }),
                                                p1("ul", {
                                                    children: [
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "currency"
                                                                }),
                                                                p1("span", {
                                                                    children: [
                                                                        " - ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "SEK"
                                                                        }),
                                                                        " ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "NOK"
                                                                        }),
                                                                        " ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "EUR"
                                                                        }),
                                                                        " ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "PLN"
                                                                        }),
                                                                        " ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "..."
                                                                        })
                                                                    ]
                                                                })
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "area"
                                                                }),
                                                                p1("span", {
                                                                    children: [
                                                                        " - If you browse to the area of interest on this page, you'll have the area id as the last part of the URL - something like ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "SE"
                                                                        }),
                                                                        " or ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "DE-LU"
                                                                        })
                                                                    ]
                                                                })
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "extra"
                                                                }),
                                                                p1("span", {
                                                                    children: [
                                                                        " - Your fees per kWh in chosen currency, before VAT. Example: ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "0.05"
                                                                        }),
                                                                        " for 5 cents per kWh"
                                                                    ]
                                                                })
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "factor"
                                                                }),
                                                                p1("span", {
                                                                    children: [
                                                                        " - Factor for VAT. ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "1"
                                                                        }),
                                                                        " is no VAT, ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "1.25"
                                                                        }),
                                                                        " is 25% VAT and so on."
                                                                    ]
                                                                })
                                                            ]
                                                        }),
                                                        p1("li", {
                                                            children: [
                                                                p1("strong", {
                                                                    children: "decimals"
                                                                }),
                                                                p1("span", {
                                                                    children: [
                                                                        " - Precision for all price points, ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "2"
                                                                        }),
                                                                        " will result in 0.05kWh, ",
                                                                        p1("code", {
                                                                            class: "code",
                                                                            children: "4"
                                                                        }),
                                                                        " -> 0.00521, and so on."
                                                                    ]
                                                                })
                                                            ]
                                                        })
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                p1("div", {
                                    class: "col-lg-5",
                                    children: p1("div", {
                                        class: "content mt-0",
                                        children: p1("div", {
                                            class: "card p-0 m-0",
                                            children: [
                                                p1("div", {
                                                    class: "code-header rounded-top p-10 pl-15",
                                                    children: [
                                                        "configuration.yaml",
                                                        p1("br", {}),
                                                        p1("small", {
                                                            children: [
                                                                " - Showing spot price (no factor or fees added) of SE2 in ",
                                                                commonprops.currency,
                                                                "."
                                                            ]
                                                        })
                                                    ]
                                                }),
                                                p1("div", {
                                                    class: "code-container",
                                                    children: p1("pre", {
                                                        class: "m-0",
                                                        children: p1("code", {
                                                            class: "language-yaml",
                                                            id: "hass-conf"
                                                        })
                                                    })
                                                })
                                            ]
                                        })
                                    })
                                })
                            ]
                        }),
                        p1("div", {
                            class: "row",
                            children: p1("div", {
                                class: "col-lg-7",
                                children: p1("div", {
                                    class: "content",
                                    children: p1("h1", {
                                        class: "content-title font-size-24",
                                        children: "Apexcharts-card in Lovelace"
                                    })
                                })
                            })
                        }),
                        p1("div", {
                            class: "row",
                            children: [
                                p1("div", {
                                    class: "col-lg-7",
                                    children: [
                                        p1("div", {
                                            class: "content mt-0",
                                            children: [
                                                p1("p", {
                                                    class: "mt-0",
                                                    children: "This is an example showing how to use above configuration out of the box, to render a nice graph showing electricity prices for today and tomorrow."
                                                }),
                                                p1("p", {
                                                    children: "Note that all values in the graph is multiplied by 100 to show cents or \xf6re instead of EUR or SEK."
                                                }),
                                                p1("img", {
                                                    src: "/img/homeassistant-spot-price-apexcharts-card-example.png",
                                                    alt: "Home Assistant spotprice example"
                                                })
                                            ]
                                        }),
                                        p1("div", {
                                            class: "content",
                                            children: p1(InformationPane, {
                                                cols: 12,
                                                ...commonprops,
                                                ...props.data,
                                                lang: "en"
                                            })
                                        })
                                    ]
                                }),
                                p1("div", {
                                    class: "col-lg-5",
                                    children: p1("div", {
                                        class: "content mt-0",
                                        children: p1("div", {
                                            class: "card p-0 m-0",
                                            children: [
                                                p1("div", {
                                                    class: "code-header rounded-top p-10 pl-15",
                                                    children: "Apexchart-card config"
                                                }),
                                                p1("div", {
                                                    class: "code-container",
                                                    children: p1("pre", {
                                                        class: "m-0",
                                                        children: p1("code", {
                                                            class: "language-yaml",
                                                            id: "apex-conf"
                                                        })
                                                    })
                                                })
                                            ]
                                        })
                                    })
                                })
                            ]
                        })
                    ]
                })
            ]
        })
    });
}
const mod25 = {
    default: HassIsland1
};
const handler7 = {
    async GET (_req, ctx) {
        const er = await GetExchangeRates();
        const pageProps = {
            er,
            page: "homeassistant",
            lang: ctx.state.lang || ctx.params.country
        };
        return ctx.render(pageProps);
    }
};
function HomeAssistant1(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: "Home Assistant REST integration",
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(HassIsland1, {
                    ...props
                })
            })
        ]
    });
}
const mod26 = {
    handler: handler7,
    default: HomeAssistant1
};
function ProductionByCountry(props) {
    const GetPriceRowCountry = (country, interval)=>{
        const found = props.pricePerCountry.data.find((e)=>e[0] === country && e[2] === interval);
        return found ? found[3] : undefined;
    };
    const GetPriceRowArea = (area, interval)=>{
        const found = props.pricePerArea.data.find((e)=>e[0] === area && e[2] === interval);
        return found ? found[3] : undefined;
    };
    const GenLoadRow = (area)=>{
        if (props.currentGenerationAndLoad && props.currentGenerationAndLoad.data.length) {
            const res = props.currentGenerationAndLoad.data.find((a)=>a[0] === area);
            if (res) {
                return {
                    area: res[0],
                    period: res[1],
                    interval: res[2],
                    primary_psr_group: res[3],
                    primary_psr_group_generation: res[4],
                    generation_total: res[5],
                    load_total: res[6],
                    net_generation: res[7]
                };
            }
        }
        return undefined;
    };
    const countryElms = [];
    for (const country of countries){
        const res = GenLoadRow(country.cty), resPrice = GetPriceRowCountry(country.id, country.interval);
        countryElms.push(p1("tr", {
            class: "font-size-18 bg-dark",
            children: [
                p1("td", {
                    children: p1("a", {
                        class: "hyperlink text-white",
                        href: "/" + country.id,
                        children: p1("span", {
                            "data-t-key": "common.countries." + country.id,
                            lang: props.lang,
                            children: country.name
                        })
                    })
                }),
                p1("td", {
                    children: processPrice(applyExchangeRateSingle(resPrice, props.er, props.currency), props)
                }),
                p1("td", {
                    children: res?.generation_total
                }),
                p1("td", {
                    children: res?.load_total
                }),
                p1("td", {
                    children: p1("span", {
                        class: "text-" + (res?.net_generation && res.net_generation < 0 ? "danger" : "success"),
                        children: res?.net_generation
                    })
                }),
                p1("td", {
                    children: res?.primary_psr_group && p1(L, {
                        children: [
                            p1("span", {
                                "data-t-key": "common.generation.psr_" + res?.primary_psr_group + "_0"
                            }),
                            p1("span", {
                                children: [
                                    " (",
                                    Math.round((res?.primary_psr_group_generation) / (res?.generation_total) * 100),
                                    "%)"
                                ]
                            })
                        ]
                    })
                })
            ]
        }));
        if (country.areas && country.areas.length > 1) for (const area of country.areas){
            const res = GenLoadRow(area.id), resArea = GetPriceRowArea(area.name, country.interval);
            countryElms.push(p1("tr", {
                class: "pl-20 font-size-14 bg-very-dark",
                children: [
                    p1("td", {
                        children: p1("a", {
                            class: "hyperlink text-white",
                            href: "/" + country.id + "/" + area.name,
                            children: [
                                area.name,
                                " - ",
                                area.long
                            ]
                        })
                    }),
                    p1("td", {
                        children: processPrice(applyExchangeRateSingle(resArea, props.er, props.currency), props)
                    }),
                    p1("td", {
                        children: res?.generation_total
                    }),
                    p1("td", {
                        children: res?.load_total
                    }),
                    p1("td", {
                        children: p1("span", {
                            class: "text-" + (res?.net_generation && res.net_generation < 0 ? "danger" : "success"),
                            children: res?.net_generation
                        })
                    }),
                    p1("td", {
                        children: res?.primary_psr_group && p1(L, {
                            children: [
                                p1("span", {
                                    "data-t-key": "common.generation.psr_" + res?.primary_psr_group + "_0"
                                }),
                                p1("span", {
                                    children: [
                                        " (",
                                        Math.round((res?.primary_psr_group_generation) / (res?.generation_total) * 100),
                                        "%)"
                                    ]
                                })
                            ]
                        })
                    })
                ]
            }));
        }
    }
    return p1("div", {
        class: `col-lg-${props.cols} m-0 p-0`,
        children: p1("div", {
            class: "mw-full m-0 p-0 mr-20 mt-20",
            children: p1("div", {
                class: "card p-0 m-0",
                children: p1("div", {
                    class: "content px-card m-0 p-0 pb-15",
                    children: p1("div", {
                        children: p1("table", {
                            class: "table",
                            children: [
                                p1("thead", {
                                    children: p1("tr", {
                                        class: "bg-very-dark",
                                        children: [
                                            p1("th", {}),
                                            p1("th", {
                                                children: [
                                                    p1("span", {
                                                        "data-t-key": "common.overview.right_now",
                                                        lang: props.lang,
                                                        children: "Just nu"
                                                    }),
                                                    p1("br", {}),
                                                    p1("small", {
                                                        children: [
                                                            props.currency,
                                                            "/kWh"
                                                        ]
                                                    })
                                                ]
                                            }),
                                            p1("th", {
                                                children: [
                                                    p1("span", {
                                                        "data-t-key": "common.generation.production",
                                                        lang: props.lang,
                                                        children: "Produktion"
                                                    }),
                                                    p1("br", {}),
                                                    p1("small", {
                                                        children: "MW"
                                                    })
                                                ]
                                            }),
                                            p1("th", {
                                                children: [
                                                    p1("span", {
                                                        "data-t-key": "common.generation.consumption",
                                                        lang: props.lang,
                                                        children: "F\xf6rbrukning"
                                                    }),
                                                    p1("br", {}),
                                                    p1("small", {
                                                        children: "MW"
                                                    })
                                                ]
                                            }),
                                            p1("th", {
                                                children: p1("span", {
                                                    "data-t-key": "common.generation.excess",
                                                    lang: props.lang
                                                })
                                            }),
                                            p1("th", {
                                                "data-t-key": "common.generation.primary_source",
                                                lang: props.lang,
                                                children: "Huvudsaklig kraftk\xe4lla"
                                            })
                                        ]
                                    })
                                }),
                                p1("tbody", {
                                    children: countryElms
                                })
                            ]
                        })
                    })
                })
            })
        })
    });
}
function IndexIsland(props) {
    const [currency, setCurrency] = P2(preferences.currency(props.data.lang));
    const [unit, setUnit] = P2(preferences.unit());
    const [factor, setFactor] = P2(preferences.factor(props.data.lang));
    const [extra, setExtra] = P2(preferences.extra(props.data.lang));
    const [decimals, setDecimals] = P2(preferences.decimals(props.data.lang));
    const [priceFactor, setPriceFactor] = P2(preferences.pricefactor(props.data.lang));
    const setPriceFactorStored = (pf)=>{
        localStorage.setItem("sw_pricefactor", pf ? "true" : "false");
        setPriceFactor(pf);
    };
    const commonprops = {
        unit,
        factor,
        extra,
        decimals,
        currency,
        priceFactor,
        ...props.data
    };
    const pageLoadTime = new Date();
    new Cron("0 0 * * * *", ()=>{
        if (new Date().getTime() - pageLoadTime.getTime() > 120 * 1000) {
            window?.location?.reload();
        }
    });
    return p1("div", {
        children: p1("div", {
            class: "page-wrapper with-navbar with-sidebar",
            "data-sidebar-hidden": "hidden",
            children: [
                p1(Navbar, {
                    setPriceFactor: setPriceFactorStored,
                    pageType: "generic",
                    ...commonprops
                }),
                p1(Sidebar, {
                    setUnit: setUnit,
                    setExtra: setExtra,
                    setFactor: setFactor,
                    setDecimals: setDecimals,
                    setPriceFactor: setPriceFactorStored,
                    setCurrency: setCurrency,
                    ...commonprops
                }),
                p1("div", {
                    class: "content-wrapper",
                    children: p1("div", {
                        class: "content mt-0 mb-0 pr-0 mr-0 ml-5",
                        children: [
                            p1(PriceFactorWarning, {
                                priceFactor: !!priceFactor,
                                factor: factor,
                                extra: extra,
                                lang: props.data.lang
                            }),
                            p1("div", {
                                class: "row",
                                children: p1(ProductionByCountry, {
                                    cols: 12,
                                    ...commonprops,
                                    ...props.data,
                                    ...props
                                })
                            })
                        ]
                    })
                })
            ]
        })
    });
}
const mod27 = {
    default: IndexIsland
};
const handler8 = {
    async GET (_req, ctx) {
        const dateStart = new Date(), dateEnd = new Date();
        dateStart.setDate(dateStart.getDate() - 1);
        const er = await GetExchangeRates();
        const currentGenerationAndLoad = await GetLastGenerationAndLoad();
        const pricePerCountry = await GetLastPricePerCountry();
        const pricePerArea = await GetLastPricePerArea();
        const pageProps = {
            currentGenerationAndLoad,
            pricePerCountry,
            pricePerArea,
            er,
            page: "index",
            lang: ctx.state.lang || ctx.params.country
        };
        return ctx.render(pageProps);
    }
};
function Index1(props) {
    return p1(L, {
        children: [
            p1(SwHead, {
                title: lang_svc.t("common.header.title", {
                    lang: props.data.lang
                }),
                ...props,
                ...props.data
            }),
            p1("body", {
                lang: props.data.lang,
                class: "dark-mode",
                children: p1(IndexIsland, {
                    ...props
                })
            })
        ]
    });
}
const mod28 = {
    handler: handler8,
    default: Index1
};
const importMeta6 = {
    url: "file:///C:/Users/robin/source/spotweb/fresh.gen.ts",
    main: false
};
const handler9 = {
    GET (_req, _ctx) {
        const sitemap = new SitemapContext("https://spot.56k.guru", manifest);
        sitemap.remove("/api/v2/hass");
        sitemap.remove("/api/v2/spot");
        sitemap.remove("/compare");
        sitemap.remove("/custom");
        sitemap.remove("/[country]/");
        for (const country of countries){
            if (country.areas.length > 1) sitemap.add("/" + country.id);
            for (const area of country.areas){
                sitemap.add("/" + country.id + "/" + area.name);
            }
        }
        return sitemap.render();
    }
};
const mod29 = {
    handler: handler9
};
const manifest = {
    routes: {
        "./routes/[country]/[area].tsx": mod13,
        "./routes/[country]/index.tsx": mod15,
        "./routes/_404.tsx": mod16,
        "./routes/_500.tsx": mod17,
        "./routes/_middleware.ts": mod18,
        "./routes/api/v2/hass.tsx": mod19,
        "./routes/api/v2/spot.tsx": mod20,
        "./routes/custom.tsx": mod22,
        "./routes/help.tsx": mod24,
        "./routes/homeassistant.tsx": mod26,
        "./routes/index.tsx": mod28,
        "./routes/sitemap.xml.ts": mod29
    },
    islands: {
        "./islands/AreaIsland.tsx": mod10,
        "./islands/CountryIsland.tsx": mod14,
        "./islands/CustomIsland.tsx": mod21,
        "./islands/HassIsland.tsx": mod25,
        "./islands/HelpIsland.tsx": mod23,
        "./islands/IndexIsland.tsx": mod27
    },
    baseUrl: importMeta6.url,
    config: __default2
};
if (Deno.args.includes("--debug")) {
    log("info", "Enabling debug logging");
    setLevel("debug");
}
start(manifest, {
    plugins: [
        translate({
            ...__default
        })
    ],
    render: (ctx, render)=>{
        ctx.lang = langFromUrl(ctx.url);
        render();
    }
});
