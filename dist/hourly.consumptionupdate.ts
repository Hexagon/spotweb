// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

const countries = [
    {
        name: "Sverige",
        id: "sv",
        cty: "Sweden (SE)",
        cta: "CTA|SE",
        interval: "PT60M",
        areas: [
            {
                name: "SE1",
                "id": "BZN|SE1",
                "long": "Norra Sverige",
                color: 1
            },
            {
                name: "SE2",
                "id": "BZN|SE2",
                "long": "Norra Mellansverige",
                color: 2
            },
            {
                name: "SE3",
                "id": "BZN|SE3",
                "long": "Södra Mellansverige",
                color: 3
            },
            {
                name: "SE4",
                "id": "BZN|SE4",
                "long": "Södra sverige",
                color: 4
            }
        ]
    },
    {
        name: "Norge",
        cty: "Norway (NO)",
        cta: "CTA|NO",
        interval: "PT60M",
        id: "no",
        areas: [
            {
                name: "NO1",
                "id": "IBA|NO1",
                "long": "Oslo",
                color: 1
            },
            {
                name: "NO2",
                "id": "IBA|NO2",
                "long": "Kristiansand",
                color: 2
            },
            {
                name: "NO3",
                "id": "IBA|NO3",
                "long": "Molde",
                color: 3
            },
            {
                name: "NO4",
                "id": "IBA|NO4",
                "long": "Tromsø",
                color: 4
            },
            {
                name: "NO5",
                "id": "IBA|NO5",
                "long": "Bergen",
                color: 5
            }
        ]
    },
    {
        name: "Finland",
        cty: "Finland (FI)",
        cta: "CTA|FI",
        interval: "PT60M",
        id: "fi",
        areas: [
            {
                name: "FI",
                "id": "FI",
                "long": "Suomi",
                color: 1
            }
        ]
    },
    {
        name: "Danmark",
        cty: "Denmark (DK)",
        cta: "CTA|DK",
        interval: "PT60M",
        id: "dk",
        areas: [
            {
                name: "DK1",
                "id": "IBA|DK1",
                "long": "Jylland",
                color: 1
            },
            {
                name: "DK2",
                "id": "IBA|DK2",
                "long": "Sjaelland",
                color: 2
            }
        ]
    },
    {
        name: "Deutschland",
        cty: "Germany (DE)",
        cta: "CTA|DE",
        interval: "PT15M",
        id: "de",
        areas: [
            {
                name: "DE-LU",
                "id": "BZN|DE-LU",
                "long": "Deutschland",
                color: 1
            }
        ]
    },
    {
        name: "Österreich",
        cty: "Austria (AT)",
        cta: "CTA|AT",
        interval: "PT15M",
        id: "at",
        areas: [
            {
                name: "AT",
                "id": "BZN|AT",
                "long": "Österreich",
                color: 1
            }
        ]
    },
    {
        name: "Switzerland",
        cty: "Switzerland (CH)",
        cta: "CTA|CH",
        interval: "PT60M",
        id: "ch",
        areas: [
            {
                name: "CH",
                "id": "BZN|CH",
                "long": "Switzerland",
                color: 1
            }
        ]
    },
    {
        name: "Spain",
        cty: "Spain (ES)",
        cta: "CTA|ES",
        interval: "PT60M",
        id: "es",
        areas: [
            {
                name: "ES",
                "id": "BZN|ES",
                "long": "Spain",
                color: 1
            }
        ]
    },
    {
        name: "France",
        cty: "France (FR)",
        cta: "CTA|FR",
        interval: "PT60M",
        id: "fr",
        areas: [
            {
                name: "FR",
                "id": "BZN|FR",
                "long": "France",
                color: 1
            }
        ]
    },
    {
        name: "Poland",
        cty: "Poland (PL)",
        cta: "CTA|PL",
        interval: "PT60M",
        id: "pl",
        areas: [
            {
                name: "PL",
                "id": "BZN|PL",
                "long": "Poland",
                color: 1
            }
        ]
    }
];
const Areas = {
    "10Y1001A1001A016": "CTA|NIE, MBA|SEM(SONI), SCA|NIE",
    "10Y1001A1001A39I": "SCA|EE, MBA|EE, CTA|EE, BZN|EE, Estonia (EE)",
    "10Y1001A1001A44P": "IPA|SE1, BZN|SE1, MBA|SE1, SCA|SE1",
    "10Y1001A1001A45N": "SCA|SE2, MBA|SE2, BZN|SE2, IPA|SE2",
    "10Y1001A1001A46L": "IPA|SE3, BZN|SE3, MBA|SE3, SCA|SE3",
    "10Y1001A1001A47J": "SCA|SE4, MBA|SE4, BZN|SE4, IPA|SE4",
    "10Y1001A1001A48H": "IPA|NO5, IBA|NO5, BZN|NO5, MBA|NO5, SCA|NO5",
    "10Y1001A1001A49F": "SCA|RU, MBA|RU, BZN|RU, CTA|RU",
    "10Y1001A1001A50U": "CTA|RU-KGD, BZN|RU-KGD, MBA|RU-KGD, SCA|RU-KGD",
    "10Y1001A1001A51S": "SCA|BY, MBA|BY, BZN|BY, CTA|BY",
    "10Y1001A1001A59C": "BZN|IE(SEM), MBA|IE(SEM), SCA|IE(SEM), LFB|IE-NIE, SNA|Ireland",
    "10Y1001A1001A63L": "BZN|DE-AT-LU",
    "10Y1001A1001A64J": "BZN|NO1A",
    "10Y1001A1001A65H": "Denmark (DK)",
    "10Y1001A1001A66F": "BZN|IT-GR",
    "10Y1001A1001A67D": "BZN|IT-North-SI",
    "10Y1001A1001A68B": "BZN|IT-North-CH",
    "10Y1001A1001A699": "BZN|IT-Brindisi, SCA|IT-Brindisi, MBA|IT-Z-Brindisi",
    "10Y1001A1001A70O": "MBA|IT-Z-Centre-North, SCA|IT-Centre-North, BZN|IT-Centre-North",
    "10Y1001A1001A71M": "BZN|IT-Centre-South, SCA|IT-Centre-South, MBA|IT-Z-Centre-South",
    "10Y1001A1001A72K": "MBA|IT-Z-Foggia, SCA|IT-Foggia, BZN|IT-Foggia",
    "10Y1001A1001A73I": "BZN|IT-North, SCA|IT-North, MBA|IT-Z-North",
    "10Y1001A1001A74G": "MBA|IT-Z-Sardinia, SCA|IT-Sardinia, BZN|IT-Sardinia",
    "10Y1001A1001A75E": "BZN|IT-Sicily, SCA|IT-Sicily, MBA|IT-Z-Sicily",
    "10Y1001A1001A76C": "MBA|IT-Z-Priolo, SCA|IT-Priolo, BZN|IT-Priolo",
    "10Y1001A1001A77A": "BZN|IT-Rossano, SCA|IT-Rossano, MBA|IT-Z-Rossano",
    "10Y1001A1001A788": "MBA|IT-Z-South, SCA|IT-South, BZN|IT-South",
    "10Y1001A1001A796": "CTA|DK",
    "10Y1001A1001A80L": "BZN|IT-North-AT",
    "10Y1001A1001A81J": "BZN|IT-North-FR",
    "10Y1001A1001A82H": "BZN|DE-LU, IPA|DE-LU, SCA|DE-LU, MBA|DE-LU",
    "10Y1001A1001A83F": "Germany (DE)",
    "10Y1001A1001A84D": "MBA|IT-MACRZONENORTH, SCA|IT-MACRZONENORTH",
    "10Y1001A1001A85B": "SCA|IT-MACRZONESOUTH, MBA|IT-MACRZONESOUTH",
    "10Y1001A1001A869": "SCA|UA-DobTPP, BZN|UA-DobTPP, CTA|UA-DobTPP",
    "10Y1001A1001A877": "BZN|IT-Malta",
    "10Y1001A1001A885": "BZN|IT-SACOAC",
    "10Y1001A1001A893": "BZN|IT-SACODC, SCA|IT-SACODC",
    "10Y1001A1001A91G": "SNA|Nordic, REG|Nordic, LFB|Nordic",
    "10Y1001A1001A92E": "United Kingdom (UK)",
    "10Y1001A1001A93C": "Malta (MT), BZN|MT, CTA|MT, SCA|MT, MBA|MT",
    "10Y1001A1001A990": "MBA|MD, SCA|MD, CTA|MD, BZN|MD, Moldova (MD)",
    "10Y1001A1001B004": "Armenia (AM), BZN|AM, CTA|AM",
    "10Y1001A1001B012": "CTA|GE, BZN|GE, Georgia (GE), SCA|GE, MBA|GE",
    "10Y1001A1001B05V": "Azerbaijan (AZ), BZN|AZ, CTA|AZ",
    "10Y1001C--00003F": "BZN|UA, Ukraine (UA), MBA|UA, SCA|UA",
    "10Y1001C--000182": "SCA|UA-IPS, MBA|UA-IPS, BZN|UA-IPS, CTA|UA-IPS",
    "10Y1001C--00038X": "BZA|CZ-DE-SK-LT-SE4",
    "10Y1001C--00059P": "REG|CORE",
    "10Y1001C--00090V": "REG|AFRR, SCA|AFRR",
    "10Y1001C--00095L": "REG|SWE",
    "10Y1001C--00096J": "SCA|IT-Calabria, MBA|IT-Z-Calabria, BZN|IT-Calabria",
    "10Y1001C--00098F": "BZN|GB(IFA)",
    "10Y1001C--00100H": "BZN|XK, CTA|XK, Kosovo (XK), MBA|XK, LFB|XK, LFA|XK",
    "10Y1001C--00119X": "SCA|IN",
    "10Y1001C--001219": "BZN|NO2A",
    "10Y1001C--00137V": "REG|ITALYNORTH",
    "10Y1001C--00138T": "REG|GRIT",
    "10YAL-KESH-----5": "LFB|AL, LFA|AL, BZN|AL, CTA|AL, Albania (AL), SCA|AL, MBA|AL",
    "10YAT-APG------L": "MBA|AT, SCA|AT, Austria (AT), IPA|AT, CTA|AT, BZN|AT, LFA|AT, LFB|AT",
    "10YBA-JPCC-----D": "LFA|BA, BZN|BA, CTA|BA, Bosnia and Herz. (BA), SCA|BA, MBA|BA",
    "10YBE----------2": "MBA|BE, SCA|BE, Belgium (BE), CTA|BE, BZN|BE, LFA|BE, LFB|BE",
    "10YCA-BULGARIA-R": "LFB|BG, LFA|BG, BZN|BG, CTA|BG, Bulgaria (BG), SCA|BG, MBA|BG",
    "10YCB-GERMANY--8": "SCA|DE_DK1_LU, LFB|DE_DK1_LU",
    "10YCB-JIEL-----9": "LFB|RS_MK_ME",
    "10YCB-POLAND---Z": "LFB|PL",
    "10YCB-SI-HR-BA-3": "LFB|SI_HR_BA",
    "10YCH-SWISSGRIDZ": "LFB|CH, LFA|CH, SCA|CH, MBA|CH, Switzerland (CH), CTA|CH, BZN|CH",
    "10YCS-CG-TSO---S": "BZN|ME, CTA|ME, Montenegro (ME), MBA|ME, SCA|ME, LFA|ME",
    "10YCS-SERBIATSOV": "LFA|RS, SCA|RS, MBA|RS, Serbia (RS), CTA|RS, BZN|RS",
    "10YCY-1001A0003J": "BZN|CY, CTA|CY, Cyprus (CY), MBA|CY, SCA|CY",
    "10YCZ-CEPS-----N": "SCA|CZ, MBA|CZ, Czech Republic (CZ), CTA|CZ, BZN|CZ, LFA|CZ, LFB|CZ",
    "10YDE-ENBW-----N": "LFA|DE(TransnetBW), CTA|DE(TransnetBW), SCA|DE(TransnetBW)",
    "10YDE-EON------1": "SCA|DE(TenneT GER), CTA|DE(TenneT GER), LFA|DE(TenneT GER)",
    "10YDE-RWENET---I": "LFA|DE(Amprion), CTA|DE(Amprion), SCA|DE(Amprion)",
    "10YDE-VE-------2": "SCA|DE(50Hertz), CTA|DE(50Hertz), LFA|DE(50Hertz), BZA|DE(50HzT)",
    "10YDK-1-------AA": "BZN|DK1A",
    "10YDK-1--------W": "IPA|DK1, IBA|DK1, BZN|DK1, SCA|DK1, MBA|DK1, LFA|DK1",
    "10YDK-2--------M": "LFA|DK2, MBA|DK2, SCA|DK2, IBA|DK2, IPA|DK2, BZN|DK2",
    "10YDOM-1001A082L": "CTA|PL-CZ, BZA|PL-CZ",
    "10YDOM-CZ-DE-SKK": "BZA|CZ-DE-SK, BZN|CZ+DE+SK",
    "10YDOM-PL-SE-LT2": "BZA|LT-SE4",
    "10YDOM-REGION-1V": "REG|CWE",
    "10YES-REE------0": "LFB|ES, LFA|ES, BZN|ES, Spain (ES), CTA|ES, SCA|ES, MBA|ES",
    "10YEU-CONT-SYNC0": "SNA|Continental Europe",
    "10YFI-1--------U": "MBA|FI, SCA|FI, CTA|FI, Finland (FI), BZN|FI, IPA|FI, IBA|FI",
    "10YFR-RTE------C": "BZN|FR, France (FR), CTA|FR, SCA|FR, MBA|FR, LFB|FR, LFA|FR",
    "10YGB----------A": "LFA|GB, LFB|GB, SNA|GB, MBA|GB, SCA|GB, CTA|National Grid, BZN|GB",
    "10YGR-HTSO-----Y": "BZN|GR, Greece (GR), CTA|GR, SCA|GR, MBA|GR, LFB|GR, LFA|GR",
    "10YHR-HEP------M": "LFA|HR, MBA|HR, SCA|HR, CTA|HR, Croatia (HR), BZN|HR",
    "10YHU-MAVIR----U": "BZN|HU, Hungary (HU), CTA|HU, SCA|HU, MBA|HU, LFA|HU, LFB|HU",
    "10YIE-1001A00010": "MBA|SEM(EirGrid), SCA|IE, CTA|IE, Ireland (IE)",
    "10YIT-GRTN-----B": "Italy (IT), CTA|IT, SCA|IT, MBA|IT, LFB|IT, LFA|IT",
    "10YLT-1001A0008Q": "MBA|LT, SCA|LT, CTA|LT, Lithuania (LT), BZN|LT",
    "10YLU-CEGEDEL-NQ": "Luxembourg (LU), CTA|LU",
    "10YLV-1001A00074": "CTA|LV, Latvia (LV), BZN|LV, SCA|LV, MBA|LV",
    "10YMK-MEPSO----8": "MBA|MK, SCA|MK, BZN|MK, North Macedonia (MK), CTA|MK, LFA|MK",
    "10YNL----------L": "LFA|NL, LFB|NL, CTA|NL, Netherlands (NL), BZN|NL, SCA|NL, MBA|NL",
    "10YNO-0--------C": "MBA|NO, SCA|NO, Norway (NO), CTA|NO",
    "10YNO-1--------2": "BZN|NO1, IBA|NO1, IPA|NO1, SCA|NO1, MBA|NO1",
    "10YNO-2--------T": "MBA|NO2, SCA|NO2, IPA|NO2, IBA|NO2, BZN|NO2",
    "10YNO-3--------J": "BZN|NO3, IBA|NO3, IPA|NO3, SCA|NO3, MBA|NO3",
    "10YNO-4--------9": "MBA|NO4, SCA|NO4, IPA|NO4, IBA|NO4, BZN|NO4",
    "10YPL-AREA-----S": "BZN|PL, Poland (PL), CTA|PL, SCA|PL, MBA|PL, BZA|PL, LFA|PL",
    "10YPT-REN------W": "LFA|PT, LFB|PT, MBA|PT, SCA|PT, CTA|PT, Portugal (PT), BZN|PT",
    "10YRO-TEL------P": "BZN|RO, Romania (RO), CTA|RO, SCA|RO, MBA|RO, LFB|RO, LFA|RO",
    "10YSE-1--------K": "MBA|SE, SCA|SE, CTA|SE, Sweden (SE)",
    "10YSI-ELES-----O": "Slovenia (SI), BZN|SI, CTA|SI, SCA|SI, MBA|SI, LFA|SI",
    "10YSK-SEPS-----K": "LFA|SK, LFB|SK, MBA|SK, SCA|SK, CTA|SK, BZN|SK, Slovakia (SK)",
    "10YTR-TEIAS----W": "Turkey (TR), BZN|TR, CTA|TR, SCA|TR, MBA|TR, LFB|TR, LFA|TR",
    "10YUA-WEPS-----0": "LFA|UA-BEI, LFB|UA-BEI, MBA|UA-BEI, SCA|UA-BEI, CTA|UA-BEI, BZN|UA-BEI",
    "11Y0-0000-0265-K": "BZN|GB(ElecLink)",
    "17Y0000009369493": "BZN|GB(IFA2)",
    "46Y000000000007M": "BZN|DK1-NO1",
    "50Y0JVU59B4JWQCU": "BZN|NO2NSL",
    "BY": "Belarus (BY)",
    "RU": "Russia (RU)",
    "IS": "Iceland (IS)"
};
const AllAreas = (identifier)=>{
    return Object.entries(Areas).filter(([_key, value])=>value.includes(identifier)).map((e)=>e[0]);
};
const Area = (identifier)=>{
    return AllAreas(identifier)?.[0];
};
const DocumentTypes = {
    A09: "Finalised schedule",
    A11: "Aggregated energy data report",
    A15: "Acquiring system operator reserve schedule",
    A24: "Bid document",
    A25: "Allocation result document",
    A26: "Capacity document",
    A31: "Agreed capacity",
    A37: "Reserve bid document",
    A38: "Reserve allocation result document",
    A44: "Price Document",
    A61: "Estimated Net Transfer Capacity",
    A63: "Redispatch notice",
    A65: "System total load",
    A68: "Installed generation per type",
    A69: "Wind and solar forecast",
    A70: "Load forecast margin",
    A71: "Generation forecast",
    A72: "Reservoir filling information",
    A73: "Actual generation",
    A74: "Wind and solar generation",
    A75: "Actual generation per type",
    A76: "Load unavailability",
    A77: "Production unavailability",
    A78: "Transmission unavailability",
    A79: "Offshore grid infrastructure unavailability",
    A80: "Generation unavailability",
    A81: "Contracted reserves",
    A82: "Accepted offers",
    A83: "Activated balancing quantities",
    A84: "Activated balancing prices",
    A85: "Imbalance prices",
    A86: "Imbalance volume",
    A87: "Financial situation",
    A88: "Cross border balancing",
    A89: "Contracted reserve prices",
    A90: "Interconnection network expansion",
    A91: "Counter trade notice",
    A92: "Congestion costs",
    A93: "DC link capacity",
    A94: "Non EU allocations",
    A95: "Configuration document",
    B11: "Flow-based allocations",
    B17: "Aggregated netted external TSO schedule document",
    B45: "Bid Availability Document"
};
var x = Object.create;
var u = Object.defineProperty;
var N = Object.getOwnPropertyDescriptor;
var b = Object.getOwnPropertyNames;
var h = Object.getPrototypeOf, p = Object.prototype.hasOwnProperty;
var w = (e, r)=>()=>(r || e((r = {
            exports: {}
        }).exports, r), r.exports);
var m = (e, r, i, f)=>{
    if (r && typeof r == "object" || typeof r == "function") for (let n of b(r))!p.call(e, n) && n !== i && u(e, n, {
        get: ()=>r[n],
        enumerable: !(f = N(r, n)) || f.enumerable
    });
    return e;
};
var Z = (e, r, i)=>(i = e != null ? x(h(e)) : {}, m(r || !e || !e.__esModule ? u(i, "default", {
        value: e,
        enumerable: !0
    }) : i, e));
var d = w((L, o)=>{
    var _ = /^[-+]?0x[a-fA-F0-9]+$/, F = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    !Number.parseInt && window.parseInt && (Number.parseInt = window.parseInt);
    !Number.parseFloat && window.parseFloat && (Number.parseFloat = window.parseFloat);
    var I = {
        hex: !0,
        leadingZeros: !0,
        decimalPoint: ".",
        eNotation: !0
    };
    function k(e, r = {}) {
        if (r = Object.assign({}, I, r), !e || typeof e != "string") return e;
        let i = e.trim();
        if (r.skipLike !== void 0 && r.skipLike.test(i)) return e;
        if (r.hex && _.test(i)) return Number.parseInt(i, 16);
        {
            let f = F.exec(i);
            if (f) {
                let n = f[1], a = f[2], s = E(f[3]), g = f[4] || f[6];
                if (!r.leadingZeros && a.length > 0 && n && i[2] !== ".") return e;
                if (!r.leadingZeros && a.length > 0 && !n && i[1] !== ".") return e;
                {
                    let t = Number(i), l = "" + t;
                    return l.search(/[eE]/) !== -1 || g ? r.eNotation ? t : e : i.indexOf(".") !== -1 ? l === "0" && s === "" || l === s || n && l === "-" + s ? t : e : a ? s === l || n + s === l ? t : e : i === l || i === n + l ? t : e;
                }
            } else return e;
        }
    }
    function E(e) {
        return e && e.indexOf(".") !== -1 && (e = e.replace(/0+$/, ""), e === "." ? e = "0" : e[0] === "." ? e = "0" + e : e[e.length - 1] === "." && (e = e.substr(0, e.length - 1))), e;
    }
    o.exports = k;
});
var O = Z(d()), { default: c , ...$ } = O, R = c !== void 0 ? c : $;
var he = Object.create;
var L = Object.defineProperty;
var ge = Object.getOwnPropertyDescriptor;
var pe = Object.getOwnPropertyNames;
var Ne = Object.getPrototypeOf, be = Object.prototype.hasOwnProperty;
((e)=>typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(e, {
        get: (t, s)=>(typeof require < "u" ? require : t)[s]
    }) : e)(function(e) {
    if (typeof require < "u") return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + e + '" is not supported');
});
var b1 = (e, t)=>()=>(t || e((t = {
            exports: {}
        }).exports, t), t.exports);
var Te = (e, t, s, i)=>{
    if (t && typeof t == "object" || typeof t == "function") for (let r of pe(t))!be.call(e, r) && r !== s && L(e, r, {
        get: ()=>t[r],
        enumerable: !(i = ge(t, r)) || i.enumerable
    });
    return e;
};
var Ae = (e, t, s)=>(s = e != null ? he(Ne(e)) : {}, Te(t || !e || !e.__esModule ? L(s, "default", {
        value: e,
        enumerable: !0
    }) : s, e));
var w1 = b1((E)=>{
    "use strict";
    var M = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ye = M + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040", R = "[" + M + "][" + ye + "]*", Pe = new RegExp("^" + R + "$"), me = function(e, t) {
        let s = [], i = t.exec(e);
        for(; i;){
            let r = [];
            r.startIndex = t.lastIndex - i[0].length;
            let n = i.length;
            for(let f = 0; f < n; f++)r.push(i[f]);
            s.push(r), i = t.exec(e);
        }
        return s;
    }, Ie = function(e) {
        let t = Pe.exec(e);
        return !(t === null || typeof t > "u");
    };
    E.isExist = function(e) {
        return typeof e < "u";
    };
    E.isEmptyObject = function(e) {
        return Object.keys(e).length === 0;
    };
    E.merge = function(e, t, s) {
        if (t) {
            let i = Object.keys(t), r = i.length;
            for(let n = 0; n < r; n++)s === "strict" ? e[i[n]] = [
                t[i[n]]
            ] : e[i[n]] = t[i[n]];
        }
    };
    E.getValue = function(e) {
        return E.isExist(e) ? e : "";
    };
    E.isName = Ie;
    E.getAllMatches = me;
    E.nameRegexp = R;
});
var O1 = b1((G)=>{
    "use strict";
    var C = w1(), we = {
        allowBooleanAttributes: !1,
        unpairedTags: []
    };
    G.validate = function(e, t) {
        t = Object.assign({}, we, t);
        let s = [], i = !1, r = !1;
        e[0] === "\uFEFF" && (e = e.substr(1));
        for(let n = 0; n < e.length; n++)if (e[n] === "<" && e[n + 1] === "?") {
            if (n += 2, n = X(e, n), n.err) return n;
        } else if (e[n] === "<") {
            let f = n;
            if (n++, e[n] === "!") {
                n = k(e, n);
                continue;
            } else {
                let o = !1;
                e[n] === "/" && (o = !0, n++);
                let u = "";
                for(; n < e.length && e[n] !== ">" && e[n] !== " " && e[n] !== "	" && e[n] !== `
` && e[n] !== "\r"; n++)u += e[n];
                if (u = u.trim(), u[u.length - 1] === "/" && (u = u.substring(0, u.length - 1), n--), !$e(u)) {
                    let a;
                    return u.trim().length === 0 ? a = "Invalid space after '<'." : a = "Tag '" + u + "' is an invalid name.", h("InvalidTag", a, p(e, n));
                }
                let l = Se(e, n);
                if (l === !1) return h("InvalidAttr", "Attributes for '" + u + "' have open quote.", p(e, n));
                let d = l.value;
                if (n = l.index, d[d.length - 1] === "/") {
                    let a = n - d.length;
                    d = d.substring(0, d.length - 1);
                    let g = _(d, t);
                    if (g === !0) i = !0;
                    else return h(g.err.code, g.err.msg, p(e, a + g.err.line));
                } else if (o) if (l.tagClosed) {
                    if (d.trim().length > 0) return h("InvalidTag", "Closing tag '" + u + "' can't have attributes or invalid starting.", p(e, f));
                    {
                        let a = s.pop();
                        if (u !== a.tagName) {
                            let g = p(e, a.tagStartPos);
                            return h("InvalidTag", "Expected closing tag '" + a.tagName + "' (opened in line " + g.line + ", col " + g.col + ") instead of closing tag '" + u + "'.", p(e, f));
                        }
                        s.length == 0 && (r = !0);
                    }
                } else return h("InvalidTag", "Closing tag '" + u + "' doesn't have proper closing.", p(e, n));
                else {
                    let a = _(d, t);
                    if (a !== !0) return h(a.err.code, a.err.msg, p(e, n - d.length + a.err.line));
                    if (r === !0) return h("InvalidXml", "Multiple possible root nodes found.", p(e, n));
                    t.unpairedTags.indexOf(u) !== -1 || s.push({
                        tagName: u,
                        tagStartPos: f
                    }), i = !0;
                }
                for(n++; n < e.length; n++)if (e[n] === "<") if (e[n + 1] === "!") {
                    n++, n = k(e, n);
                    continue;
                } else if (e[n + 1] === "?") {
                    if (n = X(e, ++n), n.err) return n;
                } else break;
                else if (e[n] === "&") {
                    let a = ve(e, n);
                    if (a == -1) return h("InvalidChar", "char '&' is not expected.", p(e, n));
                    n = a;
                } else if (r === !0 && !q(e[n])) return h("InvalidXml", "Extra text at the end", p(e, n));
                e[n] === "<" && n--;
            }
        } else {
            if (q(e[n])) continue;
            return h("InvalidChar", "char '" + e[n] + "' is not expected.", p(e, n));
        }
        if (i) {
            if (s.length == 1) return h("InvalidTag", "Unclosed tag '" + s[0].tagName + "'.", p(e, s[0].tagStartPos));
            if (s.length > 0) return h("InvalidXml", "Invalid '" + JSON.stringify(s.map((n)=>n.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", {
                line: 1,
                col: 1
            });
        } else return h("InvalidXml", "Start tag expected.", 1);
        return !0;
    };
    function q(e) {
        return e === " " || e === "	" || e === `
` || e === "\r";
    }
    function X(e, t) {
        let s = t;
        for(; t < e.length; t++)if (e[t] == "?" || e[t] == " ") {
            let i = e.substr(s, t - s);
            if (t > 5 && i === "xml") return h("InvalidXml", "XML declaration allowed only at the start of the document.", p(e, t));
            if (e[t] == "?" && e[t + 1] == ">") {
                t++;
                break;
            } else continue;
        }
        return t;
    }
    function k(e, t) {
        if (e.length > t + 5 && e[t + 1] === "-" && e[t + 2] === "-") {
            for(t += 3; t < e.length; t++)if (e[t] === "-" && e[t + 1] === "-" && e[t + 2] === ">") {
                t += 2;
                break;
            }
        } else if (e.length > t + 8 && e[t + 1] === "D" && e[t + 2] === "O" && e[t + 3] === "C" && e[t + 4] === "T" && e[t + 5] === "Y" && e[t + 6] === "P" && e[t + 7] === "E") {
            let s = 1;
            for(t += 8; t < e.length; t++)if (e[t] === "<") s++;
            else if (e[t] === ">" && (s--, s === 0)) break;
        } else if (e.length > t + 9 && e[t + 1] === "[" && e[t + 2] === "C" && e[t + 3] === "D" && e[t + 4] === "A" && e[t + 5] === "T" && e[t + 6] === "A" && e[t + 7] === "[") {
            for(t += 8; t < e.length; t++)if (e[t] === "]" && e[t + 1] === "]" && e[t + 2] === ">") {
                t += 2;
                break;
            }
        }
        return t;
    }
    var Ce = '"', Oe = "'";
    function Se(e, t) {
        let s = "", i = "", r = !1;
        for(; t < e.length; t++){
            if (e[t] === Ce || e[t] === Oe) i === "" ? i = e[t] : i !== e[t] || (i = "");
            else if (e[t] === ">" && i === "") {
                r = !0;
                break;
            }
            s += e[t];
        }
        return i !== "" ? !1 : {
            value: s,
            index: t,
            tagClosed: r
        };
    }
    var xe = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function _(e, t) {
        let s = C.getAllMatches(e, xe), i = {};
        for(let r = 0; r < s.length; r++){
            if (s[r][1].length === 0) return h("InvalidAttr", "Attribute '" + s[r][2] + "' has no space in starting.", P(s[r]));
            if (s[r][3] !== void 0 && s[r][4] === void 0) return h("InvalidAttr", "Attribute '" + s[r][2] + "' is without value.", P(s[r]));
            if (s[r][3] === void 0 && !t.allowBooleanAttributes) return h("InvalidAttr", "boolean attribute '" + s[r][2] + "' is not allowed.", P(s[r]));
            let n = s[r][2];
            if (!Fe(n)) return h("InvalidAttr", "Attribute '" + n + "' is an invalid name.", P(s[r]));
            if (!i.hasOwnProperty(n)) i[n] = 1;
            else return h("InvalidAttr", "Attribute '" + n + "' is repeated.", P(s[r]));
        }
        return !0;
    }
    function Ve(e, t) {
        let s = /\d/;
        for(e[t] === "x" && (t++, s = /[\da-fA-F]/); t < e.length; t++){
            if (e[t] === ";") return t;
            if (!e[t].match(s)) break;
        }
        return -1;
    }
    function ve(e, t) {
        if (t++, e[t] === ";") return -1;
        if (e[t] === "#") return t++, Ve(e, t);
        let s = 0;
        for(; t < e.length; t++, s++)if (!(e[t].match(/\w/) && s < 20)) {
            if (e[t] === ";") break;
            return -1;
        }
        return t;
    }
    function h(e, t, s) {
        return {
            err: {
                code: e,
                msg: t,
                line: s.line || s,
                col: s.col
            }
        };
    }
    function Fe(e) {
        return C.isName(e);
    }
    function $e(e) {
        return C.isName(e);
    }
    function p(e, t) {
        let s = e.substring(0, t).split(/\r?\n/);
        return {
            line: s.length,
            col: s[s.length - 1].length + 1
        };
    }
    function P(e) {
        return e.startIndex + e[1].length;
    }
});
var Y = b1((S)=>{
    var U = {
        preserveOrder: !1,
        attributeNamePrefix: "@_",
        attributesGroupName: !1,
        textNodeName: "#text",
        ignoreAttributes: !0,
        removeNSPrefix: !1,
        allowBooleanAttributes: !1,
        parseTagValue: !0,
        parseAttributeValue: !1,
        trimValues: !0,
        cdataPropName: !1,
        numberParseOptions: {
            hex: !0,
            leadingZeros: !0,
            eNotation: !0
        },
        tagValueProcessor: function(e, t) {
            return t;
        },
        attributeValueProcessor: function(e, t) {
            return t;
        },
        stopNodes: [],
        alwaysCreateTextNode: !1,
        isArray: ()=>!1,
        commentPropName: !1,
        unpairedTags: [],
        processEntities: !0,
        htmlEntities: !1,
        ignoreDeclaration: !1,
        ignorePiTags: !1,
        transformTagName: !1,
        transformAttributeName: !1
    }, Be = function(e) {
        return Object.assign({}, U, e);
    };
    S.buildOptions = Be;
    S.defaultOptions = U;
});
var W = b1((Pt, J)=>{
    "use strict";
    var x = class {
        constructor(t){
            this.tagname = t, this.child = [], this[":@"] = {};
        }
        add(t, s) {
            this.child.push({
                [t]: s
            });
        }
        addChild(t) {
            t[":@"] && Object.keys(t[":@"]).length > 0 ? this.child.push({
                [t.tagname]: t.child,
                [":@"]: t[":@"]
            }) : this.child.push({
                [t.tagname]: t.child
            });
        }
    };
    J.exports = x;
});
var K = b1((mt, z)=>{
    function Le(e, t) {
        let s = {};
        if (e[t + 3] === "O" && e[t + 4] === "C" && e[t + 5] === "T" && e[t + 6] === "Y" && e[t + 7] === "P" && e[t + 8] === "E") {
            t = t + 9;
            let i = 1, r = !1, n = !1, f = !1, o = "";
            for(; t < e.length; t++)if (e[t] === "<" && !f) {
                if (r && e[t + 1] === "!" && e[t + 2] === "E" && e[t + 3] === "N" && e[t + 4] === "T" && e[t + 5] === "I" && e[t + 6] === "T" && e[t + 7] === "Y") t += 7, n = !0;
                else if (r && e[t + 1] === "!" && e[t + 2] === "E" && e[t + 3] === "L" && e[t + 4] === "E" && e[t + 5] === "M" && e[t + 6] === "E" && e[t + 7] === "N" && e[t + 8] === "T") t += 8;
                else if (r && e[t + 1] === "!" && e[t + 2] === "A" && e[t + 3] === "T" && e[t + 4] === "T" && e[t + 5] === "L" && e[t + 6] === "I" && e[t + 7] === "S" && e[t + 8] === "T") t += 8;
                else if (r && e[t + 1] === "!" && e[t + 2] === "N" && e[t + 3] === "O" && e[t + 4] === "T" && e[t + 5] === "A" && e[t + 6] === "T" && e[t + 7] === "I" && e[t + 8] === "O" && e[t + 9] === "N") t += 9;
                else if (e[t + 1] === "!" && e[t + 2] === "-" && e[t + 3] === "-") f = !0;
                else throw new Error("Invalid DOCTYPE");
                i++, o = "";
            } else if (e[t] === ">") {
                if (f ? e[t - 1] === "-" && e[t - 2] === "-" && (f = !1, i--) : (n && (Re(o, s), n = !1), i--), i === 0) break;
            } else e[t] === "[" ? r = !0 : o += e[t];
            if (i !== 0) throw new Error("Unclosed DOCTYPE");
        } else throw new Error("Invalid Tag instead of DOCTYPE");
        return {
            entities: s,
            i: t
        };
    }
    var Me = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function Re(e, t) {
        let s = Me.exec(e);
        s && (t[s[1]] = {
            regx: RegExp(`&${s[1]};`, "g"),
            val: s[3]
        });
    }
    z.exports = Le;
});
var Z1 = b1((wt, Q)=>{
    "use strict";
    var $ = w1(), m = W(), qe = K(), Xe = R, It = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, $.nameRegexp), V = class {
        constructor(t){
            this.options = t, this.currentNode = null, this.tagsNodeStack = [], this.docTypeEntities = {}, this.lastEntities = {
                apos: {
                    regex: /&(apos|#39|#x27);/g,
                    val: "'"
                },
                gt: {
                    regex: /&(gt|#62|#x3E);/g,
                    val: ">"
                },
                lt: {
                    regex: /&(lt|#60|#x3C);/g,
                    val: "<"
                },
                quot: {
                    regex: /&(quot|#34|#x22);/g,
                    val: '"'
                }
            }, this.ampEntity = {
                regex: /&(amp|#38|#x26);/g,
                val: "&"
            }, this.htmlEntities = {
                space: {
                    regex: /&(nbsp|#160);/g,
                    val: " "
                },
                cent: {
                    regex: /&(cent|#162);/g,
                    val: "\xA2"
                },
                pound: {
                    regex: /&(pound|#163);/g,
                    val: "\xA3"
                },
                yen: {
                    regex: /&(yen|#165);/g,
                    val: "\xA5"
                },
                euro: {
                    regex: /&(euro|#8364);/g,
                    val: "\u20AC"
                },
                copyright: {
                    regex: /&(copy|#169);/g,
                    val: "\xA9"
                },
                reg: {
                    regex: /&(reg|#174);/g,
                    val: "\xAE"
                },
                inr: {
                    regex: /&(inr|#8377);/g,
                    val: "\u20B9"
                }
            }, this.addExternalEntities = ke, this.parseXml = Je, this.parseTextData = _e, this.resolveNameSpace = Ge, this.buildAttributesMap = Ye, this.isItStopNode = Ke, this.replaceEntitiesValue = We, this.readStopNodeData = Ze, this.saveTextToParentTag = ze;
        }
    };
    function ke(e) {
        let t = Object.keys(e);
        for(let s = 0; s < t.length; s++){
            let i = t[s];
            this.lastEntities[i] = {
                regex: new RegExp("&" + i + ";", "g"),
                val: e[i]
            };
        }
    }
    function _e(e, t, s, i, r, n, f) {
        if (e !== void 0 && (this.options.trimValues && !i && (e = e.trim()), e.length > 0)) {
            f || (e = this.replaceEntitiesValue(e));
            let o = this.options.tagValueProcessor(t, e, s, r, n);
            return o == null ? e : typeof o != typeof e || o !== e ? o : this.options.trimValues ? F(e, this.options.parseTagValue, this.options.numberParseOptions) : e.trim() === e ? F(e, this.options.parseTagValue, this.options.numberParseOptions) : e;
        }
    }
    function Ge(e) {
        if (this.options.removeNSPrefix) {
            let t = e.split(":"), s = e.charAt(0) === "/" ? "/" : "";
            if (t[0] === "xmlns") return "";
            t.length === 2 && (e = s + t[1]);
        }
        return e;
    }
    var Ue = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function Ye(e, t) {
        if (!this.options.ignoreAttributes && typeof e == "string") {
            let s = $.getAllMatches(e, Ue), i = s.length, r = {};
            for(let n = 0; n < i; n++){
                let f = this.resolveNameSpace(s[n][1]), o = s[n][4], u = this.options.attributeNamePrefix + f;
                if (f.length) if (this.options.transformAttributeName && (u = this.options.transformAttributeName(u)), o !== void 0) {
                    this.options.trimValues && (o = o.trim()), o = this.replaceEntitiesValue(o);
                    let l = this.options.attributeValueProcessor(f, o, t);
                    l == null ? r[u] = o : typeof l != typeof o || l !== o ? r[u] = l : r[u] = F(o, this.options.parseAttributeValue, this.options.numberParseOptions);
                } else this.options.allowBooleanAttributes && (r[u] = !0);
            }
            if (!Object.keys(r).length) return;
            if (this.options.attributesGroupName) {
                let n = {};
                return n[this.options.attributesGroupName] = r, n;
            }
            return r;
        }
    }
    var Je = function(e) {
        e = e.replace(/\r\n?/g, `
`);
        let t = new m("!xml"), s = t, i = "", r = "";
        for(let n = 0; n < e.length; n++)if (e[n] === "<") if (e[n + 1] === "/") {
            let o = A(e, ">", n, "Closing Tag is not closed."), u = e.substring(n + 2, o).trim();
            if (this.options.removeNSPrefix) {
                let l = u.indexOf(":");
                l !== -1 && (u = u.substr(l + 1));
            }
            this.options.transformTagName && (u = this.options.transformTagName(u)), s && (i = this.saveTextToParentTag(i, s, r)), r = r.substr(0, r.lastIndexOf(".")), s = this.tagsNodeStack.pop(), i = "", n = o;
        } else if (e[n + 1] === "?") {
            let o = v(e, n, !1, "?>");
            if (!o) throw new Error("Pi Tag is not closed.");
            if (i = this.saveTextToParentTag(i, s, r), !(this.options.ignoreDeclaration && o.tagName === "?xml" || this.options.ignorePiTags)) {
                let u = new m(o.tagName);
                u.add(this.options.textNodeName, ""), o.tagName !== o.tagExp && o.attrExpPresent && (u[":@"] = this.buildAttributesMap(o.tagExp, r)), s.addChild(u);
            }
            n = o.closeIndex + 1;
        } else if (e.substr(n + 1, 3) === "!--") {
            let o = A(e, "-->", n + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
                let u = e.substring(n + 4, o - 2);
                i = this.saveTextToParentTag(i, s, r), s.add(this.options.commentPropName, [
                    {
                        [this.options.textNodeName]: u
                    }
                ]);
            }
            n = o;
        } else if (e.substr(n + 1, 2) === "!D") {
            let o = qe(e, n);
            this.docTypeEntities = o.entities, n = o.i;
        } else if (e.substr(n + 1, 2) === "![") {
            let o = A(e, "]]>", n, "CDATA is not closed.") - 2, u = e.substring(n + 9, o);
            if (i = this.saveTextToParentTag(i, s, r), this.options.cdataPropName) s.add(this.options.cdataPropName, [
                {
                    [this.options.textNodeName]: u
                }
            ]);
            else {
                let l = this.parseTextData(u, s.tagname, r, !0, !1, !0);
                l == null && (l = ""), s.add(this.options.textNodeName, l);
            }
            n = o + 2;
        } else {
            let o = v(e, n, this.options.removeNSPrefix), u = o.tagName, l = o.tagExp, d = o.attrExpPresent, a = o.closeIndex;
            this.options.transformTagName && (u = this.options.transformTagName(u)), s && i && s.tagname !== "!xml" && (i = this.saveTextToParentTag(i, s, r, !1)), u !== t.tagname && (r += r ? "." + u : u);
            let g = s;
            if (g && this.options.unpairedTags.indexOf(g.tagname) !== -1 && (s = this.tagsNodeStack.pop()), this.isItStopNode(this.options.stopNodes, r, u)) {
                let c = "";
                if (l.length > 0 && l.lastIndexOf("/") === l.length - 1) n = o.closeIndex;
                else if (this.options.unpairedTags.indexOf(u) !== -1) n = o.closeIndex;
                else {
                    let y = this.readStopNodeData(e, u, a + 1);
                    if (!y) throw new Error(`Unexpected end of ${u}`);
                    n = y.i, c = y.tagContent;
                }
                let N = new m(u);
                u !== l && d && (N[":@"] = this.buildAttributesMap(l, r)), c && (c = this.parseTextData(c, u, r, !0, d, !0, !0)), r = r.substr(0, r.lastIndexOf(".")), N.add(this.options.textNodeName, c), s.addChild(N);
            } else {
                if (l.length > 0 && l.lastIndexOf("/") === l.length - 1) {
                    u[u.length - 1] === "/" ? (u = u.substr(0, u.length - 1), l = u) : l = l.substr(0, l.length - 1), this.options.transformTagName && (u = this.options.transformTagName(u));
                    let c = new m(u);
                    u !== l && d && (c[":@"] = this.buildAttributesMap(l, r)), r = r.substr(0, r.lastIndexOf(".")), s.addChild(c);
                } else {
                    let c = new m(u);
                    this.tagsNodeStack.push(s), u !== l && d && (c[":@"] = this.buildAttributesMap(l, r)), s.addChild(c), s = c;
                }
                i = "", n = a;
            }
        }
        else i += e[n];
        return t.child;
    }, We = function(e) {
        if (this.options.processEntities) {
            for(let t in this.docTypeEntities){
                let s = this.docTypeEntities[t];
                e = e.replace(s.regx, s.val);
            }
            for(let t in this.lastEntities){
                let s = this.lastEntities[t];
                e = e.replace(s.regex, s.val);
            }
            if (this.options.htmlEntities) for(let t in this.htmlEntities){
                let s = this.htmlEntities[t];
                e = e.replace(s.regex, s.val);
            }
            e = e.replace(this.ampEntity.regex, this.ampEntity.val);
        }
        return e;
    };
    function ze(e, t, s, i) {
        return e && (i === void 0 && (i = Object.keys(t.child).length === 0), e = this.parseTextData(e, t.tagname, s, !1, t[":@"] ? Object.keys(t[":@"]).length !== 0 : !1, i), e !== void 0 && e !== "" && t.add(this.options.textNodeName, e), e = ""), e;
    }
    function Ke(e, t, s) {
        let i = "*." + s;
        for(let r in e){
            let n = e[r];
            if (i === n || t === n) return !0;
        }
        return !1;
    }
    function Qe(e, t, s = ">") {
        let i, r = "";
        for(let n = t; n < e.length; n++){
            let f = e[n];
            if (i) f === i && (i = "");
            else if (f === '"' || f === "'") i = f;
            else if (f === s[0]) if (s[1]) {
                if (e[n + 1] === s[1]) return {
                    data: r,
                    index: n
                };
            } else return {
                data: r,
                index: n
            };
            else f === "	" && (f = " ");
            r += f;
        }
    }
    function A(e, t, s, i) {
        let r = e.indexOf(t, s);
        if (r === -1) throw new Error(i);
        return r + t.length - 1;
    }
    function v(e, t, s, i = ">") {
        let r = Qe(e, t + 1, i);
        if (!r) return;
        let n = r.data, f = r.index, o = n.search(/\s/), u = n, l = !0;
        if (o !== -1 && (u = n.substr(0, o).replace(/\s\s*$/, ""), n = n.substr(o + 1)), s) {
            let d = u.indexOf(":");
            d !== -1 && (u = u.substr(d + 1), l = u !== r.data.substr(d + 1));
        }
        return {
            tagName: u,
            tagExp: n,
            closeIndex: f,
            attrExpPresent: l
        };
    }
    function Ze(e, t, s) {
        let i = s, r = 1;
        for(; s < e.length; s++)if (e[s] === "<") if (e[s + 1] === "/") {
            let n = A(e, ">", s, `${t} is not closed`);
            if (e.substring(s + 2, n).trim() === t && (r--, r === 0)) return {
                tagContent: e.substring(i, s),
                i: n
            };
            s = n;
        } else if (e[s + 1] === "?") s = A(e, "?>", s + 1, "StopNode is not closed.");
        else if (e.substr(s + 1, 3) === "!--") s = A(e, "-->", s + 3, "StopNode is not closed.");
        else if (e.substr(s + 1, 2) === "![") s = A(e, "]]>", s, "StopNode is not closed.") - 2;
        else {
            let n = v(e, s, ">");
            n && ((n && n.tagName) === t && n.tagExp[n.tagExp.length - 1] !== "/" && r++, s = n.closeIndex);
        }
    }
    function F(e, t, s) {
        if (t && typeof e == "string") {
            let i = e.trim();
            return i === "true" ? !0 : i === "false" ? !1 : Xe(e, s);
        } else return $.isExist(e) ? e : "";
    }
    Q.exports = V;
});
var D = b1((j)=>{
    "use strict";
    function He(e, t) {
        return H(e, t);
    }
    function H(e, t, s) {
        let i, r = {};
        for(let n = 0; n < e.length; n++){
            let f = e[n], o = je(f), u = "";
            if (s === void 0 ? u = o : u = s + "." + o, o === t.textNodeName) i === void 0 ? i = f[o] : i += "" + f[o];
            else {
                if (o === void 0) continue;
                if (f[o]) {
                    let l = H(f[o], t, u), d = et(l, t);
                    f[":@"] ? De(l, f[":@"], u, t) : Object.keys(l).length === 1 && l[t.textNodeName] !== void 0 && !t.alwaysCreateTextNode ? l = l[t.textNodeName] : Object.keys(l).length === 0 && (t.alwaysCreateTextNode ? l[t.textNodeName] = "" : l = ""), r[o] !== void 0 && r.hasOwnProperty(o) ? (Array.isArray(r[o]) || (r[o] = [
                        r[o]
                    ]), r[o].push(l)) : t.isArray(o, u, d) ? r[o] = [
                        l
                    ] : r[o] = l;
                }
            }
        }
        return typeof i == "string" ? i.length > 0 && (r[t.textNodeName] = i) : i !== void 0 && (r[t.textNodeName] = i), r;
    }
    function je(e) {
        let t = Object.keys(e);
        for(let s = 0; s < t.length; s++){
            let i = t[s];
            if (i !== ":@") return i;
        }
    }
    function De(e, t, s, i) {
        if (t) {
            let r = Object.keys(t), n = r.length;
            for(let f = 0; f < n; f++){
                let o = r[f];
                i.isArray(o, s + "." + o, !0, !0) ? e[o] = [
                    t[o]
                ] : e[o] = t[o];
            }
        }
    }
    function et(e, t) {
        let s = Object.keys(e).length;
        return !!(s === 0 || s === 1 && e[t.textNodeName]);
    }
    j.prettify = He;
});
var te = b1((Ot, ee)=>{
    var { buildOptions: tt  } = Y(), st = Z1(), { prettify: nt  } = D(), rt = O1(), B = class {
        constructor(t){
            this.externalEntities = {}, this.options = tt(t);
        }
        parse(t, s) {
            if (typeof t != "string") if (t.toString) t = t.toString();
            else throw new Error("XML data is accepted in String or Bytes[] form.");
            if (s) {
                s === !0 && (s = {});
                let n = rt.validate(t, s);
                if (n !== !0) throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`);
            }
            let i = new st(this.options);
            i.addExternalEntities(this.externalEntities);
            let r = i.parseXml(t);
            return this.options.preserveOrder || r === void 0 ? r : nt(r, this.options);
        }
        addEntity(t, s) {
            if (s.indexOf("&") !== -1) throw new Error("Entity value can't have '&'");
            if (t.indexOf("&") !== -1 || t.indexOf(";") !== -1) throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
            if (s === "&") throw new Error("An entity with value '&' is not permitted");
            this.externalEntities[t] = s;
        }
    };
    ee.exports = B;
});
var oe = b1((St, ie)=>{
    var it = `
`;
    function ot(e, t) {
        let s = "";
        return t.format && t.indentBy.length > 0 && (s = it), ne(e, t, "", s);
    }
    function ne(e, t, s, i) {
        let r = "", n = !1;
        for(let f = 0; f < e.length; f++){
            let o = e[f], u = ut(o), l = "";
            if (s.length === 0 ? l = u : l = `${s}.${u}`, u === t.textNodeName) {
                let N = o[u];
                ft(l, t) || (N = t.tagValueProcessor(u, N), N = re(N, t)), n && (r += i), r += N, n = !1;
                continue;
            } else if (u === t.cdataPropName) {
                n && (r += i), r += `<![CDATA[${o[u][0][t.textNodeName]}]]>`, n = !1;
                continue;
            } else if (u === t.commentPropName) {
                r += i + `<!--${o[u][0][t.textNodeName]}-->`, n = !0;
                continue;
            } else if (u[0] === "?") {
                let N = se(o[":@"], t), y = u === "?xml" ? "" : i, I = o[u][0][t.textNodeName];
                I = I.length !== 0 ? " " + I : "", r += y + `<${u}${I}${N}?>`, n = !0;
                continue;
            }
            let d = i;
            d !== "" && (d += t.indentBy);
            let a = se(o[":@"], t), g = i + `<${u}${a}`, c = ne(o[u], t, l, d);
            t.unpairedTags.indexOf(u) !== -1 ? t.suppressUnpairedNode ? r += g + ">" : r += g + "/>" : (!c || c.length === 0) && t.suppressEmptyNode ? r += g + "/>" : c && c.endsWith(">") ? r += g + `>${c}${i}</${u}>` : (r += g + ">", c && i !== "" && (c.includes("/>") || c.includes("</")) ? r += i + t.indentBy + c + i : r += c, r += `</${u}>`), n = !0;
        }
        return r;
    }
    function ut(e) {
        let t = Object.keys(e);
        for(let s = 0; s < t.length; s++){
            let i = t[s];
            if (i !== ":@") return i;
        }
    }
    function se(e, t) {
        let s = "";
        if (e && !t.ignoreAttributes) for(let i in e){
            let r = t.attributeValueProcessor(i, e[i]);
            r = re(r, t), r === !0 && t.suppressBooleanAttributes ? s += ` ${i.substr(t.attributeNamePrefix.length)}` : s += ` ${i.substr(t.attributeNamePrefix.length)}="${r}"`;
        }
        return s;
    }
    function ft(e, t) {
        e = e.substr(0, e.length - t.textNodeName.length - 1);
        let s = e.substr(e.lastIndexOf(".") + 1);
        for(let i in t.stopNodes)if (t.stopNodes[i] === e || t.stopNodes[i] === "*." + s) return !0;
        return !1;
    }
    function re(e, t) {
        if (e && e.length > 0 && t.processEntities) for(let s = 0; s < t.entities.length; s++){
            let i = t.entities[s];
            e = e.replace(i.regex, i.val);
        }
        return e;
    }
    ie.exports = ot;
});
var fe = b1((xt, ue)=>{
    "use strict";
    var lt = oe(), dt = {
        attributeNamePrefix: "@_",
        attributesGroupName: !1,
        textNodeName: "#text",
        ignoreAttributes: !0,
        cdataPropName: !1,
        format: !1,
        indentBy: "  ",
        suppressEmptyNode: !1,
        suppressUnpairedNode: !0,
        suppressBooleanAttributes: !0,
        tagValueProcessor: function(e, t) {
            return t;
        },
        attributeValueProcessor: function(e, t) {
            return t;
        },
        preserveOrder: !1,
        commentPropName: !1,
        unpairedTags: [],
        entities: [
            {
                regex: new RegExp("&", "g"),
                val: "&amp;"
            },
            {
                regex: new RegExp(">", "g"),
                val: "&gt;"
            },
            {
                regex: new RegExp("<", "g"),
                val: "&lt;"
            },
            {
                regex: new RegExp("'", "g"),
                val: "&apos;"
            },
            {
                regex: new RegExp('"', "g"),
                val: "&quot;"
            }
        ],
        processEntities: !0,
        stopNodes: []
    };
    function T(e) {
        this.options = Object.assign({}, dt, e), this.options.ignoreAttributes || this.options.attributesGroupName ? this.isAttribute = function() {
            return !1;
        } : (this.attrPrefixLen = this.options.attributeNamePrefix.length, this.isAttribute = ht), this.processTextOrObjNode = ct, this.options.format ? (this.indentate = at, this.tagEndChar = `>
`, this.newLine = `
`) : (this.indentate = function() {
            return "";
        }, this.tagEndChar = ">", this.newLine = "");
    }
    T.prototype.build = function(e) {
        return this.options.preserveOrder ? lt(e, this.options) : (Array.isArray(e) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1 && (e = {
            [this.options.arrayNodeName]: e
        }), this.j2x(e, 0).val);
    };
    T.prototype.j2x = function(e, t) {
        let s = "", i = "";
        for(let r in e)if (!(typeof e[r] > "u")) if (e[r] === null) r[0] === "?" ? i += this.indentate(t) + "<" + r + "?" + this.tagEndChar : i += this.indentate(t) + "<" + r + "/" + this.tagEndChar;
        else if (e[r] instanceof Date) i += this.buildTextValNode(e[r], r, "", t);
        else if (typeof e[r] != "object") {
            let n = this.isAttribute(r);
            if (n) s += this.buildAttrPairStr(n, "" + e[r]);
            else if (r === this.options.textNodeName) {
                let f = this.options.tagValueProcessor(r, "" + e[r]);
                i += this.replaceEntitiesValue(f);
            } else i += this.buildTextValNode(e[r], r, "", t);
        } else if (Array.isArray(e[r])) {
            let n = e[r].length;
            for(let f = 0; f < n; f++){
                let o = e[r][f];
                typeof o > "u" || (o === null ? r[0] === "?" ? i += this.indentate(t) + "<" + r + "?" + this.tagEndChar : i += this.indentate(t) + "<" + r + "/" + this.tagEndChar : typeof o == "object" ? i += this.processTextOrObjNode(o, r, t) : i += this.buildTextValNode(o, r, "", t));
            }
        } else if (this.options.attributesGroupName && r === this.options.attributesGroupName) {
            let n = Object.keys(e[r]), f = n.length;
            for(let o = 0; o < f; o++)s += this.buildAttrPairStr(n[o], "" + e[r][n[o]]);
        } else i += this.processTextOrObjNode(e[r], r, t);
        return {
            attrStr: s,
            val: i
        };
    };
    T.prototype.buildAttrPairStr = function(e, t) {
        return t = this.options.attributeValueProcessor(e, "" + t), t = this.replaceEntitiesValue(t), this.options.suppressBooleanAttributes && t === "true" ? " " + e : " " + e + '="' + t + '"';
    };
    function ct(e, t, s) {
        let i = this.j2x(e, s + 1);
        return e[this.options.textNodeName] !== void 0 && Object.keys(e).length === 1 ? this.buildTextValNode(e[this.options.textNodeName], t, i.attrStr, s) : this.buildObjectNode(i.val, t, i.attrStr, s);
    }
    T.prototype.buildObjectNode = function(e, t, s, i) {
        if (e === "") return t[0] === "?" ? this.indentate(i) + "<" + t + s + "?" + this.tagEndChar : this.indentate(i) + "<" + t + s + this.closeTag(t) + this.tagEndChar;
        {
            let r = "</" + t + this.tagEndChar, n = "";
            return t[0] === "?" && (n = "?", r = ""), s && e.indexOf("<") === -1 ? this.indentate(i) + "<" + t + s + n + ">" + e + r : this.options.commentPropName !== !1 && t === this.options.commentPropName && n.length === 0 ? this.indentate(i) + `<!--${e}-->` + this.newLine : this.indentate(i) + "<" + t + s + n + this.tagEndChar + e + this.indentate(i) + r;
        }
    };
    T.prototype.closeTag = function(e) {
        let t = "";
        return this.options.unpairedTags.indexOf(e) !== -1 ? this.options.suppressUnpairedNode || (t = "/") : this.options.suppressEmptyNode ? t = "/" : t = `></${e}`, t;
    };
    T.prototype.buildTextValNode = function(e, t, s, i) {
        if (this.options.cdataPropName !== !1 && t === this.options.cdataPropName) return this.indentate(i) + `<![CDATA[${e}]]>` + this.newLine;
        if (this.options.commentPropName !== !1 && t === this.options.commentPropName) return this.indentate(i) + `<!--${e}-->` + this.newLine;
        if (t[0] === "?") return this.indentate(i) + "<" + t + s + "?" + this.tagEndChar;
        {
            let r = this.options.tagValueProcessor(t, e);
            return r = this.replaceEntitiesValue(r), r === "" ? this.indentate(i) + "<" + t + s + this.closeTag(t) + this.tagEndChar : this.indentate(i) + "<" + t + s + ">" + r + "</" + t + this.tagEndChar;
        }
    };
    T.prototype.replaceEntitiesValue = function(e) {
        if (e && e.length > 0 && this.options.processEntities) for(let t = 0; t < this.options.entities.length; t++){
            let s = this.options.entities[t];
            e = e.replace(s.regex, s.val);
        }
        return e;
    };
    function at(e) {
        return this.options.indentBy.repeat(e);
    }
    function ht(e) {
        return e.startsWith(this.options.attributeNamePrefix) ? e.substr(this.attrPrefixLen) : !1;
    }
    ue.exports = T;
});
var de = b1((Vt, le)=>{
    "use strict";
    var gt = O1(), pt = te(), Nt = fe();
    le.exports = {
        XMLParser: pt,
        XMLValidator: gt,
        XMLBuilder: Nt
    };
});
var ae = Ae(de()), { XMLParser: vt , XMLValidator: Ft , XMLBuilder: $t  } = ae, { default: ce , ...bt } = ae;
const MAX_BITS = 15;
const D_CODES = 30;
const BL_CODES = 19;
const LITERALS = 256;
const L_CODES = 256 + 1 + 29;
const HEAP_SIZE = 2 * L_CODES + 1;
const END_BLOCK = 256;
const MAX_BL_BITS = 7;
const Buf_size = 8 * 2;
const Z_DEFAULT_COMPRESSION = -1;
const Z_HUFFMAN_ONLY = 2;
const Z_DEFAULT_STRATEGY = 0;
const Z_NO_FLUSH = 0;
const Z_PARTIAL_FLUSH = 1;
const Z_FULL_FLUSH = 3;
const Z_FINISH = 4;
const Z_OK = 0;
const Z_STREAM_END = 1;
const Z_NEED_DICT = 2;
const Z_STREAM_ERROR = -2;
const Z_DATA_ERROR = -3;
const Z_BUF_ERROR = -5;
function extractArray(array) {
    return flatArray(array.map(([length, value])=>new Array(length).fill(value, 0, length)));
}
function flatArray(array) {
    return array.reduce((a, b)=>a.concat(Array.isArray(b) ? flatArray(b) : b), []);
}
const _dist_code = [
    0,
    1,
    2,
    3
].concat(...extractArray([
    [
        2,
        4
    ],
    [
        2,
        5
    ],
    [
        4,
        6
    ],
    [
        4,
        7
    ],
    [
        8,
        8
    ],
    [
        8,
        9
    ],
    [
        16,
        10
    ],
    [
        16,
        11
    ],
    [
        32,
        12
    ],
    [
        32,
        13
    ],
    [
        64,
        14
    ],
    [
        64,
        15
    ],
    [
        2,
        0
    ],
    [
        1,
        16
    ],
    [
        1,
        17
    ],
    [
        2,
        18
    ],
    [
        2,
        19
    ],
    [
        4,
        20
    ],
    [
        4,
        21
    ],
    [
        8,
        22
    ],
    [
        8,
        23
    ],
    [
        16,
        24
    ],
    [
        16,
        25
    ],
    [
        32,
        26
    ],
    [
        32,
        27
    ],
    [
        64,
        28
    ],
    [
        64,
        29
    ]
]));
function Tree() {
    const that = this;
    function gen_bitlen(s) {
        const tree = that.dyn_tree;
        const stree = that.stat_desc.static_tree;
        const extra = that.stat_desc.extra_bits;
        const base = that.stat_desc.extra_base;
        const max_length = that.stat_desc.max_length;
        let h;
        let n, m;
        let bits;
        let xbits;
        let f;
        let overflow = 0;
        for(bits = 0; bits <= 15; bits++)s.bl_count[bits] = 0;
        tree[s.heap[s.heap_max] * 2 + 1] = 0;
        for(h = s.heap_max + 1; h < HEAP_SIZE; h++){
            n = s.heap[h];
            bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
            if (bits > max_length) {
                bits = max_length;
                overflow++;
            }
            tree[n * 2 + 1] = bits;
            if (n > that.max_code) continue;
            s.bl_count[bits]++;
            xbits = 0;
            if (n >= base) xbits = extra[n - base];
            f = tree[n * 2];
            s.opt_len += f * (bits + xbits);
            if (stree) s.static_len += f * (stree[n * 2 + 1] + xbits);
        }
        if (overflow === 0) return;
        do {
            bits = max_length - 1;
            while(s.bl_count[bits] === 0)bits--;
            s.bl_count[bits]--;
            s.bl_count[bits + 1] += 2;
            s.bl_count[max_length]--;
            overflow -= 2;
        }while (overflow > 0)
        for(bits = max_length; bits !== 0; bits--){
            n = s.bl_count[bits];
            while(n !== 0){
                m = s.heap[--h];
                if (m > that.max_code) continue;
                if (tree[m * 2 + 1] != bits) {
                    s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
                    tree[m * 2 + 1] = bits;
                }
                n--;
            }
        }
    }
    function bi_reverse(code, len) {
        let res = 0;
        do {
            res |= code & 1;
            code >>>= 1;
            res <<= 1;
        }while (--len > 0)
        return res >>> 1;
    }
    function gen_codes(tree, max_code, bl_count) {
        const next_code = [];
        let code = 0;
        let bits;
        let n;
        let len;
        for(bits = 1; bits <= 15; bits++){
            next_code[bits] = code = code + bl_count[bits - 1] << 1;
        }
        for(n = 0; n <= max_code; n++){
            len = tree[n * 2 + 1];
            if (len === 0) continue;
            tree[n * 2] = bi_reverse(next_code[len]++, len);
        }
    }
    that.build_tree = function(s) {
        const tree = that.dyn_tree;
        const stree = that.stat_desc.static_tree;
        const elems = that.stat_desc.elems;
        let n, m;
        let max_code = -1;
        let node;
        s.heap_len = 0;
        s.heap_max = HEAP_SIZE;
        for(n = 0; n < elems; n++){
            if (tree[n * 2] !== 0) {
                s.heap[++s.heap_len] = max_code = n;
                s.depth[n] = 0;
            } else {
                tree[n * 2 + 1] = 0;
            }
        }
        while(s.heap_len < 2){
            node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
            tree[node * 2] = 1;
            s.depth[node] = 0;
            s.opt_len--;
            if (stree) s.static_len -= stree[node * 2 + 1];
        }
        that.max_code = max_code;
        for(n = Math.floor(s.heap_len / 2); n >= 1; n--)s.pqdownheap(tree, n);
        node = elems;
        do {
            n = s.heap[1];
            s.heap[1] = s.heap[s.heap_len--];
            s.pqdownheap(tree, 1);
            m = s.heap[1];
            s.heap[--s.heap_max] = n;
            s.heap[--s.heap_max] = m;
            tree[node * 2] = tree[n * 2] + tree[m * 2];
            s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;
            tree[n * 2 + 1] = tree[m * 2 + 1] = node;
            s.heap[1] = node++;
            s.pqdownheap(tree, 1);
        }while (s.heap_len >= 2)
        s.heap[--s.heap_max] = s.heap[1];
        gen_bitlen(s);
        gen_codes(tree, that.max_code, s.bl_count);
    };
}
Tree._length_code = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7
].concat(...extractArray([
    [
        2,
        8
    ],
    [
        2,
        9
    ],
    [
        2,
        10
    ],
    [
        2,
        11
    ],
    [
        4,
        12
    ],
    [
        4,
        13
    ],
    [
        4,
        14
    ],
    [
        4,
        15
    ],
    [
        8,
        16
    ],
    [
        8,
        17
    ],
    [
        8,
        18
    ],
    [
        8,
        19
    ],
    [
        16,
        20
    ],
    [
        16,
        21
    ],
    [
        16,
        22
    ],
    [
        16,
        23
    ],
    [
        32,
        24
    ],
    [
        32,
        25
    ],
    [
        32,
        26
    ],
    [
        31,
        27
    ],
    [
        1,
        28
    ]
]));
Tree.base_length = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    12,
    14,
    16,
    20,
    24,
    28,
    32,
    40,
    48,
    56,
    64,
    80,
    96,
    112,
    128,
    160,
    192,
    224,
    0
];
Tree.base_dist = [
    0,
    1,
    2,
    3,
    4,
    6,
    8,
    12,
    16,
    24,
    32,
    48,
    64,
    96,
    128,
    192,
    256,
    384,
    512,
    768,
    1024,
    1536,
    2048,
    3072,
    4096,
    6144,
    8192,
    12288,
    16384,
    24576
];
Tree.d_code = function(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
Tree.extra_lbits = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
];
Tree.extra_dbits = [
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
];
Tree.extra_blbits = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
];
Tree.bl_order = [
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
];
function StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {
    const that = this;
    that.static_tree = static_tree;
    that.extra_bits = extra_bits;
    that.extra_base = extra_base;
    that.elems = elems;
    that.max_length = max_length;
}
const static_ltree2_first_part = [
    12,
    140,
    76,
    204,
    44,
    172,
    108,
    236,
    28,
    156,
    92,
    220,
    60,
    188,
    124,
    252,
    2,
    130,
    66,
    194,
    34,
    162,
    98,
    226,
    18,
    146,
    82,
    210,
    50,
    178,
    114,
    242,
    10,
    138,
    74,
    202,
    42,
    170,
    106,
    234,
    26,
    154,
    90,
    218,
    58,
    186,
    122,
    250,
    6,
    134,
    70,
    198,
    38,
    166,
    102,
    230,
    22,
    150,
    86,
    214,
    54,
    182,
    118,
    246,
    14,
    142,
    78,
    206,
    46,
    174,
    110,
    238,
    30,
    158,
    94,
    222,
    62,
    190,
    126,
    254,
    1,
    129,
    65,
    193,
    33,
    161,
    97,
    225,
    17,
    145,
    81,
    209,
    49,
    177,
    113,
    241,
    9,
    137,
    73,
    201,
    41,
    169,
    105,
    233,
    25,
    153,
    89,
    217,
    57,
    185,
    121,
    249,
    5,
    133,
    69,
    197,
    37,
    165,
    101,
    229,
    21,
    149,
    85,
    213,
    53,
    181,
    117,
    245,
    13,
    141,
    77,
    205,
    45,
    173,
    109,
    237,
    29,
    157,
    93,
    221,
    61,
    189,
    125,
    253,
    19,
    275,
    147,
    403,
    83,
    339,
    211,
    467,
    51,
    307,
    179,
    435,
    115,
    371,
    243,
    499,
    11,
    267,
    139,
    395,
    75,
    331,
    203,
    459,
    43,
    299,
    171,
    427,
    107,
    363,
    235,
    491,
    27,
    283,
    155,
    411,
    91,
    347,
    219,
    475,
    59,
    315,
    187,
    443,
    123,
    379,
    251,
    507,
    7,
    263,
    135,
    391,
    71,
    327,
    199,
    455,
    39,
    295,
    167,
    423,
    103,
    359,
    231,
    487,
    23,
    279,
    151,
    407,
    87,
    343,
    215,
    471,
    55,
    311,
    183,
    439,
    119,
    375,
    247,
    503,
    15,
    271,
    143,
    399,
    79,
    335,
    207,
    463,
    47,
    303,
    175,
    431,
    111,
    367,
    239,
    495,
    31,
    287,
    159,
    415,
    95,
    351,
    223,
    479,
    63,
    319,
    191,
    447,
    127,
    383,
    255,
    511,
    0,
    64,
    32,
    96,
    16,
    80,
    48,
    112,
    8,
    72,
    40,
    104,
    24,
    88,
    56,
    120,
    4,
    68,
    36,
    100,
    20,
    84,
    52,
    116,
    3,
    131,
    67,
    195,
    35,
    163,
    99,
    227
];
const static_ltree2_second_part = extractArray([
    [
        144,
        8
    ],
    [
        112,
        9
    ],
    [
        24,
        7
    ],
    [
        8,
        8
    ]
]);
StaticTree.static_ltree = flatArray(static_ltree2_first_part.map((value, index)=>[
        value,
        static_ltree2_second_part[index]
    ]));
const static_dtree_first_part = [
    0,
    16,
    8,
    24,
    4,
    20,
    12,
    28,
    2,
    18,
    10,
    26,
    6,
    22,
    14,
    30,
    1,
    17,
    9,
    25,
    5,
    21,
    13,
    29,
    3,
    19,
    11,
    27,
    7,
    23
];
const static_dtree_second_part = extractArray([
    [
        30,
        5
    ]
]);
StaticTree.static_dtree = flatArray(static_dtree_first_part.map((value, index)=>[
        value,
        static_dtree_second_part[index]
    ]));
StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);
StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);
const MAX_MEM_LEVEL = 9;
const DEF_MEM_LEVEL = 8;
function Config(good_length, max_lazy, nice_length, max_chain, func) {
    const that = this;
    that.good_length = good_length;
    that.max_lazy = max_lazy;
    that.nice_length = nice_length;
    that.max_chain = max_chain;
    that.func = func;
}
const STORED = 0;
const FAST = 1;
const SLOW = 2;
const config_table = [
    new Config(0, 0, 0, 0, 0),
    new Config(4, 4, 8, 4, 1),
    new Config(4, 5, 16, 8, 1),
    new Config(4, 6, 32, 32, 1),
    new Config(4, 4, 16, 16, 2),
    new Config(8, 16, 32, 32, 2),
    new Config(8, 16, 128, 128, 2),
    new Config(8, 32, 128, 256, 2),
    new Config(32, 128, 258, 1024, 2),
    new Config(32, 258, 258, 4096, 2)
];
const z_errmsg = [
    "need dictionary",
    "stream end",
    "",
    "",
    "stream error",
    "data error",
    "",
    "buffer error",
    "",
    ""
];
const NeedMore = 0;
const BlockDone = 1;
const FinishStarted = 2;
const FinishDone = 3;
const PRESET_DICT = 0x20;
const INIT_STATE = 42;
const BUSY_STATE = 113;
const FINISH_STATE = 666;
const Z_DEFLATED = 8;
const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = 258 + 3 + 1;
function smaller(tree, n, m, depth) {
    const tn2 = tree[n * 2];
    const tm2 = tree[m * 2];
    return tn2 < tm2 || tn2 == tm2 && depth[n] <= depth[m];
}
function Deflate() {
    const that = this;
    let strm;
    let status;
    let pending_buf_size;
    let last_flush;
    let w_size;
    let w_bits;
    let w_mask;
    let win;
    let window_size;
    let prev;
    let head;
    let ins_h;
    let hash_size;
    let hash_bits;
    let hash_mask;
    let hash_shift;
    let block_start;
    let match_length;
    let prev_match;
    let match_available;
    let strstart;
    let match_start;
    let lookahead;
    let prev_length;
    let max_chain_length;
    let max_lazy_match;
    let level;
    let strategy;
    let good_match;
    let nice_match;
    let dyn_ltree;
    let dyn_dtree;
    let bl_tree;
    const l_desc = new Tree();
    const d_desc = new Tree();
    const bl_desc = new Tree();
    that.depth = [];
    let lit_bufsize;
    let last_lit;
    let matches;
    let last_eob_len;
    let bi_buf;
    let bi_valid;
    that.bl_count = [];
    that.heap = [];
    dyn_ltree = [];
    dyn_dtree = [];
    bl_tree = [];
    function lm_init() {
        window_size = 2 * w_size;
        head[hash_size - 1] = 0;
        for(let i = 0; i < hash_size - 1; i++){
            head[i] = 0;
        }
        max_lazy_match = config_table[level].max_lazy;
        good_match = config_table[level].good_length;
        nice_match = config_table[level].nice_length;
        max_chain_length = config_table[level].max_chain;
        strstart = 0;
        block_start = 0;
        lookahead = 0;
        match_length = prev_length = MIN_MATCH - 1;
        match_available = 0;
        ins_h = 0;
    }
    function init_block() {
        let i;
        for(i = 0; i < L_CODES; i++)dyn_ltree[i * 2] = 0;
        for(i = 0; i < 30; i++)dyn_dtree[i * 2] = 0;
        for(i = 0; i < 19; i++)bl_tree[i * 2] = 0;
        dyn_ltree[END_BLOCK * 2] = 1;
        that.opt_len = that.static_len = 0;
        last_lit = matches = 0;
    }
    function tr_init() {
        l_desc.dyn_tree = dyn_ltree;
        l_desc.stat_desc = StaticTree.static_l_desc;
        d_desc.dyn_tree = dyn_dtree;
        d_desc.stat_desc = StaticTree.static_d_desc;
        bl_desc.dyn_tree = bl_tree;
        bl_desc.stat_desc = StaticTree.static_bl_desc;
        bi_buf = 0;
        bi_valid = 0;
        last_eob_len = 8;
        init_block();
    }
    that.pqdownheap = function(tree, k) {
        const heap = that.heap;
        const v = heap[k];
        let j = k << 1;
        while(j <= that.heap_len){
            if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {
                j++;
            }
            if (smaller(tree, v, heap[j], that.depth)) break;
            heap[k] = heap[j];
            k = j;
            j <<= 1;
        }
        heap[k] = v;
    };
    function scan_tree(tree, max_code) {
        let prevlen = -1;
        let curlen;
        let nextlen = tree[0 * 2 + 1];
        let count = 0;
        let max_count = 7;
        let min_count = 4;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        }
        tree[(max_code + 1) * 2 + 1] = 0xffff;
        for(let n = 0; n <= max_code; n++){
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen == nextlen) {
                continue;
            } else if (count < min_count) {
                bl_tree[curlen * 2] += count;
            } else if (curlen !== 0) {
                if (curlen != prevlen) bl_tree[curlen * 2]++;
                bl_tree[16 * 2]++;
            } else if (count <= 10) {
                bl_tree[17 * 2]++;
            } else {
                bl_tree[18 * 2]++;
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
            } else if (curlen == nextlen) {
                max_count = 6;
                min_count = 3;
            } else {
                max_count = 7;
                min_count = 4;
            }
        }
    }
    function build_bl_tree() {
        let max_blindex;
        scan_tree(dyn_ltree, l_desc.max_code);
        scan_tree(dyn_dtree, d_desc.max_code);
        bl_desc.build_tree(that);
        for(max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--){
            if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0) break;
        }
        that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
        return max_blindex;
    }
    function put_byte(p) {
        that.pending_buf[that.pending++] = p;
    }
    function put_short(w) {
        put_byte(w & 0xff);
        put_byte(w >>> 8 & 0xff);
    }
    function putShortMSB(b) {
        put_byte(b >> 8 & 0xff);
        put_byte(b & 0xff & 0xff);
    }
    function send_bits(value, length) {
        let val;
        const len = length;
        if (bi_valid > Buf_size - len) {
            val = value;
            bi_buf |= val << bi_valid & 0xffff;
            put_short(bi_buf);
            bi_buf = val >>> Buf_size - bi_valid;
            bi_valid += len - Buf_size;
        } else {
            bi_buf |= value << bi_valid & 0xffff;
            bi_valid += len;
        }
    }
    function send_code(c, tree) {
        const c2 = c * 2;
        send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);
    }
    function send_tree(tree, max_code) {
        let n;
        let prevlen = -1;
        let curlen;
        let nextlen = tree[0 * 2 + 1];
        let count = 0;
        let max_count = 7;
        let min_count = 4;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        }
        for(n = 0; n <= max_code; n++){
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen == nextlen) {
                continue;
            } else if (count < min_count) {
                do {
                    send_code(curlen, bl_tree);
                }while (--count !== 0)
            } else if (curlen !== 0) {
                if (curlen != prevlen) {
                    send_code(curlen, bl_tree);
                    count--;
                }
                send_code(16, bl_tree);
                send_bits(count - 3, 2);
            } else if (count <= 10) {
                send_code(17, bl_tree);
                send_bits(count - 3, 3);
            } else {
                send_code(18, bl_tree);
                send_bits(count - 11, 7);
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
            } else if (curlen == nextlen) {
                max_count = 6;
                min_count = 3;
            } else {
                max_count = 7;
                min_count = 4;
            }
        }
    }
    function send_all_trees(lcodes, dcodes, blcodes) {
        let rank;
        send_bits(lcodes - 257, 5);
        send_bits(dcodes - 1, 5);
        send_bits(blcodes - 4, 4);
        for(rank = 0; rank < blcodes; rank++){
            send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);
        }
        send_tree(dyn_ltree, lcodes - 1);
        send_tree(dyn_dtree, dcodes - 1);
    }
    function bi_flush() {
        if (bi_valid == 16) {
            put_short(bi_buf);
            bi_buf = 0;
            bi_valid = 0;
        } else if (bi_valid >= 8) {
            put_byte(bi_buf & 0xff);
            bi_buf >>>= 8;
            bi_valid -= 8;
        }
    }
    function _tr_align() {
        send_bits(1 << 1, 3);
        send_code(256, StaticTree.static_ltree);
        bi_flush();
        if (1 + last_eob_len + 10 - bi_valid < 9) {
            send_bits(1 << 1, 3);
            send_code(256, StaticTree.static_ltree);
            bi_flush();
        }
        last_eob_len = 7;
    }
    function _tr_tally(dist, lc) {
        let out_length, in_length, dcode;
        that.dist_buf[last_lit] = dist;
        that.lc_buf[last_lit] = lc & 0xff;
        last_lit++;
        if (dist === 0) {
            dyn_ltree[lc * 2]++;
        } else {
            matches++;
            dist--;
            dyn_ltree[(Tree._length_code[lc] + 256 + 1) * 2]++;
            dyn_dtree[Tree.d_code(dist) * 2]++;
        }
        if ((last_lit & 0x1fff) === 0 && level > 2) {
            out_length = last_lit * 8;
            in_length = strstart - block_start;
            for(dcode = 0; dcode < 30; dcode++){
                out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);
            }
            out_length >>>= 3;
            if (matches < Math.floor(last_lit / 2) && out_length < Math.floor(in_length / 2)) return true;
        }
        return last_lit == lit_bufsize - 1;
    }
    function compress_block(ltree, dtree) {
        let dist;
        let lc;
        let lx = 0;
        let code;
        let extra;
        if (last_lit !== 0) {
            do {
                dist = that.dist_buf[lx];
                lc = that.lc_buf[lx];
                lx++;
                if (dist === 0) {
                    send_code(lc, ltree);
                } else {
                    code = Tree._length_code[lc];
                    send_code(code + 256 + 1, ltree);
                    extra = Tree.extra_lbits[code];
                    if (extra !== 0) {
                        lc -= Tree.base_length[code];
                        send_bits(lc, extra);
                    }
                    dist--;
                    code = Tree.d_code(dist);
                    send_code(code, dtree);
                    extra = Tree.extra_dbits[code];
                    if (extra !== 0) {
                        dist -= Tree.base_dist[code];
                        send_bits(dist, extra);
                    }
                }
            }while (lx < last_lit)
        }
        send_code(256, ltree);
        last_eob_len = ltree[END_BLOCK * 2 + 1];
    }
    function bi_windup() {
        if (bi_valid > 8) {
            put_short(bi_buf);
        } else if (bi_valid > 0) {
            put_byte(bi_buf & 0xff);
        }
        bi_buf = 0;
        bi_valid = 0;
    }
    function copy_block(buf, len, header) {
        bi_windup();
        last_eob_len = 8;
        if (header) {
            put_short(len);
            put_short(~len);
        }
        that.pending_buf.set(win.subarray(buf, buf + len), that.pending);
        that.pending += len;
    }
    function _tr_stored_block(buf, stored_len, eof) {
        send_bits((0 << 1) + (eof ? 1 : 0), 3);
        copy_block(buf, stored_len, true);
    }
    function _tr_flush_block(buf, stored_len, eof) {
        let opt_lenb, static_lenb;
        let max_blindex = 0;
        if (level > 0) {
            l_desc.build_tree(that);
            d_desc.build_tree(that);
            max_blindex = build_bl_tree();
            opt_lenb = that.opt_len + 3 + 7 >>> 3;
            static_lenb = that.static_len + 3 + 7 >>> 3;
            if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
        } else {
            opt_lenb = static_lenb = stored_len + 5;
        }
        if (stored_len + 4 <= opt_lenb && buf != -1) {
            _tr_stored_block(buf, stored_len, eof);
        } else if (static_lenb == opt_lenb) {
            send_bits((1 << 1) + (eof ? 1 : 0), 3);
            compress_block(StaticTree.static_ltree, StaticTree.static_dtree);
        } else {
            send_bits((2 << 1) + (eof ? 1 : 0), 3);
            send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);
            compress_block(dyn_ltree, dyn_dtree);
        }
        init_block();
        if (eof) {
            bi_windup();
        }
    }
    function flush_block_only(eof) {
        _tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);
        block_start = strstart;
        strm.flush_pending();
    }
    function fill_window() {
        let n, m;
        let p;
        let more;
        do {
            more = window_size - lookahead - strstart;
            if (more === 0 && strstart === 0 && lookahead === 0) {
                more = w_size;
            } else if (more == -1) {
                more--;
            } else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {
                win.set(win.subarray(w_size, w_size + w_size), 0);
                match_start -= w_size;
                strstart -= w_size;
                block_start -= w_size;
                n = hash_size;
                p = n;
                do {
                    m = head[--p] & 0xffff;
                    head[p] = m >= w_size ? m - w_size : 0;
                }while (--n !== 0)
                n = w_size;
                p = n;
                do {
                    m = prev[--p] & 0xffff;
                    prev[p] = m >= w_size ? m - w_size : 0;
                }while (--n !== 0)
                more += w_size;
            }
            if (strm.avail_in === 0) return;
            n = strm.read_buf(win, strstart + lookahead, more);
            lookahead += n;
            if (lookahead >= 3) {
                ins_h = win[strstart] & 0xff;
                ins_h = (ins_h << hash_shift ^ win[strstart + 1] & 0xff) & hash_mask;
            }
        }while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0)
    }
    function deflate_stored(flush) {
        let max_block_size = 0xffff;
        let max_start;
        if (max_block_size > pending_buf_size - 5) {
            max_block_size = pending_buf_size - 5;
        }
        while(true){
            if (lookahead <= 1) {
                fill_window();
                if (lookahead === 0 && flush == 0) return 0;
                if (lookahead === 0) break;
            }
            strstart += lookahead;
            lookahead = 0;
            max_start = block_start + max_block_size;
            if (strstart === 0 || strstart >= max_start) {
                lookahead = strstart - max_start;
                strstart = max_start;
                flush_block_only(false);
                if (strm.avail_out === 0) return 0;
            }
            if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {
                flush_block_only(false);
                if (strm.avail_out === 0) return 0;
            }
        }
        flush_block_only(flush == 4);
        if (strm.avail_out === 0) return flush == 4 ? 2 : 0;
        return flush == 4 ? 3 : 1;
    }
    function longest_match(cur_match) {
        let chain_length = max_chain_length;
        let scan = strstart;
        let match;
        let len;
        let best_len = prev_length;
        const limit = strstart > w_size - MIN_LOOKAHEAD ? strstart - (w_size - MIN_LOOKAHEAD) : 0;
        let _nice_match = nice_match;
        const wmask = w_mask;
        const strend = strstart + 258;
        let scan_end1 = win[scan + best_len - 1];
        let scan_end = win[scan + best_len];
        if (prev_length >= good_match) {
            chain_length >>= 2;
        }
        if (_nice_match > lookahead) _nice_match = lookahead;
        do {
            match = cur_match;
            if (win[match + best_len] != scan_end || win[match + best_len - 1] != scan_end1 || win[match] != win[scan] || win[++match] != win[scan + 1]) continue;
            scan += 2;
            match++;
            do {}while (win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match] && scan < strend)
            len = MAX_MATCH - (strend - scan);
            scan = strend - MAX_MATCH;
            if (len > best_len) {
                match_start = cur_match;
                best_len = len;
                if (len >= _nice_match) break;
                scan_end1 = win[scan + best_len - 1];
                scan_end = win[scan + best_len];
            }
        }while ((cur_match = prev[cur_match & wmask] & 0xffff) > limit && --chain_length !== 0)
        if (best_len <= lookahead) return best_len;
        return lookahead;
    }
    function deflate_fast(flush) {
        let hash_head = 0;
        let bflush;
        while(true){
            if (lookahead < MIN_LOOKAHEAD) {
                fill_window();
                if (lookahead < MIN_LOOKAHEAD && flush == 0) {
                    return 0;
                }
                if (lookahead === 0) break;
            }
            if (lookahead >= 3) {
                ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;
                hash_head = head[ins_h] & 0xffff;
                prev[strstart & w_mask] = head[ins_h];
                head[ins_h] = strstart;
            }
            if (hash_head !== 0 && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {
                if (strategy != 2) {
                    match_length = longest_match(hash_head);
                }
            }
            if (match_length >= 3) {
                bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);
                lookahead -= match_length;
                if (match_length <= max_lazy_match && lookahead >= 3) {
                    match_length--;
                    do {
                        strstart++;
                        ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;
                        hash_head = head[ins_h] & 0xffff;
                        prev[strstart & w_mask] = head[ins_h];
                        head[ins_h] = strstart;
                    }while (--match_length !== 0)
                    strstart++;
                } else {
                    strstart += match_length;
                    match_length = 0;
                    ins_h = win[strstart] & 0xff;
                    ins_h = (ins_h << hash_shift ^ win[strstart + 1] & 0xff) & hash_mask;
                }
            } else {
                bflush = _tr_tally(0, win[strstart] & 0xff);
                lookahead--;
                strstart++;
            }
            if (bflush) {
                flush_block_only(false);
                if (strm.avail_out === 0) return 0;
            }
        }
        flush_block_only(flush == 4);
        if (strm.avail_out === 0) {
            if (flush == 4) return 2;
            else return 0;
        }
        return flush == 4 ? 3 : 1;
    }
    function deflate_slow(flush) {
        let hash_head = 0;
        let bflush;
        let max_insert;
        while(true){
            if (lookahead < MIN_LOOKAHEAD) {
                fill_window();
                if (lookahead < MIN_LOOKAHEAD && flush == 0) {
                    return 0;
                }
                if (lookahead === 0) break;
            }
            if (lookahead >= 3) {
                ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;
                hash_head = head[ins_h] & 0xffff;
                prev[strstart & w_mask] = head[ins_h];
                head[ins_h] = strstart;
            }
            prev_length = match_length;
            prev_match = match_start;
            match_length = MIN_MATCH - 1;
            if (hash_head !== 0 && prev_length < max_lazy_match && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {
                if (strategy != 2) {
                    match_length = longest_match(hash_head);
                }
                if (match_length <= 5 && (strategy == 1 || match_length == 3 && strstart - match_start > 4096)) {
                    match_length = MIN_MATCH - 1;
                }
            }
            if (prev_length >= 3 && match_length <= prev_length) {
                max_insert = strstart + lookahead - MIN_MATCH;
                bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);
                lookahead -= prev_length - 1;
                prev_length -= 2;
                do {
                    if (++strstart <= max_insert) {
                        ins_h = (ins_h << hash_shift ^ win[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask;
                        hash_head = head[ins_h] & 0xffff;
                        prev[strstart & w_mask] = head[ins_h];
                        head[ins_h] = strstart;
                    }
                }while (--prev_length !== 0)
                match_available = 0;
                match_length = MIN_MATCH - 1;
                strstart++;
                if (bflush) {
                    flush_block_only(false);
                    if (strm.avail_out === 0) return 0;
                }
            } else if (match_available !== 0) {
                bflush = _tr_tally(0, win[strstart - 1] & 0xff);
                if (bflush) {
                    flush_block_only(false);
                }
                strstart++;
                lookahead--;
                if (strm.avail_out === 0) return 0;
            } else {
                match_available = 1;
                strstart++;
                lookahead--;
            }
        }
        if (match_available !== 0) {
            bflush = _tr_tally(0, win[strstart - 1] & 0xff);
            match_available = 0;
        }
        flush_block_only(flush == 4);
        if (strm.avail_out === 0) {
            if (flush == 4) return 2;
            else return 0;
        }
        return flush == 4 ? 3 : 1;
    }
    function deflateReset(strm) {
        strm.total_in = strm.total_out = 0;
        strm.msg = null;
        that.pending = 0;
        that.pending_out = 0;
        status = BUSY_STATE;
        last_flush = Z_NO_FLUSH;
        tr_init();
        lm_init();
        return 0;
    }
    that.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {
        if (!_method) _method = Z_DEFLATED;
        if (!memLevel) memLevel = DEF_MEM_LEVEL;
        if (!_strategy) _strategy = Z_DEFAULT_STRATEGY;
        strm.msg = null;
        if (_level == Z_DEFAULT_COMPRESSION) _level = 6;
        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {
            return Z_STREAM_ERROR;
        }
        strm.dstate = that;
        w_bits = bits;
        w_size = 1 << w_bits;
        w_mask = w_size - 1;
        hash_bits = memLevel + 7;
        hash_size = 1 << hash_bits;
        hash_mask = hash_size - 1;
        hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);
        win = new Uint8Array(w_size * 2);
        prev = [];
        head = [];
        lit_bufsize = 1 << memLevel + 6;
        that.pending_buf = new Uint8Array(lit_bufsize * 4);
        pending_buf_size = lit_bufsize * 4;
        that.dist_buf = new Uint16Array(lit_bufsize);
        that.lc_buf = new Uint8Array(lit_bufsize);
        level = _level;
        strategy = _strategy;
        return deflateReset(strm);
    };
    that.deflateEnd = function() {
        if (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {
            return Z_STREAM_ERROR;
        }
        that.lc_buf = null;
        that.dist_buf = null;
        that.pending_buf = null;
        head = null;
        prev = null;
        win = null;
        that.dstate = null;
        return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
    };
    that.deflateParams = function(strm, _level, _strategy) {
        let err = Z_OK;
        if (_level == Z_DEFAULT_COMPRESSION) {
            _level = 6;
        }
        if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {
            return Z_STREAM_ERROR;
        }
        if (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {
            err = strm.deflate(Z_PARTIAL_FLUSH);
        }
        if (level != _level) {
            level = _level;
            max_lazy_match = config_table[level].max_lazy;
            good_match = config_table[level].good_length;
            nice_match = config_table[level].nice_length;
            max_chain_length = config_table[level].max_chain;
        }
        strategy = _strategy;
        return err;
    };
    that.deflateSetDictionary = function(_strm, dictionary, dictLength) {
        let length = dictLength;
        let n, index = 0;
        if (!dictionary || status != INIT_STATE) return Z_STREAM_ERROR;
        if (length < MIN_MATCH) return Z_OK;
        if (length > w_size - MIN_LOOKAHEAD) {
            length = w_size - MIN_LOOKAHEAD;
            index = dictLength - length;
        }
        win.set(dictionary.subarray(index, index + length), 0);
        strstart = length;
        block_start = length;
        ins_h = win[0] & 0xff;
        ins_h = (ins_h << hash_shift ^ win[1] & 0xff) & hash_mask;
        for(n = 0; n <= length - MIN_MATCH; n++){
            ins_h = (ins_h << hash_shift ^ win[n + (MIN_MATCH - 1)] & 0xff) & hash_mask;
            prev[n & w_mask] = head[ins_h];
            head[ins_h] = n;
        }
        return Z_OK;
    };
    that.deflate = function(_strm, flush) {
        let i, header, level_flags, old_flush, bstate;
        if (flush > Z_FINISH || flush < 0) {
            return Z_STREAM_ERROR;
        }
        if (!_strm.next_out || !_strm.next_in && _strm.avail_in !== 0 || status == FINISH_STATE && flush != Z_FINISH) {
            _strm.msg = z_errmsg[Z_NEED_DICT - Z_STREAM_ERROR];
            return Z_STREAM_ERROR;
        }
        if (_strm.avail_out === 0) {
            _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
            return Z_BUF_ERROR;
        }
        strm = _strm;
        old_flush = last_flush;
        last_flush = flush;
        if (status == INIT_STATE) {
            header = Z_DEFLATED + (w_bits - 8 << 4) << 8;
            level_flags = (level - 1 & 0xff) >> 1;
            if (level_flags > 3) level_flags = 3;
            header |= level_flags << 6;
            if (strstart !== 0) header |= PRESET_DICT;
            header += 31 - header % 31;
            status = BUSY_STATE;
            putShortMSB(header);
        }
        if (that.pending !== 0) {
            strm.flush_pending();
            if (strm.avail_out === 0) {
                last_flush = -1;
                return Z_OK;
            }
        } else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {
            strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
            return Z_BUF_ERROR;
        }
        if (status == FINISH_STATE && strm.avail_in !== 0) {
            _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
            return Z_BUF_ERROR;
        }
        if (strm.avail_in !== 0 || lookahead !== 0 || flush != Z_NO_FLUSH && status != FINISH_STATE) {
            bstate = -1;
            switch(config_table[level].func){
                case STORED:
                    bstate = deflate_stored(flush);
                    break;
                case FAST:
                    bstate = deflate_fast(flush);
                    break;
                case SLOW:
                    bstate = deflate_slow(flush);
                    break;
                default:
            }
            if (bstate == FinishStarted || bstate == FinishDone) {
                status = FINISH_STATE;
            }
            if (bstate == NeedMore || bstate == FinishStarted) {
                if (strm.avail_out === 0) {
                    last_flush = -1;
                }
                return Z_OK;
            }
            if (bstate == BlockDone) {
                if (flush == Z_PARTIAL_FLUSH) {
                    _tr_align();
                } else {
                    _tr_stored_block(0, 0, false);
                    if (flush == Z_FULL_FLUSH) {
                        for(i = 0; i < hash_size; i++)head[i] = 0;
                    }
                }
                strm.flush_pending();
                if (strm.avail_out === 0) {
                    last_flush = -1;
                    return Z_OK;
                }
            }
        }
        if (flush != Z_FINISH) return Z_OK;
        return Z_STREAM_END;
    };
}
function ZStream() {
    const that = this;
    that.next_in_index = 0;
    that.next_out_index = 0;
    that.avail_in = 0;
    that.total_in = 0;
    that.avail_out = 0;
    that.total_out = 0;
}
ZStream.prototype = {
    deflateInit (level, bits) {
        const that = this;
        that.dstate = new Deflate();
        if (!bits) bits = MAX_BITS;
        return that.dstate.deflateInit(that, level, bits);
    },
    deflate (flush) {
        const that = this;
        if (!that.dstate) {
            return Z_STREAM_ERROR;
        }
        return that.dstate.deflate(that, flush);
    },
    deflateEnd () {
        const that = this;
        if (!that.dstate) return Z_STREAM_ERROR;
        const ret = that.dstate.deflateEnd();
        that.dstate = null;
        return ret;
    },
    deflateParams (level, strategy) {
        const that = this;
        if (!that.dstate) return Z_STREAM_ERROR;
        return that.dstate.deflateParams(that, level, strategy);
    },
    deflateSetDictionary (dictionary, dictLength) {
        const that = this;
        if (!that.dstate) return Z_STREAM_ERROR;
        return that.dstate.deflateSetDictionary(that, dictionary, dictLength);
    },
    read_buf (buf, start, size) {
        const that = this;
        let len = that.avail_in;
        if (len > size) len = size;
        if (len === 0) return 0;
        that.avail_in -= len;
        buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);
        that.next_in_index += len;
        that.total_in += len;
        return len;
    },
    flush_pending () {
        const that = this;
        let len = that.dstate.pending;
        if (len > that.avail_out) len = that.avail_out;
        if (len === 0) return;
        that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);
        that.next_out_index += len;
        that.dstate.pending_out += len;
        that.total_out += len;
        that.avail_out -= len;
        that.dstate.pending -= len;
        if (that.dstate.pending === 0) {
            that.dstate.pending_out = 0;
        }
    }
};
function ZipDeflate(options) {
    const that = this;
    const z = new ZStream();
    const bufsize = getMaximumCompressedSize(options && options.chunkSize ? options.chunkSize : 64 * 1024);
    const flush = 0;
    const buf = new Uint8Array(bufsize);
    let level = options ? options.level : Z_DEFAULT_COMPRESSION;
    if (typeof level == "undefined") level = Z_DEFAULT_COMPRESSION;
    z.deflateInit(level);
    z.next_out = buf;
    that.append = function(data, onprogress) {
        let err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;
        const buffers = [];
        if (!data.length) return;
        z.next_in_index = 0;
        z.next_in = data;
        z.avail_in = data.length;
        do {
            z.next_out_index = 0;
            z.avail_out = bufsize;
            err = z.deflate(flush);
            if (err != Z_OK) throw new Error("deflating: " + z.msg);
            if (z.next_out_index) if (z.next_out_index == bufsize) buffers.push(new Uint8Array(buf));
            else buffers.push(buf.slice(0, z.next_out_index));
            bufferSize += z.next_out_index;
            if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
                onprogress(z.next_in_index);
                lastIndex = z.next_in_index;
            }
        }while (z.avail_in > 0 || z.avail_out === 0)
        if (buffers.length > 1) {
            array = new Uint8Array(bufferSize);
            buffers.forEach(function(chunk) {
                array.set(chunk, bufferIndex);
                bufferIndex += chunk.length;
            });
        } else {
            array = buffers[0] || new Uint8Array();
        }
        return array;
    };
    that.flush = function() {
        let err, array, bufferIndex = 0, bufferSize = 0;
        const buffers = [];
        do {
            z.next_out_index = 0;
            z.avail_out = bufsize;
            err = z.deflate(Z_FINISH);
            if (err != Z_STREAM_END && err != Z_OK) throw new Error("deflating: " + z.msg);
            if (bufsize - z.avail_out > 0) buffers.push(buf.slice(0, z.next_out_index));
            bufferSize += z.next_out_index;
        }while (z.avail_in > 0 || z.avail_out === 0)
        z.deflateEnd();
        array = new Uint8Array(bufferSize);
        buffers.forEach(function(chunk) {
            array.set(chunk, bufferIndex);
            bufferIndex += chunk.length;
        });
        return array;
    };
}
function getMaximumCompressedSize(uncompressedSize) {
    return uncompressedSize + 5 * (Math.floor(uncompressedSize / 16383) + 1);
}
const MAX_BITS1 = 15;
const Z_OK1 = 0;
const Z_STREAM_END1 = 1;
const Z_NEED_DICT1 = 2;
const Z_STREAM_ERROR1 = -2;
const Z_DATA_ERROR1 = -3;
const Z_MEM_ERROR = -4;
const Z_BUF_ERROR1 = -5;
const inflate_mask = [
    0x00000000,
    0x00000001,
    0x00000003,
    0x00000007,
    0x0000000f,
    0x0000001f,
    0x0000003f,
    0x0000007f,
    0x000000ff,
    0x000001ff,
    0x000003ff,
    0x000007ff,
    0x00000fff,
    0x00001fff,
    0x00003fff,
    0x00007fff,
    0x0000ffff
];
const Z_FINISH1 = 4;
const fixed_bl = 9;
const fixed_bd = 5;
const fixed_tl = [
    96,
    7,
    256,
    0,
    8,
    80,
    0,
    8,
    16,
    84,
    8,
    115,
    82,
    7,
    31,
    0,
    8,
    112,
    0,
    8,
    48,
    0,
    9,
    192,
    80,
    7,
    10,
    0,
    8,
    96,
    0,
    8,
    32,
    0,
    9,
    160,
    0,
    8,
    0,
    0,
    8,
    128,
    0,
    8,
    64,
    0,
    9,
    224,
    80,
    7,
    6,
    0,
    8,
    88,
    0,
    8,
    24,
    0,
    9,
    144,
    83,
    7,
    59,
    0,
    8,
    120,
    0,
    8,
    56,
    0,
    9,
    208,
    81,
    7,
    17,
    0,
    8,
    104,
    0,
    8,
    40,
    0,
    9,
    176,
    0,
    8,
    8,
    0,
    8,
    136,
    0,
    8,
    72,
    0,
    9,
    240,
    80,
    7,
    4,
    0,
    8,
    84,
    0,
    8,
    20,
    85,
    8,
    227,
    83,
    7,
    43,
    0,
    8,
    116,
    0,
    8,
    52,
    0,
    9,
    200,
    81,
    7,
    13,
    0,
    8,
    100,
    0,
    8,
    36,
    0,
    9,
    168,
    0,
    8,
    4,
    0,
    8,
    132,
    0,
    8,
    68,
    0,
    9,
    232,
    80,
    7,
    8,
    0,
    8,
    92,
    0,
    8,
    28,
    0,
    9,
    152,
    84,
    7,
    83,
    0,
    8,
    124,
    0,
    8,
    60,
    0,
    9,
    216,
    82,
    7,
    23,
    0,
    8,
    108,
    0,
    8,
    44,
    0,
    9,
    184,
    0,
    8,
    12,
    0,
    8,
    140,
    0,
    8,
    76,
    0,
    9,
    248,
    80,
    7,
    3,
    0,
    8,
    82,
    0,
    8,
    18,
    85,
    8,
    163,
    83,
    7,
    35,
    0,
    8,
    114,
    0,
    8,
    50,
    0,
    9,
    196,
    81,
    7,
    11,
    0,
    8,
    98,
    0,
    8,
    34,
    0,
    9,
    164,
    0,
    8,
    2,
    0,
    8,
    130,
    0,
    8,
    66,
    0,
    9,
    228,
    80,
    7,
    7,
    0,
    8,
    90,
    0,
    8,
    26,
    0,
    9,
    148,
    84,
    7,
    67,
    0,
    8,
    122,
    0,
    8,
    58,
    0,
    9,
    212,
    82,
    7,
    19,
    0,
    8,
    106,
    0,
    8,
    42,
    0,
    9,
    180,
    0,
    8,
    10,
    0,
    8,
    138,
    0,
    8,
    74,
    0,
    9,
    244,
    80,
    7,
    5,
    0,
    8,
    86,
    0,
    8,
    22,
    192,
    8,
    0,
    83,
    7,
    51,
    0,
    8,
    118,
    0,
    8,
    54,
    0,
    9,
    204,
    81,
    7,
    15,
    0,
    8,
    102,
    0,
    8,
    38,
    0,
    9,
    172,
    0,
    8,
    6,
    0,
    8,
    134,
    0,
    8,
    70,
    0,
    9,
    236,
    80,
    7,
    9,
    0,
    8,
    94,
    0,
    8,
    30,
    0,
    9,
    156,
    84,
    7,
    99,
    0,
    8,
    126,
    0,
    8,
    62,
    0,
    9,
    220,
    82,
    7,
    27,
    0,
    8,
    110,
    0,
    8,
    46,
    0,
    9,
    188,
    0,
    8,
    14,
    0,
    8,
    142,
    0,
    8,
    78,
    0,
    9,
    252,
    96,
    7,
    256,
    0,
    8,
    81,
    0,
    8,
    17,
    85,
    8,
    131,
    82,
    7,
    31,
    0,
    8,
    113,
    0,
    8,
    49,
    0,
    9,
    194,
    80,
    7,
    10,
    0,
    8,
    97,
    0,
    8,
    33,
    0,
    9,
    162,
    0,
    8,
    1,
    0,
    8,
    129,
    0,
    8,
    65,
    0,
    9,
    226,
    80,
    7,
    6,
    0,
    8,
    89,
    0,
    8,
    25,
    0,
    9,
    146,
    83,
    7,
    59,
    0,
    8,
    121,
    0,
    8,
    57,
    0,
    9,
    210,
    81,
    7,
    17,
    0,
    8,
    105,
    0,
    8,
    41,
    0,
    9,
    178,
    0,
    8,
    9,
    0,
    8,
    137,
    0,
    8,
    73,
    0,
    9,
    242,
    80,
    7,
    4,
    0,
    8,
    85,
    0,
    8,
    21,
    80,
    8,
    258,
    83,
    7,
    43,
    0,
    8,
    117,
    0,
    8,
    53,
    0,
    9,
    202,
    81,
    7,
    13,
    0,
    8,
    101,
    0,
    8,
    37,
    0,
    9,
    170,
    0,
    8,
    5,
    0,
    8,
    133,
    0,
    8,
    69,
    0,
    9,
    234,
    80,
    7,
    8,
    0,
    8,
    93,
    0,
    8,
    29,
    0,
    9,
    154,
    84,
    7,
    83,
    0,
    8,
    125,
    0,
    8,
    61,
    0,
    9,
    218,
    82,
    7,
    23,
    0,
    8,
    109,
    0,
    8,
    45,
    0,
    9,
    186,
    0,
    8,
    13,
    0,
    8,
    141,
    0,
    8,
    77,
    0,
    9,
    250,
    80,
    7,
    3,
    0,
    8,
    83,
    0,
    8,
    19,
    85,
    8,
    195,
    83,
    7,
    35,
    0,
    8,
    115,
    0,
    8,
    51,
    0,
    9,
    198,
    81,
    7,
    11,
    0,
    8,
    99,
    0,
    8,
    35,
    0,
    9,
    166,
    0,
    8,
    3,
    0,
    8,
    131,
    0,
    8,
    67,
    0,
    9,
    230,
    80,
    7,
    7,
    0,
    8,
    91,
    0,
    8,
    27,
    0,
    9,
    150,
    84,
    7,
    67,
    0,
    8,
    123,
    0,
    8,
    59,
    0,
    9,
    214,
    82,
    7,
    19,
    0,
    8,
    107,
    0,
    8,
    43,
    0,
    9,
    182,
    0,
    8,
    11,
    0,
    8,
    139,
    0,
    8,
    75,
    0,
    9,
    246,
    80,
    7,
    5,
    0,
    8,
    87,
    0,
    8,
    23,
    192,
    8,
    0,
    83,
    7,
    51,
    0,
    8,
    119,
    0,
    8,
    55,
    0,
    9,
    206,
    81,
    7,
    15,
    0,
    8,
    103,
    0,
    8,
    39,
    0,
    9,
    174,
    0,
    8,
    7,
    0,
    8,
    135,
    0,
    8,
    71,
    0,
    9,
    238,
    80,
    7,
    9,
    0,
    8,
    95,
    0,
    8,
    31,
    0,
    9,
    158,
    84,
    7,
    99,
    0,
    8,
    127,
    0,
    8,
    63,
    0,
    9,
    222,
    82,
    7,
    27,
    0,
    8,
    111,
    0,
    8,
    47,
    0,
    9,
    190,
    0,
    8,
    15,
    0,
    8,
    143,
    0,
    8,
    79,
    0,
    9,
    254,
    96,
    7,
    256,
    0,
    8,
    80,
    0,
    8,
    16,
    84,
    8,
    115,
    82,
    7,
    31,
    0,
    8,
    112,
    0,
    8,
    48,
    0,
    9,
    193,
    80,
    7,
    10,
    0,
    8,
    96,
    0,
    8,
    32,
    0,
    9,
    161,
    0,
    8,
    0,
    0,
    8,
    128,
    0,
    8,
    64,
    0,
    9,
    225,
    80,
    7,
    6,
    0,
    8,
    88,
    0,
    8,
    24,
    0,
    9,
    145,
    83,
    7,
    59,
    0,
    8,
    120,
    0,
    8,
    56,
    0,
    9,
    209,
    81,
    7,
    17,
    0,
    8,
    104,
    0,
    8,
    40,
    0,
    9,
    177,
    0,
    8,
    8,
    0,
    8,
    136,
    0,
    8,
    72,
    0,
    9,
    241,
    80,
    7,
    4,
    0,
    8,
    84,
    0,
    8,
    20,
    85,
    8,
    227,
    83,
    7,
    43,
    0,
    8,
    116,
    0,
    8,
    52,
    0,
    9,
    201,
    81,
    7,
    13,
    0,
    8,
    100,
    0,
    8,
    36,
    0,
    9,
    169,
    0,
    8,
    4,
    0,
    8,
    132,
    0,
    8,
    68,
    0,
    9,
    233,
    80,
    7,
    8,
    0,
    8,
    92,
    0,
    8,
    28,
    0,
    9,
    153,
    84,
    7,
    83,
    0,
    8,
    124,
    0,
    8,
    60,
    0,
    9,
    217,
    82,
    7,
    23,
    0,
    8,
    108,
    0,
    8,
    44,
    0,
    9,
    185,
    0,
    8,
    12,
    0,
    8,
    140,
    0,
    8,
    76,
    0,
    9,
    249,
    80,
    7,
    3,
    0,
    8,
    82,
    0,
    8,
    18,
    85,
    8,
    163,
    83,
    7,
    35,
    0,
    8,
    114,
    0,
    8,
    50,
    0,
    9,
    197,
    81,
    7,
    11,
    0,
    8,
    98,
    0,
    8,
    34,
    0,
    9,
    165,
    0,
    8,
    2,
    0,
    8,
    130,
    0,
    8,
    66,
    0,
    9,
    229,
    80,
    7,
    7,
    0,
    8,
    90,
    0,
    8,
    26,
    0,
    9,
    149,
    84,
    7,
    67,
    0,
    8,
    122,
    0,
    8,
    58,
    0,
    9,
    213,
    82,
    7,
    19,
    0,
    8,
    106,
    0,
    8,
    42,
    0,
    9,
    181,
    0,
    8,
    10,
    0,
    8,
    138,
    0,
    8,
    74,
    0,
    9,
    245,
    80,
    7,
    5,
    0,
    8,
    86,
    0,
    8,
    22,
    192,
    8,
    0,
    83,
    7,
    51,
    0,
    8,
    118,
    0,
    8,
    54,
    0,
    9,
    205,
    81,
    7,
    15,
    0,
    8,
    102,
    0,
    8,
    38,
    0,
    9,
    173,
    0,
    8,
    6,
    0,
    8,
    134,
    0,
    8,
    70,
    0,
    9,
    237,
    80,
    7,
    9,
    0,
    8,
    94,
    0,
    8,
    30,
    0,
    9,
    157,
    84,
    7,
    99,
    0,
    8,
    126,
    0,
    8,
    62,
    0,
    9,
    221,
    82,
    7,
    27,
    0,
    8,
    110,
    0,
    8,
    46,
    0,
    9,
    189,
    0,
    8,
    14,
    0,
    8,
    142,
    0,
    8,
    78,
    0,
    9,
    253,
    96,
    7,
    256,
    0,
    8,
    81,
    0,
    8,
    17,
    85,
    8,
    131,
    82,
    7,
    31,
    0,
    8,
    113,
    0,
    8,
    49,
    0,
    9,
    195,
    80,
    7,
    10,
    0,
    8,
    97,
    0,
    8,
    33,
    0,
    9,
    163,
    0,
    8,
    1,
    0,
    8,
    129,
    0,
    8,
    65,
    0,
    9,
    227,
    80,
    7,
    6,
    0,
    8,
    89,
    0,
    8,
    25,
    0,
    9,
    147,
    83,
    7,
    59,
    0,
    8,
    121,
    0,
    8,
    57,
    0,
    9,
    211,
    81,
    7,
    17,
    0,
    8,
    105,
    0,
    8,
    41,
    0,
    9,
    179,
    0,
    8,
    9,
    0,
    8,
    137,
    0,
    8,
    73,
    0,
    9,
    243,
    80,
    7,
    4,
    0,
    8,
    85,
    0,
    8,
    21,
    80,
    8,
    258,
    83,
    7,
    43,
    0,
    8,
    117,
    0,
    8,
    53,
    0,
    9,
    203,
    81,
    7,
    13,
    0,
    8,
    101,
    0,
    8,
    37,
    0,
    9,
    171,
    0,
    8,
    5,
    0,
    8,
    133,
    0,
    8,
    69,
    0,
    9,
    235,
    80,
    7,
    8,
    0,
    8,
    93,
    0,
    8,
    29,
    0,
    9,
    155,
    84,
    7,
    83,
    0,
    8,
    125,
    0,
    8,
    61,
    0,
    9,
    219,
    82,
    7,
    23,
    0,
    8,
    109,
    0,
    8,
    45,
    0,
    9,
    187,
    0,
    8,
    13,
    0,
    8,
    141,
    0,
    8,
    77,
    0,
    9,
    251,
    80,
    7,
    3,
    0,
    8,
    83,
    0,
    8,
    19,
    85,
    8,
    195,
    83,
    7,
    35,
    0,
    8,
    115,
    0,
    8,
    51,
    0,
    9,
    199,
    81,
    7,
    11,
    0,
    8,
    99,
    0,
    8,
    35,
    0,
    9,
    167,
    0,
    8,
    3,
    0,
    8,
    131,
    0,
    8,
    67,
    0,
    9,
    231,
    80,
    7,
    7,
    0,
    8,
    91,
    0,
    8,
    27,
    0,
    9,
    151,
    84,
    7,
    67,
    0,
    8,
    123,
    0,
    8,
    59,
    0,
    9,
    215,
    82,
    7,
    19,
    0,
    8,
    107,
    0,
    8,
    43,
    0,
    9,
    183,
    0,
    8,
    11,
    0,
    8,
    139,
    0,
    8,
    75,
    0,
    9,
    247,
    80,
    7,
    5,
    0,
    8,
    87,
    0,
    8,
    23,
    192,
    8,
    0,
    83,
    7,
    51,
    0,
    8,
    119,
    0,
    8,
    55,
    0,
    9,
    207,
    81,
    7,
    15,
    0,
    8,
    103,
    0,
    8,
    39,
    0,
    9,
    175,
    0,
    8,
    7,
    0,
    8,
    135,
    0,
    8,
    71,
    0,
    9,
    239,
    80,
    7,
    9,
    0,
    8,
    95,
    0,
    8,
    31,
    0,
    9,
    159,
    84,
    7,
    99,
    0,
    8,
    127,
    0,
    8,
    63,
    0,
    9,
    223,
    82,
    7,
    27,
    0,
    8,
    111,
    0,
    8,
    47,
    0,
    9,
    191,
    0,
    8,
    15,
    0,
    8,
    143,
    0,
    8,
    79,
    0,
    9,
    255
];
const fixed_td = [
    80,
    5,
    1,
    87,
    5,
    257,
    83,
    5,
    17,
    91,
    5,
    4097,
    81,
    5,
    5,
    89,
    5,
    1025,
    85,
    5,
    65,
    93,
    5,
    16385,
    80,
    5,
    3,
    88,
    5,
    513,
    84,
    5,
    33,
    92,
    5,
    8193,
    82,
    5,
    9,
    90,
    5,
    2049,
    86,
    5,
    129,
    192,
    5,
    24577,
    80,
    5,
    2,
    87,
    5,
    385,
    83,
    5,
    25,
    91,
    5,
    6145,
    81,
    5,
    7,
    89,
    5,
    1537,
    85,
    5,
    97,
    93,
    5,
    24577,
    80,
    5,
    4,
    88,
    5,
    769,
    84,
    5,
    49,
    92,
    5,
    12289,
    82,
    5,
    13,
    90,
    5,
    3073,
    86,
    5,
    193,
    192,
    5,
    24577
];
const cplens = [
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
];
const cplext = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    112,
    112
];
const cpdist = [
    1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577
];
const cpdext = [
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
];
const BMAX = 15;
function InfTree() {
    const that = this;
    let hn;
    let v;
    let c;
    let r;
    let u;
    let x;
    function huft_build(b, bindex, n, s, d, e, t, m, hp, hn, v) {
        let a;
        let f;
        let g;
        let h;
        let i;
        let j;
        let k;
        let l;
        let mask;
        let p;
        let q;
        let w;
        let xp;
        let y;
        let z;
        p = 0;
        i = n;
        do {
            c[b[bindex + p]]++;
            p++;
            i--;
        }while (i !== 0)
        if (c[0] == n) {
            t[0] = -1;
            m[0] = 0;
            return 0;
        }
        l = m[0];
        for(j = 1; j <= 15; j++)if (c[j] !== 0) break;
        k = j;
        if (l < j) {
            l = j;
        }
        for(i = BMAX; i !== 0; i--){
            if (c[i] !== 0) break;
        }
        g = i;
        if (l > i) {
            l = i;
        }
        m[0] = l;
        for(y = 1 << j; j < i; j++, y <<= 1){
            if ((y -= c[j]) < 0) {
                return Z_DATA_ERROR1;
            }
        }
        if ((y -= c[i]) < 0) {
            return Z_DATA_ERROR1;
        }
        c[i] += y;
        x[1] = j = 0;
        p = 1;
        xp = 2;
        while(--i !== 0){
            x[xp] = j += c[p];
            xp++;
            p++;
        }
        i = 0;
        p = 0;
        do {
            if ((j = b[bindex + p]) !== 0) {
                v[x[j]++] = i;
            }
            p++;
        }while (++i < n)
        n = x[g];
        x[0] = i = 0;
        p = 0;
        h = -1;
        w = -l;
        u[0] = 0;
        q = 0;
        z = 0;
        for(; k <= g; k++){
            a = c[k];
            while(a-- !== 0){
                while(k > w + l){
                    h++;
                    w += l;
                    z = g - w;
                    z = z > l ? l : z;
                    if ((f = 1 << (j = k - w)) > a + 1) {
                        f -= a + 1;
                        xp = k;
                        if (j < z) {
                            while(++j < z){
                                if ((f <<= 1) <= c[++xp]) break;
                                f -= c[xp];
                            }
                        }
                    }
                    z = 1 << j;
                    if (hn[0] + z > 1440) {
                        return Z_DATA_ERROR1;
                    }
                    u[h] = q = hn[0];
                    hn[0] += z;
                    if (h !== 0) {
                        x[h] = i;
                        r[0] = j;
                        r[1] = l;
                        j = i >>> w - l;
                        r[2] = q - u[h - 1] - j;
                        hp.set(r, (u[h - 1] + j) * 3);
                    } else {
                        t[0] = q;
                    }
                }
                r[1] = k - w;
                if (p >= n) {
                    r[0] = 128 + 64;
                } else if (v[p] < s) {
                    r[0] = v[p] < 256 ? 0 : 32 + 64;
                    r[2] = v[p++];
                } else {
                    r[0] = e[v[p] - s] + 16 + 64;
                    r[2] = d[v[p++] - s];
                }
                f = 1 << k - w;
                for(j = i >>> w; j < z; j += f){
                    hp.set(r, (q + j) * 3);
                }
                for(j = 1 << k - 1; (i & j) !== 0; j >>>= 1){
                    i ^= j;
                }
                i ^= j;
                mask = (1 << w) - 1;
                while((i & mask) != x[h]){
                    h--;
                    w -= l;
                    mask = (1 << w) - 1;
                }
            }
        }
        return y !== 0 && g != 1 ? Z_BUF_ERROR1 : 0;
    }
    function initWorkArea(vsize) {
        let i;
        if (!hn) {
            hn = [];
            v = [];
            c = new Int32Array(BMAX + 1);
            r = [];
            u = new Int32Array(BMAX);
            x = new Int32Array(BMAX + 1);
        }
        if (v.length < vsize) {
            v = [];
        }
        for(i = 0; i < vsize; i++){
            v[i] = 0;
        }
        for(i = 0; i < 15 + 1; i++){
            c[i] = 0;
        }
        for(i = 0; i < 3; i++){
            r[i] = 0;
        }
        u.set(c.subarray(0, 15), 0);
        x.set(c.subarray(0, 15 + 1), 0);
    }
    that.inflate_trees_bits = function(c, bb, tb, hp, z) {
        let result;
        initWorkArea(19);
        hn[0] = 0;
        result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);
        if (result == Z_DATA_ERROR1) {
            z.msg = "oversubscribed dynamic bit lengths tree";
        } else if (result == Z_BUF_ERROR1 || bb[0] === 0) {
            z.msg = "incomplete dynamic bit lengths tree";
            result = Z_DATA_ERROR1;
        }
        return result;
    };
    that.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {
        let result;
        initWorkArea(288);
        hn[0] = 0;
        result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);
        if (result != Z_OK1 || bl[0] === 0) {
            if (result == Z_DATA_ERROR1) {
                z.msg = "oversubscribed literal/length tree";
            } else if (result != Z_MEM_ERROR) {
                z.msg = "incomplete literal/length tree";
                result = Z_DATA_ERROR1;
            }
            return result;
        }
        initWorkArea(288);
        result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);
        if (result != Z_OK1 || bd[0] === 0 && nl > 257) {
            if (result == Z_DATA_ERROR1) {
                z.msg = "oversubscribed distance tree";
            } else if (result == Z_BUF_ERROR1) {
                z.msg = "incomplete distance tree";
                result = Z_DATA_ERROR1;
            } else if (result != Z_MEM_ERROR) {
                z.msg = "empty distance tree with lengths";
                result = Z_DATA_ERROR1;
            }
            return result;
        }
        return Z_OK1;
    };
}
InfTree.inflate_trees_fixed = function(bl, bd, tl, td) {
    bl[0] = fixed_bl;
    bd[0] = fixed_bd;
    tl[0] = fixed_tl;
    td[0] = fixed_td;
    return Z_OK1;
};
const START = 0;
const LEN = 1;
const LENEXT = 2;
const DIST = 3;
const DISTEXT = 4;
const COPY = 5;
const LIT = 6;
const WASH = 7;
const END = 8;
const BADCODE = 9;
function InfCodes() {
    const that = this;
    let mode;
    let len = 0;
    let tree;
    let tree_index = 0;
    let need = 0;
    let lit = 0;
    let get = 0;
    let dist = 0;
    let lbits = 0;
    let dbits = 0;
    let ltree;
    let ltree_index = 0;
    let dtree;
    let dtree_index = 0;
    function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {
        let t;
        let tp;
        let tp_index;
        let e;
        let b;
        let k;
        let p;
        let n;
        let q;
        let m;
        let ml;
        let md;
        let c;
        let d;
        let r;
        let tp_index_t_3;
        p = z.next_in_index;
        n = z.avail_in;
        b = s.bitb;
        k = s.bitk;
        q = s.write;
        m = q < s.read ? s.read - q - 1 : s.end - q;
        ml = inflate_mask[bl];
        md = inflate_mask[bd];
        do {
            while(k < 20){
                n--;
                b |= (z.read_byte(p++) & 0xff) << k;
                k += 8;
            }
            t = b & ml;
            tp = tl;
            tp_index = tl_index;
            tp_index_t_3 = (tp_index + t) * 3;
            if ((e = tp[tp_index_t_3]) === 0) {
                b >>= tp[tp_index_t_3 + 1];
                k -= tp[tp_index_t_3 + 1];
                s.win[q++] = tp[tp_index_t_3 + 2];
                m--;
                continue;
            }
            do {
                b >>= tp[tp_index_t_3 + 1];
                k -= tp[tp_index_t_3 + 1];
                if ((e & 16) !== 0) {
                    e &= 15;
                    c = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);
                    b >>= e;
                    k -= e;
                    while(k < 15){
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    t = b & md;
                    tp = td;
                    tp_index = td_index;
                    tp_index_t_3 = (tp_index + t) * 3;
                    e = tp[tp_index_t_3];
                    do {
                        b >>= tp[tp_index_t_3 + 1];
                        k -= tp[tp_index_t_3 + 1];
                        if ((e & 16) !== 0) {
                            e &= 15;
                            while(k < e){
                                n--;
                                b |= (z.read_byte(p++) & 0xff) << k;
                                k += 8;
                            }
                            d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);
                            b >>= e;
                            k -= e;
                            m -= c;
                            if (q >= d) {
                                r = q - d;
                                if (q - r > 0 && 2 > q - r) {
                                    s.win[q++] = s.win[r++];
                                    s.win[q++] = s.win[r++];
                                    c -= 2;
                                } else {
                                    s.win.set(s.win.subarray(r, r + 2), q);
                                    q += 2;
                                    r += 2;
                                    c -= 2;
                                }
                            } else {
                                r = q - d;
                                do {
                                    r += s.end;
                                }while (r < 0)
                                e = s.end - r;
                                if (c > e) {
                                    c -= e;
                                    if (q - r > 0 && e > q - r) {
                                        do {
                                            s.win[q++] = s.win[r++];
                                        }while (--e !== 0)
                                    } else {
                                        s.win.set(s.win.subarray(r, r + e), q);
                                        q += e;
                                        r += e;
                                        e = 0;
                                    }
                                    r = 0;
                                }
                            }
                            if (q - r > 0 && c > q - r) {
                                do {
                                    s.win[q++] = s.win[r++];
                                }while (--c !== 0)
                            } else {
                                s.win.set(s.win.subarray(r, r + c), q);
                                q += c;
                                r += c;
                                c = 0;
                            }
                            break;
                        } else if ((e & 64) === 0) {
                            t += tp[tp_index_t_3 + 2];
                            t += b & inflate_mask[e];
                            tp_index_t_3 = (tp_index + t) * 3;
                            e = tp[tp_index_t_3];
                        } else {
                            z.msg = "invalid distance code";
                            c = z.avail_in - n;
                            c = k >> 3 < c ? k >> 3 : c;
                            n += c;
                            p -= c;
                            k -= c << 3;
                            s.bitb = b;
                            s.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            s.write = q;
                            return Z_DATA_ERROR1;
                        }
                    }while (true)
                    break;
                }
                if ((e & 64) === 0) {
                    t += tp[tp_index_t_3 + 2];
                    t += b & inflate_mask[e];
                    tp_index_t_3 = (tp_index + t) * 3;
                    if ((e = tp[tp_index_t_3]) === 0) {
                        b >>= tp[tp_index_t_3 + 1];
                        k -= tp[tp_index_t_3 + 1];
                        s.win[q++] = tp[tp_index_t_3 + 2];
                        m--;
                        break;
                    }
                } else if ((e & 32) !== 0) {
                    c = z.avail_in - n;
                    c = k >> 3 < c ? k >> 3 : c;
                    n += c;
                    p -= c;
                    k -= c << 3;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return 1;
                } else {
                    z.msg = "invalid literal/length code";
                    c = z.avail_in - n;
                    c = k >> 3 < c ? k >> 3 : c;
                    n += c;
                    p -= c;
                    k -= c << 3;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return Z_DATA_ERROR1;
                }
            }while (true)
        }while (m >= 258 && n >= 10)
        c = z.avail_in - n;
        c = k >> 3 < c ? k >> 3 : c;
        n += c;
        p -= c;
        k -= c << 3;
        s.bitb = b;
        s.bitk = k;
        z.avail_in = n;
        z.total_in += p - z.next_in_index;
        z.next_in_index = p;
        s.write = q;
        return 0;
    }
    that.init = function(bl, bd, tl, tl_index, td, td_index) {
        mode = START;
        lbits = bl;
        dbits = bd;
        ltree = tl;
        ltree_index = tl_index;
        dtree = td;
        dtree_index = td_index;
        tree = null;
    };
    that.proc = function(s, z, r) {
        let j;
        let tindex;
        let e;
        let b = 0;
        let k = 0;
        let p = 0;
        let n;
        let q;
        let m;
        let f;
        p = z.next_in_index;
        n = z.avail_in;
        b = s.bitb;
        k = s.bitk;
        q = s.write;
        m = q < s.read ? s.read - q - 1 : s.end - q;
        while(true){
            switch(mode){
                case START:
                    if (m >= 258 && n >= 10) {
                        s.bitb = b;
                        s.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        s.write = q;
                        r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);
                        p = z.next_in_index;
                        n = z.avail_in;
                        b = s.bitb;
                        k = s.bitk;
                        q = s.write;
                        m = q < s.read ? s.read - q - 1 : s.end - q;
                        if (r != Z_OK1) {
                            mode = r == Z_STREAM_END1 ? WASH : BADCODE;
                            break;
                        }
                    }
                    need = lbits;
                    tree = ltree;
                    tree_index = ltree_index;
                    mode = LEN;
                case LEN:
                    j = need;
                    while(k < j){
                        if (n !== 0) r = Z_OK1;
                        else {
                            s.bitb = b;
                            s.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            s.write = q;
                            return s.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    tindex = (tree_index + (b & inflate_mask[j])) * 3;
                    b >>>= tree[tindex + 1];
                    k -= tree[tindex + 1];
                    e = tree[tindex];
                    if (e === 0) {
                        lit = tree[tindex + 2];
                        mode = LIT;
                        break;
                    }
                    if ((e & 16) !== 0) {
                        get = e & 15;
                        len = tree[tindex + 2];
                        mode = LENEXT;
                        break;
                    }
                    if ((e & 64) === 0) {
                        need = e;
                        tree_index = tindex / 3 + tree[tindex + 2];
                        break;
                    }
                    if ((e & 32) !== 0) {
                        mode = WASH;
                        break;
                    }
                    mode = BADCODE;
                    z.msg = "invalid literal/length code";
                    r = Z_DATA_ERROR1;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r);
                case LENEXT:
                    j = get;
                    while(k < j){
                        if (n !== 0) r = Z_OK1;
                        else {
                            s.bitb = b;
                            s.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            s.write = q;
                            return s.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    len += b & inflate_mask[j];
                    b >>= j;
                    k -= j;
                    need = dbits;
                    tree = dtree;
                    tree_index = dtree_index;
                    mode = DIST;
                case DIST:
                    j = need;
                    while(k < j){
                        if (n !== 0) r = Z_OK1;
                        else {
                            s.bitb = b;
                            s.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            s.write = q;
                            return s.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    tindex = (tree_index + (b & inflate_mask[j])) * 3;
                    b >>= tree[tindex + 1];
                    k -= tree[tindex + 1];
                    e = tree[tindex];
                    if ((e & 16) !== 0) {
                        get = e & 15;
                        dist = tree[tindex + 2];
                        mode = DISTEXT;
                        break;
                    }
                    if ((e & 64) === 0) {
                        need = e;
                        tree_index = tindex / 3 + tree[tindex + 2];
                        break;
                    }
                    mode = BADCODE;
                    z.msg = "invalid distance code";
                    r = Z_DATA_ERROR1;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r);
                case DISTEXT:
                    j = get;
                    while(k < j){
                        if (n !== 0) r = Z_OK1;
                        else {
                            s.bitb = b;
                            s.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            s.write = q;
                            return s.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    dist += b & inflate_mask[j];
                    b >>= j;
                    k -= j;
                    mode = COPY;
                case COPY:
                    f = q - dist;
                    while(f < 0){
                        f += s.end;
                    }
                    while(len !== 0){
                        if (m === 0) {
                            if (q == s.end && s.read !== 0) {
                                q = 0;
                                m = q < s.read ? s.read - q - 1 : s.end - q;
                            }
                            if (m === 0) {
                                s.write = q;
                                r = s.inflate_flush(z, r);
                                q = s.write;
                                m = q < s.read ? s.read - q - 1 : s.end - q;
                                if (q == s.end && s.read !== 0) {
                                    q = 0;
                                    m = q < s.read ? s.read - q - 1 : s.end - q;
                                }
                                if (m === 0) {
                                    s.bitb = b;
                                    s.bitk = k;
                                    z.avail_in = n;
                                    z.total_in += p - z.next_in_index;
                                    z.next_in_index = p;
                                    s.write = q;
                                    return s.inflate_flush(z, r);
                                }
                            }
                        }
                        s.win[q++] = s.win[f++];
                        m--;
                        if (f == s.end) f = 0;
                        len--;
                    }
                    mode = START;
                    break;
                case LIT:
                    if (m === 0) {
                        if (q == s.end && s.read !== 0) {
                            q = 0;
                            m = q < s.read ? s.read - q - 1 : s.end - q;
                        }
                        if (m === 0) {
                            s.write = q;
                            r = s.inflate_flush(z, r);
                            q = s.write;
                            m = q < s.read ? s.read - q - 1 : s.end - q;
                            if (q == s.end && s.read !== 0) {
                                q = 0;
                                m = q < s.read ? s.read - q - 1 : s.end - q;
                            }
                            if (m === 0) {
                                s.bitb = b;
                                s.bitk = k;
                                z.avail_in = n;
                                z.total_in += p - z.next_in_index;
                                z.next_in_index = p;
                                s.write = q;
                                return s.inflate_flush(z, r);
                            }
                        }
                    }
                    r = Z_OK1;
                    s.win[q++] = lit;
                    m--;
                    mode = START;
                    break;
                case WASH:
                    if (k > 7) {
                        k -= 8;
                        n++;
                        p--;
                    }
                    s.write = q;
                    r = s.inflate_flush(z, r);
                    q = s.write;
                    m = q < s.read ? s.read - q - 1 : s.end - q;
                    if (s.read != s.write) {
                        s.bitb = b;
                        s.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        s.write = q;
                        return s.inflate_flush(z, r);
                    }
                    mode = END;
                case END:
                    r = Z_STREAM_END1;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r);
                case BADCODE:
                    r = Z_DATA_ERROR1;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r);
                default:
                    r = Z_STREAM_ERROR1;
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r);
            }
        }
    };
    that.free = function() {};
}
const border = [
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
];
const TYPE = 0;
const LENS = 1;
const STORED1 = 2;
const TABLE = 3;
const BTREE = 4;
const DTREE = 5;
const CODES = 6;
const DRY = 7;
const DONELOCKS = 8;
const BADBLOCKS = 9;
function InfBlocks(z, w) {
    const that = this;
    let mode = 0;
    let left = 0;
    let table = 0;
    let index = 0;
    let blens;
    const bb = [
        0
    ];
    const tb = [
        0
    ];
    const codes = new InfCodes();
    let last = 0;
    let hufts = new Int32Array(1440 * 3);
    const check = 0;
    const inftree = new InfTree();
    that.bitk = 0;
    that.bitb = 0;
    that.win = new Uint8Array(w);
    that.end = w;
    that.read = 0;
    that.write = 0;
    that.reset = function(z, c) {
        if (c) c[0] = check;
        if (mode == CODES) {
            codes.free(z);
        }
        mode = TYPE;
        that.bitk = 0;
        that.bitb = 0;
        that.read = that.write = 0;
    };
    that.reset(z, null);
    that.inflate_flush = function(z, r) {
        let n;
        let p;
        let q;
        p = z.next_out_index;
        q = that.read;
        n = (q <= that.write ? that.write : that.end) - q;
        if (n > z.avail_out) n = z.avail_out;
        if (n !== 0 && r == Z_BUF_ERROR1) r = Z_OK1;
        z.avail_out -= n;
        z.total_out += n;
        z.next_out.set(that.win.subarray(q, q + n), p);
        p += n;
        q += n;
        if (q == that.end) {
            q = 0;
            if (that.write == that.end) that.write = 0;
            n = that.write - q;
            if (n > z.avail_out) n = z.avail_out;
            if (n !== 0 && r == Z_BUF_ERROR1) r = Z_OK1;
            z.avail_out -= n;
            z.total_out += n;
            z.next_out.set(that.win.subarray(q, q + n), p);
            p += n;
            q += n;
        }
        z.next_out_index = p;
        that.read = q;
        return r;
    };
    that.proc = function(z, r) {
        let t;
        let b;
        let k;
        let p;
        let n;
        let q;
        let m;
        let i;
        p = z.next_in_index;
        n = z.avail_in;
        b = that.bitb;
        k = that.bitk;
        q = that.write;
        m = q < that.read ? that.read - q - 1 : that.end - q;
        while(true){
            let bl, bd, tl, td, bl_, bd_, tl_, td_;
            switch(mode){
                case TYPE:
                    while(k < 3){
                        if (n !== 0) {
                            r = Z_OK1;
                        } else {
                            that.bitb = b;
                            that.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            that.write = q;
                            return that.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    t = b & 7;
                    last = t & 1;
                    switch(t >>> 1){
                        case 0:
                            b >>>= 3;
                            k -= 3;
                            t = k & 7;
                            b >>>= t;
                            k -= t;
                            mode = LENS;
                            break;
                        case 1:
                            bl = [];
                            bd = [];
                            tl = [
                                []
                            ];
                            td = [
                                []
                            ];
                            InfTree.inflate_trees_fixed(bl, bd, tl, td);
                            codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);
                            b >>>= 3;
                            k -= 3;
                            mode = CODES;
                            break;
                        case 2:
                            b >>>= 3;
                            k -= 3;
                            mode = TABLE;
                            break;
                        case 3:
                            b >>>= 3;
                            k -= 3;
                            mode = BADBLOCKS;
                            z.msg = "invalid block type";
                            r = Z_DATA_ERROR1;
                            that.bitb = b;
                            that.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            that.write = q;
                            return that.inflate_flush(z, r);
                    }
                    break;
                case LENS:
                    while(k < 32){
                        if (n !== 0) {
                            r = Z_OK1;
                        } else {
                            that.bitb = b;
                            that.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            that.write = q;
                            return that.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    if ((~b >>> 16 & 0xffff) != (b & 0xffff)) {
                        mode = BADBLOCKS;
                        z.msg = "invalid stored block lengths";
                        r = Z_DATA_ERROR1;
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    left = b & 0xffff;
                    b = k = 0;
                    mode = left !== 0 ? STORED1 : last !== 0 ? DRY : TYPE;
                    break;
                case STORED1:
                    if (n === 0) {
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    if (m === 0) {
                        if (q == that.end && that.read !== 0) {
                            q = 0;
                            m = q < that.read ? that.read - q - 1 : that.end - q;
                        }
                        if (m === 0) {
                            that.write = q;
                            r = that.inflate_flush(z, r);
                            q = that.write;
                            m = q < that.read ? that.read - q - 1 : that.end - q;
                            if (q == that.end && that.read !== 0) {
                                q = 0;
                                m = q < that.read ? that.read - q - 1 : that.end - q;
                            }
                            if (m === 0) {
                                that.bitb = b;
                                that.bitk = k;
                                z.avail_in = n;
                                z.total_in += p - z.next_in_index;
                                z.next_in_index = p;
                                that.write = q;
                                return that.inflate_flush(z, r);
                            }
                        }
                    }
                    r = Z_OK1;
                    t = left;
                    if (t > n) t = n;
                    if (t > m) t = m;
                    that.win.set(z.read_buf(p, t), q);
                    p += t;
                    n -= t;
                    q += t;
                    m -= t;
                    if ((left -= t) !== 0) break;
                    mode = last !== 0 ? DRY : TYPE;
                    break;
                case TABLE:
                    while(k < 14){
                        if (n !== 0) {
                            r = Z_OK1;
                        } else {
                            that.bitb = b;
                            that.bitk = k;
                            z.avail_in = n;
                            z.total_in += p - z.next_in_index;
                            z.next_in_index = p;
                            that.write = q;
                            return that.inflate_flush(z, r);
                        }
                        n--;
                        b |= (z.read_byte(p++) & 0xff) << k;
                        k += 8;
                    }
                    table = t = b & 0x3fff;
                    if ((t & 0x1f) > 29 || (t >> 5 & 0x1f) > 29) {
                        mode = BADBLOCKS;
                        z.msg = "too many length or distance symbols";
                        r = Z_DATA_ERROR1;
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    t = 258 + (t & 0x1f) + (t >> 5 & 0x1f);
                    if (!blens || blens.length < t) {
                        blens = [];
                    } else {
                        for(i = 0; i < t; i++){
                            blens[i] = 0;
                        }
                    }
                    b >>>= 14;
                    k -= 14;
                    index = 0;
                    mode = BTREE;
                case BTREE:
                    while(index < 4 + (table >>> 10)){
                        while(k < 3){
                            if (n !== 0) {
                                r = Z_OK1;
                            } else {
                                that.bitb = b;
                                that.bitk = k;
                                z.avail_in = n;
                                z.total_in += p - z.next_in_index;
                                z.next_in_index = p;
                                that.write = q;
                                return that.inflate_flush(z, r);
                            }
                            n--;
                            b |= (z.read_byte(p++) & 0xff) << k;
                            k += 8;
                        }
                        blens[border[index++]] = b & 7;
                        b >>>= 3;
                        k -= 3;
                    }
                    while(index < 19){
                        blens[border[index++]] = 0;
                    }
                    bb[0] = 7;
                    t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);
                    if (t != Z_OK1) {
                        r = t;
                        if (r == Z_DATA_ERROR1) {
                            blens = null;
                            mode = BADBLOCKS;
                        }
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    index = 0;
                    mode = DTREE;
                case DTREE:
                    while(true){
                        t = table;
                        if (index >= 258 + (t & 0x1f) + (t >> 5 & 0x1f)) {
                            break;
                        }
                        let j, c;
                        t = bb[0];
                        while(k < t){
                            if (n !== 0) {
                                r = Z_OK1;
                            } else {
                                that.bitb = b;
                                that.bitk = k;
                                z.avail_in = n;
                                z.total_in += p - z.next_in_index;
                                z.next_in_index = p;
                                that.write = q;
                                return that.inflate_flush(z, r);
                            }
                            n--;
                            b |= (z.read_byte(p++) & 0xff) << k;
                            k += 8;
                        }
                        t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];
                        c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];
                        if (c < 16) {
                            b >>>= t;
                            k -= t;
                            blens[index++] = c;
                        } else {
                            i = c == 18 ? 7 : c - 14;
                            j = c == 18 ? 11 : 3;
                            while(k < t + i){
                                if (n !== 0) {
                                    r = Z_OK1;
                                } else {
                                    that.bitb = b;
                                    that.bitk = k;
                                    z.avail_in = n;
                                    z.total_in += p - z.next_in_index;
                                    z.next_in_index = p;
                                    that.write = q;
                                    return that.inflate_flush(z, r);
                                }
                                n--;
                                b |= (z.read_byte(p++) & 0xff) << k;
                                k += 8;
                            }
                            b >>>= t;
                            k -= t;
                            j += b & inflate_mask[i];
                            b >>>= i;
                            k -= i;
                            i = index;
                            t = table;
                            if (i + j > 258 + (t & 0x1f) + (t >> 5 & 0x1f) || c == 16 && i < 1) {
                                blens = null;
                                mode = BADBLOCKS;
                                z.msg = "invalid bit length repeat";
                                r = Z_DATA_ERROR1;
                                that.bitb = b;
                                that.bitk = k;
                                z.avail_in = n;
                                z.total_in += p - z.next_in_index;
                                z.next_in_index = p;
                                that.write = q;
                                return that.inflate_flush(z, r);
                            }
                            c = c == 16 ? blens[i - 1] : 0;
                            do {
                                blens[i++] = c;
                            }while (--j !== 0)
                            index = i;
                        }
                    }
                    tb[0] = -1;
                    bl_ = [];
                    bd_ = [];
                    tl_ = [];
                    td_ = [];
                    bl_[0] = 9;
                    bd_[0] = 6;
                    t = table;
                    t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + (t >> 5 & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);
                    if (t != Z_OK1) {
                        if (t == Z_DATA_ERROR1) {
                            blens = null;
                            mode = BADBLOCKS;
                        }
                        r = t;
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);
                    mode = CODES;
                case CODES:
                    that.bitb = b;
                    that.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    that.write = q;
                    if ((r = codes.proc(that, z, r)) != Z_STREAM_END1) {
                        return that.inflate_flush(z, r);
                    }
                    r = Z_OK1;
                    codes.free(z);
                    p = z.next_in_index;
                    n = z.avail_in;
                    b = that.bitb;
                    k = that.bitk;
                    q = that.write;
                    m = q < that.read ? that.read - q - 1 : that.end - q;
                    if (last === 0) {
                        mode = TYPE;
                        break;
                    }
                    mode = DRY;
                case DRY:
                    that.write = q;
                    r = that.inflate_flush(z, r);
                    q = that.write;
                    m = q < that.read ? that.read - q - 1 : that.end - q;
                    if (that.read != that.write) {
                        that.bitb = b;
                        that.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        that.write = q;
                        return that.inflate_flush(z, r);
                    }
                    mode = DONELOCKS;
                case DONELOCKS:
                    r = Z_STREAM_END1;
                    that.bitb = b;
                    that.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    that.write = q;
                    return that.inflate_flush(z, r);
                case BADBLOCKS:
                    r = Z_DATA_ERROR1;
                    that.bitb = b;
                    that.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    that.write = q;
                    return that.inflate_flush(z, r);
                default:
                    r = Z_STREAM_ERROR1;
                    that.bitb = b;
                    that.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    that.write = q;
                    return that.inflate_flush(z, r);
            }
        }
    };
    that.free = function(z) {
        that.reset(z, null);
        that.win = null;
        hufts = null;
    };
    that.set_dictionary = function(d, start, n) {
        that.win.set(d.subarray(start, start + n), 0);
        that.read = that.write = n;
    };
    that.sync_point = function() {
        return mode == LENS ? 1 : 0;
    };
}
const PRESET_DICT1 = 0x20;
const Z_DEFLATED1 = 8;
const METHOD = 0;
const FLAG = 1;
const DICT4 = 2;
const DICT3 = 3;
const DICT2 = 4;
const DICT1 = 5;
const DICT0 = 6;
const BLOCKS = 7;
const DONE = 12;
const BAD = 13;
const mark = [
    0,
    0,
    0xff,
    0xff
];
function Inflate() {
    const that = this;
    that.mode = 0;
    that.method = 0;
    that.was = [
        0
    ];
    that.need = 0;
    that.marker = 0;
    that.wbits = 0;
    function inflateReset(z) {
        if (!z || !z.istate) return Z_STREAM_ERROR1;
        z.total_in = z.total_out = 0;
        z.msg = null;
        z.istate.mode = BLOCKS;
        z.istate.blocks.reset(z, null);
        return 0;
    }
    that.inflateEnd = function(z) {
        if (that.blocks) that.blocks.free(z);
        that.blocks = null;
        return Z_OK1;
    };
    that.inflateInit = function(z, w) {
        z.msg = null;
        that.blocks = null;
        if (w < 8 || w > 15) {
            that.inflateEnd(z);
            return Z_STREAM_ERROR1;
        }
        that.wbits = w;
        z.istate.blocks = new InfBlocks(z, 1 << w);
        inflateReset(z);
        return Z_OK1;
    };
    that.inflate = function(z, f) {
        let r;
        let b;
        if (!z || !z.istate || !z.next_in) return Z_STREAM_ERROR1;
        const istate = z.istate;
        f = f == Z_FINISH1 ? Z_BUF_ERROR1 : Z_OK1;
        r = Z_BUF_ERROR1;
        while(true){
            switch(istate.mode){
                case METHOD:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    if (((istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED1) {
                        istate.mode = BAD;
                        z.msg = "unknown compression method";
                        istate.marker = 5;
                        break;
                    }
                    if ((istate.method >> 4) + 8 > istate.wbits) {
                        istate.mode = BAD;
                        z.msg = "invalid win size";
                        istate.marker = 5;
                        break;
                    }
                    istate.mode = FLAG;
                case FLAG:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    b = z.read_byte(z.next_in_index++) & 0xff;
                    if (((istate.method << 8) + b) % 31 !== 0) {
                        istate.mode = BAD;
                        z.msg = "incorrect header check";
                        istate.marker = 5;
                        break;
                    }
                    if ((b & PRESET_DICT1) === 0) {
                        istate.mode = BLOCKS;
                        break;
                    }
                    istate.mode = DICT4;
                case DICT4:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    istate.need = (z.read_byte(z.next_in_index++) & 0xff) << 24 & 0xff000000;
                    istate.mode = DICT3;
                case DICT3:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 16 & 0xff0000;
                    istate.mode = DICT2;
                case DICT2:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    istate.need += (z.read_byte(z.next_in_index++) & 0xff) << 8 & 0xff00;
                    istate.mode = DICT1;
                case DICT1:
                    if (z.avail_in === 0) return r;
                    r = f;
                    z.avail_in--;
                    z.total_in++;
                    istate.need += z.read_byte(z.next_in_index++) & 0xff;
                    istate.mode = DICT0;
                    return Z_NEED_DICT1;
                case DICT0:
                    istate.mode = BAD;
                    z.msg = "need dictionary";
                    istate.marker = 0;
                    return Z_STREAM_ERROR1;
                case BLOCKS:
                    r = istate.blocks.proc(z, r);
                    if (r == Z_DATA_ERROR1) {
                        istate.mode = BAD;
                        istate.marker = 0;
                        break;
                    }
                    if (r == Z_OK1) {
                        r = f;
                    }
                    if (r != Z_STREAM_END1) {
                        return r;
                    }
                    r = f;
                    istate.blocks.reset(z, istate.was);
                    istate.mode = DONE;
                case DONE:
                    z.avail_in = 0;
                    return Z_STREAM_END1;
                case BAD:
                    return Z_DATA_ERROR1;
                default:
                    return Z_STREAM_ERROR1;
            }
        }
    };
    that.inflateSetDictionary = function(z, dictionary, dictLength) {
        let index = 0, length = dictLength;
        if (!z || !z.istate || z.istate.mode != DICT0) return Z_STREAM_ERROR1;
        const istate = z.istate;
        if (length >= 1 << istate.wbits) {
            length = (1 << istate.wbits) - 1;
            index = dictLength - length;
        }
        istate.blocks.set_dictionary(dictionary, index, length);
        istate.mode = BLOCKS;
        return Z_OK1;
    };
    that.inflateSync = function(z) {
        let n;
        let p;
        let m;
        let r, w;
        if (!z || !z.istate) return Z_STREAM_ERROR1;
        const istate = z.istate;
        if (istate.mode != BAD) {
            istate.mode = BAD;
            istate.marker = 0;
        }
        if ((n = z.avail_in) === 0) return Z_BUF_ERROR1;
        p = z.next_in_index;
        m = istate.marker;
        while(n !== 0 && m < 4){
            if (z.read_byte(p) == mark[m]) {
                m++;
            } else if (z.read_byte(p) !== 0) {
                m = 0;
            } else {
                m = 4 - m;
            }
            p++;
            n--;
        }
        z.total_in += p - z.next_in_index;
        z.next_in_index = p;
        z.avail_in = n;
        istate.marker = m;
        if (m != 4) {
            return Z_DATA_ERROR1;
        }
        r = z.total_in;
        w = z.total_out;
        inflateReset(z);
        z.total_in = r;
        z.total_out = w;
        istate.mode = BLOCKS;
        return Z_OK1;
    };
    that.inflateSyncPoint = function(z) {
        if (!z || !z.istate || !z.istate.blocks) return Z_STREAM_ERROR1;
        return z.istate.blocks.sync_point();
    };
}
function ZStream1() {}
ZStream1.prototype = {
    inflateInit (bits) {
        const that = this;
        that.istate = new Inflate();
        if (!bits) bits = MAX_BITS1;
        return that.istate.inflateInit(that, bits);
    },
    inflate (f) {
        const that = this;
        if (!that.istate) return Z_STREAM_ERROR1;
        return that.istate.inflate(that, f);
    },
    inflateEnd () {
        const that = this;
        if (!that.istate) return Z_STREAM_ERROR1;
        const ret = that.istate.inflateEnd(that);
        that.istate = null;
        return ret;
    },
    inflateSync () {
        const that = this;
        if (!that.istate) return Z_STREAM_ERROR1;
        return that.istate.inflateSync(that);
    },
    inflateSetDictionary (dictionary, dictLength) {
        const that = this;
        if (!that.istate) return Z_STREAM_ERROR1;
        return that.istate.inflateSetDictionary(that, dictionary, dictLength);
    },
    read_byte (start) {
        const that = this;
        return that.next_in[start];
    },
    read_buf (start, size) {
        const that = this;
        return that.next_in.subarray(start, start + size);
    }
};
function ZipInflate(options) {
    const that = this;
    const z = new ZStream1();
    const bufsize = options && options.chunkSize ? Math.floor(options.chunkSize * 2) : 128 * 1024;
    const flush = 0;
    const buf = new Uint8Array(bufsize);
    let nomoreinput = false;
    z.inflateInit();
    z.next_out = buf;
    that.append = function(data, onprogress) {
        const buffers = [];
        let err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;
        if (data.length === 0) return;
        z.next_in_index = 0;
        z.next_in = data;
        z.avail_in = data.length;
        do {
            z.next_out_index = 0;
            z.avail_out = bufsize;
            if (z.avail_in === 0 && !nomoreinput) {
                z.next_in_index = 0;
                nomoreinput = true;
            }
            err = z.inflate(flush);
            if (nomoreinput && err === Z_BUF_ERROR1) {
                if (z.avail_in !== 0) throw new Error("inflating: bad input");
            } else if (err !== Z_OK1 && err !== Z_STREAM_END1) throw new Error("inflating: " + z.msg);
            if ((nomoreinput || err === Z_STREAM_END1) && z.avail_in === data.length) throw new Error("inflating: bad input");
            if (z.next_out_index) if (z.next_out_index === bufsize) buffers.push(new Uint8Array(buf));
            else buffers.push(buf.slice(0, z.next_out_index));
            bufferSize += z.next_out_index;
            if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
                onprogress(z.next_in_index);
                lastIndex = z.next_in_index;
            }
        }while (z.avail_in > 0 || z.avail_out === 0)
        if (buffers.length > 1) {
            array = new Uint8Array(bufferSize);
            buffers.forEach(function(chunk) {
                array.set(chunk, bufferIndex);
                bufferIndex += chunk.length;
            });
        } else {
            array = buffers[0] || new Uint8Array();
        }
        return array;
    };
    that.flush = function() {
        z.inflateEnd();
    };
}
const END_OF_CENTRAL_DIR_LENGTH = 22;
const ZIP64_END_OF_CENTRAL_DIR_LENGTH = 56;
const DIRECTORY_SIGNATURE = "/";
new Date(2107, 11, 31);
new Date(1980, 0, 1);
const UNDEFINED_VALUE = undefined;
const UNDEFINED_TYPE = "undefined";
const FUNCTION_TYPE = "function";
class StreamAdapter {
    constructor(Codec){
        return class extends TransformStream {
            constructor(_format, options){
                const codec = new Codec(options);
                super({
                    transform (chunk, controller) {
                        controller.enqueue(codec.append(chunk));
                    },
                    flush (controller) {
                        const chunk = codec.flush();
                        if (chunk) {
                            controller.enqueue(chunk);
                        }
                    }
                });
            }
        };
    }
}
let maxWorkers = 2;
try {
    if (typeof navigator != UNDEFINED_TYPE && navigator.hardwareConcurrency) {
        maxWorkers = navigator.hardwareConcurrency;
    }
} catch (_error) {}
const DEFAULT_CONFIGURATION = {
    chunkSize: 512 * 1024,
    maxWorkers,
    terminateWorkerTimeout: 5000,
    useWebWorkers: true,
    useCompressionStream: true,
    workerScripts: UNDEFINED_VALUE,
    CompressionStreamNative: typeof CompressionStream != UNDEFINED_TYPE && CompressionStream,
    DecompressionStreamNative: typeof DecompressionStream != UNDEFINED_TYPE && DecompressionStream
};
const config = Object.assign({}, DEFAULT_CONFIGURATION);
function getConfiguration() {
    return config;
}
function getChunkSize(config) {
    return Math.max(config.chunkSize, 64);
}
function configure(configuration) {
    const { baseURL , chunkSize , maxWorkers , terminateWorkerTimeout , useCompressionStream , useWebWorkers , Deflate , Inflate , CompressionStream: CompressionStream1 , DecompressionStream: DecompressionStream1 , workerScripts  } = configuration;
    setIfDefined("baseURL", baseURL);
    setIfDefined("chunkSize", chunkSize);
    setIfDefined("maxWorkers", maxWorkers);
    setIfDefined("terminateWorkerTimeout", terminateWorkerTimeout);
    setIfDefined("useCompressionStream", useCompressionStream);
    setIfDefined("useWebWorkers", useWebWorkers);
    if (Deflate) {
        config.CompressionStream = new StreamAdapter(Deflate);
    }
    if (Inflate) {
        config.DecompressionStream = new StreamAdapter(Inflate);
    }
    setIfDefined("CompressionStream", CompressionStream1);
    setIfDefined("DecompressionStream", DecompressionStream1);
    if (workerScripts !== UNDEFINED_VALUE) {
        const { deflate , inflate  } = workerScripts;
        if (deflate || inflate) {
            if (!config.workerScripts) {
                config.workerScripts = {};
            }
        }
        if (deflate) {
            if (!Array.isArray(deflate)) {
                throw new Error("workerScripts.deflate must be an array");
            }
            config.workerScripts.deflate = deflate;
        }
        if (inflate) {
            if (!Array.isArray(inflate)) {
                throw new Error("workerScripts.inflate must be an array");
            }
            config.workerScripts.inflate = inflate;
        }
    }
}
function setIfDefined(propertyName, propertyValue) {
    if (propertyValue !== UNDEFINED_VALUE) {
        config[propertyName] = propertyValue;
    }
}
const table = {
    "application": {
        "andrew-inset": "ez",
        "annodex": "anx",
        "atom+xml": "atom",
        "atomcat+xml": "atomcat",
        "atomserv+xml": "atomsrv",
        "bbolin": "lin",
        "cap": [
            "cap",
            "pcap"
        ],
        "cu-seeme": "cu",
        "davmount+xml": "davmount",
        "dsptype": "tsp",
        "ecmascript": [
            "es",
            "ecma"
        ],
        "futuresplash": "spl",
        "hta": "hta",
        "java-archive": "jar",
        "java-serialized-object": "ser",
        "java-vm": "class",
        "javascript": "js",
        "m3g": "m3g",
        "mac-binhex40": "hqx",
        "mathematica": [
            "nb",
            "ma",
            "mb"
        ],
        "msaccess": "mdb",
        "msword": [
            "doc",
            "dot"
        ],
        "mxf": "mxf",
        "oda": "oda",
        "ogg": "ogx",
        "pdf": "pdf",
        "pgp-keys": "key",
        "pgp-signature": [
            "asc",
            "sig"
        ],
        "pics-rules": "prf",
        "postscript": [
            "ps",
            "ai",
            "eps",
            "epsi",
            "epsf",
            "eps2",
            "eps3"
        ],
        "rar": "rar",
        "rdf+xml": "rdf",
        "rss+xml": "rss",
        "rtf": "rtf",
        "smil": [
            "smi",
            "smil"
        ],
        "xhtml+xml": [
            "xhtml",
            "xht"
        ],
        "xml": [
            "xml",
            "xsl",
            "xsd"
        ],
        "xspf+xml": "xspf",
        "zip": "zip",
        "vnd.android.package-archive": "apk",
        "vnd.cinderella": "cdy",
        "vnd.google-earth.kml+xml": "kml",
        "vnd.google-earth.kmz": "kmz",
        "vnd.mozilla.xul+xml": "xul",
        "vnd.ms-excel": [
            "xls",
            "xlb",
            "xlt",
            "xlm",
            "xla",
            "xlc",
            "xlw"
        ],
        "vnd.ms-pki.seccat": "cat",
        "vnd.ms-pki.stl": "stl",
        "vnd.ms-powerpoint": [
            "ppt",
            "pps",
            "pot"
        ],
        "vnd.oasis.opendocument.chart": "odc",
        "vnd.oasis.opendocument.database": "odb",
        "vnd.oasis.opendocument.formula": "odf",
        "vnd.oasis.opendocument.graphics": "odg",
        "vnd.oasis.opendocument.graphics-template": "otg",
        "vnd.oasis.opendocument.image": "odi",
        "vnd.oasis.opendocument.presentation": "odp",
        "vnd.oasis.opendocument.presentation-template": "otp",
        "vnd.oasis.opendocument.spreadsheet": "ods",
        "vnd.oasis.opendocument.spreadsheet-template": "ots",
        "vnd.oasis.opendocument.text": "odt",
        "vnd.oasis.opendocument.text-master": "odm",
        "vnd.oasis.opendocument.text-template": "ott",
        "vnd.oasis.opendocument.text-web": "oth",
        "vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
        "vnd.openxmlformats-officedocument.spreadsheetml.template": "xltx",
        "vnd.openxmlformats-officedocument.presentationml.presentation": "pptx",
        "vnd.openxmlformats-officedocument.presentationml.slideshow": "ppsx",
        "vnd.openxmlformats-officedocument.presentationml.template": "potx",
        "vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
        "vnd.openxmlformats-officedocument.wordprocessingml.template": "dotx",
        "vnd.smaf": "mmf",
        "vnd.stardivision.calc": "sdc",
        "vnd.stardivision.chart": "sds",
        "vnd.stardivision.draw": "sda",
        "vnd.stardivision.impress": "sdd",
        "vnd.stardivision.math": [
            "sdf",
            "smf"
        ],
        "vnd.stardivision.writer": [
            "sdw",
            "vor"
        ],
        "vnd.stardivision.writer-global": "sgl",
        "vnd.sun.xml.calc": "sxc",
        "vnd.sun.xml.calc.template": "stc",
        "vnd.sun.xml.draw": "sxd",
        "vnd.sun.xml.draw.template": "std",
        "vnd.sun.xml.impress": "sxi",
        "vnd.sun.xml.impress.template": "sti",
        "vnd.sun.xml.math": "sxm",
        "vnd.sun.xml.writer": "sxw",
        "vnd.sun.xml.writer.global": "sxg",
        "vnd.sun.xml.writer.template": "stw",
        "vnd.symbian.install": [
            "sis",
            "sisx"
        ],
        "vnd.visio": [
            "vsd",
            "vst",
            "vss",
            "vsw"
        ],
        "vnd.wap.wbxml": "wbxml",
        "vnd.wap.wmlc": "wmlc",
        "vnd.wap.wmlscriptc": "wmlsc",
        "vnd.wordperfect": "wpd",
        "vnd.wordperfect5.1": "wp5",
        "x-123": "wk",
        "x-7z-compressed": "7z",
        "x-abiword": "abw",
        "x-apple-diskimage": "dmg",
        "x-bcpio": "bcpio",
        "x-bittorrent": "torrent",
        "x-cbr": [
            "cbr",
            "cba",
            "cbt",
            "cb7"
        ],
        "x-cbz": "cbz",
        "x-cdf": [
            "cdf",
            "cda"
        ],
        "x-cdlink": "vcd",
        "x-chess-pgn": "pgn",
        "x-cpio": "cpio",
        "x-csh": "csh",
        "x-debian-package": [
            "deb",
            "udeb"
        ],
        "x-director": [
            "dcr",
            "dir",
            "dxr",
            "cst",
            "cct",
            "cxt",
            "w3d",
            "fgd",
            "swa"
        ],
        "x-dms": "dms",
        "x-doom": "wad",
        "x-dvi": "dvi",
        "x-httpd-eruby": "rhtml",
        "x-font": "pcf.Z",
        "x-freemind": "mm",
        "x-gnumeric": "gnumeric",
        "x-go-sgf": "sgf",
        "x-graphing-calculator": "gcf",
        "x-gtar": [
            "gtar",
            "taz"
        ],
        "x-hdf": "hdf",
        "x-httpd-php": [
            "phtml",
            "pht",
            "php"
        ],
        "x-httpd-php-source": "phps",
        "x-httpd-php3": "php3",
        "x-httpd-php3-preprocessed": "php3p",
        "x-httpd-php4": "php4",
        "x-httpd-php5": "php5",
        "x-ica": "ica",
        "x-info": "info",
        "x-internet-signup": [
            "ins",
            "isp"
        ],
        "x-iphone": "iii",
        "x-iso9660-image": "iso",
        "x-java-jnlp-file": "jnlp",
        "x-jmol": "jmz",
        "x-killustrator": "kil",
        "x-koan": [
            "skp",
            "skd",
            "skt",
            "skm"
        ],
        "x-kpresenter": [
            "kpr",
            "kpt"
        ],
        "x-kword": [
            "kwd",
            "kwt"
        ],
        "x-latex": "latex",
        "x-lha": "lha",
        "x-lyx": "lyx",
        "x-lzh": "lzh",
        "x-lzx": "lzx",
        "x-maker": [
            "frm",
            "maker",
            "frame",
            "fm",
            "fb",
            "book",
            "fbdoc"
        ],
        "x-ms-wmd": "wmd",
        "x-ms-wmz": "wmz",
        "x-msdos-program": [
            "com",
            "exe",
            "bat",
            "dll"
        ],
        "x-msi": "msi",
        "x-netcdf": [
            "nc",
            "cdf"
        ],
        "x-ns-proxy-autoconfig": [
            "pac",
            "dat"
        ],
        "x-nwc": "nwc",
        "x-object": "o",
        "x-oz-application": "oza",
        "x-pkcs7-certreqresp": "p7r",
        "x-python-code": [
            "pyc",
            "pyo"
        ],
        "x-qgis": [
            "qgs",
            "shp",
            "shx"
        ],
        "x-quicktimeplayer": "qtl",
        "x-redhat-package-manager": "rpm",
        "x-ruby": "rb",
        "x-sh": "sh",
        "x-shar": "shar",
        "x-shockwave-flash": [
            "swf",
            "swfl"
        ],
        "x-silverlight": "scr",
        "x-stuffit": "sit",
        "x-sv4cpio": "sv4cpio",
        "x-sv4crc": "sv4crc",
        "x-tar": "tar",
        "x-tcl": "tcl",
        "x-tex-gf": "gf",
        "x-tex-pk": "pk",
        "x-texinfo": [
            "texinfo",
            "texi"
        ],
        "x-trash": [
            "~",
            "%",
            "bak",
            "old",
            "sik"
        ],
        "x-troff": [
            "t",
            "tr",
            "roff"
        ],
        "x-troff-man": "man",
        "x-troff-me": "me",
        "x-troff-ms": "ms",
        "x-ustar": "ustar",
        "x-wais-source": "src",
        "x-wingz": "wz",
        "x-x509-ca-cert": [
            "crt",
            "der",
            "cer"
        ],
        "x-xcf": "xcf",
        "x-xfig": "fig",
        "x-xpinstall": "xpi",
        "applixware": "aw",
        "atomsvc+xml": "atomsvc",
        "ccxml+xml": "ccxml",
        "cdmi-capability": "cdmia",
        "cdmi-container": "cdmic",
        "cdmi-domain": "cdmid",
        "cdmi-object": "cdmio",
        "cdmi-queue": "cdmiq",
        "docbook+xml": "dbk",
        "dssc+der": "dssc",
        "dssc+xml": "xdssc",
        "emma+xml": "emma",
        "epub+zip": "epub",
        "exi": "exi",
        "font-tdpfr": "pfr",
        "gml+xml": "gml",
        "gpx+xml": "gpx",
        "gxf": "gxf",
        "hyperstudio": "stk",
        "inkml+xml": [
            "ink",
            "inkml"
        ],
        "ipfix": "ipfix",
        "json": "json",
        "jsonml+json": "jsonml",
        "lost+xml": "lostxml",
        "mads+xml": "mads",
        "marc": "mrc",
        "marcxml+xml": "mrcx",
        "mathml+xml": "mathml",
        "mbox": "mbox",
        "mediaservercontrol+xml": "mscml",
        "metalink+xml": "metalink",
        "metalink4+xml": "meta4",
        "mets+xml": "mets",
        "mods+xml": "mods",
        "mp21": [
            "m21",
            "mp21"
        ],
        "mp4": "mp4s",
        "oebps-package+xml": "opf",
        "omdoc+xml": "omdoc",
        "onenote": [
            "onetoc",
            "onetoc2",
            "onetmp",
            "onepkg"
        ],
        "oxps": "oxps",
        "patch-ops-error+xml": "xer",
        "pgp-encrypted": "pgp",
        "pkcs10": "p10",
        "pkcs7-mime": [
            "p7m",
            "p7c"
        ],
        "pkcs7-signature": "p7s",
        "pkcs8": "p8",
        "pkix-attr-cert": "ac",
        "pkix-crl": "crl",
        "pkix-pkipath": "pkipath",
        "pkixcmp": "pki",
        "pls+xml": "pls",
        "prs.cww": "cww",
        "pskc+xml": "pskcxml",
        "reginfo+xml": "rif",
        "relax-ng-compact-syntax": "rnc",
        "resource-lists+xml": "rl",
        "resource-lists-diff+xml": "rld",
        "rls-services+xml": "rs",
        "rpki-ghostbusters": "gbr",
        "rpki-manifest": "mft",
        "rpki-roa": "roa",
        "rsd+xml": "rsd",
        "sbml+xml": "sbml",
        "scvp-cv-request": "scq",
        "scvp-cv-response": "scs",
        "scvp-vp-request": "spq",
        "scvp-vp-response": "spp",
        "sdp": "sdp",
        "set-payment-initiation": "setpay",
        "set-registration-initiation": "setreg",
        "shf+xml": "shf",
        "sparql-query": "rq",
        "sparql-results+xml": "srx",
        "srgs": "gram",
        "srgs+xml": "grxml",
        "sru+xml": "sru",
        "ssdl+xml": "ssdl",
        "ssml+xml": "ssml",
        "tei+xml": [
            "tei",
            "teicorpus"
        ],
        "thraud+xml": "tfi",
        "timestamped-data": "tsd",
        "vnd.3gpp.pic-bw-large": "plb",
        "vnd.3gpp.pic-bw-small": "psb",
        "vnd.3gpp.pic-bw-var": "pvb",
        "vnd.3gpp2.tcap": "tcap",
        "vnd.3m.post-it-notes": "pwn",
        "vnd.accpac.simply.aso": "aso",
        "vnd.accpac.simply.imp": "imp",
        "vnd.acucobol": "acu",
        "vnd.acucorp": [
            "atc",
            "acutc"
        ],
        "vnd.adobe.air-application-installer-package+zip": "air",
        "vnd.adobe.formscentral.fcdt": "fcdt",
        "vnd.adobe.fxp": [
            "fxp",
            "fxpl"
        ],
        "vnd.adobe.xdp+xml": "xdp",
        "vnd.adobe.xfdf": "xfdf",
        "vnd.ahead.space": "ahead",
        "vnd.airzip.filesecure.azf": "azf",
        "vnd.airzip.filesecure.azs": "azs",
        "vnd.amazon.ebook": "azw",
        "vnd.americandynamics.acc": "acc",
        "vnd.amiga.ami": "ami",
        "vnd.anser-web-certificate-issue-initiation": "cii",
        "vnd.anser-web-funds-transfer-initiation": "fti",
        "vnd.antix.game-component": "atx",
        "vnd.apple.installer+xml": "mpkg",
        "vnd.apple.mpegurl": "m3u8",
        "vnd.aristanetworks.swi": "swi",
        "vnd.astraea-software.iota": "iota",
        "vnd.audiograph": "aep",
        "vnd.blueice.multipass": "mpm",
        "vnd.bmi": "bmi",
        "vnd.businessobjects": "rep",
        "vnd.chemdraw+xml": "cdxml",
        "vnd.chipnuts.karaoke-mmd": "mmd",
        "vnd.claymore": "cla",
        "vnd.cloanto.rp9": "rp9",
        "vnd.clonk.c4group": [
            "c4g",
            "c4d",
            "c4f",
            "c4p",
            "c4u"
        ],
        "vnd.cluetrust.cartomobile-config": "c11amc",
        "vnd.cluetrust.cartomobile-config-pkg": "c11amz",
        "vnd.commonspace": "csp",
        "vnd.contact.cmsg": "cdbcmsg",
        "vnd.cosmocaller": "cmc",
        "vnd.crick.clicker": "clkx",
        "vnd.crick.clicker.keyboard": "clkk",
        "vnd.crick.clicker.palette": "clkp",
        "vnd.crick.clicker.template": "clkt",
        "vnd.crick.clicker.wordbank": "clkw",
        "vnd.criticaltools.wbs+xml": "wbs",
        "vnd.ctc-posml": "pml",
        "vnd.cups-ppd": "ppd",
        "vnd.curl.car": "car",
        "vnd.curl.pcurl": "pcurl",
        "vnd.dart": "dart",
        "vnd.data-vision.rdz": "rdz",
        "vnd.dece.data": [
            "uvf",
            "uvvf",
            "uvd",
            "uvvd"
        ],
        "vnd.dece.ttml+xml": [
            "uvt",
            "uvvt"
        ],
        "vnd.dece.unspecified": [
            "uvx",
            "uvvx"
        ],
        "vnd.dece.zip": [
            "uvz",
            "uvvz"
        ],
        "vnd.denovo.fcselayout-link": "fe_launch",
        "vnd.dna": "dna",
        "vnd.dolby.mlp": "mlp",
        "vnd.dpgraph": "dpg",
        "vnd.dreamfactory": "dfac",
        "vnd.ds-keypoint": "kpxx",
        "vnd.dvb.ait": "ait",
        "vnd.dvb.service": "svc",
        "vnd.dynageo": "geo",
        "vnd.ecowin.chart": "mag",
        "vnd.enliven": "nml",
        "vnd.epson.esf": "esf",
        "vnd.epson.msf": "msf",
        "vnd.epson.quickanime": "qam",
        "vnd.epson.salt": "slt",
        "vnd.epson.ssf": "ssf",
        "vnd.eszigno3+xml": [
            "es3",
            "et3"
        ],
        "vnd.ezpix-album": "ez2",
        "vnd.ezpix-package": "ez3",
        "vnd.fdf": "fdf",
        "vnd.fdsn.mseed": "mseed",
        "vnd.fdsn.seed": [
            "seed",
            "dataless"
        ],
        "vnd.flographit": "gph",
        "vnd.fluxtime.clip": "ftc",
        "vnd.framemaker": [
            "fm",
            "frame",
            "maker",
            "book"
        ],
        "vnd.frogans.fnc": "fnc",
        "vnd.frogans.ltf": "ltf",
        "vnd.fsc.weblaunch": "fsc",
        "vnd.fujitsu.oasys": "oas",
        "vnd.fujitsu.oasys2": "oa2",
        "vnd.fujitsu.oasys3": "oa3",
        "vnd.fujitsu.oasysgp": "fg5",
        "vnd.fujitsu.oasysprs": "bh2",
        "vnd.fujixerox.ddd": "ddd",
        "vnd.fujixerox.docuworks": "xdw",
        "vnd.fujixerox.docuworks.binder": "xbd",
        "vnd.fuzzysheet": "fzs",
        "vnd.genomatix.tuxedo": "txd",
        "vnd.geogebra.file": "ggb",
        "vnd.geogebra.tool": "ggt",
        "vnd.geometry-explorer": [
            "gex",
            "gre"
        ],
        "vnd.geonext": "gxt",
        "vnd.geoplan": "g2w",
        "vnd.geospace": "g3w",
        "vnd.gmx": "gmx",
        "vnd.grafeq": [
            "gqf",
            "gqs"
        ],
        "vnd.groove-account": "gac",
        "vnd.groove-help": "ghf",
        "vnd.groove-identity-message": "gim",
        "vnd.groove-injector": "grv",
        "vnd.groove-tool-message": "gtm",
        "vnd.groove-tool-template": "tpl",
        "vnd.groove-vcard": "vcg",
        "vnd.hal+xml": "hal",
        "vnd.handheld-entertainment+xml": "zmm",
        "vnd.hbci": "hbci",
        "vnd.hhe.lesson-player": "les",
        "vnd.hp-hpgl": "hpgl",
        "vnd.hp-hpid": "hpid",
        "vnd.hp-hps": "hps",
        "vnd.hp-jlyt": "jlt",
        "vnd.hp-pcl": "pcl",
        "vnd.hp-pclxl": "pclxl",
        "vnd.hydrostatix.sof-data": "sfd-hdstx",
        "vnd.ibm.minipay": "mpy",
        "vnd.ibm.modcap": [
            "afp",
            "listafp",
            "list3820"
        ],
        "vnd.ibm.rights-management": "irm",
        "vnd.ibm.secure-container": "sc",
        "vnd.iccprofile": [
            "icc",
            "icm"
        ],
        "vnd.igloader": "igl",
        "vnd.immervision-ivp": "ivp",
        "vnd.immervision-ivu": "ivu",
        "vnd.insors.igm": "igm",
        "vnd.intercon.formnet": [
            "xpw",
            "xpx"
        ],
        "vnd.intergeo": "i2g",
        "vnd.intu.qbo": "qbo",
        "vnd.intu.qfx": "qfx",
        "vnd.ipunplugged.rcprofile": "rcprofile",
        "vnd.irepository.package+xml": "irp",
        "vnd.is-xpr": "xpr",
        "vnd.isac.fcs": "fcs",
        "vnd.jam": "jam",
        "vnd.jcp.javame.midlet-rms": "rms",
        "vnd.jisp": "jisp",
        "vnd.joost.joda-archive": "joda",
        "vnd.kahootz": [
            "ktz",
            "ktr"
        ],
        "vnd.kde.karbon": "karbon",
        "vnd.kde.kchart": "chrt",
        "vnd.kde.kformula": "kfo",
        "vnd.kde.kivio": "flw",
        "vnd.kde.kontour": "kon",
        "vnd.kde.kpresenter": [
            "kpr",
            "kpt"
        ],
        "vnd.kde.kspread": "ksp",
        "vnd.kde.kword": [
            "kwd",
            "kwt"
        ],
        "vnd.kenameaapp": "htke",
        "vnd.kidspiration": "kia",
        "vnd.kinar": [
            "kne",
            "knp"
        ],
        "vnd.koan": [
            "skp",
            "skd",
            "skt",
            "skm"
        ],
        "vnd.kodak-descriptor": "sse",
        "vnd.las.las+xml": "lasxml",
        "vnd.llamagraphics.life-balance.desktop": "lbd",
        "vnd.llamagraphics.life-balance.exchange+xml": "lbe",
        "vnd.lotus-1-2-3": "123",
        "vnd.lotus-approach": "apr",
        "vnd.lotus-freelance": "pre",
        "vnd.lotus-notes": "nsf",
        "vnd.lotus-organizer": "org",
        "vnd.lotus-screencam": "scm",
        "vnd.lotus-wordpro": "lwp",
        "vnd.macports.portpkg": "portpkg",
        "vnd.mcd": "mcd",
        "vnd.medcalcdata": "mc1",
        "vnd.mediastation.cdkey": "cdkey",
        "vnd.mfer": "mwf",
        "vnd.mfmp": "mfm",
        "vnd.micrografx.flo": "flo",
        "vnd.micrografx.igx": "igx",
        "vnd.mif": "mif",
        "vnd.mobius.daf": "daf",
        "vnd.mobius.dis": "dis",
        "vnd.mobius.mbk": "mbk",
        "vnd.mobius.mqy": "mqy",
        "vnd.mobius.msl": "msl",
        "vnd.mobius.plc": "plc",
        "vnd.mobius.txf": "txf",
        "vnd.mophun.application": "mpn",
        "vnd.mophun.certificate": "mpc",
        "vnd.ms-artgalry": "cil",
        "vnd.ms-cab-compressed": "cab",
        "vnd.ms-excel.addin.macroenabled.12": "xlam",
        "vnd.ms-excel.sheet.binary.macroenabled.12": "xlsb",
        "vnd.ms-excel.sheet.macroenabled.12": "xlsm",
        "vnd.ms-excel.template.macroenabled.12": "xltm",
        "vnd.ms-fontobject": "eot",
        "vnd.ms-htmlhelp": "chm",
        "vnd.ms-ims": "ims",
        "vnd.ms-lrm": "lrm",
        "vnd.ms-officetheme": "thmx",
        "vnd.ms-powerpoint.addin.macroenabled.12": "ppam",
        "vnd.ms-powerpoint.presentation.macroenabled.12": "pptm",
        "vnd.ms-powerpoint.slide.macroenabled.12": "sldm",
        "vnd.ms-powerpoint.slideshow.macroenabled.12": "ppsm",
        "vnd.ms-powerpoint.template.macroenabled.12": "potm",
        "vnd.ms-project": [
            "mpp",
            "mpt"
        ],
        "vnd.ms-word.document.macroenabled.12": "docm",
        "vnd.ms-word.template.macroenabled.12": "dotm",
        "vnd.ms-works": [
            "wps",
            "wks",
            "wcm",
            "wdb"
        ],
        "vnd.ms-wpl": "wpl",
        "vnd.ms-xpsdocument": "xps",
        "vnd.mseq": "mseq",
        "vnd.musician": "mus",
        "vnd.muvee.style": "msty",
        "vnd.mynfc": "taglet",
        "vnd.neurolanguage.nlu": "nlu",
        "vnd.nitf": [
            "ntf",
            "nitf"
        ],
        "vnd.noblenet-directory": "nnd",
        "vnd.noblenet-sealer": "nns",
        "vnd.noblenet-web": "nnw",
        "vnd.nokia.n-gage.data": "ngdat",
        "vnd.nokia.n-gage.symbian.install": "n-gage",
        "vnd.nokia.radio-preset": "rpst",
        "vnd.nokia.radio-presets": "rpss",
        "vnd.novadigm.edm": "edm",
        "vnd.novadigm.edx": "edx",
        "vnd.novadigm.ext": "ext",
        "vnd.oasis.opendocument.chart-template": "otc",
        "vnd.oasis.opendocument.formula-template": "odft",
        "vnd.oasis.opendocument.image-template": "oti",
        "vnd.olpc-sugar": "xo",
        "vnd.oma.dd2+xml": "dd2",
        "vnd.openofficeorg.extension": "oxt",
        "vnd.openxmlformats-officedocument.presentationml.slide": "sldx",
        "vnd.osgeo.mapguide.package": "mgp",
        "vnd.osgi.dp": "dp",
        "vnd.osgi.subsystem": "esa",
        "vnd.palm": [
            "pdb",
            "pqa",
            "oprc"
        ],
        "vnd.pawaafile": "paw",
        "vnd.pg.format": "str",
        "vnd.pg.osasli": "ei6",
        "vnd.picsel": "efif",
        "vnd.pmi.widget": "wg",
        "vnd.pocketlearn": "plf",
        "vnd.powerbuilder6": "pbd",
        "vnd.previewsystems.box": "box",
        "vnd.proteus.magazine": "mgz",
        "vnd.publishare-delta-tree": "qps",
        "vnd.pvi.ptid1": "ptid",
        "vnd.quark.quarkxpress": [
            "qxd",
            "qxt",
            "qwd",
            "qwt",
            "qxl",
            "qxb"
        ],
        "vnd.realvnc.bed": "bed",
        "vnd.recordare.musicxml": "mxl",
        "vnd.recordare.musicxml+xml": "musicxml",
        "vnd.rig.cryptonote": "cryptonote",
        "vnd.rn-realmedia": "rm",
        "vnd.rn-realmedia-vbr": "rmvb",
        "vnd.route66.link66+xml": "link66",
        "vnd.sailingtracker.track": "st",
        "vnd.seemail": "see",
        "vnd.sema": "sema",
        "vnd.semd": "semd",
        "vnd.semf": "semf",
        "vnd.shana.informed.formdata": "ifm",
        "vnd.shana.informed.formtemplate": "itp",
        "vnd.shana.informed.interchange": "iif",
        "vnd.shana.informed.package": "ipk",
        "vnd.simtech-mindmapper": [
            "twd",
            "twds"
        ],
        "vnd.smart.teacher": "teacher",
        "vnd.solent.sdkm+xml": [
            "sdkm",
            "sdkd"
        ],
        "vnd.spotfire.dxp": "dxp",
        "vnd.spotfire.sfs": "sfs",
        "vnd.stepmania.package": "smzip",
        "vnd.stepmania.stepchart": "sm",
        "vnd.sus-calendar": [
            "sus",
            "susp"
        ],
        "vnd.svd": "svd",
        "vnd.syncml+xml": "xsm",
        "vnd.syncml.dm+wbxml": "bdm",
        "vnd.syncml.dm+xml": "xdm",
        "vnd.tao.intent-module-archive": "tao",
        "vnd.tcpdump.pcap": [
            "pcap",
            "cap",
            "dmp"
        ],
        "vnd.tmobile-livetv": "tmo",
        "vnd.trid.tpt": "tpt",
        "vnd.triscape.mxs": "mxs",
        "vnd.trueapp": "tra",
        "vnd.ufdl": [
            "ufd",
            "ufdl"
        ],
        "vnd.uiq.theme": "utz",
        "vnd.umajin": "umj",
        "vnd.unity": "unityweb",
        "vnd.uoml+xml": "uoml",
        "vnd.vcx": "vcx",
        "vnd.visionary": "vis",
        "vnd.vsf": "vsf",
        "vnd.webturbo": "wtb",
        "vnd.wolfram.player": "nbp",
        "vnd.wqd": "wqd",
        "vnd.wt.stf": "stf",
        "vnd.xara": "xar",
        "vnd.xfdl": "xfdl",
        "vnd.yamaha.hv-dic": "hvd",
        "vnd.yamaha.hv-script": "hvs",
        "vnd.yamaha.hv-voice": "hvp",
        "vnd.yamaha.openscoreformat": "osf",
        "vnd.yamaha.openscoreformat.osfpvg+xml": "osfpvg",
        "vnd.yamaha.smaf-audio": "saf",
        "vnd.yamaha.smaf-phrase": "spf",
        "vnd.yellowriver-custom-menu": "cmp",
        "vnd.zul": [
            "zir",
            "zirz"
        ],
        "vnd.zzazz.deck+xml": "zaz",
        "voicexml+xml": "vxml",
        "widget": "wgt",
        "winhlp": "hlp",
        "wsdl+xml": "wsdl",
        "wspolicy+xml": "wspolicy",
        "x-ace-compressed": "ace",
        "x-authorware-bin": [
            "aab",
            "x32",
            "u32",
            "vox"
        ],
        "x-authorware-map": "aam",
        "x-authorware-seg": "aas",
        "x-blorb": [
            "blb",
            "blorb"
        ],
        "x-bzip": "bz",
        "x-bzip2": [
            "bz2",
            "boz"
        ],
        "x-cfs-compressed": "cfs",
        "x-chat": "chat",
        "x-conference": "nsc",
        "x-dgc-compressed": "dgc",
        "x-dtbncx+xml": "ncx",
        "x-dtbook+xml": "dtb",
        "x-dtbresource+xml": "res",
        "x-eva": "eva",
        "x-font-bdf": "bdf",
        "x-font-ghostscript": "gsf",
        "x-font-linux-psf": "psf",
        "x-font-otf": "otf",
        "x-font-pcf": "pcf",
        "x-font-snf": "snf",
        "x-font-ttf": [
            "ttf",
            "ttc"
        ],
        "x-font-type1": [
            "pfa",
            "pfb",
            "pfm",
            "afm"
        ],
        "x-font-woff": "woff",
        "x-freearc": "arc",
        "x-gca-compressed": "gca",
        "x-glulx": "ulx",
        "x-gramps-xml": "gramps",
        "x-install-instructions": "install",
        "x-lzh-compressed": [
            "lzh",
            "lha"
        ],
        "x-mie": "mie",
        "x-mobipocket-ebook": [
            "prc",
            "mobi"
        ],
        "x-ms-application": "application",
        "x-ms-shortcut": "lnk",
        "x-ms-xbap": "xbap",
        "x-msbinder": "obd",
        "x-mscardfile": "crd",
        "x-msclip": "clp",
        "x-msdownload": [
            "exe",
            "dll",
            "com",
            "bat",
            "msi"
        ],
        "x-msmediaview": [
            "mvb",
            "m13",
            "m14"
        ],
        "x-msmetafile": [
            "wmf",
            "wmz",
            "emf",
            "emz"
        ],
        "x-msmoney": "mny",
        "x-mspublisher": "pub",
        "x-msschedule": "scd",
        "x-msterminal": "trm",
        "x-mswrite": "wri",
        "x-nzb": "nzb",
        "x-pkcs12": [
            "p12",
            "pfx"
        ],
        "x-pkcs7-certificates": [
            "p7b",
            "spc"
        ],
        "x-research-info-systems": "ris",
        "x-silverlight-app": "xap",
        "x-sql": "sql",
        "x-stuffitx": "sitx",
        "x-subrip": "srt",
        "x-t3vm-image": "t3",
        "x-tads": "gam",
        "x-tex": "tex",
        "x-tex-tfm": "tfm",
        "x-tgif": "obj",
        "x-xliff+xml": "xlf",
        "x-xz": "xz",
        "x-zmachine": [
            "z1",
            "z2",
            "z3",
            "z4",
            "z5",
            "z6",
            "z7",
            "z8"
        ],
        "xaml+xml": "xaml",
        "xcap-diff+xml": "xdf",
        "xenc+xml": "xenc",
        "xml-dtd": "dtd",
        "xop+xml": "xop",
        "xproc+xml": "xpl",
        "xslt+xml": "xslt",
        "xv+xml": [
            "mxml",
            "xhvml",
            "xvml",
            "xvm"
        ],
        "yang": "yang",
        "yin+xml": "yin",
        "envoy": "evy",
        "fractals": "fif",
        "internet-property-stream": "acx",
        "olescript": "axs",
        "vnd.ms-outlook": "msg",
        "vnd.ms-pkicertstore": "sst",
        "x-compress": "z",
        "x-compressed": "tgz",
        "x-gzip": "gz",
        "x-perfmon": [
            "pma",
            "pmc",
            "pml",
            "pmr",
            "pmw"
        ],
        "x-pkcs7-mime": [
            "p7c",
            "p7m"
        ],
        "ynd.ms-pkipko": "pko"
    },
    "audio": {
        "amr": "amr",
        "amr-wb": "awb",
        "annodex": "axa",
        "basic": [
            "au",
            "snd"
        ],
        "flac": "flac",
        "midi": [
            "mid",
            "midi",
            "kar",
            "rmi"
        ],
        "mpeg": [
            "mpga",
            "mpega",
            "mp2",
            "mp3",
            "m4a",
            "mp2a",
            "m2a",
            "m3a"
        ],
        "mpegurl": "m3u",
        "ogg": [
            "oga",
            "ogg",
            "spx"
        ],
        "prs.sid": "sid",
        "x-aiff": [
            "aif",
            "aiff",
            "aifc"
        ],
        "x-gsm": "gsm",
        "x-ms-wma": "wma",
        "x-ms-wax": "wax",
        "x-pn-realaudio": "ram",
        "x-realaudio": "ra",
        "x-sd2": "sd2",
        "x-wav": "wav",
        "adpcm": "adp",
        "mp4": "mp4a",
        "s3m": "s3m",
        "silk": "sil",
        "vnd.dece.audio": [
            "uva",
            "uvva"
        ],
        "vnd.digital-winds": "eol",
        "vnd.dra": "dra",
        "vnd.dts": "dts",
        "vnd.dts.hd": "dtshd",
        "vnd.lucent.voice": "lvp",
        "vnd.ms-playready.media.pya": "pya",
        "vnd.nuera.ecelp4800": "ecelp4800",
        "vnd.nuera.ecelp7470": "ecelp7470",
        "vnd.nuera.ecelp9600": "ecelp9600",
        "vnd.rip": "rip",
        "webm": "weba",
        "x-aac": "aac",
        "x-caf": "caf",
        "x-matroska": "mka",
        "x-pn-realaudio-plugin": "rmp",
        "xm": "xm",
        "mid": [
            "mid",
            "rmi"
        ]
    },
    "chemical": {
        "x-alchemy": "alc",
        "x-cache": [
            "cac",
            "cache"
        ],
        "x-cache-csf": "csf",
        "x-cactvs-binary": [
            "cbin",
            "cascii",
            "ctab"
        ],
        "x-cdx": "cdx",
        "x-chem3d": "c3d",
        "x-cif": "cif",
        "x-cmdf": "cmdf",
        "x-cml": "cml",
        "x-compass": "cpa",
        "x-crossfire": "bsd",
        "x-csml": [
            "csml",
            "csm"
        ],
        "x-ctx": "ctx",
        "x-cxf": [
            "cxf",
            "cef"
        ],
        "x-embl-dl-nucleotide": [
            "emb",
            "embl"
        ],
        "x-gamess-input": [
            "inp",
            "gam",
            "gamin"
        ],
        "x-gaussian-checkpoint": [
            "fch",
            "fchk"
        ],
        "x-gaussian-cube": "cub",
        "x-gaussian-input": [
            "gau",
            "gjc",
            "gjf"
        ],
        "x-gaussian-log": "gal",
        "x-gcg8-sequence": "gcg",
        "x-genbank": "gen",
        "x-hin": "hin",
        "x-isostar": [
            "istr",
            "ist"
        ],
        "x-jcamp-dx": [
            "jdx",
            "dx"
        ],
        "x-kinemage": "kin",
        "x-macmolecule": "mcm",
        "x-macromodel-input": [
            "mmd",
            "mmod"
        ],
        "x-mdl-molfile": "mol",
        "x-mdl-rdfile": "rd",
        "x-mdl-rxnfile": "rxn",
        "x-mdl-sdfile": [
            "sd",
            "sdf"
        ],
        "x-mdl-tgf": "tgf",
        "x-mmcif": "mcif",
        "x-mol2": "mol2",
        "x-molconn-Z": "b",
        "x-mopac-graph": "gpt",
        "x-mopac-input": [
            "mop",
            "mopcrt",
            "mpc",
            "zmt"
        ],
        "x-mopac-out": "moo",
        "x-ncbi-asn1": "asn",
        "x-ncbi-asn1-ascii": [
            "prt",
            "ent"
        ],
        "x-ncbi-asn1-binary": [
            "val",
            "aso"
        ],
        "x-pdb": [
            "pdb",
            "ent"
        ],
        "x-rosdal": "ros",
        "x-swissprot": "sw",
        "x-vamas-iso14976": "vms",
        "x-vmd": "vmd",
        "x-xtel": "xtel",
        "x-xyz": "xyz"
    },
    "image": {
        "gif": "gif",
        "ief": "ief",
        "jpeg": [
            "jpeg",
            "jpg",
            "jpe"
        ],
        "pcx": "pcx",
        "png": "png",
        "svg+xml": [
            "svg",
            "svgz"
        ],
        "tiff": [
            "tiff",
            "tif"
        ],
        "vnd.djvu": [
            "djvu",
            "djv"
        ],
        "vnd.wap.wbmp": "wbmp",
        "x-canon-cr2": "cr2",
        "x-canon-crw": "crw",
        "x-cmu-raster": "ras",
        "x-coreldraw": "cdr",
        "x-coreldrawpattern": "pat",
        "x-coreldrawtemplate": "cdt",
        "x-corelphotopaint": "cpt",
        "x-epson-erf": "erf",
        "x-icon": "ico",
        "x-jg": "art",
        "x-jng": "jng",
        "x-nikon-nef": "nef",
        "x-olympus-orf": "orf",
        "x-photoshop": "psd",
        "x-portable-anymap": "pnm",
        "x-portable-bitmap": "pbm",
        "x-portable-graymap": "pgm",
        "x-portable-pixmap": "ppm",
        "x-rgb": "rgb",
        "x-xbitmap": "xbm",
        "x-xpixmap": "xpm",
        "x-xwindowdump": "xwd",
        "bmp": "bmp",
        "cgm": "cgm",
        "g3fax": "g3",
        "ktx": "ktx",
        "prs.btif": "btif",
        "sgi": "sgi",
        "vnd.dece.graphic": [
            "uvi",
            "uvvi",
            "uvg",
            "uvvg"
        ],
        "vnd.dwg": "dwg",
        "vnd.dxf": "dxf",
        "vnd.fastbidsheet": "fbs",
        "vnd.fpx": "fpx",
        "vnd.fst": "fst",
        "vnd.fujixerox.edmics-mmr": "mmr",
        "vnd.fujixerox.edmics-rlc": "rlc",
        "vnd.ms-modi": "mdi",
        "vnd.ms-photo": "wdp",
        "vnd.net-fpx": "npx",
        "vnd.xiff": "xif",
        "webp": "webp",
        "x-3ds": "3ds",
        "x-cmx": "cmx",
        "x-freehand": [
            "fh",
            "fhc",
            "fh4",
            "fh5",
            "fh7"
        ],
        "x-pict": [
            "pic",
            "pct"
        ],
        "x-tga": "tga",
        "cis-cod": "cod",
        "pipeg": "jfif"
    },
    "message": {
        "rfc822": [
            "eml",
            "mime",
            "mht",
            "mhtml",
            "nws"
        ]
    },
    "model": {
        "iges": [
            "igs",
            "iges"
        ],
        "mesh": [
            "msh",
            "mesh",
            "silo"
        ],
        "vrml": [
            "wrl",
            "vrml"
        ],
        "x3d+vrml": [
            "x3dv",
            "x3dvz"
        ],
        "x3d+xml": [
            "x3d",
            "x3dz"
        ],
        "x3d+binary": [
            "x3db",
            "x3dbz"
        ],
        "vnd.collada+xml": "dae",
        "vnd.dwf": "dwf",
        "vnd.gdl": "gdl",
        "vnd.gtw": "gtw",
        "vnd.mts": "mts",
        "vnd.vtu": "vtu"
    },
    "text": {
        "cache-manifest": [
            "manifest",
            "appcache"
        ],
        "calendar": [
            "ics",
            "icz",
            "ifb"
        ],
        "css": "css",
        "csv": "csv",
        "h323": "323",
        "html": [
            "html",
            "htm",
            "shtml",
            "stm"
        ],
        "iuls": "uls",
        "mathml": "mml",
        "plain": [
            "txt",
            "text",
            "brf",
            "conf",
            "def",
            "list",
            "log",
            "in",
            "bas"
        ],
        "richtext": "rtx",
        "scriptlet": [
            "sct",
            "wsc"
        ],
        "texmacs": [
            "tm",
            "ts"
        ],
        "tab-separated-values": "tsv",
        "vnd.sun.j2me.app-descriptor": "jad",
        "vnd.wap.wml": "wml",
        "vnd.wap.wmlscript": "wmls",
        "x-bibtex": "bib",
        "x-boo": "boo",
        "x-c++hdr": [
            "h++",
            "hpp",
            "hxx",
            "hh"
        ],
        "x-c++src": [
            "c++",
            "cpp",
            "cxx",
            "cc"
        ],
        "x-component": "htc",
        "x-dsrc": "d",
        "x-diff": [
            "diff",
            "patch"
        ],
        "x-haskell": "hs",
        "x-java": "java",
        "x-literate-haskell": "lhs",
        "x-moc": "moc",
        "x-pascal": [
            "p",
            "pas"
        ],
        "x-pcs-gcd": "gcd",
        "x-perl": [
            "pl",
            "pm"
        ],
        "x-python": "py",
        "x-scala": "scala",
        "x-setext": "etx",
        "x-tcl": [
            "tcl",
            "tk"
        ],
        "x-tex": [
            "tex",
            "ltx",
            "sty",
            "cls"
        ],
        "x-vcalendar": "vcs",
        "x-vcard": "vcf",
        "n3": "n3",
        "prs.lines.tag": "dsc",
        "sgml": [
            "sgml",
            "sgm"
        ],
        "troff": [
            "t",
            "tr",
            "roff",
            "man",
            "me",
            "ms"
        ],
        "turtle": "ttl",
        "uri-list": [
            "uri",
            "uris",
            "urls"
        ],
        "vcard": "vcard",
        "vnd.curl": "curl",
        "vnd.curl.dcurl": "dcurl",
        "vnd.curl.scurl": "scurl",
        "vnd.curl.mcurl": "mcurl",
        "vnd.dvb.subtitle": "sub",
        "vnd.fly": "fly",
        "vnd.fmi.flexstor": "flx",
        "vnd.graphviz": "gv",
        "vnd.in3d.3dml": "3dml",
        "vnd.in3d.spot": "spot",
        "x-asm": [
            "s",
            "asm"
        ],
        "x-c": [
            "c",
            "cc",
            "cxx",
            "cpp",
            "h",
            "hh",
            "dic"
        ],
        "x-fortran": [
            "f",
            "for",
            "f77",
            "f90"
        ],
        "x-opml": "opml",
        "x-nfo": "nfo",
        "x-sfv": "sfv",
        "x-uuencode": "uu",
        "webviewhtml": "htt"
    },
    "video": {
        "avif": ".avif",
        "3gpp": "3gp",
        "annodex": "axv",
        "dl": "dl",
        "dv": [
            "dif",
            "dv"
        ],
        "fli": "fli",
        "gl": "gl",
        "mpeg": [
            "mpeg",
            "mpg",
            "mpe",
            "m1v",
            "m2v",
            "mp2",
            "mpa",
            "mpv2"
        ],
        "mp4": [
            "mp4",
            "mp4v",
            "mpg4"
        ],
        "quicktime": [
            "qt",
            "mov"
        ],
        "ogg": "ogv",
        "vnd.mpegurl": [
            "mxu",
            "m4u"
        ],
        "x-flv": "flv",
        "x-la-asf": [
            "lsf",
            "lsx"
        ],
        "x-mng": "mng",
        "x-ms-asf": [
            "asf",
            "asx",
            "asr"
        ],
        "x-ms-wm": "wm",
        "x-ms-wmv": "wmv",
        "x-ms-wmx": "wmx",
        "x-ms-wvx": "wvx",
        "x-msvideo": "avi",
        "x-sgi-movie": "movie",
        "x-matroska": [
            "mpv",
            "mkv",
            "mk3d",
            "mks"
        ],
        "3gpp2": "3g2",
        "h261": "h261",
        "h263": "h263",
        "h264": "h264",
        "jpeg": "jpgv",
        "jpm": [
            "jpm",
            "jpgm"
        ],
        "mj2": [
            "mj2",
            "mjp2"
        ],
        "vnd.dece.hd": [
            "uvh",
            "uvvh"
        ],
        "vnd.dece.mobile": [
            "uvm",
            "uvvm"
        ],
        "vnd.dece.pd": [
            "uvp",
            "uvvp"
        ],
        "vnd.dece.sd": [
            "uvs",
            "uvvs"
        ],
        "vnd.dece.video": [
            "uvv",
            "uvvv"
        ],
        "vnd.dvb.file": "dvb",
        "vnd.fvt": "fvt",
        "vnd.ms-playready.media.pyv": "pyv",
        "vnd.uvvu.mp4": [
            "uvu",
            "uvvu"
        ],
        "vnd.vivo": "viv",
        "webm": "webm",
        "x-f4v": "f4v",
        "x-m4v": "m4v",
        "x-ms-vob": "vob",
        "x-smv": "smv"
    },
    "x-conference": {
        "x-cooltalk": "ice"
    },
    "x-world": {
        "x-vrml": [
            "vrm",
            "vrml",
            "wrl",
            "flr",
            "wrz",
            "xaf",
            "xof"
        ]
    }
};
(()=>{
    const mimeTypes = {};
    for(const type in table){
        if (table.hasOwnProperty(type)) {
            for(const subtype in table[type]){
                if (table[type].hasOwnProperty(subtype)) {
                    const value = table[type][subtype];
                    if (typeof value == "string") {
                        mimeTypes[value] = type + "/" + subtype;
                    } else {
                        for(let indexMimeType = 0; indexMimeType < value.length; indexMimeType++){
                            mimeTypes[value[indexMimeType]] = type + "/" + subtype;
                        }
                    }
                }
            }
        }
    }
    return mimeTypes;
})();
const table1 = [];
for(let i = 0; i < 256; i++){
    let t = i;
    for(let j = 0; j < 8; j++){
        if (t & 1) {
            t = t >>> 1 ^ 0xEDB88320;
        } else {
            t = t >>> 1;
        }
    }
    table1[i] = t;
}
class Crc32 {
    constructor(crc){
        this.crc = crc || -1;
    }
    append(data) {
        let crc = this.crc | 0;
        for(let offset = 0, length = data.length | 0; offset < length; offset++){
            crc = crc >>> 8 ^ table1[(crc ^ data[offset]) & 0xFF];
        }
        this.crc = crc;
    }
    get() {
        return ~this.crc;
    }
}
class Crc32Stream extends TransformStream {
    constructor(){
        const crc32 = new Crc32();
        super({
            transform (chunk) {
                crc32.append(chunk);
            },
            flush (controller) {
                const value = new Uint8Array(4);
                const dataView = new DataView(value.buffer);
                dataView.setUint32(0, crc32.get());
                controller.enqueue(value);
            }
        });
    }
}
function encodeText(value) {
    if (typeof TextEncoder == "undefined") {
        value = unescape(encodeURIComponent(value));
        const result = new Uint8Array(value.length);
        for(let i = 0; i < result.length; i++){
            result[i] = value.charCodeAt(i);
        }
        return result;
    } else {
        return new TextEncoder().encode(value);
    }
}
const bitArray = {
    concat (a1, a2) {
        if (a1.length === 0 || a2.length === 0) {
            return a1.concat(a2);
        }
        const last = a1[a1.length - 1], shift = bitArray.getPartial(last);
        if (shift === 32) {
            return a1.concat(a2);
        } else {
            return bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));
        }
    },
    bitLength (a) {
        const l = a.length;
        if (l === 0) {
            return 0;
        }
        const x = a[l - 1];
        return (l - 1) * 32 + bitArray.getPartial(x);
    },
    clamp (a, len) {
        if (a.length * 32 < len) {
            return a;
        }
        a = a.slice(0, Math.ceil(len / 32));
        const l = a.length;
        len = len & 31;
        if (l > 0 && len) {
            a[l - 1] = bitArray.partial(len, a[l - 1] & 0x80000000 >> len - 1, 1);
        }
        return a;
    },
    partial (len, x, _end) {
        if (len === 32) {
            return x;
        }
        return (_end ? x | 0 : x << 32 - len) + len * 0x10000000000;
    },
    getPartial (x) {
        return Math.round(x / 0x10000000000) || 32;
    },
    _shiftRight (a, shift, carry, out) {
        if (out === undefined) {
            out = [];
        }
        for(; shift >= 32; shift -= 32){
            out.push(carry);
            carry = 0;
        }
        if (shift === 0) {
            return out.concat(a);
        }
        for(let i = 0; i < a.length; i++){
            out.push(carry | a[i] >>> shift);
            carry = a[i] << 32 - shift;
        }
        const last2 = a.length ? a[a.length - 1] : 0;
        const shift2 = bitArray.getPartial(last2);
        out.push(bitArray.partial(shift + shift2 & 31, shift + shift2 > 32 ? carry : out.pop(), 1));
        return out;
    }
};
const codec = {
    bytes: {
        fromBits (arr) {
            const bl = bitArray.bitLength(arr);
            const byteLength = bl / 8;
            const out = new Uint8Array(byteLength);
            let tmp;
            for(let i = 0; i < byteLength; i++){
                if ((i & 3) === 0) {
                    tmp = arr[i / 4];
                }
                out[i] = tmp >>> 24;
                tmp <<= 8;
            }
            return out;
        },
        toBits (bytes) {
            const out = [];
            let i;
            let tmp = 0;
            for(i = 0; i < bytes.length; i++){
                tmp = tmp << 8 | bytes[i];
                if ((i & 3) === 3) {
                    out.push(tmp);
                    tmp = 0;
                }
            }
            if (i & 3) {
                out.push(bitArray.partial(8 * (i & 3), tmp));
            }
            return out;
        }
    }
};
const hash = {};
hash.sha1 = class {
    constructor(hash){
        const sha1 = this;
        sha1.blockSize = 512;
        sha1._init = [
            0x67452301,
            0xEFCDAB89,
            0x98BADCFE,
            0x10325476,
            0xC3D2E1F0
        ];
        sha1._key = [
            0x5A827999,
            0x6ED9EBA1,
            0x8F1BBCDC,
            0xCA62C1D6
        ];
        if (hash) {
            sha1._h = hash._h.slice(0);
            sha1._buffer = hash._buffer.slice(0);
            sha1._length = hash._length;
        } else {
            sha1.reset();
        }
    }
    reset() {
        const sha1 = this;
        sha1._h = sha1._init.slice(0);
        sha1._buffer = [];
        sha1._length = 0;
        return sha1;
    }
    update(data) {
        const sha1 = this;
        if (typeof data === "string") {
            data = codec.utf8String.toBits(data);
        }
        const b = sha1._buffer = bitArray.concat(sha1._buffer, data);
        const ol = sha1._length;
        const nl = sha1._length = ol + bitArray.bitLength(data);
        if (nl > 9007199254740991) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        const c = new Uint32Array(b);
        let j = 0;
        for(let i = sha1.blockSize + ol - (sha1.blockSize + ol & sha1.blockSize - 1); i <= nl; i += sha1.blockSize){
            sha1._block(c.subarray(16 * j, 16 * (j + 1)));
            j += 1;
        }
        b.splice(0, 16 * j);
        return sha1;
    }
    finalize() {
        const sha1 = this;
        let b = sha1._buffer;
        const h = sha1._h;
        b = bitArray.concat(b, [
            bitArray.partial(1, 1)
        ]);
        for(let i = b.length + 2; i & 15; i++){
            b.push(0);
        }
        b.push(Math.floor(sha1._length / 0x100000000));
        b.push(sha1._length | 0);
        while(b.length){
            sha1._block(b.splice(0, 16));
        }
        sha1.reset();
        return h;
    }
    _f(t, b, c, d) {
        if (t <= 19) {
            return b & c | ~b & d;
        } else if (t <= 39) {
            return b ^ c ^ d;
        } else if (t <= 59) {
            return b & c | b & d | c & d;
        } else if (t <= 79) {
            return b ^ c ^ d;
        }
    }
    _S(n, x) {
        return x << n | x >>> 32 - n;
    }
    _block(words) {
        const sha1 = this;
        const h = sha1._h;
        const w = Array(80);
        for(let j = 0; j < 16; j++){
            w[j] = words[j];
        }
        let a = h[0];
        let b = h[1];
        let c = h[2];
        let d = h[3];
        let e = h[4];
        for(let t = 0; t <= 79; t++){
            if (t >= 16) {
                w[t] = sha1._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);
            }
            const tmp = sha1._S(5, a) + sha1._f(t, b, c, d) + e + w[t] + sha1._key[Math.floor(t / 20)] | 0;
            e = d;
            d = c;
            c = sha1._S(30, b);
            b = a;
            a = tmp;
        }
        h[0] = h[0] + a | 0;
        h[1] = h[1] + b | 0;
        h[2] = h[2] + c | 0;
        h[3] = h[3] + d | 0;
        h[4] = h[4] + e | 0;
    }
};
const cipher = {};
cipher.aes = class {
    constructor(key){
        const aes = this;
        aes._tables = [
            [
                [],
                [],
                [],
                [],
                []
            ],
            [
                [],
                [],
                [],
                [],
                []
            ]
        ];
        if (!aes._tables[0][0][0]) {
            aes._precompute();
        }
        const sbox = aes._tables[0][4];
        const decTable = aes._tables[1];
        const keyLen = key.length;
        let i, encKey, decKey, rcon = 1;
        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
            throw new Error("invalid aes key size");
        }
        aes._key = [
            encKey = key.slice(0),
            decKey = []
        ];
        for(i = keyLen; i < 4 * keyLen + 28; i++){
            let tmp = encKey[i - 1];
            if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
                tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];
                if (i % keyLen === 0) {
                    tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
                    rcon = rcon << 1 ^ (rcon >> 7) * 283;
                }
            }
            encKey[i] = encKey[i - keyLen] ^ tmp;
        }
        for(let j = 0; i; j++, i--){
            const tmp = encKey[j & 3 ? i : i - 4];
            if (i <= 4 || j < 4) {
                decKey[j] = tmp;
            } else {
                decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
            }
        }
    }
    encrypt(data) {
        return this._crypt(data, 0);
    }
    decrypt(data) {
        return this._crypt(data, 1);
    }
    _precompute() {
        const encTable = this._tables[0];
        const decTable = this._tables[1];
        const sbox = encTable[4];
        const sboxInv = decTable[4];
        const d = [];
        const th = [];
        let xInv, x2, x4, x8;
        for(let i = 0; i < 256; i++){
            th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
        }
        for(let x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1){
            let s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
            s = s >> 8 ^ s & 255 ^ 99;
            sbox[x] = s;
            sboxInv[s] = x;
            x8 = d[x4 = d[x2 = d[x]]];
            let tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
            let tEnc = d[s] * 0x101 ^ s * 0x1010100;
            for(let i = 0; i < 4; i++){
                encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
                decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
            }
        }
        for(let i = 0; i < 5; i++){
            encTable[i] = encTable[i].slice(0);
            decTable[i] = decTable[i].slice(0);
        }
    }
    _crypt(input, dir) {
        if (input.length !== 4) {
            throw new Error("invalid aes block size");
        }
        const key = this._key[dir];
        const nInnerRounds = key.length / 4 - 2;
        const out = [
            0,
            0,
            0,
            0
        ];
        const table = this._tables[dir];
        const t0 = table[0];
        const t1 = table[1];
        const t2 = table[2];
        const t3 = table[3];
        const sbox = table[4];
        let a = input[0] ^ key[0];
        let b = input[dir ? 3 : 1] ^ key[1];
        let c = input[2] ^ key[2];
        let d = input[dir ? 1 : 3] ^ key[3];
        let kIndex = 4;
        let a2, b2, c2;
        for(let i = 0; i < nInnerRounds; i++){
            a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];
            b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];
            c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];
            d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];
            kIndex += 4;
            a = a2;
            b = b2;
            c = c2;
        }
        for(let i = 0; i < 4; i++){
            out[dir ? 3 & -i : i] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
            a2 = a;
            a = b;
            b = c;
            c = d;
            d = a2;
        }
        return out;
    }
};
const random = {
    getRandomValues (typedArray) {
        const words = new Uint32Array(typedArray.buffer);
        const r = (m_w)=>{
            let m_z = 0x3ade68b1;
            const mask = 0xffffffff;
            return function() {
                m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
                m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
                const result = ((m_z << 0x10) + m_w & 0xffffffff) / 0x100000000 + .5;
                return result * (Math.random() > .5 ? 1 : -1);
            };
        };
        for(let i = 0, rcache; i < typedArray.length; i += 4){
            const _r = r((rcache || Math.random()) * 0x100000000);
            rcache = _r() * 0x3ade67b7;
            words[i / 4] = _r() * 0x100000000 | 0;
        }
        return typedArray;
    }
};
const mode = {};
mode.ctrGladman = class {
    constructor(prf, iv){
        this._prf = prf;
        this._initIv = iv;
        this._iv = iv;
    }
    reset() {
        this._iv = this._initIv;
    }
    update(data) {
        return this.calculate(this._prf, data, this._iv);
    }
    incWord(word) {
        if ((word >> 24 & 0xff) === 0xff) {
            let b1 = word >> 16 & 0xff;
            let b2 = word >> 8 & 0xff;
            let b3 = word & 0xff;
            if (b1 === 0xff) {
                b1 = 0;
                if (b2 === 0xff) {
                    b2 = 0;
                    if (b3 === 0xff) {
                        b3 = 0;
                    } else {
                        ++b3;
                    }
                } else {
                    ++b2;
                }
            } else {
                ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
        } else {
            word += 0x01 << 24;
        }
        return word;
    }
    incCounter(counter) {
        if ((counter[0] = this.incWord(counter[0])) === 0) {
            counter[1] = this.incWord(counter[1]);
        }
    }
    calculate(prf, data, iv) {
        let l;
        if (!(l = data.length)) {
            return [];
        }
        const bl = bitArray.bitLength(data);
        for(let i = 0; i < l; i += 4){
            this.incCounter(iv);
            const e = prf.encrypt(iv);
            data[i] ^= e[0];
            data[i + 1] ^= e[1];
            data[i + 2] ^= e[2];
            data[i + 3] ^= e[3];
        }
        return bitArray.clamp(data, bl);
    }
};
const misc = {
    importKey (password) {
        return new misc.hmacSha1(codec.bytes.toBits(password));
    },
    pbkdf2 (prf, salt, count, length) {
        count = count || 10000;
        if (length < 0 || count < 0) {
            throw new Error("invalid params to pbkdf2");
        }
        const byteLength = (length >> 5) + 1 << 2;
        let u, ui, i, j, k;
        const arrayBuffer = new ArrayBuffer(byteLength);
        const out = new DataView(arrayBuffer);
        let outLength = 0;
        const b = bitArray;
        salt = codec.bytes.toBits(salt);
        for(k = 1; outLength < (byteLength || 1); k++){
            u = ui = prf.encrypt(b.concat(salt, [
                k
            ]));
            for(i = 1; i < count; i++){
                ui = prf.encrypt(ui);
                for(j = 0; j < ui.length; j++){
                    u[j] ^= ui[j];
                }
            }
            for(i = 0; outLength < (byteLength || 1) && i < u.length; i++){
                out.setInt32(outLength, u[i]);
                outLength += 4;
            }
        }
        return arrayBuffer.slice(0, length / 8);
    }
};
misc.hmacSha1 = class {
    constructor(key){
        const hmac = this;
        const Hash = hmac._hash = hash.sha1;
        const exKey = [
            [],
            []
        ];
        hmac._baseHash = [
            new Hash(),
            new Hash()
        ];
        const bs = hmac._baseHash[0].blockSize / 32;
        if (key.length > bs) {
            key = new Hash().update(key).finalize();
        }
        for(let i = 0; i < bs; i++){
            exKey[0][i] = key[i] ^ 0x36363636;
            exKey[1][i] = key[i] ^ 0x5C5C5C5C;
        }
        hmac._baseHash[0].update(exKey[0]);
        hmac._baseHash[1].update(exKey[1]);
        hmac._resultHash = new Hash(hmac._baseHash[0]);
    }
    reset() {
        const hmac = this;
        hmac._resultHash = new hmac._hash(hmac._baseHash[0]);
        hmac._updated = false;
    }
    update(data) {
        const hmac = this;
        hmac._updated = true;
        hmac._resultHash.update(data);
    }
    digest() {
        const hmac = this;
        const w = hmac._resultHash.finalize();
        const result = new hmac._hash(hmac._baseHash[1]).update(w).finalize();
        hmac.reset();
        return result;
    }
    encrypt(data) {
        if (!this._updated) {
            this.update(data);
            return this.digest(data);
        } else {
            throw new Error("encrypt on already updated hmac called!");
        }
    }
};
const GET_RANDOM_VALUES_SUPPORTED = typeof crypto != "undefined" && typeof crypto.getRandomValues == "function";
const ERR_INVALID_PASSWORD = "Invalid password";
const ERR_INVALID_SIGNATURE = "Invalid signature";
function getRandomValues(array) {
    if (GET_RANDOM_VALUES_SUPPORTED) {
        return crypto.getRandomValues(array);
    } else {
        return random.getRandomValues(array);
    }
}
const BLOCK_LENGTH = 16;
const RAW_FORMAT = "raw";
const PBKDF2_ALGORITHM = {
    name: "PBKDF2"
};
const HASH_ALGORITHM = {
    name: "HMAC"
};
const HASH_FUNCTION = "SHA-1";
const BASE_KEY_ALGORITHM = Object.assign({
    hash: HASH_ALGORITHM
}, PBKDF2_ALGORITHM);
const DERIVED_BITS_ALGORITHM = Object.assign({
    iterations: 1000,
    hash: {
        name: HASH_FUNCTION
    }
}, PBKDF2_ALGORITHM);
const DERIVED_BITS_USAGE = [
    "deriveBits"
];
const SALT_LENGTH = [
    8,
    12,
    16
];
const KEY_LENGTH = [
    16,
    24,
    32
];
const SIGNATURE_LENGTH = 10;
const COUNTER_DEFAULT_VALUE = [
    0,
    0,
    0,
    0
];
const UNDEFINED_TYPE1 = "undefined";
const FUNCTION_TYPE1 = "function";
const CRYPTO_API_SUPPORTED = typeof crypto != UNDEFINED_TYPE1;
const subtle = CRYPTO_API_SUPPORTED && crypto.subtle;
const SUBTLE_API_SUPPORTED = CRYPTO_API_SUPPORTED && typeof subtle != UNDEFINED_TYPE1;
const codecBytes = codec.bytes;
const Aes = cipher.aes;
const CtrGladman = mode.ctrGladman;
const HmacSha1 = misc.hmacSha1;
let IMPORT_KEY_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.importKey == FUNCTION_TYPE1;
let DERIVE_BITS_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.deriveBits == FUNCTION_TYPE1;
class AESDecryptionStream extends TransformStream {
    constructor({ password , signed , encryptionStrength  }){
        super({
            start () {
                Object.assign(this, {
                    ready: new Promise((resolve)=>this.resolveReady = resolve),
                    password,
                    signed,
                    strength: encryptionStrength - 1,
                    pending: new Uint8Array()
                });
            },
            async transform (chunk, controller) {
                const aesCrypto = this;
                const { password , strength , resolveReady , ready  } = aesCrypto;
                if (password) {
                    await createDecryptionKeys(aesCrypto, strength, password, subarray(chunk, 0, SALT_LENGTH[strength] + 2));
                    chunk = subarray(chunk, SALT_LENGTH[strength] + 2);
                    resolveReady();
                } else {
                    await ready;
                }
                const output = new Uint8Array(chunk.length - 10 - (chunk.length - 10) % 16);
                controller.enqueue(append(aesCrypto, chunk, output, 0, 10, true));
            },
            async flush (controller) {
                const { signed , ctr , hmac , pending , ready  } = this;
                await ready;
                const chunkToDecrypt = subarray(pending, 0, pending.length - 10);
                const originalSignature = subarray(pending, pending.length - 10);
                let decryptedChunkArray = new Uint8Array();
                if (chunkToDecrypt.length) {
                    const encryptedChunk = toBits(codecBytes, chunkToDecrypt);
                    hmac.update(encryptedChunk);
                    const decryptedChunk = ctr.update(encryptedChunk);
                    decryptedChunkArray = fromBits(codecBytes, decryptedChunk);
                }
                if (signed) {
                    const signature = subarray(fromBits(codecBytes, hmac.digest()), 0, 10);
                    for(let indexSignature = 0; indexSignature < 10; indexSignature++){
                        if (signature[indexSignature] != originalSignature[indexSignature]) {
                            throw new Error(ERR_INVALID_SIGNATURE);
                        }
                    }
                }
                controller.enqueue(decryptedChunkArray);
            }
        });
    }
}
class AESEncryptionStream extends TransformStream {
    constructor({ password , encryptionStrength  }){
        let stream;
        super({
            start () {
                Object.assign(this, {
                    ready: new Promise((resolve)=>this.resolveReady = resolve),
                    password,
                    strength: encryptionStrength - 1,
                    pending: new Uint8Array()
                });
            },
            async transform (chunk, controller) {
                const aesCrypto = this;
                const { password , strength , resolveReady , ready  } = aesCrypto;
                let preamble = new Uint8Array();
                if (password) {
                    preamble = await createEncryptionKeys(aesCrypto, strength, password);
                    resolveReady();
                } else {
                    await ready;
                }
                const output = new Uint8Array(preamble.length + chunk.length - chunk.length % 16);
                output.set(preamble, 0);
                controller.enqueue(append(aesCrypto, chunk, output, preamble.length, 0));
            },
            async flush (controller) {
                const { ctr , hmac , pending , ready  } = this;
                await ready;
                let encryptedChunkArray = new Uint8Array();
                if (pending.length) {
                    const encryptedChunk = ctr.update(toBits(codecBytes, pending));
                    hmac.update(encryptedChunk);
                    encryptedChunkArray = fromBits(codecBytes, encryptedChunk);
                }
                stream.signature = fromBits(codecBytes, hmac.digest()).slice(0, SIGNATURE_LENGTH);
                controller.enqueue(concat(encryptedChunkArray, stream.signature));
            }
        });
        stream = this;
    }
}
function append(aesCrypto, input, output, paddingStart, paddingEnd, verifySignature) {
    const { ctr , hmac , pending  } = aesCrypto;
    const inputLength = input.length - paddingEnd;
    if (pending.length) {
        input = concat(pending, input);
        output = expand(output, inputLength - inputLength % BLOCK_LENGTH);
    }
    let offset;
    for(offset = 0; offset <= inputLength - 16; offset += BLOCK_LENGTH){
        const inputChunk = toBits(codecBytes, subarray(input, offset, offset + 16));
        if (verifySignature) {
            hmac.update(inputChunk);
        }
        const outputChunk = ctr.update(inputChunk);
        if (!verifySignature) {
            hmac.update(outputChunk);
        }
        output.set(fromBits(codecBytes, outputChunk), offset + paddingStart);
    }
    aesCrypto.pending = subarray(input, offset);
    return output;
}
async function createDecryptionKeys(decrypt, strength, password, preamble) {
    const passwordVerificationKey = await createKeys(decrypt, strength, password, subarray(preamble, 0, SALT_LENGTH[strength]));
    const passwordVerification = subarray(preamble, SALT_LENGTH[strength]);
    if (passwordVerificationKey[0] != passwordVerification[0] || passwordVerificationKey[1] != passwordVerification[1]) {
        throw new Error(ERR_INVALID_PASSWORD);
    }
}
async function createEncryptionKeys(encrypt, strength, password) {
    const salt = getRandomValues(new Uint8Array(SALT_LENGTH[strength]));
    const passwordVerification = await createKeys(encrypt, strength, password, salt);
    return concat(salt, passwordVerification);
}
async function createKeys(aesCrypto, strength, password, salt) {
    aesCrypto.password = null;
    const encodedPassword = encodeText(password);
    const baseKey = await importKey(RAW_FORMAT, encodedPassword, BASE_KEY_ALGORITHM, false, DERIVED_BITS_USAGE);
    const derivedBits = await deriveBits(Object.assign({
        salt
    }, DERIVED_BITS_ALGORITHM), baseKey, 8 * (KEY_LENGTH[strength] * 2 + 2));
    const compositeKey = new Uint8Array(derivedBits);
    const key = toBits(codecBytes, subarray(compositeKey, 0, KEY_LENGTH[strength]));
    const authentication = toBits(codecBytes, subarray(compositeKey, KEY_LENGTH[strength], KEY_LENGTH[strength] * 2));
    const passwordVerification = subarray(compositeKey, KEY_LENGTH[strength] * 2);
    Object.assign(aesCrypto, {
        keys: {
            key,
            authentication,
            passwordVerification
        },
        ctr: new CtrGladman(new Aes(key), Array.from(COUNTER_DEFAULT_VALUE)),
        hmac: new HmacSha1(authentication)
    });
    return passwordVerification;
}
async function importKey(format, password, algorithm, extractable, keyUsages) {
    if (IMPORT_KEY_SUPPORTED) {
        try {
            return await subtle.importKey(format, password, algorithm, extractable, keyUsages);
        } catch (_error) {
            IMPORT_KEY_SUPPORTED = false;
            return misc.importKey(password);
        }
    } else {
        return misc.importKey(password);
    }
}
async function deriveBits(algorithm, baseKey, length) {
    if (DERIVE_BITS_SUPPORTED) {
        try {
            return await subtle.deriveBits(algorithm, baseKey, length);
        } catch (_error) {
            DERIVE_BITS_SUPPORTED = false;
            return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);
        }
    } else {
        return misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);
    }
}
function concat(leftArray, rightArray) {
    let array = leftArray;
    if (leftArray.length + rightArray.length) {
        array = new Uint8Array(leftArray.length + rightArray.length);
        array.set(leftArray, 0);
        array.set(rightArray, leftArray.length);
    }
    return array;
}
function expand(inputArray, length) {
    if (length && length > inputArray.length) {
        const array = inputArray;
        inputArray = new Uint8Array(length);
        inputArray.set(array, 0);
    }
    return inputArray;
}
function subarray(array, begin, end) {
    return array.subarray(begin, end);
}
function fromBits(codecBytes, chunk) {
    return codecBytes.fromBits(chunk);
}
function toBits(codecBytes, chunk) {
    return codecBytes.toBits(chunk);
}
const HEADER_LENGTH = 12;
class ZipCryptoDecryptionStream extends TransformStream {
    constructor({ password , passwordVerification  }){
        super({
            start () {
                Object.assign(this, {
                    password,
                    passwordVerification
                });
                createKeys1(this, password);
            },
            transform (chunk, controller) {
                const zipCrypto = this;
                if (zipCrypto.password) {
                    const decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, 12));
                    zipCrypto.password = null;
                    if (decryptedHeader[12 - 1] != zipCrypto.passwordVerification) {
                        throw new Error(ERR_INVALID_PASSWORD);
                    }
                    chunk = chunk.subarray(HEADER_LENGTH);
                }
                controller.enqueue(decrypt(zipCrypto, chunk));
            }
        });
    }
}
class ZipCryptoEncryptionStream extends TransformStream {
    constructor({ password , passwordVerification  }){
        super({
            start () {
                Object.assign(this, {
                    password,
                    passwordVerification
                });
                createKeys1(this, password);
            },
            transform (chunk, controller) {
                const zipCrypto = this;
                let output;
                let offset;
                if (zipCrypto.password) {
                    zipCrypto.password = null;
                    const header = getRandomValues(new Uint8Array(12));
                    header[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;
                    output = new Uint8Array(chunk.length + header.length);
                    output.set(encrypt(zipCrypto, header), 0);
                    offset = HEADER_LENGTH;
                } else {
                    output = new Uint8Array(chunk.length);
                    offset = 0;
                }
                output.set(encrypt(zipCrypto, chunk), offset);
                controller.enqueue(output);
            }
        });
    }
}
function decrypt(target, input) {
    const output = new Uint8Array(input.length);
    for(let index = 0; index < input.length; index++){
        output[index] = getByte(target) ^ input[index];
        updateKeys(target, output[index]);
    }
    return output;
}
function encrypt(target, input) {
    const output = new Uint8Array(input.length);
    for(let index = 0; index < input.length; index++){
        output[index] = getByte(target) ^ input[index];
        updateKeys(target, input[index]);
    }
    return output;
}
function createKeys1(target, password) {
    const keys = [
        0x12345678,
        0x23456789,
        0x34567890
    ];
    Object.assign(target, {
        keys,
        crcKey0: new Crc32(keys[0]),
        crcKey2: new Crc32(keys[2])
    });
    for(let index = 0; index < password.length; index++){
        updateKeys(target, password.charCodeAt(index));
    }
}
function updateKeys(target, __byte) {
    let [key0, key1, key2] = target.keys;
    target.crcKey0.append([
        __byte
    ]);
    key0 = ~target.crcKey0.get();
    key1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);
    target.crcKey2.append([
        key1 >>> 24
    ]);
    key2 = ~target.crcKey2.get();
    target.keys = [
        key0,
        key1,
        key2
    ];
}
function getByte(target) {
    const temp = target.keys[2] | 2;
    return getInt8(Math.imul(temp, temp ^ 1) >>> 8);
}
function getInt8(number) {
    return number & 0xFF;
}
function getInt32(number) {
    return number & 0xFFFFFFFF;
}
const COMPRESSION_FORMAT = "deflate-raw";
class DeflateStream extends TransformStream {
    constructor(options, { chunkSize , CompressionStream: CompressionStream1 , CompressionStreamNative  }){
        super({});
        const { compressed , encrypted , useCompressionStream , zipCrypto , signed , level  } = options;
        const stream = this;
        let crc32Stream, encryptionStream;
        let readable = filterEmptyChunks(super.readable);
        if ((!encrypted || zipCrypto) && signed) {
            [readable, crc32Stream] = readable.tee();
            crc32Stream = pipeThrough(crc32Stream, new Crc32Stream());
        }
        if (compressed) {
            readable = pipeThroughCommpressionStream(readable, useCompressionStream, {
                level,
                chunkSize
            }, CompressionStreamNative, CompressionStream1);
        }
        if (encrypted) {
            if (zipCrypto) {
                readable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));
            } else {
                encryptionStream = new AESEncryptionStream(options);
                readable = pipeThrough(readable, encryptionStream);
            }
        }
        setReadable(stream, readable, async ()=>{
            let signature;
            if (encrypted && !zipCrypto) {
                signature = encryptionStream.signature;
            }
            if ((!encrypted || zipCrypto) && signed) {
                signature = await crc32Stream.getReader().read();
                signature = new DataView(signature.value.buffer).getUint32(0);
            }
            stream.signature = signature;
        });
    }
}
class InflateStream extends TransformStream {
    constructor(options, { chunkSize , DecompressionStream: DecompressionStream1 , DecompressionStreamNative  }){
        super({});
        const { zipCrypto , encrypted , signed , signature , compressed , useCompressionStream  } = options;
        let crc32Stream, decryptionStream;
        let readable = filterEmptyChunks(super.readable);
        if (encrypted) {
            if (zipCrypto) {
                readable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));
            } else {
                decryptionStream = new AESDecryptionStream(options);
                readable = pipeThrough(readable, decryptionStream);
            }
        }
        if (compressed) {
            readable = pipeThroughCommpressionStream(readable, useCompressionStream, {
                chunkSize
            }, DecompressionStreamNative, DecompressionStream1);
        }
        if ((!encrypted || zipCrypto) && signed) {
            [readable, crc32Stream] = readable.tee();
            crc32Stream = pipeThrough(crc32Stream, new Crc32Stream());
        }
        setReadable(this, readable, async ()=>{
            if ((!encrypted || zipCrypto) && signed) {
                const streamSignature = await crc32Stream.getReader().read();
                const dataViewSignature = new DataView(streamSignature.value.buffer);
                if (signature != dataViewSignature.getUint32(0, false)) {
                    throw new Error(ERR_INVALID_SIGNATURE);
                }
            }
        });
    }
}
function filterEmptyChunks(readable) {
    return pipeThrough(readable, new TransformStream({
        transform (chunk, controller) {
            if (chunk && chunk.length) {
                controller.enqueue(chunk);
            }
        }
    }));
}
function setReadable(stream, readable, flush) {
    readable = pipeThrough(readable, new TransformStream({
        flush
    }));
    Object.defineProperty(stream, "readable", {
        get () {
            return readable;
        }
    });
}
function pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream) {
    try {
        const CompressionStream1 = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream;
        readable = pipeThrough(readable, new CompressionStream1(COMPRESSION_FORMAT, options));
    } catch (error) {
        if (useCompressionStream) {
            readable = pipeThrough(readable, new CodecStream(COMPRESSION_FORMAT, options));
        } else {
            throw error;
        }
    }
    return readable;
}
function pipeThrough(readable, transformStream) {
    return readable.pipeThrough(transformStream);
}
const MESSAGE_EVENT_TYPE = "message";
const MESSAGE_START = "start";
const MESSAGE_PULL = "pull";
const MESSAGE_DATA = "data";
const MESSAGE_ACK_DATA = "ack";
const MESSAGE_CLOSE = "close";
const CODEC_DEFLATE = "deflate";
const CODEC_INFLATE = "inflate";
class CodecStream extends TransformStream {
    constructor(options, config){
        super({});
        const codec = this;
        const { codecType  } = options;
        let Stream;
        if (codecType.startsWith(CODEC_DEFLATE)) {
            Stream = DeflateStream;
        } else if (codecType.startsWith(CODEC_INFLATE)) {
            Stream = InflateStream;
        }
        let size = 0;
        const stream = new Stream(options, config);
        const readable = super.readable;
        const transformStream = new TransformStream({
            transform (chunk, controller) {
                if (chunk && chunk.length) {
                    size += chunk.length;
                    controller.enqueue(chunk);
                }
            },
            flush () {
                const { signature  } = stream;
                Object.assign(codec, {
                    signature,
                    size
                });
            }
        });
        Object.defineProperty(codec, "readable", {
            get () {
                return readable.pipeThrough(stream).pipeThrough(transformStream);
            }
        });
    }
}
const WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;
class CodecWorker {
    constructor(workerData, { readable , writable  }, { options , config , streamOptions , useWebWorkers , transferStreams , scripts  }, onTaskFinished){
        const { signal  } = streamOptions;
        Object.assign(workerData, {
            busy: true,
            readable: readable.pipeThrough(new ProgressWatcherStream(readable, streamOptions, config), {
                signal
            }),
            writable,
            options: Object.assign({}, options),
            scripts,
            transferStreams,
            terminate () {
                const { worker , busy  } = workerData;
                if (worker && !busy) {
                    worker.terminate();
                    workerData.interface = null;
                }
            },
            onTaskFinished () {
                workerData.busy = false;
                onTaskFinished(workerData);
            }
        });
        return (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config);
    }
}
class ProgressWatcherStream extends TransformStream {
    constructor(readableSource, { onstart , onprogress , size , onend  }, { chunkSize  }){
        let chunkOffset = 0;
        super({
            start () {
                if (onstart) {
                    callHandler(onstart, size);
                }
            },
            async transform (chunk, controller) {
                chunkOffset += chunk.length;
                if (onprogress) {
                    await callHandler(onprogress, chunkOffset, size);
                }
                controller.enqueue(chunk);
            },
            flush () {
                readableSource.size = chunkOffset;
                if (onend) {
                    callHandler(onend, chunkOffset);
                }
            }
        }, {
            highWaterMark: 1,
            size: ()=>chunkSize
        });
    }
}
async function callHandler(handler, ...parameters) {
    try {
        await handler(...parameters);
    } catch (_error) {}
}
function createWorkerInterface(workerData, config) {
    return {
        run: ()=>runWorker(workerData, config)
    };
}
function createWebWorkerInterface(workerData, { baseURL , chunkSize  }) {
    if (!workerData.interface) {
        Object.assign(workerData, {
            worker: getWebWorker(workerData.scripts[0], baseURL, workerData),
            interface: {
                run: ()=>runWebWorker(workerData, {
                        chunkSize
                    })
            }
        });
    }
    return workerData.interface;
}
async function runWorker({ options , readable , writable , onTaskFinished  }, config) {
    const codecStream = new CodecStream(options, config);
    try {
        await readable.pipeThrough(codecStream).pipeTo(writable, {
            preventClose: true,
            preventAbort: true
        });
        const { signature , size  } = codecStream;
        return {
            signature,
            size
        };
    } finally{
        onTaskFinished();
    }
}
async function runWebWorker(workerData, config) {
    let resolveResult, rejectResult;
    const result = new Promise((resolve, reject)=>{
        resolveResult = resolve;
        rejectResult = reject;
    });
    Object.assign(workerData, {
        reader: null,
        writer: null,
        resolveResult,
        rejectResult,
        result
    });
    const { readable , options , scripts  } = workerData;
    const { writable , closed  } = watchClosedStream(workerData.writable);
    const streamsTransferred = sendMessage({
        type: MESSAGE_START,
        scripts: scripts.slice(1),
        options,
        config,
        readable,
        writable
    }, workerData);
    if (!streamsTransferred) {
        Object.assign(workerData, {
            reader: readable.getReader(),
            writer: writable.getWriter()
        });
    }
    const resultValue = await result;
    try {
        await writable.close();
    } catch (_error) {}
    await closed;
    return resultValue;
}
function watchClosedStream(writableSource) {
    const writer = writableSource.getWriter();
    let resolveStreamClosed;
    const closed = new Promise((resolve)=>resolveStreamClosed = resolve);
    const writable = new WritableStream({
        async write (chunk) {
            await writer.ready;
            await writer.write(chunk);
        },
        close () {
            writer.releaseLock();
            resolveStreamClosed();
        },
        abort (reason) {
            return writer.abort(reason);
        }
    });
    return {
        writable,
        closed
    };
}
let classicWorkersSupported = true;
let transferStreamsSupported = true;
function getWebWorker(url, baseURL, workerData) {
    const workerOptions = {
        type: "module"
    };
    let scriptUrl, worker;
    if (typeof url == FUNCTION_TYPE) {
        url = url();
    }
    try {
        scriptUrl = new URL(url, baseURL);
    } catch (_error) {
        scriptUrl = url;
    }
    if (classicWorkersSupported) {
        try {
            worker = new Worker(scriptUrl);
        } catch (_error) {
            classicWorkersSupported = false;
            worker = new Worker(scriptUrl, workerOptions);
        }
    } else {
        worker = new Worker(scriptUrl, workerOptions);
    }
    worker.addEventListener(MESSAGE_EVENT_TYPE, (event)=>onMessage(event, workerData));
    return worker;
}
function sendMessage(message, { worker , writer , onTaskFinished , transferStreams  }) {
    try {
        let { value , readable , writable  } = message;
        const transferables = [];
        if (value) {
            const { buffer , length  } = value;
            if (length != buffer.byteLength) {
                value = new Uint8Array(value);
            }
            message.value = value.buffer;
            transferables.push(message.value);
        }
        if (transferStreams && transferStreamsSupported) {
            if (readable) {
                transferables.push(readable);
            }
            if (writable) {
                transferables.push(writable);
            }
        } else {
            message.readable = message.writable = null;
        }
        if (transferables.length) {
            try {
                worker.postMessage(message, transferables);
                return true;
            } catch (_error) {
                transferStreamsSupported = false;
                message.readable = message.writable = null;
                worker.postMessage(message);
            }
        } else {
            worker.postMessage(message);
        }
    } catch (error) {
        if (writer) {
            writer.releaseLock();
        }
        onTaskFinished();
        throw error;
    }
}
async function onMessage({ data  }, workerData) {
    const { type , value , messageId , result , error  } = data;
    const { reader , writer , resolveResult , rejectResult , onTaskFinished  } = workerData;
    try {
        if (error) {
            const { message , stack , code , name  } = error;
            const responseError = new Error(message);
            Object.assign(responseError, {
                stack,
                code,
                name
            });
            close(responseError);
        } else {
            if (type == MESSAGE_PULL) {
                const { value , done  } = await reader.read();
                sendMessage({
                    type: MESSAGE_DATA,
                    value,
                    done,
                    messageId
                }, workerData);
            }
            if (type == MESSAGE_DATA) {
                await writer.ready;
                await writer.write(new Uint8Array(value));
                sendMessage({
                    type: MESSAGE_ACK_DATA,
                    messageId
                }, workerData);
            }
            if (type == MESSAGE_CLOSE) {
                close(null, result);
            }
        }
    } catch (error) {
        close(error);
    }
    function close(error, result) {
        if (error) {
            rejectResult(error);
        } else {
            resolveResult(result);
        }
        if (writer) {
            writer.releaseLock();
        }
        onTaskFinished();
    }
}
let pool = [];
const pendingRequests = [];
let indexWorker = 0;
async function runWorker1(stream, workerOptions) {
    const { options , config  } = workerOptions;
    const { transferStreams , useWebWorkers , useCompressionStream , codecType , compressed , signed , encrypted  } = options;
    const { workerScripts , maxWorkers , terminateWorkerTimeout  } = config;
    workerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;
    const streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;
    workerOptions.useWebWorkers = !streamCopy && (useWebWorkers || useWebWorkers === UNDEFINED_VALUE && config.useWebWorkers);
    workerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];
    options.useCompressionStream = useCompressionStream || useCompressionStream === UNDEFINED_VALUE && config.useCompressionStream;
    let worker;
    const workerData = pool.find((workerData)=>!workerData.busy);
    if (workerData) {
        clearTerminateTimeout(workerData);
        worker = new CodecWorker(workerData, stream, workerOptions, onTaskFinished);
    } else if (pool.length < maxWorkers) {
        const workerData = {
            indexWorker
        };
        indexWorker++;
        pool.push(workerData);
        worker = new CodecWorker(workerData, stream, workerOptions, onTaskFinished);
    } else {
        worker = await new Promise((resolve)=>pendingRequests.push({
                resolve,
                stream,
                workerOptions
            }));
    }
    return worker.run();
    function onTaskFinished(workerData) {
        if (pendingRequests.length) {
            const [{ resolve , stream , workerOptions  }] = pendingRequests.splice(0, 1);
            resolve(new CodecWorker(workerData, stream, workerOptions, onTaskFinished));
        } else if (workerData.worker) {
            clearTerminateTimeout(workerData);
            if (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {
                workerData.terminateTimeout = setTimeout(()=>{
                    pool = pool.filter((data)=>data != workerData);
                    workerData.terminate();
                }, terminateWorkerTimeout);
            }
        } else {
            pool = pool.filter((data)=>data != workerData);
        }
    }
}
function clearTerminateTimeout(workerData) {
    const { terminateTimeout  } = workerData;
    if (terminateTimeout) {
        clearTimeout(terminateTimeout);
        workerData.terminateTimeout = null;
    }
}
function e(e) {
    const t = ()=>URL.createObjectURL(new Blob([
            'const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){const e=new S;super({transform(t){e.append(t)},flush(t){const n=new i(4);new l(n.buffer).setUint32(0,e.get()),t.enqueue(n)}})}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;"string"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}R(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.R(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.R(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.R(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.B(x.p.g(e)),M(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},B:class{constructor(e){const t=this,n=t.K=_,r=[[],[]];t.P=[new n,new n];const s=t.P[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.P[0].update(r[0]),t.P[1].update(r[1]),t.U=new n(t.P[0])}reset(){const e=this;e.U=new e.K(e.P[0]),e.N=!1}update(e){this.N=!0,this.U.update(e)}digest(){const e=this,t=e.U.D(),n=new e.K(e.P[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},D=void 0!==h&&"function"==typeof h.getRandomValues,V="Invalid password",R="Invalid signature";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:"PBKDF2"},K=t.assign({hash:{name:"HMAC"}},M),P=t.assign({iterations:1e3,hash:{name:"SHA-1"}},M),U=["deriveBits"],N=[8,12,16],T=[16,24,32],W=10,H=[0,0,0,0],L="undefined",j="function",F=typeof h!=L,O=F&&h.subtle,q=F&&typeof O!=L,G=x.p,J=class{constructor(e){const t=this;t.T=[[[],[],[],[],[]],[[],[],[],[],[]]],t.T[0][0][0]||t.W();const n=t.T[0][4],r=t.T[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.H(e,0)}decrypt(e){return this.H(e,1)}W(){const e=this.T[0],t=this.T[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}H(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.T[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},Q=class{constructor(e,t){this.L=e,this.j=t,this.F=t}reset(){this.F=this.j}update(e){return this.O(this.L,e,this.F)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}O(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},X=I.B;let Y=F&&q&&typeof O.importKey==j,Z=F&&q&&typeof O.deriveBits==j;class $ extends p{constructor({password:e,signed:n,encryptionStrength:r}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:o,J:c,ready:f}=n;r?(await(async(e,t,n,r)=>{const i=await ne(e,t,n,se(r,0,N[t])),o=se(r,N[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,o,r,se(e,0,N[o]+2)),e=se(e,N[o]+2),c()):await f;const a=new i(e.length-W-(e.length-W)%E);t.enqueue(te(n,e,a,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;await c;const f=se(o,0,o.length-W),a=se(o,o.length-W);let l=new i;if(f.length){const e=oe(G,f);r.update(e);const t=n.update(e);l=ie(G,t)}if(t){const e=se(ie(G,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(R)}e.enqueue(l)}})}}class ee extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(N[t]));return re(r,await ne(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(te(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;await o;let c=new i;if(s.length){const e=t.update(oe(G,s));n.update(e),c=ie(G,e)}r.signature=ie(G,n.digest()).slice(0,W),e.enqueue(re(c,r.signature))}}),r=this}}function te(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=re(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=oe(G,se(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(ie(G,s),u+r)}return e.pending=se(t,u),n}async function ne(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Y)return I.importKey(t);try{return await O.importKey("raw",t,n,!1,s)}catch(e){return Y=!1,I.importKey(t)}})(0,c,K,0,U),a=await(async(e,t,n)=>{if(!Z)return I.M(t,e.salt,P.iterations,n);try{return await O.deriveBits(e,t,n)}catch(r){return Z=!1,I.M(t,e.salt,P.iterations,n)}})(t.assign({salt:o},P),f,8*(2*T[r]+2)),l=new i(a),u=oe(G,se(l,0,T[r])),h=oe(G,se(l,T[r],2*T[r])),d=se(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new Q(new J(u),e.from(H)),Z:new X(h)}),d}function re(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function se(e,t,n){return e.subarray(t,n)}function ie(e,t){return e.m(t)}function oe(e,t){return e.g(t)}class ce extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),ue(this,e)},transform(e,t){const n=this;if(n.password){const t=ae(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}t.enqueue(ae(n,e))}})}}class fe extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),ue(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(le(n,t),0),s=12}else r=new i(e.length),s=0;r.set(le(n,e),s),t.enqueue(r)}})}}function ae(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=he(e)^t[r],we(e,n[r]);return n}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=he(e)^t[r],we(e,t[r]);return n}function ue(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)we(e,n.charCodeAt(t))}function we(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=pe(r.imul(pe(s+de(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function he(e){const t=2|e.keys[2];return de(r.imul(t,1^t)>>>8)}function de(e){return 255&e}function pe(e){return 4294967295&e}const ye="deflate-raw";class me extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ge(super.readable);i&&!c||!f||([d,w]=d.tee(),w=Se(w,new z)),s&&(d=ve(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=Se(d,new fe(e)):(h=new ee(e),d=Se(d,h))),ke(u,d,(async()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=await w.getReader().read(),e=new l(e.value.buffer).getUint32(0)),u.signature=e}))}}class be extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ge(super.readable);o&&(i?d=Se(d,new ce(e)):(h=new $(e),d=Se(d,h))),a&&(d=ve(d,u,{chunkSize:t},r,n)),o&&!i||!c||([d,w]=d.tee(),w=Se(w,new z)),ke(this,d,(async()=>{if((!o||i)&&c){const e=await w.getReader().read(),t=new l(e.value.buffer);if(f!=t.getUint32(0,!1))throw new s(R)}}))}}function ge(e){return Se(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ke(e,n,r){n=Se(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function ve(e,t,n,r,s){try{e=Se(e,new(t&&r?r:s)(ye,n))}catch(r){if(!t)throw r;e=Se(e,new s(ye,n))}return e}function Se(e,t){return e.pipeThrough(t)}const ze="data";class Ce extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=me:s.startsWith("inflate")&&(i=be);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,"readable",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const xe=new a,_e=new a;let Ae=0;async function Ie(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>xe.set(Ae,e)));De({type:"pull",messageId:Ae}),Ae=(Ae+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));_e.set(Ae,t),De({type:ze,value:e,messageId:Ae}),Ae=(Ae+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new Ce(t,s);await o.pipeThrough(f).pipeTo(c,{preventAbort:!0});try{await c.close()}catch(e){}const{signature:a,size:l}=f;De({type:"close",result:{signature:a,size:l}})}catch(e){Ve(e)}}function De(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Ve(e){const{message:t,stack:n,code:r,name:s}=e;d({error:{message:t,stack:n,code:r,name:s}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&Ie(e),t==ze){const e=xe.get(n);xe.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=_e.get(n);_e.delete(n),e()}}catch(e){Ve(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ke(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Pe(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ke.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ke.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ke.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ke.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ke.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ke.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ke.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ke._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ue=Be([[144,8],[112,9],[24,7],[8,8]]);Pe.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ue[t]])));const Ne=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Re=r,i.Be=s}Pe.Ee=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Ne[t]]))),Pe.Me=new Pe(Pe.Ae,Ke.ze,257,286,15),Pe.Ke=new Pe(Pe.Ee,Ke.Ce,0,30,15),Pe.Pe=new Pe(null,Ke.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],He=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],Le=113,je=666,Fe=262;function Oe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function qe(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,R,B,E,M,K,P;const U=new Ke,N=new Ke,T=new Ke;let W,H,L,j,F,O;function q(){let t;for(t=0;286>t;t++)M[2*t]=0;for(t=0;30>t;t++)K[2*t]=0;for(t=0;19>t;t++)P[2*t]=0;M[512]=1,e.ue=e.we=0,H=L=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?P[2*n]+=i:0!==n?(n!=r&&P[2*n]++,P[32]++):i>10?P[36]++:P[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ue[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;O>16-r?(n=e,F|=n<<O&65535,Q(F),F=n>>>16-O,O+=r-16):(F|=e<<O&65535,O+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,P)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,P),o--),Y(16,P),X(o-3,2)):o>10?(Y(18,P),X(o-11,7)):(Y(17,P),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==O?(Q(F),F=0,O=0):8>O||(J(255&F),F>>>=8,O-=8)}function ee(t,n){let s,i,o;if(e.Ne[H]=t,e.Te[H]=255&n,H++,0===t?M[2*n]++:(L++,t--,M[2*(Ke.ge[n]+256+1)]++,K[2*Ke.Se(t)]++),0==(8191&H)&&V>2){for(s=8*H,i=C-k,o=0;30>o;o++)s+=K[2*o]*(5+Ke.Ce[o]);if(s>>>=3,L<r.floor(H/2)&&s<r.floor(i/2))return!0}return H==W-1}function te(t,n){let r,s,i,o,c=0;if(0!==H)do{r=e.Ne[c],s=e.Te[c],c++,0===r?Y(s,t):(i=Ke.ge[s],Y(i+256+1,t),o=Ke.ze[i],0!==o&&(s-=Ke.ke[i],X(s,o)),r--,i=Ke.Se(r),Y(i,n),o=Ke.Ce[i],0!==o&&(r-=Ke.ve[i],X(r,o)))}while(H>c);Y(256,t),j=t[513]}function ne(){O>8?Q(F):O>0&&J(255&F),F=0,O=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),j=8,Q(n),Q(~n),e.Ue.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(U.ne(e),N.ne(e),o=(()=>{let t;for(G(M,U.he),G(K,N.he),T.ne(e),t=18;t>=3&&0===P[2*Ke._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Pe.Ae,Pe.Ee)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(P[2*Ke._e[r]+1],3);Z(M,e-1),Z(K,t-1)})(U.he+1,N.he+1,o+1),te(M,K)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.We()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.He)return;e=t.Le(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.He)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=E;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];B>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],M=[],K=[],P=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&Oe(t,r[i+1],r[i],e.le)&&i++,!Oe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.je=(t,S,x,H,L,G)=>(H||(H=8),L||(L=8),G||(G=0),t.Fe=null,-1==S&&(S=6),1>L||L>9||8!=H||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Oe=e,a=x,f=1<<a,l=f-1,m=L+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],W=1<<L+6,e.Ue=new i(4*W),s=4*W,e.Ne=new o(W),e.Te=new i(W),V=S,R=G,(t=>(t.qe=t.Ge=0,t.Fe=null,e.pending=0,e.Je=0,n=Le,c=0,U.re=M,U.ie=Pe.Me,N.re=K,N.ie=Pe.Ke,T.re=P,T.ie=Pe.Pe,F=0,O=0,j=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,B=We[V].Ie,E=We[V].Ve,I=We[V].Re,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=Le&&n!=je?Re:(e.Te=null,e.Ne=null,e.Ue=null,d=null,h=null,u=null,e.Oe=null,n==Le?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Be!=We[t].Be&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,B=We[V].Ie,E=We[V].Ve,I=We[V].Re),R=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,B;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.He||n==je&&4!=i)return r.Fe=He[4],Re;if(0===r.tt)return r.Fe=He[7],-5;var E;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=Le,J((E=w)>>8&255),J(255&E)),0!==e.pending){if(t.We(),0===t.tt)return c=-1,0}else if(0===t.He&&I>=i&&4!=i)return t.Fe=He[7],-5;if(n==je&&0!==t.He)return r.Fe=He[7],-5;if(0!==t.He||0!==_||0!=i&&n!=je){switch(B=-1,We[V].Be){case 0:B=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:B=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=R&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:B=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=R&&(v=oe(s)),5>=v&&(1==R||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=B&&3!=B||(n=je),0==B||2==B)return 0===t.tt&&(c=-1),0;if(1==B){if(1==i)X(2,3),Y(256,Pe.Ae),$(),9>1+j+10-O&&(X(2,3),Y(256,Pe.Ae),$()),j=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.We(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Ge(){const e=this;e.nt=0,e.rt=0,e.He=0,e.qe=0,e.tt=0,e.Ge=0}function Je(e){const t=new Ge,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.je(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.He=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Fe);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.slice(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.He>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]||new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Fe);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.He>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Ge.prototype={je(e,t){const n=this;return n.Oe=new qe,t||(t=15),n.Oe.je(n,e,t)},Ye(e){const t=this;return t.Oe?t.Oe.Ye(t,e):Re},Qe(){const e=this;if(!e.Oe)return Re;const t=e.Oe.Qe();return e.Oe=null,t},Xe(e,t){const n=this;return n.Oe?n.Oe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Oe?n.Oe.Ze(n,e,t):Re},Le(e,t,n){const r=this;let s=r.He;return s>n&&(s=n),0===s?0:(r.He-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},We(){const e=this;let t=e.Oe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Oe.Ue.subarray(e.Oe.Je,e.Oe.Je+t),e.rt),e.rt+=t,e.Oe.Je+=t,e.Ge+=t,e.tt-=t,e.Oe.pending-=t,0===e.Oe.pending&&(e.Oe.Je=0))}};const Qe=-2,Xe=-3,Ye=-5,Ze=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],$e=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],et=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],tt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],nt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],rt=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],st=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function it(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Xe;if(0>(I-=n[g]))return Xe;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Xe;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ye:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Xe?f.Fe="oversubscribed dynamic bit lengths tree":a!=Ye&&0!==r[0]||(f.Fe="incomplete dynamic bit lengths tree",a=Xe),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,tt,nt,a,i,u,e,t),0!=h||0===i[0]?(h==Xe?w.Fe="oversubscribed literal/length tree":-4!=h&&(w.Fe="incomplete literal/length tree",h=Xe),h):(c(288),h=o(s,n,r,0,rt,st,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Xe?w.Fe="oversubscribed distance tree":h==Ye?(w.Fe="incomplete distance tree",h=Xe):-4!=h&&(w.Fe="empty distance tree with lengths",h=Xe),h):0)}}function ot(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.He,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=Ze[e],g=Ze[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&Ze[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&Ze[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Fe="invalid distance code",k=c.He-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.He=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Xe;f+=a[z+2],f+=w&Ze[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.He-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.He=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Fe="invalid literal/length code",k=c.He-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.He=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Xe);if(f+=a[z+2],f+=w&Ze[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.He-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.He=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.He,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.He,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&Ze[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Fe="invalid literal/length code",m=Xe,e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&Ze[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&Ze[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Fe="invalid distance code",m=Xe,e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&Ze[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Xe,e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Qe,e.ot=x,e.ct=_,y.He=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}it.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=$e,r[0]=et,0);const ct=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function ft(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ot;let h=0,d=new f(4320);const p=new it;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ye&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ye&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.He,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],it.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Fe="invalid block type",t=Xe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Fe="invalid stored block lengths",t=Xe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.Le(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Fe="too many length or distance symbols",t=Xe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ct[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ct[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Xe&&(r=null,s=9),n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&Ze[i]))+1],w=d[3*(u[0]+(f&Ze[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&Ze[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Fe="invalid bit length repeat",t=Xe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Xe&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.He,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Xe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Qe,n.ot=f,n.ct=y,e.He=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const at=13,lt=[0,0,255,255];function ut(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Fe=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Qe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Fe=null,e.kt=null,8>r||r>15?(e.Ct(n),Qe):(e.zt=r,n.gt.kt=new ft(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Qe;const s=e.gt;for(t=4==t?Ye:0,n=Ye;;)switch(s.mode){case 0:if(0===e.He)return n;if(n=t,e.He--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=at,e.Fe="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=at,e.Fe="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.He)return n;if(n=t,e.He--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=at,e.Fe="incorrect header check",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.He)return n;n=t,e.He--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.He)return n;n=t,e.He--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.He)return n;n=t,e.He--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.He?n:(n=t,e.He--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=at,e.Fe="need dictionary",s.marker=0,Qe;case 7:if(n=s.kt.ut(e,n),n==Xe){s.mode=at,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.He=0,1;case at:return Xe;default:return Qe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Qe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Qe;const c=e.gt;if(c.mode!=at&&(c.mode=at,c.marker=0),0===(n=e.He))return Ye;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==lt[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.He=n,c.marker=s,4!=s?Xe:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Qe}function wt(){}function ht(e){const t=new wt,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.He=e.length;do{if(t.rt=0,t.tt=n,0!==t.He||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ye){if(0!==t.He)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Fe);if((c||1===a)&&t.He===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.slice(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.He>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]||new i,l}},this.flush=()=>{t.Ct()}}wt.prototype={xt(e){const t=this;return t.gt=new ut,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Qe},Ct(){const e=this;if(!e.gt)return Qe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Qe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Qe},ft(e){return this.et[e]},Le(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Je,self.Inflate=ht};\n'
        ], {
            type: "text/javascript"
        }));
    e({
        workerScripts: {
            inflate: [
                t
            ],
            deflate: [
                t
            ]
        }
    });
}
const ERR_ITERATOR_COMPLETED_TOO_SOON = "Writer iterator completed too soon";
const HTTP_HEADER_CONTENT_TYPE = "Content-Type";
const DEFAULT_CHUNK_SIZE = 64 * 1024;
const PROPERTY_NAME_WRITABLE = "writable";
class Stream {
    constructor(){
        this.size = 0;
    }
    init() {
        this.initialized = true;
    }
}
class Reader extends Stream {
    get readable() {
        const reader = this;
        const { chunkSize =DEFAULT_CHUNK_SIZE  } = reader;
        const readable = new ReadableStream({
            start () {
                this.chunkOffset = 0;
            },
            async pull (controller) {
                const { offset =0 , size , diskNumberStart  } = readable;
                const { chunkOffset  } = this;
                controller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));
                if (chunkOffset + chunkSize > size) {
                    controller.close();
                } else {
                    this.chunkOffset += chunkSize;
                }
            }
        });
        return readable;
    }
}
class BlobReader extends Reader {
    constructor(blob){
        super();
        Object.assign(this, {
            blob,
            size: blob.size
        });
    }
    async readUint8Array(offset, length) {
        const reader = this;
        const offsetEnd = offset + length;
        const blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;
        return new Uint8Array(await blob.arrayBuffer());
    }
}
class BlobWriter extends Stream {
    constructor(contentType){
        super();
        const writer = this;
        const transformStream = new TransformStream();
        const headers = [];
        if (contentType) {
            headers.push([
                HTTP_HEADER_CONTENT_TYPE,
                contentType
            ]);
        }
        Object.defineProperty(writer, PROPERTY_NAME_WRITABLE, {
            get () {
                return transformStream.writable;
            }
        });
        writer.blob = new Response(transformStream.readable, {
            headers
        }).blob();
    }
    getData() {
        return this.blob;
    }
}
class TextWriter extends BlobWriter {
    constructor(encoding){
        super(encoding);
        Object.assign(this, {
            encoding,
            utf8: !encoding || encoding.toLowerCase() == "utf-8"
        });
    }
    async getData() {
        const { encoding , utf8  } = this;
        const blob = await super.getData();
        if (blob.text && utf8) {
            return blob.text();
        } else {
            const reader = new FileReader();
            return new Promise((resolve, reject)=>{
                Object.assign(reader, {
                    onload: ({ target  })=>resolve(target.result),
                    onerror: ()=>reject(reader.error)
                });
                reader.readAsText(blob, encoding);
            });
        }
    }
}
class Uint8ArrayReader extends Reader {
    constructor(array){
        super();
        Object.assign(this, {
            array,
            size: array.length
        });
    }
    readUint8Array(index, length) {
        return this.array.slice(index, index + length);
    }
}
class SplitDataReader extends Reader {
    constructor(readers){
        super();
        this.readers = readers;
    }
    async init() {
        super.init();
        const reader = this;
        const { readers  } = reader;
        reader.lastDiskNumber = 0;
        await Promise.all(readers.map(async (diskReader)=>{
            await diskReader.init();
            reader.size += diskReader.size;
        }));
    }
    async readUint8Array(offset, length, diskNumber = 0) {
        const reader = this;
        const { readers  } = this;
        let result;
        let currentDiskNumber = diskNumber;
        if (currentDiskNumber == -1) {
            currentDiskNumber = readers.length - 1;
        }
        let currentReaderOffset = offset;
        while(currentReaderOffset >= readers[currentDiskNumber].size){
            currentReaderOffset -= readers[currentDiskNumber].size;
            currentDiskNumber++;
        }
        const currentReader = readers[currentDiskNumber];
        const currentReaderSize = currentReader.size;
        if (currentReaderOffset + length <= currentReaderSize) {
            result = await readUint8Array(currentReader, currentReaderOffset, length);
        } else {
            const chunkLength = currentReaderSize - currentReaderOffset;
            result = new Uint8Array(length);
            result.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));
            result.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);
        }
        reader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);
        return result;
    }
}
class SplitDataWriter extends Stream {
    constructor(writerGenerator, maxSize = 4294967295){
        super();
        const zipWriter = this;
        Object.assign(zipWriter, {
            diskNumber: 0,
            diskOffset: 0,
            size: 0,
            maxSize,
            availableSize: maxSize
        });
        let diskSourceWriter, diskWritable, diskWriter;
        const writable = new WritableStream({
            async write (chunk) {
                const { availableSize  } = zipWriter;
                if (!diskWriter) {
                    const { value , done  } = await writerGenerator.next();
                    if (done && !value) {
                        throw new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);
                    } else {
                        diskSourceWriter = value;
                        diskSourceWriter.size = 0;
                        if (diskSourceWriter.maxSize) {
                            zipWriter.maxSize = diskSourceWriter.maxSize;
                        }
                        zipWriter.availableSize = zipWriter.maxSize;
                        await initStream(diskSourceWriter);
                        diskWritable = value.writable;
                        diskWriter = diskWritable.getWriter();
                    }
                    await this.write(chunk);
                } else if (chunk.length >= availableSize) {
                    await writeChunk(chunk.slice(0, availableSize));
                    await closeDisk();
                    zipWriter.diskOffset += diskSourceWriter.size;
                    zipWriter.diskNumber++;
                    diskWriter = null;
                    await this.write(chunk.slice(availableSize));
                } else {
                    await writeChunk(chunk);
                }
            },
            async close () {
                await diskWriter.ready;
                await closeDisk();
            }
        });
        Object.defineProperty(zipWriter, PROPERTY_NAME_WRITABLE, {
            get () {
                return writable;
            }
        });
        async function writeChunk(chunk) {
            const chunkLength = chunk.length;
            if (chunkLength) {
                await diskWriter.ready;
                await diskWriter.write(chunk);
                diskSourceWriter.size += chunkLength;
                zipWriter.size += chunkLength;
                zipWriter.availableSize -= chunkLength;
            }
        }
        async function closeDisk() {
            diskWritable.size = diskSourceWriter.size;
            await diskWriter.close();
        }
    }
}
async function initStream(stream, initSize) {
    if (stream.init && !stream.initialized) {
        await stream.init(initSize);
    }
}
function initReader(reader) {
    if (Array.isArray(reader)) {
        reader = new SplitDataReader(reader);
    }
    if (reader instanceof ReadableStream) {
        reader = {
            readable: reader
        };
    }
    return reader;
}
function initWriter(writer) {
    if (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {
        writer = new SplitDataWriter(writer);
    }
    if (writer instanceof WritableStream) {
        writer = {
            writable: writer
        };
    }
    const { writable  } = writer;
    if (writable.size === UNDEFINED_VALUE) {
        writable.size = 0;
    }
    const splitZipFile = writer instanceof SplitDataWriter;
    if (!splitZipFile) {
        Object.assign(writer, {
            diskNumber: 0,
            diskOffset: 0,
            availableSize: Infinity,
            maxSize: Infinity
        });
    }
    return writer;
}
function readUint8Array(reader, offset, size, diskNumber) {
    return reader.readUint8Array(offset, size, diskNumber);
}
const CP437 = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split("");
const VALID_CP437 = CP437.length == 256;
function decodeCP437(stringValue) {
    if (VALID_CP437) {
        let result = "";
        for(let indexCharacter = 0; indexCharacter < stringValue.length; indexCharacter++){
            result += CP437[stringValue[indexCharacter]];
        }
        return result;
    } else {
        return new TextDecoder().decode(stringValue);
    }
}
function decodeText(value, encoding) {
    if (encoding && encoding.trim().toLowerCase() == "cp437") {
        return decodeCP437(value);
    } else {
        return new TextDecoder(encoding).decode(value);
    }
}
const PROPERTY_NAME_FILENAME = "filename";
const PROPERTY_NAME_RAW_FILENAME = "rawFilename";
const PROPERTY_NAME_COMMENT = "comment";
const PROPERTY_NAME_RAW_COMMENT = "rawComment";
const PROPERTY_NAME_UNCOMPPRESSED_SIZE = "uncompressedSize";
const PROPERTY_NAME_COMPPRESSED_SIZE = "compressedSize";
const PROPERTY_NAME_OFFSET = "offset";
const PROPERTY_NAME_DISK_NUMBER_START = "diskNumberStart";
const PROPERTY_NAME_LAST_MODIFICATION_DATE = "lastModDate";
const PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE = "rawLastModDate";
const PROPERTY_NAME_LAST_ACCESS_DATE = "lastAccessDate";
const PROPERTY_NAME_RAW_LAST_ACCESS_DATE = "rawLastAccessDate";
const PROPERTY_NAME_CREATION_DATE = "creationDate";
const PROPERTY_NAME_RAW_CREATION_DATE = "rawCreationDate";
const PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE = "internalFileAttribute";
const PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE = "externalFileAttribute";
const PROPERTY_NAME_MS_DOS_COMPATIBLE = "msDosCompatible";
const PROPERTY_NAME_ZIP64 = "zip64";
const PROPERTY_NAMES = [
    PROPERTY_NAME_FILENAME,
    PROPERTY_NAME_RAW_FILENAME,
    PROPERTY_NAME_COMPPRESSED_SIZE,
    PROPERTY_NAME_UNCOMPPRESSED_SIZE,
    PROPERTY_NAME_LAST_MODIFICATION_DATE,
    PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE,
    PROPERTY_NAME_COMMENT,
    PROPERTY_NAME_RAW_COMMENT,
    PROPERTY_NAME_LAST_ACCESS_DATE,
    PROPERTY_NAME_CREATION_DATE,
    PROPERTY_NAME_OFFSET,
    PROPERTY_NAME_DISK_NUMBER_START,
    PROPERTY_NAME_DISK_NUMBER_START,
    PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE,
    PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE,
    PROPERTY_NAME_MS_DOS_COMPATIBLE,
    PROPERTY_NAME_ZIP64,
    "directory",
    "bitFlag",
    "encrypted",
    "signature",
    "filenameUTF8",
    "commentUTF8",
    "compressionMethod",
    "version",
    "versionMadeBy",
    "extraField",
    "rawExtraField",
    "extraFieldZip64",
    "extraFieldUnicodePath",
    "extraFieldUnicodeComment",
    "extraFieldAES",
    "extraFieldNTFS",
    "extraFieldExtendedTimestamp"
];
class Entry {
    constructor(data){
        PROPERTY_NAMES.forEach((name)=>this[name] = data[name]);
    }
}
const ERR_BAD_FORMAT = "File format is not recognized";
const ERR_EOCDR_NOT_FOUND = "End of central directory not found";
const ERR_EOCDR_ZIP64_NOT_FOUND = "End of Zip64 central directory not found";
const ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = "End of Zip64 central directory locator not found";
const ERR_CENTRAL_DIRECTORY_NOT_FOUND = "Central directory header not found";
const ERR_LOCAL_FILE_HEADER_NOT_FOUND = "Local file header not found";
const ERR_EXTRAFIELD_ZIP64_NOT_FOUND = "Zip64 extra field not found";
const ERR_ENCRYPTED = "File contains encrypted entry";
const ERR_UNSUPPORTED_ENCRYPTION = "Encryption method not supported";
const ERR_UNSUPPORTED_COMPRESSION = "Compression method not supported";
const ERR_SPLIT_ZIP_FILE = "Split zip file";
const CHARSET_UTF8 = "utf-8";
const CHARSET_CP437 = "cp437";
const ZIP64_PROPERTIES = [
    [
        PROPERTY_NAME_UNCOMPPRESSED_SIZE,
        0xffffffff
    ],
    [
        PROPERTY_NAME_COMPPRESSED_SIZE,
        0xffffffff
    ],
    [
        PROPERTY_NAME_OFFSET,
        0xffffffff
    ],
    [
        PROPERTY_NAME_DISK_NUMBER_START,
        0xffff
    ]
];
const ZIP64_EXTRACTION = {
    [0xffff]: {
        getValue: getUint32,
        bytes: 4
    },
    [0xffffffff]: {
        getValue: getBigUint64,
        bytes: 8
    }
};
class ZipReader {
    constructor(reader, options = {}){
        Object.assign(this, {
            reader: initReader(reader),
            options,
            config: getConfiguration()
        });
    }
    async *getEntriesGenerator(options = {}) {
        const zipReader = this;
        let { reader  } = zipReader;
        const { config  } = zipReader;
        await initStream(reader);
        if (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {
            reader = new BlobReader(await new Response(reader.readable).blob());
            await initStream(reader);
        }
        if (reader.size < 22) {
            throw new Error(ERR_BAD_FORMAT);
        }
        reader.chunkSize = getChunkSize(config);
        const endOfDirectoryInfo = await seekSignature(reader, 0x06054b50, reader.size, 22, 0xffff * 16);
        if (!endOfDirectoryInfo) {
            const signatureArray = await readUint8Array(reader, 0, 4);
            const signatureView = getDataView(signatureArray);
            if (getUint32(signatureView) == 0x08074b50) {
                throw new Error(ERR_SPLIT_ZIP_FILE);
            } else {
                throw new Error(ERR_EOCDR_NOT_FOUND);
            }
        }
        const endOfDirectoryView = getDataView(endOfDirectoryInfo);
        let directoryDataLength = getUint32(endOfDirectoryView, 12);
        let directoryDataOffset = getUint32(endOfDirectoryView, 16);
        const commentOffset = endOfDirectoryInfo.offset;
        const commentLength = getUint16(endOfDirectoryView, 20);
        const appendedDataOffset = commentOffset + 22 + commentLength;
        let lastDiskNumber = getUint16(endOfDirectoryView, 4);
        const expectedLastDiskNumber = reader.lastDiskNumber || 0;
        let diskNumber = getUint16(endOfDirectoryView, 6);
        let filesLength = getUint16(endOfDirectoryView, 8);
        let prependedDataLength = 0;
        let startOffset = 0;
        if (directoryDataOffset == 0xffffffff || directoryDataLength == 0xffffffff || filesLength == 0xffff || diskNumber == 0xffff) {
            const endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - 20, 20);
            const endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);
            if (getUint32(endOfDirectoryLocatorView, 0) != 0x07064b50) {
                throw new Error(ERR_EOCDR_ZIP64_NOT_FOUND);
            }
            directoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);
            let endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, 56, -1);
            let endOfDirectoryView = getDataView(endOfDirectoryArray);
            const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - 20 - 56;
            if (getUint32(endOfDirectoryView, 0) != 0x06064b50 && directoryDataOffset != expectedDirectoryDataOffset) {
                const originalDirectoryDataOffset = directoryDataOffset;
                directoryDataOffset = expectedDirectoryDataOffset;
                prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
                endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);
                endOfDirectoryView = getDataView(endOfDirectoryArray);
            }
            if (getUint32(endOfDirectoryView, 0) != 0x06064b50) {
                throw new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);
            }
            if (lastDiskNumber == 0xffff) {
                lastDiskNumber = getUint32(endOfDirectoryView, 16);
            }
            if (diskNumber == 0xffff) {
                diskNumber = getUint32(endOfDirectoryView, 20);
            }
            if (filesLength == 0xffff) {
                filesLength = getBigUint64(endOfDirectoryView, 32);
            }
            if (directoryDataLength == 0xffffffff) {
                directoryDataLength = getBigUint64(endOfDirectoryView, 40);
            }
            directoryDataOffset -= directoryDataLength;
        }
        if (expectedLastDiskNumber != lastDiskNumber) {
            throw new Error(ERR_SPLIT_ZIP_FILE);
        }
        if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
            throw new Error(ERR_BAD_FORMAT);
        }
        let offset = 0;
        let directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);
        let directoryView = getDataView(directoryArray);
        if (directoryDataLength) {
            const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;
            if (getUint32(directoryView, offset) != 0x02014b50 && directoryDataOffset != expectedDirectoryDataOffset) {
                const originalDirectoryDataOffset = directoryDataOffset;
                directoryDataOffset = expectedDirectoryDataOffset;
                prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
                directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);
                directoryView = getDataView(directoryArray);
            }
        }
        if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
            throw new Error(ERR_BAD_FORMAT);
        }
        const filenameEncoding = getOptionValue(zipReader, options, "filenameEncoding");
        const commentEncoding = getOptionValue(zipReader, options, "commentEncoding");
        for(let indexFile = 0; indexFile < filesLength; indexFile++){
            const fileEntry = new ZipEntry(reader, config, zipReader.options);
            if (getUint32(directoryView, offset) != 0x02014b50) {
                throw new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);
            }
            readCommonHeader(fileEntry, directoryView, offset + 6);
            const languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);
            const filenameOffset = offset + 46;
            const extraFieldOffset = filenameOffset + fileEntry.filenameLength;
            const commentOffset = extraFieldOffset + fileEntry.extraFieldLength;
            const versionMadeBy = getUint16(directoryView, offset + 4);
            const msDosCompatible = (versionMadeBy & 0) == 0;
            const rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);
            const commentLength = getUint16(directoryView, offset + 32);
            const endOffset = commentOffset + commentLength;
            const rawComment = directoryArray.subarray(commentOffset, endOffset);
            const filenameUTF8 = languageEncodingFlag;
            const commentUTF8 = languageEncodingFlag;
            const directory = msDosCompatible && (getUint8(directoryView, offset + 38) & 0x10) == 0x10;
            const offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;
            Object.assign(fileEntry, {
                versionMadeBy,
                msDosCompatible,
                compressedSize: 0,
                uncompressedSize: 0,
                commentLength,
                directory,
                offset: offsetFileEntry,
                diskNumberStart: getUint16(directoryView, offset + 34),
                internalFileAttribute: getUint16(directoryView, offset + 36),
                externalFileAttribute: getUint32(directoryView, offset + 38),
                rawFilename,
                filenameUTF8,
                commentUTF8,
                rawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)
            });
            const [filename, comment] = await Promise.all([
                decodeText(rawFilename, filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437),
                decodeText(rawComment, commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437)
            ]);
            Object.assign(fileEntry, {
                rawComment,
                filename,
                comment,
                directory: directory || filename.endsWith(DIRECTORY_SIGNATURE)
            });
            startOffset = Math.max(offsetFileEntry, startOffset);
            await readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);
            const entry = new Entry(fileEntry);
            entry.getData = (writer, options)=>fileEntry.getData(writer, entry, options);
            offset = endOffset;
            const { onprogress  } = options;
            if (onprogress) {
                try {
                    await onprogress(indexFile + 1, filesLength, new Entry(fileEntry));
                } catch (_error) {}
            }
            yield entry;
        }
        const extractPrependedData = getOptionValue(zipReader, options, "extractPrependedData");
        const extractAppendedData = getOptionValue(zipReader, options, "extractAppendedData");
        if (extractPrependedData) {
            zipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();
        }
        zipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();
        if (extractAppendedData) {
            zipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();
        }
        return true;
    }
    async getEntries(options = {}) {
        const entries = [];
        for await (const entry of this.getEntriesGenerator(options)){
            entries.push(entry);
        }
        return entries;
    }
    async close() {}
}
class ZipEntry {
    constructor(reader, config, options){
        Object.assign(this, {
            reader,
            config,
            options
        });
    }
    async getData(writer, fileEntry, options = {}) {
        const zipEntry = this;
        const { reader , offset , diskNumberStart , extraFieldAES , compressionMethod , config , bitFlag , signature , rawLastModDate , uncompressedSize , compressedSize  } = zipEntry;
        const localDirectory = zipEntry.localDirectory = {};
        const dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);
        const dataView = getDataView(dataArray);
        let password = getOptionValue(zipEntry, options, "password");
        password = password && password.length && password;
        if (extraFieldAES) {
            if (extraFieldAES.originalCompressionMethod != 0x63) {
                throw new Error(ERR_UNSUPPORTED_COMPRESSION);
            }
        }
        if (compressionMethod != 0x00 && compressionMethod != 0x08) {
            throw new Error(ERR_UNSUPPORTED_COMPRESSION);
        }
        if (getUint32(dataView, 0) != 0x04034b50) {
            throw new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);
        }
        readCommonHeader(localDirectory, dataView, 4);
        localDirectory.rawExtraField = localDirectory.extraFieldLength ? await readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) : new Uint8Array();
        await readCommonFooter(zipEntry, localDirectory, dataView, 4);
        Object.assign(fileEntry, {
            lastAccessDate: localDirectory.lastAccessDate,
            creationDate: localDirectory.creationDate
        });
        const encrypted = zipEntry.encrypted && localDirectory.encrypted;
        const zipCrypto = encrypted && !extraFieldAES;
        if (encrypted) {
            if (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {
                throw new Error(ERR_UNSUPPORTED_ENCRYPTION);
            } else if (!password) {
                throw new Error(ERR_ENCRYPTED);
            }
        }
        const dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;
        const readable = reader.readable;
        readable.diskNumberStart = diskNumberStart;
        readable.offset = dataOffset;
        const size = readable.size = compressedSize;
        const signal = getOptionValue(zipEntry, options, "signal");
        writer = initWriter(writer);
        await initStream(writer, uncompressedSize);
        const { writable  } = writer;
        const { onstart , onprogress , onend  } = options;
        const workerOptions = {
            options: {
                codecType: CODEC_INFLATE,
                password,
                zipCrypto,
                encryptionStrength: extraFieldAES && extraFieldAES.strength,
                signed: getOptionValue(zipEntry, options, "checkSignature"),
                passwordVerification: zipCrypto && (bitFlag.dataDescriptor ? rawLastModDate >>> 8 & 0xFF : signature >>> 24 & 0xFF),
                signature,
                compressed: compressionMethod != 0,
                encrypted,
                useWebWorkers: getOptionValue(zipEntry, options, "useWebWorkers"),
                useCompressionStream: getOptionValue(zipEntry, options, "useCompressionStream"),
                transferStreams: getOptionValue(zipEntry, options, "transferStreams")
            },
            config,
            streamOptions: {
                signal,
                size,
                onstart,
                onprogress,
                onend
            }
        };
        writable.size += (await runWorker1({
            readable,
            writable
        }, workerOptions)).size;
        const preventClose = getOptionValue(zipEntry, options, "preventClose");
        if (!preventClose) {
            await writable.close();
        }
        return writer.getData ? writer.getData() : writable;
    }
}
function readCommonHeader(directory, dataView, offset) {
    const rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);
    const encrypted = (rawBitFlag & 0x01) == 0x01;
    const rawLastModDate = getUint32(dataView, offset + 6);
    Object.assign(directory, {
        encrypted,
        version: getUint16(dataView, offset),
        bitFlag: {
            level: (rawBitFlag & 0x06) >> 1,
            dataDescriptor: (rawBitFlag & 0x0008) == 0x0008,
            languageEncodingFlag: (rawBitFlag & 0x0800) == 0x0800
        },
        rawLastModDate,
        lastModDate: getDate(rawLastModDate),
        filenameLength: getUint16(dataView, offset + 22),
        extraFieldLength: getUint16(dataView, offset + 24)
    });
}
async function readCommonFooter(fileEntry, directory, dataView, offset) {
    const { rawExtraField  } = directory;
    const extraField = directory.extraField = new Map();
    const rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));
    let offsetExtraField = 0;
    try {
        while(offsetExtraField < rawExtraField.length){
            const type = getUint16(rawExtraFieldView, offsetExtraField);
            const size = getUint16(rawExtraFieldView, offsetExtraField + 2);
            extraField.set(type, {
                type,
                data: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)
            });
            offsetExtraField += 4 + size;
        }
    } catch (_error) {}
    const compressionMethod = getUint16(dataView, offset + 4);
    Object.assign(directory, {
        signature: getUint32(dataView, offset + 10),
        uncompressedSize: getUint32(dataView, offset + 18),
        compressedSize: getUint32(dataView, offset + 14)
    });
    const extraFieldZip64 = extraField.get(0x0001);
    if (extraFieldZip64) {
        readExtraFieldZip64(extraFieldZip64, directory);
        directory.extraFieldZip64 = extraFieldZip64;
    }
    const extraFieldUnicodePath = extraField.get(0x7075);
    if (extraFieldUnicodePath) {
        await readExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);
        directory.extraFieldUnicodePath = extraFieldUnicodePath;
    }
    const extraFieldUnicodeComment = extraField.get(0x6375);
    if (extraFieldUnicodeComment) {
        await readExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);
        directory.extraFieldUnicodeComment = extraFieldUnicodeComment;
    }
    const extraFieldAES = extraField.get(0x9901);
    if (extraFieldAES) {
        readExtraFieldAES(extraFieldAES, directory, compressionMethod);
        directory.extraFieldAES = extraFieldAES;
    } else {
        directory.compressionMethod = compressionMethod;
    }
    const extraFieldNTFS = extraField.get(0x000a);
    if (extraFieldNTFS) {
        readExtraFieldNTFS(extraFieldNTFS, directory);
        directory.extraFieldNTFS = extraFieldNTFS;
    }
    const extraFieldExtendedTimestamp = extraField.get(0x5455);
    if (extraFieldExtendedTimestamp) {
        readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory);
        directory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;
    }
}
function readExtraFieldZip64(extraFieldZip64, directory) {
    directory.zip64 = true;
    const extraFieldView = getDataView(extraFieldZip64.data);
    const missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max])=>directory[propertyName] == max);
    for(let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++){
        const [propertyName, max] = missingProperties[indexMissingProperty];
        if (directory[propertyName] == max) {
            const extraction = ZIP64_EXTRACTION[max];
            directory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);
            offset += extraction.bytes;
        } else if (extraFieldZip64[propertyName]) {
            throw new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);
        }
    }
}
async function readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {
    const extraFieldView = getDataView(extraFieldUnicode.data);
    const crc32 = new Crc32();
    crc32.append(fileEntry[rawPropertyName]);
    const dataViewSignature = getDataView(new Uint8Array(4));
    dataViewSignature.setUint32(0, crc32.get(), true);
    Object.assign(extraFieldUnicode, {
        version: getUint8(extraFieldView, 0),
        signature: getUint32(extraFieldView, 1),
        [propertyName]: await decodeText(extraFieldUnicode.data.subarray(5)),
        valid: !fileEntry.bitFlag.languageEncodingFlag && extraFieldUnicode.signature == getUint32(dataViewSignature, 0)
    });
    if (extraFieldUnicode.valid) {
        directory[propertyName] = extraFieldUnicode[propertyName];
        directory[propertyName + "UTF8"] = true;
    }
}
function readExtraFieldAES(extraFieldAES, directory, compressionMethod) {
    const extraFieldView = getDataView(extraFieldAES.data);
    const strength = getUint8(extraFieldView, 4);
    Object.assign(extraFieldAES, {
        vendorVersion: getUint8(extraFieldView, 0),
        vendorId: getUint8(extraFieldView, 2),
        strength,
        originalCompressionMethod: compressionMethod,
        compressionMethod: getUint16(extraFieldView, 5)
    });
    directory.compressionMethod = extraFieldAES.compressionMethod;
}
function readExtraFieldNTFS(extraFieldNTFS, directory) {
    const extraFieldView = getDataView(extraFieldNTFS.data);
    let offsetExtraField = 4;
    let tag1Data;
    try {
        while(offsetExtraField < extraFieldNTFS.data.length && !tag1Data){
            const tagValue = getUint16(extraFieldView, offsetExtraField);
            const attributeSize = getUint16(extraFieldView, offsetExtraField + 2);
            if (tagValue == 0x0001) {
                tag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);
            }
            offsetExtraField += 4 + attributeSize;
        }
    } catch (_error) {}
    try {
        if (tag1Data && tag1Data.length == 24) {
            const tag1View = getDataView(tag1Data);
            const rawLastModDate = tag1View.getBigUint64(0, true);
            const rawLastAccessDate = tag1View.getBigUint64(8, true);
            const rawCreationDate = tag1View.getBigUint64(16, true);
            Object.assign(extraFieldNTFS, {
                rawLastModDate,
                rawLastAccessDate,
                rawCreationDate
            });
            const lastModDate = getDateNTFS(rawLastModDate);
            const lastAccessDate = getDateNTFS(rawLastAccessDate);
            const creationDate = getDateNTFS(rawCreationDate);
            const extraFieldData = {
                lastModDate,
                lastAccessDate,
                creationDate
            };
            Object.assign(extraFieldNTFS, extraFieldData);
            Object.assign(directory, extraFieldData);
        }
    } catch (_error) {}
}
function readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory) {
    const extraFieldView = getDataView(extraFieldExtendedTimestamp.data);
    const flags = getUint8(extraFieldView, 0);
    const timeProperties = [];
    const timeRawProperties = [];
    if ((flags & 0x1) == 0x1) {
        timeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);
        timeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);
    }
    if ((flags & 0x2) == 0x2) {
        timeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);
        timeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);
    }
    if ((flags & 0x4) == 0x4) {
        timeProperties.push(PROPERTY_NAME_CREATION_DATE);
        timeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);
    }
    let offset = 1;
    timeProperties.forEach((propertyName, indexProperty)=>{
        if (extraFieldExtendedTimestamp.data.length >= offset + 4) {
            const time = getUint32(extraFieldView, offset);
            directory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);
            const rawPropertyName = timeRawProperties[indexProperty];
            extraFieldExtendedTimestamp[rawPropertyName] = time;
        }
        offset += 4;
    });
}
async function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {
    const signatureArray = new Uint8Array(4);
    const signatureView = getDataView(signatureArray);
    setUint32(signatureView, 0, signature);
    const maximumBytes = minimumBytes + maximumLength;
    return await seek(minimumBytes) || await seek(Math.min(maximumBytes, startOffset));
    async function seek(length) {
        const offset = startOffset - length;
        const bytes = await readUint8Array(reader, offset, length);
        for(let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--){
            if (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] && bytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {
                return {
                    offset: offset + indexByte,
                    buffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer
                };
            }
        }
    }
}
function getOptionValue(zipReader, options, name) {
    return options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];
}
function getDate(timeRaw) {
    const date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;
    try {
        return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);
    } catch (_error) {}
}
function getDateNTFS(timeRaw) {
    return new Date(Number(timeRaw / BigInt(10000) - BigInt(11644473600000)));
}
function getUint8(view, offset) {
    return view.getUint8(offset);
}
function getUint16(view, offset) {
    return view.getUint16(offset, true);
}
function getUint32(view, offset) {
    return view.getUint32(offset, true);
}
function getBigUint64(view, offset) {
    return Number(view.getBigUint64(offset, true));
}
function setUint32(view, offset, value) {
    view.setUint32(offset, value, true);
}
function getDataView(array) {
    return new DataView(array.buffer);
}
new Uint8Array([
    0x07,
    0x00,
    0x02,
    0x00,
    0x41,
    0x45,
    0x03,
    0x00,
    0x00
]);
const importMeta = {
    url: "https://deno.land/x/zipjs@v2.6.63/lib/zip-fs.js",
    main: false
};
let baseURL;
try {
    baseURL = importMeta.url;
} catch (_error) {}
configure({
    baseURL
});
e(configure);
configure({
    Deflate: ZipDeflate,
    Inflate: ZipInflate
});
const BusinessTypes = {
    A25: "General Capacity Information",
    A29: "Already allocated capacity (AAC)",
    A43: "Requested capacity (without price)",
    A46: "System Operator redispatching",
    A53: "Planned maintenance",
    A54: "Unplanned outage",
    A85: "Internal redispatch",
    A95: "Frequency containment reserve",
    A96: "Automatic frequency restoration reserve",
    A97: "Manual frequency restoration reserve",
    A98: "Replacement reserve",
    B01: "Interconnector network evolution",
    B02: "Interconnector network dismantling",
    B03: "Counter trade",
    B04: "Congestion costs",
    B05: "Capacity allocated (including price)",
    B07: "Auction revenue",
    B08: "Total nominated capacity",
    B09: "Net position",
    B10: "Congestion income",
    B11: "Production unit",
    B33: "Area Control Error",
    B74: "Offer",
    B75: "Need",
    B95: "Procured capacity",
    C22: "Shared Balancing Reserve Capacity",
    C23: "Share of reserve capacity",
    C24: "Actual reserve capacity"
};
const ISO8601DurToSec = (pt)=>{
    pt = pt.toUpperCase().trim();
    switch(pt){
        case "PT60M":
            return 3600;
        case "PT30M":
            return 1800;
        case "PT15M":
            return 900;
        case "PT1M":
            return 60;
        case "P1D":
            return 86400;
    }
    const iso8601DurationRegex = /(-)?P(?:([.,\d]+)Y)?(?:([.,\d]+)M)?(?:([.,\d]+)W)?(?:([.,\d]+)D)?T(?:([.,\d]+)H)?(?:([.,\d]+)M)?(?:([.,\d]+)S)?/;
    const matches = pt.match(iso8601DurationRegex);
    if (matches === null) {
        throw new Error("Could not parse ISO8601 duration string '" + pt + "'");
    } else if (parseFloat(matches[2]) > 0 || parseFloat(matches[3]) > 0 || parseFloat(matches[4]) > 0 || parseFloat(matches[5]) > 0) {
        throw new Error("Could not parse ISO8601 duration string '" + pt + "', only days and smaller specifiers supported in this implementation.");
    } else {
        return ((matches[6] === undefined ? 0 : parseFloat(matches[6]) * 3600) + (matches[7] === undefined ? 0 : parseFloat(matches[7])) * 60 + (matches[8] === undefined ? 0 : parseFloat(matches[8]))) * (matches[1] === undefined ? 1 : -1);
    }
};
const ProcessTypes = {
    A01: "Day ahead",
    A02: "Intra day incremental",
    A16: "Realised",
    A18: "Intraday total",
    A31: "Week ahead",
    A32: "Month ahead",
    A33: "Year ahead",
    A39: "Synchronisation process",
    A40: "Intraday process",
    A46: "Replacement reserve",
    A47: "Manual frequency restoration reserve",
    A51: "Automatic frequency restoration reserve",
    A52: "Frequency containment reserve",
    A56: "Frequency restoration reserve",
    A60: "Scheduled activation mFRR",
    A61: "Direct activation mFRR",
    A67: "Central Selection aFRR",
    A68: "Local Selection aFRR"
};
const ParsePeriod = (period)=>{
    const baseDate = Date.parse(period.timeInterval.start), baseEndDate = Date.parse(period.timeInterval.end), periodLengthS = ISO8601DurToSec(period.resolution), periodLengthSSafe = periodLengthS || 1;
    const outputPeriod = {
        startDate: new Date(baseDate),
        endDate: new Date(baseEndDate),
        points: [],
        resolution: period.resolution,
        resolutionSeconds: periodLengthSSafe
    };
    const points = Array.isArray(period.Point) ? period.Point : [
        period.Point
    ];
    for(let i = 0; i < points.length; i++){
        const currentPos = points[i].position - 1, nextPos = points[i + 1] ? points[i + 1].position - 1 : undefined;
        const outputPoint = {
            startDate: new Date(baseDate + currentPos * periodLengthSSafe * 1000),
            endDate: nextPos ? new Date(baseDate + nextPos * periodLengthSSafe * 1000) : new Date(baseEndDate),
            position: points[i].position,
            constraintTimeSeries: points[i].Constraint_TimeSeries
        };
        if (points[i]["price.amount"]) {
            outputPoint.price = points[i]["price.amount"];
        }
        if (points[i].quantity) {
            outputPoint.quantity = points[i].quantity;
        }
        outputPeriod.points.push(outputPoint);
    }
    return outputPeriod;
};
const ParseBaseDocument = (d)=>{
    const document = {
        mRID: d.mRID,
        revision: d.revisionNumber,
        created: d.createdDateTime ? new Date(Date.parse(d.createdDateTime)) : void 0,
        documentType: d.type,
        documentTypeDescription: d.type ? DocumentTypes[d.type] : void 0,
        processType: d["process.processType"],
        processTypeDescription: d["process.processType"] ? ProcessTypes[d["process.processType"]] : void 0,
        senderMarketParticipantId: d["sender_MarketParticipant.mRID"]?.["#text"],
        senderMarketParticipantRoleType: d["sender_MarketParticipant.marketRole.type"],
        receiverMarketParticipantId: d["receiver_MarketParticipant.mRID"]?.["#text"],
        receiverMarketParticipantRoleType: d["receiver_MarketParticipant.marketRole.type"]
    };
    return document;
};
const ParsePublication = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("Publication document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["period.timeInterval"]?.start && d["period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "publication",
        timeInterval,
        timeseries: []
    });
    for (const ts of tsArray){
        const tsEntry = {
            currency: ts["currency_Unit.name"],
            priceMeasureUnit: ts["price_Measure_Unit.name"],
            quantityMeasureUnit: ts["quantity_Measure_Unit.name"],
            curveType: ts.curveType,
            businessType: ts.businessType,
            inDomain: ts["in_Domain.mRID"]?.["#text"],
            outDomain: ts["out_Domain.mRID"]?.["#text"],
            auctionId: ts["auction.mRID"],
            auctionType: ts["auction.type"],
            auctionCategory: ts["auction.category"],
            contractMarketAgreementType: ts["contract_MarketAgreement.type"],
            classificationSequenceAICPosition: ts["classificationSequence_AttributeInstanceComponent.position"],
            businessTypeDescription: ts.businessType ? BusinessTypes[ts.businessType] : void 0,
            periods: []
        };
        const periodArray = Array.isArray(ts.Period) ? ts.Period : ts.Period ? [
            ts.Period
        ] : [];
        for (const inputPeriod of periodArray){
            tsEntry.periods?.push(ParsePeriod(inputPeriod));
        }
        document.timeseries.push(tsEntry);
    }
    return document;
};
const PsrTypes = {
    A03: "Mixed",
    A04: "Generation",
    A05: "Load",
    B01: "Biomass",
    B02: "Fossil Brown coal/Lignite",
    B03: "Fossil Coal-derived gas",
    B04: "Fossil Gas",
    B05: "Fossil Hard coal",
    B06: "Fossil Oil",
    B07: "Fossil Oil shale",
    B08: "Fossil Peat",
    B09: "Geothermal",
    B10: "Hydro Pumped Storage",
    B11: "Hydro Run-of-river and poundage",
    B12: "Hydro Water Reservoir",
    B13: "Marine",
    B14: "Nuclear",
    B15: "Other renewable",
    B16: "Solar",
    B17: "Waste",
    B18: "Wind Offshore",
    B19: "Wind Onshore",
    B20: "Other",
    B21: "AC Link",
    B22: "DC Link",
    B23: "Substation",
    B24: "Transformer"
};
const ParseGL = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("GL document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["time_Period.timeInterval"]?.start && d["time_Period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["time_Period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["time_Period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "gl",
        timeInterval,
        timeseries: []
    });
    for (const ts of tsArray){
        const tsEntry = {
            outBiddingZone: ts["outBiddingZone_Domain.mRID"]?.["#text"],
            inBiddingZone: ts["inBiddingZone_Domain.mRID"]?.["#text"],
            curveType: ts.curveType,
            objectAggregation: ts.objectAggregation,
            mktPsrType: ts.MktPSRType?.psrType,
            businessType: ts.businessType,
            businessTypeDescription: ts.businessType ? BusinessTypes[ts.businessType] : void 0,
            mktPsrTypeDescription: ts.MktPSRType?.psrType ? PsrTypes[ts.MktPSRType?.psrType] : void 0,
            quantityMeasureUnit: ts["quantity_Measure_Unit.name"],
            periods: []
        };
        const periodArray = Array.isArray(ts.Period) ? ts.Period : ts.Period ? [
            ts.Period
        ] : [];
        for (const inputPeriod of periodArray){
            tsEntry.periods?.push(ParsePeriod(inputPeriod));
        }
        document.timeseries.push(tsEntry);
    }
    return document;
};
const ParseUnavailability = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("Unavalibility document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["unavailability_Time_Period.timeInterval"]?.start && d["unavailability_Time_Period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["unavailability_Time_Period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["unavailability_Time_Period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "unavailability",
        timeInterval,
        timeseries: []
    });
    for (const outage of tsArray){
        let startDate;
        if (outage["start_DateAndOrTime.date"]) {
            if (outage["start_DateAndOrTime.time"]) {
                startDate = new Date(Date.parse(outage["start_DateAndOrTime.date"] + "T" + outage["start_DateAndOrTime.time"]));
            } else {
                startDate = new Date(Date.parse(outage["start_DateAndOrTime.date"] + "T00:00:00Z"));
            }
        }
        let endDate;
        if (outage["end_DateAndOrTime.date"]) {
            if (outage["end_DateAndOrTime.time"]) {
                endDate = new Date(Date.parse(outage["end_DateAndOrTime.date"] + "T" + outage["start_DateAndOrTime.time"]));
            } else {
                endDate = new Date(Date.parse(outage["end_DateAndOrTime.date"] + "T00:00:00Z"));
            }
        }
        const ts = Object.assign(ParseBaseDocument(d), {
            startDate: startDate,
            endDate: endDate,
            rootType: "unavailability",
            resourceName: outage["production_RegisteredResource.name"],
            resourceLocation: outage["production_RegisteredResource.location.name"],
            businessType: outage.businessType,
            businessTypeDescription: outage.businessType ? BusinessTypes[outage.businessType] : void 0,
            psrName: outage["production_RegisteredResource.pSRType.powerSystemResources.name"],
            psrNominalPowerUnit: outage["production_RegisteredResource.pSRType.powerSystemResources.nominalP"] ? outage["production_RegisteredResource.pSRType.powerSystemResources.nominalP"]["@unit"] : void 0,
            psrNominalPower: outage["production_RegisteredResource.pSRType.powerSystemResources.nominalP"] ? outage["production_RegisteredResource.pSRType.powerSystemResources.nominalP"]["#text"] : "0",
            psrType: outage["production_RegisteredResource.pSRType.psrType"] ? PsrTypes[outage["production_RegisteredResource.pSRType.psrType"]] : void 0,
            reasonCode: outage.Reason?.code,
            reasonText: outage.Reason?.text,
            periods: []
        });
        const availablePeriodArray = Array.isArray(outage.Available_Period) ? outage.Available_Period : outage.Available_Period ? [
            outage.Available_Period
        ] : [];
        for (const avail of availablePeriodArray){
            ts.periods?.push(ParsePeriod(avail));
        }
        document.timeseries.push(ts);
    }
    return document;
};
const ParseConfiguration = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("Unavalibility document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "configuration",
        timeseries: []
    });
    for (const configuration of tsArray){
        let implementationDate;
        if (configuration["implementation_DateAndOrTime.date"]) {
            if (configuration["implementation_DateAndOrTime.time"]) {
                implementationDate = new Date(Date.parse(configuration["implementation_DateAndOrTime.date"] + "T" + configuration["implementation_DateAndOrTime.time"]));
            } else {
                implementationDate = new Date(Date.parse(configuration["implementation_DateAndOrTime.date"] + "T00:00:00Z"));
            }
        }
        const ts = Object.assign(ParseBaseDocument(d), {
            implementationDate,
            businessType: configuration.businessType,
            businessTypeDescription: configuration.businessType ? BusinessTypes[configuration.businessType] : void 0,
            biddingZoneDomain: configuration["biddingZone_Domain.mRID"]?.["#text"],
            registeredResourceId: configuration["registeredResource.mRID"]?.["#text"],
            registeredResourceName: configuration["registeredResource.name"],
            registeredResourceLocation: configuration["registeredResource.location.name"],
            controlAreaDomain: configuration.ControlArea_Domain?.mRID?.["#text"],
            providerMarketParticipant: configuration["Provider_MarketParticipant"]?.mRID?.["#text"],
            psrType: configuration.MktPSRType?.psrType,
            psrHighvoltageLimit: configuration.MktPSRType?.["production_PowerSystemResources.highVoltageLimit"]?.["#text"],
            psrHighvoltageLimitUnit: configuration.MktPSRType?.["production_PowerSystemResources.highVoltageLimit"]?.["@unit"],
            psrNominalPower: configuration.MktPSRType?.["nominalIP_PowerSystemResources.nominalP"]?.["#text"],
            psrNominalPowerUnit: configuration.MktPSRType?.["nominalIP_PowerSystemResources.nominalP"]?.["@unit"],
            generatingUnit: []
        });
        if (configuration.GeneratingUnit_PowerSystemResources?.length) {
            for (const gu of configuration.GeneratingUnit_PowerSystemResources){
                const guResult = {
                    nominalPower: gu.nominalP?.["#text"],
                    nominalPowerUnit: gu.nominalP?.["@unit"],
                    name: gu.name,
                    locationName: gu["generatingUnit_Location.name"],
                    psrType: gu["generatingUnit_PSRType.psrType"],
                    id: gu.mRID?.["#text"]
                };
                ts.generatingUnit?.push(guResult);
            }
        }
        document.timeseries.push(ts);
    }
    return document;
};
const ParseTransmissionNetwork = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("TransmissionNetwork document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["period.timeInterval"]?.start && d["period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "transmissionnetwork",
        timeInterval,
        timeseries: []
    });
    for (const ts of tsArray){
        let endDate;
        if (ts["end_DateAndOrTime.date"]) {
            if (ts["end_DateAndOrTime.time"]) {
                endDate = new Date(Date.parse(ts["end_DateAndOrTime.date"] + "T" + ts["end_DateAndOrTime.time"]));
            } else {
                endDate = new Date(Date.parse(ts["end_DateAndOrTime.date"] + "T00:00:00Z"));
            }
        }
        const tsEntry = {
            endDate: endDate,
            quantityMeasureUnit: ts["quantity_Measure_Unit.name"],
            curveType: ts.curveType,
            businessType: ts.businessType,
            inDomain: ts["in_Domain.mRID"]?.["#text"],
            outDomain: ts["out_Domain.mRID"]?.["#text"],
            businessTypeDescription: ts.businessType ? BusinessTypes[ts.businessType] : void 0,
            assetRegisteredResourceId: ts.Asset_RegisteredResource?.mRID?.["#text"],
            assetRegisteredResourcePsrType: ts.Asset_RegisteredResource?.["pSRType.psrType"],
            assetRegisteredResourcePsrTypeDescription: ts.Asset_RegisteredResource?.["pSRType.psrType"] ? PsrTypes[ts.Asset_RegisteredResource?.["pSRType.psrType"]] : void 0,
            assetRegisteredResourceLocationName: ts.Asset_RegisteredResource?.["location.name"],
            periods: []
        };
        const periodArray = Array.isArray(ts.Period) ? ts.Period : ts.Period ? [
            ts.Period
        ] : [];
        for (const inputPeriod of periodArray){
            tsEntry.periods?.push(ParsePeriod(inputPeriod));
        }
        document.timeseries.push(tsEntry);
    }
    return document;
};
const ParseBalancing = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("Balancing document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["period.timeInterval"]?.start && d["period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "balancing",
        areaDomainId: d["area_Domain.mRID"]?.["#text"],
        timeInterval,
        timeseries: []
    });
    for (const ts of tsArray){
        const tsEntry = {
            quantityMeasureUnit: ts["quantity_Measure_Unit.name"],
            curveType: ts.curveType,
            businessType: ts.businessType,
            flowDirection: ts["flowDirection.direction"],
            businessTypeDescription: ts.businessType ? BusinessTypes[ts.businessType] : void 0,
            periods: []
        };
        const periodArray = Array.isArray(ts.Period) ? ts.Period : ts.Period ? [
            ts.Period
        ] : [];
        for (const inputPeriod of periodArray){
            tsEntry.periods?.push(ParsePeriod(inputPeriod));
        }
        document.timeseries.push(tsEntry);
    }
    return document;
};
const ParseCriticalNetworkElement = (d)=>{
    if (!d.TimeSeries) {
        throw new Error("CriticalNetworkElement document invalid, missing TimeSeries");
    }
    const tsArray = Array.isArray(d.TimeSeries) ? d.TimeSeries : [
        d.TimeSeries
    ];
    let timeInterval = void 0;
    if (d["time_Period.timeInterval"]?.start && d["time_Period.timeInterval"].end) {
        timeInterval = {
            start: new Date(Date.parse(d["time_Period.timeInterval"]?.start)),
            end: new Date(Date.parse(d["time_Period.timeInterval"]?.end))
        };
    }
    const document = Object.assign(ParseBaseDocument(d), {
        rootType: "criticalnetworkelement",
        timeInterval,
        timeseries: []
    });
    for (const ts of tsArray){
        const tsEntry = {
            curveType: ts.curveType,
            businessType: ts.businessType,
            businessTypeDescription: ts.businessType ? BusinessTypes[ts.businessType] : void 0,
            periods: []
        };
        const periodArray = Array.isArray(ts.Period) ? ts.Period : ts.Period ? [
            ts.Period
        ] : [];
        for (const inputPeriod of periodArray){
            tsEntry.periods?.push(ParsePeriod(inputPeriod));
        }
        document.timeseries.push(tsEntry);
    }
    return document;
};
const ParseDocument = (xmlDocument)=>{
    const parser = new vt({
        ignoreAttributes: false,
        attributeNamePrefix: "@"
    });
    const doc = parser.parse(xmlDocument);
    if (doc.Publication_MarketDocument) {
        return ParsePublication(doc.Publication_MarketDocument);
    } else if (doc.GL_MarketDocument) {
        return ParseGL(doc.GL_MarketDocument);
    } else if (doc.Unavailability_MarketDocument) {
        return ParseUnavailability(doc.Unavailability_MarketDocument);
    } else if (doc.Configuration_MarketDocument) {
        return ParseConfiguration(doc.Configuration_MarketDocument);
    } else if (doc.TransmissionNetwork_MarketDocument) {
        return ParseTransmissionNetwork(doc.TransmissionNetwork_MarketDocument);
    } else if (doc.Balancing_MarketDocument) {
        return ParseBalancing(doc.Balancing_MarketDocument);
    } else if (doc.CriticalNetworkElement_MarketDocument) {
        return ParseCriticalNetworkElement(doc.CriticalNetworkElement_MarketDocument);
    } else if (doc.Acknowledgement_MarketDocument) {
        const invalidRootNode = doc.Acknowledgement_MarketDocument;
        throw new Error(`Request failed. Code '${invalidRootNode.Reason.code}', Reason '${invalidRootNode.Reason.text}'`);
    } else {
        throw new Error("Unknown XML document structure received");
    }
};
const ENTSOE_ENDPOINT = "https://web-api.tp.entsoe.eu/api";
const ComposeQuery = (securityToken, params, force)=>{
    const query = new URLSearchParams({
        securityToken
    });
    if (!(params.documentType in DocumentTypes) && !force) {
        throw new Error("Invalid document type requested");
    } else {
        query.append("DocumentType", params.documentType);
    }
    if (params.processType !== undefined) {
        if (!(params.processType in ProcessTypes) && !force) {
            throw new Error("Invalid process type requested");
        } else {
            query.append("ProcessType", params.processType);
        }
    }
    if (params.businessType !== undefined) {
        if (!(params.businessType in BusinessTypes) && !force) {
            throw new Error("Invalid business type requested");
        } else {
            query.append("BusinessType", params.businessType);
        }
    }
    if (params.psrType !== undefined) {
        if (!(params.psrType in PsrTypes) && !force) {
            throw new Error("Invalid psr type requested");
        } else {
            query.append("PsrType", params.psrType);
        }
    }
    if (params.inDomain) {
        if (!(params.inDomain in Areas) && !force) {
            throw new Error("inDomain not valid");
        } else {
            query.append("In_Domain", params.inDomain);
        }
    }
    if (params.inBiddingZoneDomain) {
        if (!(params.inBiddingZoneDomain in Areas) && !force) {
            throw new Error("inBiddingZoneDomain not valid");
        } else {
            query.append("InBiddingZone_Domain", params.inBiddingZoneDomain);
        }
    }
    if (params.biddingZoneDomain) {
        if (!(params.biddingZoneDomain in Areas) && !force) {
            throw new Error("biddingZoneDomain not valid");
        } else {
            query.append("BiddingZone_Domain", params.biddingZoneDomain);
        }
    }
    if (params.offset !== void 0) {
        if (params.offset > 5000) {
            throw new Error("Offset too large");
        }
        if (params.offset < 0) {
            throw new Error("Offset too small");
        }
        query.append("offset", params.offset.toString());
    }
    if (params.outDomain) {
        if (!(params.outDomain in Areas) && !force) {
            throw new Error("outDomain not valid");
        } else {
            query.append("Out_Domain", params.outDomain);
        }
    }
    if (params.outBiddingZoneDomain) {
        if (!(params.outBiddingZoneDomain in Areas) && !force) {
            throw new Error("outBiddingZoneDomain not valid");
        } else {
            query.append("OutBiddingZone_Domain", params.outBiddingZoneDomain);
        }
    }
    if (params.contractMarketAgreementType) {
        query.append("Contract_MarketAgreement.Type", params.contractMarketAgreementType);
    }
    if (params.auctionType) {
        query.append("Auction.Type", params.auctionType);
    }
    if (params.classificationSequenceAICPosition) {
        query.append("ClassificationSequence_AttributeInstanceComponent.Position", params.classificationSequenceAICPosition);
    }
    if (params.auctionCategory) {
        query.append("Auction.Category", params.auctionCategory);
    }
    if (params.connectingDomain) {
        query.append("connecting_Domain", params.connectingDomain);
    }
    if (params.standardMarketProduct) {
        query.append("Standard_MarketProduct", params.standardMarketProduct);
    }
    if (params.originalMarketProduct) {
        query.append("Original_MarketProduct", params.originalMarketProduct);
    }
    if (params.registeredResource) {
        query.append("registeredResource", params.registeredResource);
    }
    if (params.acquiringDomain) {
        query.append("Acquiring_Domain", params.acquiringDomain);
    }
    if (params.mRID) {
        query.append("mRID", params.mRID);
    }
    if (params.docStatus) {
        query.append("DocStatus", params.docStatus);
    }
    if (params.startDateTimeUpdate) {
        if (!(params.startDateTimeUpdate instanceof Date && !isNaN(params.startDateTimeUpdate.getTime()))) {
            throw new Error("startDateTimeUpdate not valid, should be Date object");
        }
        if (!(params.endDateTimeUpdate instanceof Date && !isNaN(params.endDateTimeUpdate.getTime()))) {
            throw new Error("endDateTimeUpdate not valid, should be Date object");
        }
        const timeInterval = `${params.startDateTimeUpdate.toISOString()}/${params.endDateTimeUpdate.toISOString()}`;
        query.append("TimeIntervalUpdate", timeInterval);
    }
    if (params.startDateTime) {
        if (!(params.startDateTime instanceof Date && !isNaN(params.startDateTime.getTime()))) {
            throw new Error("startDateTime not valid, should be Date object");
        }
        if (!(params.endDateTime instanceof Date && !isNaN(params.endDateTime.getTime()))) {
            throw new Error("endDateTime not valid, should be Date object");
        }
        const timeInterval = `${params.startDateTime.toISOString()}/${params.endDateTime.toISOString()}`;
        query.append("TimeInterval", timeInterval);
    }
    if (params.implementationDateAndOrTime) {
        if (typeof params.implementationDateAndOrTime !== "string") {
            throw new Error("implementationDateAndOrTime not valid, should be string in ISO8601 format");
        }
        query.append("Implementation_DateAndOrTime", params.implementationDateAndOrTime);
    }
    if (!params.startDateTime && !params.startDateTimeUpdate && !params.implementationDateAndOrTime && !force) {
        throw new Error("startDateTime, startDateTimeUpdate or implementationDateAndOrTime must be specified");
    }
    return query;
};
const Query = async (securityToken, params)=>{
    const query = ComposeQuery(securityToken, params);
    const result = await fetch(`${ENTSOE_ENDPOINT}?${query}`);
    if (result.status === 401) {
        throw new Error("401 Unauthorized. Missing or invalid security token.");
    }
    const documents = [];
    if (result.headers.get("content-type")?.includes("xml") || !result.headers.has("content-type")) {
        documents.push(await ParseDocument(await result.text()));
    } else if (result.headers.get("content-type") === "application/zip") {
        let zipReader;
        try {
            const zipDataReader = new Uint8ArrayReader(new Uint8Array(await result.arrayBuffer()));
            zipReader = new ZipReader(zipDataReader, {
                useWebWorkers: false
            });
            for (const xmlFileEntry of (await zipReader.getEntries())){
                const stringDataWriter = new TextWriter();
                await xmlFileEntry.getData(stringDataWriter);
                const xmlFileData = await stringDataWriter.getData();
                const result = await ParseDocument(xmlFileData);
                if (result) documents.push(result);
            }
        } finally{
            await zipReader?.close();
        }
    }
    return documents;
};
const QueryGL = async (securityToken, params)=>{
    const result = await Query(securityToken, params);
    if (result && Array.isArray(result) && result.length && result[0].rootType === "gl") return result;
    if (result && Array.isArray(result) && result.length && result[0].rootType !== "gl") {
        throw new Error("Got " + result[0].rootType + " when expecting gl document");
    }
    return [];
};
const EntsoeLoad = async (area, startDate, endDate)=>{
    startDate.setHours(0, 0, 0, 0);
    endDate.setHours(23, 0, 0, 0);
    const result = await QueryGL(Deno.env.get("API_TOKEN") || "", {
        documentType: "A65",
        processType: "A16",
        outBiddingZoneDomain: Area(area),
        startDateTime: startDate,
        endDateTime: endDate
    });
    const output = [];
    if (result?.length) {
        for (const ts of result[0].timeseries){
            if (ts.periods) {
                for (const period of ts.periods){
                    for (const point of period.points){
                        output.push({
                            date: point.startDate,
                            interval: period.resolution,
                            quantity: point.quantity
                        });
                    }
                }
            }
        }
    }
    return output;
};
var Status;
(function(Status) {
    Status[Status["Unknown"] = -1] = "Unknown";
    Status[Status["SqliteOk"] = 0] = "SqliteOk";
    Status[Status["SqliteError"] = 1] = "SqliteError";
    Status[Status["SqliteInternal"] = 2] = "SqliteInternal";
    Status[Status["SqlitePerm"] = 3] = "SqlitePerm";
    Status[Status["SqliteAbort"] = 4] = "SqliteAbort";
    Status[Status["SqliteBusy"] = 5] = "SqliteBusy";
    Status[Status["SqliteLocked"] = 6] = "SqliteLocked";
    Status[Status["SqliteNoMem"] = 7] = "SqliteNoMem";
    Status[Status["SqliteReadOnly"] = 8] = "SqliteReadOnly";
    Status[Status["SqliteInterrupt"] = 9] = "SqliteInterrupt";
    Status[Status["SqliteIOErr"] = 10] = "SqliteIOErr";
    Status[Status["SqliteCorrupt"] = 11] = "SqliteCorrupt";
    Status[Status["SqliteNotFound"] = 12] = "SqliteNotFound";
    Status[Status["SqliteFull"] = 13] = "SqliteFull";
    Status[Status["SqliteCantOpen"] = 14] = "SqliteCantOpen";
    Status[Status["SqliteProtocol"] = 15] = "SqliteProtocol";
    Status[Status["SqliteEmpty"] = 16] = "SqliteEmpty";
    Status[Status["SqliteSchema"] = 17] = "SqliteSchema";
    Status[Status["SqliteTooBig"] = 18] = "SqliteTooBig";
    Status[Status["SqliteConstraint"] = 19] = "SqliteConstraint";
    Status[Status["SqliteMismatch"] = 20] = "SqliteMismatch";
    Status[Status["SqliteMisuse"] = 21] = "SqliteMisuse";
    Status[Status["SqliteNoLFS"] = 22] = "SqliteNoLFS";
    Status[Status["SqliteAuth"] = 23] = "SqliteAuth";
    Status[Status["SqliteFormat"] = 24] = "SqliteFormat";
    Status[Status["SqliteRange"] = 25] = "SqliteRange";
    Status[Status["SqliteNotADB"] = 26] = "SqliteNotADB";
    Status[Status["SqliteNotice"] = 27] = "SqliteNotice";
    Status[Status["SqliteWarning"] = 28] = "SqliteWarning";
    Status[Status["SqliteRow"] = 100] = "SqliteRow";
    Status[Status["SqliteDone"] = 101] = "SqliteDone";
})(Status || (Status = {}));
var OpenFlags;
(function(OpenFlags) {
    OpenFlags[OpenFlags["ReadOnly"] = 0x00000001] = "ReadOnly";
    OpenFlags[OpenFlags["ReadWrite"] = 0x00000002] = "ReadWrite";
    OpenFlags[OpenFlags["Create"] = 0x00000004] = "Create";
    OpenFlags[OpenFlags["Uri"] = 0x00000040] = "Uri";
    OpenFlags[OpenFlags["Memory"] = 0x00000080] = "Memory";
})(OpenFlags || (OpenFlags = {}));
var DeserializeFlags;
(function(DeserializeFlags) {
    DeserializeFlags[DeserializeFlags["FreeOnClose"] = 1] = "FreeOnClose";
    DeserializeFlags[DeserializeFlags["Resizeable"] = 2] = "Resizeable";
    DeserializeFlags[DeserializeFlags["ReadOnly"] = 4] = "ReadOnly";
})(DeserializeFlags || (DeserializeFlags = {}));
var FunctionFlags;
(function(FunctionFlags) {
    FunctionFlags[FunctionFlags["Deterministic"] = 0x000000800] = "Deterministic";
    FunctionFlags[FunctionFlags["DirectOnly"] = 0x000080000] = "DirectOnly";
})(FunctionFlags || (FunctionFlags = {}));
var Types;
(function(Types) {
    Types[Types["Integer"] = 1] = "Integer";
    Types[Types["Float"] = 2] = "Float";
    Types[Types["Text"] = 3] = "Text";
    Types[Types["Blob"] = 4] = "Blob";
    Types[Types["Null"] = 5] = "Null";
    Types[Types["BigInteger"] = 6] = "BigInteger";
})(Types || (Types = {}));
var Values;
(function(Values) {
    Values[Values["Error"] = -1] = "Error";
    Values[Values["Null"] = 0] = "Null";
})(Values || (Values = {}));
function getStr(wasm, ptr) {
    const len = wasm.str_len(ptr);
    const bytes = new Uint8Array(wasm.memory.buffer, ptr, len);
    if (len > 16) {
        return new TextDecoder().decode(bytes);
    } else {
        let str = "";
        let idx = 0;
        while(idx < len){
            let u0 = bytes[idx++];
            if (!(u0 & 0x80)) {
                str += String.fromCharCode(u0);
                continue;
            }
            const u1 = bytes[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
            }
            const u2 = bytes[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | bytes[idx++] & 63;
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                const ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);
            }
        }
        return str;
    }
}
class SqliteError extends Error {
    constructor(context, code){
        let message;
        let status;
        if (typeof context === "string") {
            message = context;
            status = Status.Unknown;
        } else {
            message = getStr(context, context.get_sqlite_error_str());
            status = context.get_status();
        }
        super(message);
        this.code = code ?? status;
        this.name = "SqliteError";
    }
    code;
    get codeName() {
        return Status[this.code];
    }
}
function setStr(wasm, str, closure) {
    const bytes = new TextEncoder().encode(str);
    const ptr = wasm.malloc(bytes.length + 1);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, bytes.length + 1);
    mem.set(bytes);
    mem[bytes.length] = 0;
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
function setArr(wasm, arr, closure) {
    const ptr = wasm.malloc(arr.length);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, arr.length);
    mem.set(arr);
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
const isWindows = Deno.build.os === "windows";
function env(inst) {
    const env = {
        js_print: (str_ptr)=>{
            const text = getStr(inst.exports, str_ptr);
            console.log(text[text.length - 1] === "\n" ? text.slice(0, -1) : text);
        },
        js_open: (path_ptr, mode, flags)=>{
            let path;
            switch(mode){
                case 0:
                    path = getStr(inst.exports, path_ptr);
                    break;
                case 1:
                    path = Deno.makeTempFileSync({
                        prefix: "deno_sqlite"
                    });
                    break;
            }
            const write = !!(flags & 0x00000002);
            const create = !!(flags & 0x00000004);
            const rid = Deno.openSync(path, {
                read: true,
                write,
                create
            }).rid;
            return rid;
        },
        js_close: (rid)=>{
            Deno.close(rid);
        },
        js_delete: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            Deno.removeSync(path);
        },
        js_read: (rid, buffer_ptr, offset, amount)=>{
            const buffer = new Uint8Array(inst.exports.memory.buffer, buffer_ptr, amount);
            Deno.seekSync(rid, offset, Deno.SeekMode.Start);
            return Deno.readSync(rid, buffer);
        },
        js_write: (rid, buffer_ptr, offset, amount)=>{
            const buffer = new Uint8Array(inst.exports.memory.buffer, buffer_ptr, amount);
            Deno.seekSync(rid, offset, Deno.SeekMode.Start);
            return Deno.writeSync(rid, buffer);
        },
        js_truncate: (rid, size)=>{
            Deno.ftruncateSync(rid, size);
        },
        js_sync: (rid)=>{
            Deno.fdatasyncSync(rid);
        },
        js_size: (rid)=>{
            return Deno.fstatSync(rid).size;
        },
        js_lock: (rid, exclusive)=>{
            if (Deno.flockSync && !isWindows) Deno.flockSync(rid, exclusive !== 0);
        },
        js_unlock: (rid)=>{
            if (Deno.funlockSync && !isWindows) Deno.funlockSync(rid);
        },
        js_time: ()=>{
            return Date.now();
        },
        js_timezone: ()=>{
            return new Date().getTimezoneOffset();
        },
        js_exists: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            try {
                Deno.statSync(path);
            } catch (e) {
                if (e instanceof Deno.errors.NotFound) {
                    return 0;
                }
            }
            return 1;
        },
        js_access: (path_ptr)=>{
            const path = getStr(inst.exports, path_ptr);
            try {
                Deno.statSync(path);
            } catch (e) {
                if (e instanceof Deno.errors.PermissionDenied) {
                    return 0;
                }
            }
            return 1;
        },
        js_call_user_func: (func_idx, arg_count)=>{
            inst.functions[func_idx](arg_count);
        }
    };
    return {
        env
    };
}
const wasm = "AGFzbQEAAAAB5wM/YAN/f38AYAF/AX9gAX8AYAJ/fwF/YAN/f38Bf2AEf39/fwF/YAAAYAV/f39/fwF/YAV/f39/fgBgAn9/AGAEf39/fgF/YAJ/fgF/YAZ/f39/f38Bf2AEf39/fwBgAAF/YAABfGAEf398fwF/YAJ/fABgAX8BfGABfABgAXwBf2ADf398AX9gAn9/AXxgAX4Bf2ABfgF+YAF/AX5gA39/fgF/YAd/f39/f39/AX9gAn9/AX5gAn9+AGAFf39+f38Bf2AGf39/fn5/AX9gAXwBfmAFf39/f38AYAR/f35/AGAFf39+f38AYAZ/f39+f38Bf2AIf39/f39/f38Bf2ALf39/f39/f39/f38Bf2AEf35/fwF/YAN/fn8Bf2AHf39/f39/fwBgC39/f39/f39/f39/AGAIf39/f39/f38AYAl/f39/f39/f38Bf2AGf39/f39/AGAKf39/f39/f39/fwBgCX9/f39/f39/fwBgDX9/f39/f39/f39/f38AYAN/fn4Bf2AFf39/fn8AYAR/f39+AGAGf39/f39+AX5gBX9+f39/AX9gCH9+fn9/f39/AX9gBH9+f38AYAF+AGACfn8Bf2AFf35+fn4AYAR+fn5+AX9gAn5+AX9gAn5+AXxgBH9+fn8AAu8BDwNlbnYLanNfdGltZXpvbmUADgNlbnYHanNfb3BlbgAEA2Vudglqc19kZWxldGUAAgNlbnYJanNfZXhpc3RzAAEDZW52CWpzX2FjY2VzcwABA2Vudgdqc190aW1lAA8DZW52CGpzX2Nsb3NlAAIDZW52B2pzX3JlYWQAEANlbnYIanNfd3JpdGUAEANlbnYLanNfdHJ1bmNhdGUAEQNlbnYHanNfc3luYwACA2Vudgdqc19zaXplABIDZW52B2pzX2xvY2sACQNlbnYJanNfdW5sb2NrAAIDZW52EWpzX2NhbGxfdXNlcl9mdW5jAAkDlguUCwMHBAUFAwAECQQDAw4BCgoLAwMDAwMEAQEBExQCDgMODg8PDwEBAQEBFRUEBQcDAwEBAwMDAwEWFgMDAwAFAQESEgEBARMTAgkABgkBDgUAAwkJAgkJCQkJCQABDgMJFwMYGAEXAgsAABkSAwAAAAsDCQsCAwkJGgEBAwMFCQMEBQMDGwEcAwIBBQcBAQMBAgQAHR4CAQkDAwIBAwICHw0JCwQCAAECAwQFBQEEAgEEAwMDAQUCAgQDAwICAgEBAQMCAwMBAwIDBAUFAgIEBAUBAQAEAQkCAgkCCQIBAQEBAQEBAwMSEiAZGQMBAQEBDSECIgAREQAdAg0jCQMLCQkBAQMCBAMAAw0BAwMWAwMDAwQDAwckAxUaAwcDBAEDAwEJBQUCBQQBBwQJAQQEAwAHAQkJAQkHAQQFAQcBAQsbCQcHAwMBAgUACQQEBwQBAwUZAQEBAwkJAyUmJgQHAAQDBAEFBwwHBwwMAwkCAgIFBQMBAwUDAAMXGQMEBAMBCRoLAQoKCwMDAwQBJygCCQIDAgECAQECAgECCQEBAAQDAgQDAgIJBB4HKAMCAwEKCgsDAwMBAAMAAAMDAAMJAwEFBwwBAgEFBQkBIQUNAAkJAgECCQ0DAwMJBwkCAgIEBAMaBAMJAQABAAQEAwEBHAUBBQIBAQABAR0DDQANCgkDBQQEBA0FBAMBBQEDAwEFBAMZAwENCycHCQAEBQACBQMLAQIDCQcFAQQEBAUBAQEiAx4BBA0pAQABAAMEBQICAgUDCQQDAwcACQkJCQkJAQMDBwQEAwAFAwUbDAwMBAMAAwwBCgMEAAQNAwkDBwEMAwEDAQIHAQEEAwkJAwUDBAIJCQApIQANBQQBCSEqDSEJAA0rBAQJGywEDQ0FAgAABQQDBQADAAkELQUtDAQABQ0FAAQNCQQBBAAJBwAAIQAuJSUHBQApAAAACQAJDQkhAgQHBAAHGwENIQAHBQUACQkCAwkHDQIEAAMACQ0CAgMDAwQFCQEDAwkDAwMEBQIDBQIAAAkDDQANBAQJBAADCQMDAwMFBAMDCQMDCQMACQkFDQMFAAklAyEJKwIJCQMDBAkDAwAJDQ0JCQ0DISEhDQUAAAkEAgQHBQQNAwklAwkqAgAJBAMrAC0DGwMALzAtLS8tBQcEBAMEAAIDAwAJCR0BAQIJAQ0EAQ0lCQcNBwQECQkACQMABAMBACEEAwAEAwQNBA0MDQ0DDC8EBAUABQ0hBAkCLSkAIQEDBQUDAwwBAwABBAkDBQcDCQAAAwQDAwMJAwMEDQ0AAwMhAQ0DAwkFAw0hGQUFCQMDBAMDAwkDAyEDBQQDGwUHCQAAAwMEAyUJAwMDAwAEACEDBQEMMQsxCQkZAjIzDTQCCQMACQIhBS0MKQAhDQMDDQQJJBscGgQtDA0JCAcADQ0NAAQCHBw1AwkHABwnBAEDCTYDBQAFNwkDAwMHAwMDCQAhAAcFBwUDBS0vKwMDBQMAIQMAAAAhLQkAAgAACQAAAAALAAACCQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgACAgACAAACAgAAAAcDAwENDQkHIQIAAwMAAAADBAACAAIAAgACAAACAAACAAACAgAAAgIAAgAFAgAAAgACAAAAAAABAwQDAwAEBQAACQIJAAQAAAkAAAkAAAAEAAAAAAACCQIAAAIJAgMHBQUFAwICAQIHBQUDAAQJBAMEAwECAwEBAQIBAgQCAgkCAQQEAAkNCQkCAgEBDAMBAwECBwABAQQADQkDAzgJAQECAgMJAQYDOQQEAwQDBAQEAQMDOjs7OhE8HQk6Oj0+Dg4+OgYGARMUAg4DDg4PDw8BAQEBARUVBAUHAwMBAQMDAwMBFhYDAwMFAQESEgEBARMTAgkABgkBDgUBAgQHAXABogKiAgUDAQACBggBfwFBkI8HCwfIBjgGbWVtb3J5AgAHc3RyX2xlbgDsCghzZWVkX3JuZwDtCg1zcWxpdGVfbWFsbG9jAO4KC3NxbGl0ZV9mcmVlAO8KCmdldF9zdGF0dXMA8AoEb3BlbgDxCgVjbG9zZQDyChRnZXRfc3FsaXRlX2Vycm9yX3N0cgDzChFsYXN0X2luc2VydF9yb3dpZAD0CgdjaGFuZ2VzAPUKDXRvdGFsX2NoYW5nZXMA9goHcHJlcGFyZQD3CghmaW5hbGl6ZQD4CgVyZXNldAD5Cg5jbGVhcl9iaW5kaW5ncwD6CgRleGVjAPsKCGJpbmRfaW50APwKC2JpbmRfZG91YmxlAP0KCWJpbmRfdGV4dAD+CgliaW5kX2Jsb2IA/woMYmluZF9iaWdfaW50AIALCWJpbmRfbnVsbACBCxRiaW5kX3BhcmFtZXRlcl9pbmRleACCCwRzdGVwAIMLDGNvbHVtbl9jb3VudACECwtjb2x1bW5fdHlwZQCFCwtjb2x1bW5fbmFtZQCGCxJjb2x1bW5fb3JpZ2luX25hbWUAhwsRY29sdW1uX3RhYmxlX25hbWUAiAsMZXhwYW5kZWRfc3FsAIkLCmNvbHVtbl9pbnQAigsNY29sdW1uX2RvdWJsZQCLCwtjb2x1bW5fdGV4dACMCwtjb2x1bW5fYmxvYgCNCwxjb2x1bW5fYnl0ZXMAjgsPY3JlYXRlX2Z1bmN0aW9uAI8LD2RlbGV0ZV9mdW5jdGlvbgCQCw1hcmd1bWVudF90eXBlAJELDGFyZ3VtZW50X2ludACSCw9hcmd1bWVudF9kb3VibGUAkwsNYXJndW1lbnRfdGV4dACUCw1hcmd1bWVudF9ibG9iAJULDmFyZ3VtZW50X2J5dGVzAJYLCnJlc3VsdF9pbnQAlwsNcmVzdWx0X2RvdWJsZQCYCwtyZXN1bHRfdGV4dACZCwtyZXN1bHRfYmxvYgCaCw5yZXN1bHRfYmlnX2ludACbCwtyZXN1bHRfbnVsbACcCwxyZXN1bHRfZXJyb3IAnQsJc2VyaWFsaXplAJ4LD3NlcmlhbGl6ZV9ieXRlcwCfCwtkZXNlcmlhbGl6ZQCgCwZtYWxsb2MAoQsEZnJlZQCiCwmvBAEAQQELoQIQERITFBUWFxgZGhwdHh8gISIjJCUmJ0t0sgGBBI8E2AHZAe0C8wL1AvYC3gKgA6EDyQHEA8UDxgPHA8gDyQPNBMsEtwS4BLkE6QTqBOsE/QX+BYYGhwaIBtgCngafBqAGpAalBqcGqAapBoUBuga8Br0GYeEG4wb5BvoG5wLbBMMHzQfOB+oH6wfsB9gH1wftB8cHgQiECIkIyAamCKcI2AToCIcH7AjcB90H3gfoB9cE8QfWCNcI0wjbCPMIqAmpCbIJswm3CYsKkQOSA5MDlAOVA5YDlwOYA5kDmgObA7wDvQO+A78DwAPBA/0E/gT/BIAFgQWDBYQFhQWGBYcF7QjuCPII9Aj1CPcI+Aj5CPoI/Aj9CP4IgAmBCYIJgwmECYUJhgmHCYgJiQmKCYsJjAmNCY4JjwmQCZEJkgmTCZQJlQmWCZcJmAmZCZoJmwmcCZ0JngmfCaAJoQmiCaMJpAmlCaYJsQm0CbUJtgm5CboJuwm8Cb0Jvgm/CcAJwQnCCcMJxAnFCcYJxwnICckJygnLCcwJzQnOCc8J0AnRCdQJ1QnXCdkJ2gnbCdwJ3QnjCecJ6wntCfEJ8wn1CfcJ+An5CfoJ+wn8Cf4J/wmACoEKgwqOCo8KkAqRCpIKkwqUCpUKlgqXCpgKmQqaCpsKnAqdCp4KnwqgCqEKogqlCqcKqAqqCqwKrQqkCq8KsQqyCrMKtAq1CrYKtwq5CrsKvAq9CsEKwgoKg4sklAtGAQF/I4CAgIAAQRBrIgIkgICAgAAgAiAAKQMAEICAgIAAQTxsrH03AwggAkEIaiABEM2KgIAAIQEgAkEQaiSAgICAACABCzAAIAJBsLOBgAA2AgAgAiABIAFFIAMQgYCAgAA2AgQCQCAERQ0AIAQgAzYCAAtBAAsMACABEIKAgIAAQQALKwACQAJAIAINACABEIOAgIAAIQIMAQsgARCEgICAACECCyADIAI2AgBBAAs8AQF/I4CAgIAAQRBrIgQkgICAgAAgBCABNgIAIAIgA0G/uYCAACAEEIuBgIAAGiAEQRBqJICAgIAAQQALBABBAAsiACABIAJB9uKAgABBABCLgYCAABogASACakF/akEAOgAACwQAQQALAgALDgAgAiABEMSKgIAAQQALBABBAAstACABEIWAgIAARAAAAAAAQI9Ao0QAAAAAABj1QKNEAAAAwMWeQkGgOQMAQQALEABBoNyCgABBARDvgICAAAsPACAAKAIEEIaAgIAAQQALVQECf0EAIQRBACEFAkAgA0L/////////D1UNACAAKAIEIAEgA7kgAhCHgICAACEFCwJAIAUgAk4NACABIAVqQQAgAiAFaxDVioCAABpBigQhBAsgBAs4AQF/QQAhBAJAIANC/////////w9VDQAgACgCBCABIAO5IAIQiICAgAAhBAtBAEGKBiAEIAJGGwstAQF/QQohAgJAIAFC/////////w9VDQAgACgCBCABuRCJgICAAEEAIQILIAILDwAgACgCBBCKgICAAEEAC0QCAXwBfgJAAkAgACgCBBCLgICAACICmUQAAAAAAADgQ2NFDQAgArAhAwwBC0KAgICAgICAgIB/IQMLIAEgAzcDAEEACy0AAkAgAUF/aiIBQQNLDQAgACgCBCABQQJ0QfyzgYAAaigCABCMgICAAAtBAAscAAJAIAFBf2pBA0sNACAAKAIEEI2AgIAAC0EACwsAIAFBADYCAEEACwQAQQwLBABBAAsEAEEACzEBA38CQCAADQBBAA8LQQAhAQNAIAAgAWohAiABQQFqIgMhASACLQAADQALIANBf2oLOQEBfgJAAkAgAEQAAAAAAADwQ2MgAEQAAAAAAAAAAGZxRQ0AIACxIQEMAQtCACEBCyABEMOKgIAACzYBAX4CQAJAIACZRAAAAAAAAOBDY0UN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EBDahICAAAJAIAEoAiQiA0UNACAAIAMQ5ICAgAALIAAgARDkgICAACACIQEgAg0ACwsLhgEAAkAgAEUNAAJAIAAoAvADRQ0AIAAgARCOg4CAAA8LIABB1AJqKAIAIAFNDQACQCAAQcwCaigCACABSw0AIAEgAEHIAmoiACgCADYCACAAIAE2AgAPCyAAQdACaigCACABSw0AIAEgAEHAAmoiACgCADYCACAAIAE2AgAPCyABEPSAgIAAC/QBAQJ/AkAgAUEGai0AAEGBAXENAAJAIAEoAgwiAkUNACABLQAAQbIBRg0AIAAgAhDlgICAAAsCQCABKAIQIgJFDQAgACACEOWAgIAADAELAkAgASgCBCICQYAgcUUNACABKAIUIgJFDQEgACACQQEQ1oSAgAAMAQsCQCABKAIUIgNFDQAgACADEMSCgIAAIAEoAgQhAgsgAkGAgIAIcUUNACAAIAEoAiwQ2YSAgAALAkAgASgCBCICQYCACHFFDQAgASgCCCIDRQ0AIAAgAxDkgICAACABKAIEIQILAkAgAkGAgIDAAHENACAAIAEQ5ICAgAALC2QBBH8CQCABRQ0AAkAgASgCACICQQFIDQAgAUEIaiEDQQAhBANAAkAgAygCACIFRQ0AIAAgBRDkgICAACABKAIAIQILIANBCGohAyAEQQFqIgQgAkgNAAsLIAAgARDkgICAAAsL+QQBBH8CQCABKAIIIgJFDQADQCACIgMoAhQhAgJAAkAgAEUNACAAKALwAw0BCyABLQArQQFGDQAgAygCGEEYaiADKAIAQQAQ8IKAgAAaCyAAIAMQjYSAgAAgAg0ACwsCQAJAAkACQCABLQArDgIAAQILIAFBMGooAgAiA0UNAgNAIAMhAgJAAkAgAEUNACAAKALwAw0BCyACKAIMIQMCQAJAIAIoAhAiBEUNACAEIAM2AgwMAQsgASgCPEE4aiADIAIgAxsoAgggAxDwgoCAABoLIAIoAgwiA0UNACADIAIoAhA2AhALIAAgAigCHBCzhICAACAAIAJBIGooAgAQs4SAgAAgAigCBCEDIAAgAhDkgICAACADDQAMAwsLAkACQCAARQ0AIAAoAvADDQELIAFBNGoiAygCACECIANBADYCACACRQ0AA0AgAigCGCEDAkACQCACKAIAIgQNACABIAI2AjQgAkEANgIYDAELIAIgBCgC/AI2AhggBCACNgL8AgsgAyECIAMNAAsLIAFBMGooAgAiAkUNAQJAIAEoAiwiBEEBSA0AQQAhA0EAIQIDQAJAIAJBAUYNACABKAIwIANqKAIAIgVFDQAgACAFEOSAgIAAIAEoAiwhBAsgA0EEaiEDIAJBAWoiAiAESA0ACyABKAIwIQILIAJFDQEgACACEOSAgIAADAELIAEoAiwiAkUNACAAIAJBARDWhICAAAsgACABEIiFgIAAAkAgASgCACICRQ0AIAAgAhDkgICAAAsCQCABKAIMIgJFDQAgACACEOSAgIAACwJAIAEoAhAiAkUNACAAIAIQxIKAgAALIAAgARDkgICAAAvAAQECfwJAIABFDQAgAUUNACAAIAFBKGxqIQECQCAAKAIUIgIoAvADDQADQAJAAkACQCAAQRFqLQAAQZABcUUNACAAEKiBgIAADAELIABBGGoiAygCAEUNASACIABBIGooAgAQ5ICAgAAgA0EANgIACyAAQRBqQQA7AQALIABBKGoiACABSQ0ADAILCwNAAkAgAEEYaigCAEUNACAAQSBqKAIAIgNFDQAgAiADEOSAgIAACyAAQShqIgAgAUkNAAsLC1IBAn8CQCABRQ0AIAJBFGwhAgNAAkAgASACaiIDQW1qLAAAIgRBekoNACAAIAQgA0F8aigCABDcg4CAAAsgAkFsaiICDQALIAAgARDkgICAAAsLSgEBf0EAIQECQBDrgICAAA0AQQAoAuSGg4AAIQEgAEUNACABRQ0AA0AgACABKAIQENGKgIAARQ0BIAEoAgwiAQ0AC0EAIQELIAELqggBB38jgICAgABBIGsiACSAgICAAEEAIQECQEEAKALI3oKAAA0AQQBBATYC0N6CgAACQAJAQQAoAtTegoAADQACQEEAKAKY3YKAAA0AIABBoNiCgAA2AhBBBCAAQRBqEOyAgIAAGgtBAEEINgLohoOAAAJAAkBBACgCsN6CgABFDQBBACgCtN6CgABBgARIDQBBACgCuN6CgABBAEoNAQtBAEIANwOw3oKAAAtBACgCtN2CgABBACgCrN2CgAARgYCAgAAAIgENAQtBAEEBNgLU3oKAAAJAQQAoAuDegoAADQBBAEEINgLg3oKAAAtBAEEAKALc3oKAAEEBaiICNgLc3oKAAEEAIQECQEEAKALI3oKAAEEAKALM3oKAAHINAEEAQQE2AszegoAAQZiJg4AAQQBB3AAQ1YqAgAAaQcD0goAAQQUQ7YCAgABBkPaCgABBDxDtgICAAEHw+oKAAEEJEO2AgIAAQeD9goAAQRMQ7YCAgABBwN+CgABBwwAQ7YCAgAACQAJAQQAoAtjegoAADQACQEEAKALk3YKAACIBDQAgAEHA2IKAADYCAEESIAAQ7ICAgAAaQQAoAuTdgoAAIQELQQAoAuDdgoAAIAERgYCAgAAAIgENAQtBAEEBNgLY3oKAAEEHIQEQ64CAgAANAEIKEO6AgIAAIgJFDQACQEEAKAL43IKAAEUNACACQQAoAqTdgoAAEYGAgIAAACEBQQBBACgClIaDgAAgAWs2ApSGg4AAQQBBACgCuIaDgABBf2o2AriGg4AACyACQQAoApzdgoAAEYKAgIAAABCbgICAACIBDQBBASEBEOuAgIAADQBBACgC5IaDgAAiAkUNAEEAIAI2AuyDg4AAQQAgAigCBCIBQQwgAUEMSxs2AtyDg4AAQdiDg4AAQQAQ74CAgAAiAQ0AQQAhAQJAQQAoArCKg4AARQ0AQQBBACgCuN6CgABBAEEAKAKw3oKAACICGyIDNgLYioOAAEEAIAM2AsCKg4AAQQBBACgCtN6CgABBeHFBACADG0EAIAIbIgQ2AryKg4AAQQohBQJAIANB2gBKDQAgA0EKbUEBaiEFC0EAIQZBACACNgLIioOAAEEAIAU2AsSKg4AAQQBBADYC3IqDgABBAEEANgLUioOAAAJAAkAgAw0AIAIhBQwBCwNAIAIgBjYCACACIQYgAiAEaiIFIQIgA0F/aiIDDQALQQAgBSAEazYC1IqDgAALQQAgBTYCzIqDgAALQQBBATYCyN6CgAALQQBBADYCzN6CgABBACgC3N6CgAAhAgtBACACQX9qNgLc3oKAACACQQFKDQFBAEEANgLg3oKAAAwBC0EAQgA3A4CHg4AAQQBCADcD+IaDgABBAEIANwPwhoOAAEEAQgA3A+iGg4AACyAAQSBqJICAgIAAIAELpAgBAn8jgICAgABBMGsiAiSAgICAAEEAIQMCQAJAQQAoAsjegoAARQ0AIAJBhYuBgAA2AiggAkGduAo2AiQgAkGX1ICAADYCIEEVIQNBFUGo9YCAACACQSBqEN6AgIAADAELIAIgATYCLAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAEF8ag4aAAEQBBACEBAQCBEQCQoGBwsQDBAFDQ4DEA8QCyACIAIoAiwiAEEEajYCLEEAIQNBACAAKAIAIgApAgA3A5jdgoAAQQAgAEEYaikCADcDsN2CgABBACAAQRBqKQIANwOo3YKAAEEAIABBCGopAgA3A6DdgoAADBALQQAhAwJAQQAoApjdgoAADQAgAkGg2IKAADYCAEEEIAIQ7ICAgAAaCyACIAIoAiwiAEEEajYCLCAAKAIAIgBBACkDmN2CgAA3AgAgAEEYakEAKQOw3YKAADcCACAAQRBqQQApA6jdgoAANwIAIABBCGpBACkDoN2CgAA3AgAMDwsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYC+NyCgAAMDgsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADoAgN2CgAAMDQsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYCsN6CgABBACAAKAIENgK03oKAAEEAIAAoAgg2ArjegoAAIAIgAEEMajYCLAwMCyACIAIoAiwiAEEEajYCLCAAKAIAQaABNgIADAsLIAIgAigCLCIAQQRqNgIsQdzdgoAAIAAoAgBBNBDUioCAABoMCgtBACEDAkBBACgC5N2CgAANACACQcDYgoAANgIQQRIgAkEQahDsgICAABoLIAIgAigCLCIAQQRqNgIsIAAoAgBB3N2CgABBNBDUioCAABoMCQsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYCjN2CgABBACAAKAIENgKQ3YKAACACIABBCGo2AiwMCAsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYC5N6CgABBACAAKAIENgLo3oKAACACIABBCGo2AiwMBwsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADoA/tyCgAAMBgsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADoA/9yCgAAMBQtBACEDQQBCADcDoN6CgABBAEIANwOo3oKAACACIAIoAixBB2pBeHFBEGo2AiwMBAsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYCxN6CgAAMAwsgAiACKAIsIgBBBGo2AixBACEDQQAgACgCADYClN2CgAAMAgtBACEDQQAgAigCLEEHakF4cSIAKQMANwPw3oKAACACIABBCGo2AiwMAQtBASEDCyACQTBqJICAgIAAIAMLpgEBAn8CQCABQQFIDQADQEEAIQICQCAAQSBqKAIAIgNFDQAgAxDXioCAAEH/////A3EhAgsCQAJAIAIgAywAAGpBF28iAiADEO+CgIAAIgNFDQAgAEEMaiADKAIMNgIAIANBDGohAwwBCyAAQQxqQQA2AgAgAEEkaiACQQJ0QZiJg4AAaiIDKAIANgIACyADIAA2AgAgAEEoaiEAIAFBf2oiAQ0ACwsL7gICAn8CfkEAIQECQAJAIABCgIKAgHh8QoGCgIB4VA0AAkBBACgC+NyCgABFDQAgAKciAUEAKAKo3YKAABGBgICAAAAhAgJAQQAoAtCGg4AAIAFPDQBBACABNgLQhoOAAAsCQEEAKQPwhoOAACIAQgFTDQBBACEBAkAgACACrCIDfUEANQKUhoOAACIAVQ0AQQBBATYCgIeDgABBACkD+IaDgAAiBFANASAEIAN9IABVDQEMAwtBAEEANgKAh4OAAAtBACEBIAJBACgCmN2CgAARgYCAgAAAIgJFDQFBACACQQAoAqTdgoAAEYGAgIAAAEEAKAKUhoOAAGoiATYClIaDgAACQCABQQAoAryGg4AATQ0AQQAgATYCvIaDgAALQQBBACgCuIaDgABBAWoiATYCuIaDgAAgAUEAKALghoOAAE0NAkEAIAE2AuCGg4AADAILIACnQQAoApjdgoAAEYGAgIAAACEBCyABDwsgAguwAQEDfwJAEOuAgIAAIgINAAJAIABFDQACQAJAQQAoAuSGg4AAIgIgAEcNAEHkhoOAACECDAELIAJFDQECQANAIAIiAygCDCICRQ0BIAIgAEcNAAsLIAIgAEcNASADQQxqIQILIAIgACgCDDYCAAtBACECQQAoAuSGg4AAIQNB5IaDgAAhBAJAIAENACADRQ0AIANBDGohBCADKAIMIQMLIAAgAzYCDCAEIAA2AgALIAILbgECfkJ/IQECQBDrgICAAA0AQQApA/CGg4AAIQEgAEIAUw0AQQBBACkD+IaDgAAiAiACIAAgAiAAUxsgAFAbIAAgAkIAVRsiADcD8IaDgABBACAAQgBSIABBADUClIaDgABYcTYCgIeDgAALIAELVwECfkJ/IQECQBDrgICAAA0AQQApA/iGg4AAIQEgAEIAUw0AQQAgADcD+IaDgAACQEEAKQPwhoOAACICIABVDQAgAkIAUg0BC0EAIAA3A/CGg4AACyABCysBAn8Q64CAgAAhAUEAIQICQCAAQQFIDQAgAQ0AIACtEO6AgIAAIQILIAILHwEBf0EAIQECQBDrgICAAA0AIAAQ7oCAgAAhAQsgAQtrAQF/AkAgAEUNAAJAQQAoAvjcgoAARQ0AIABBACgCpN2CgAARgYCAgAAAIQFBAEEAKAKUhoOAACABazYClIaDgABBAEEAKAK4hoOAAEF/ajYCuIaDgAALIABBACgCnN2CgAARgoCAgAAACwvBAwIEfwJ+AkAgAA0AIAEQ7oCAgAAPCwJAIAFCAFINAAJAQQAoAvjcgoAARQ0AIABBACgCpN2CgAARgYCAgAAAIQJBAEEAKAKUhoOAACACazYClIaDgABBAEEAKAK4hoOAAEF/ajYCuIaDgAALIABBACgCnN2CgAARgoCAgAAAQQAPC0EAIQICQAJAIAFC//3//wdWDQACQCAAQQAoAqTdgoAAEYGAgIAAACIDIAGnIgJBACgCqN2CgAARgYCAgAAAIgRHDQAgAA8LAkBBACgC+NyCgABFDQACQEEAKALQhoOAACACTw0AQQAgAjYC0IaDgAALAkAgBCADayIFQQFIDQBBACECQQApA/CGg4AAIAWtIgF9QQA1ApSGg4AAIgZVDQBBACkD+IaDgAAiB0IBUw0AIAcgAX0gBlcNAgtBACECIAAgBEEAKAKg3YKAABGDgICAAAAiAEUNASAAQQAoAqTdgoAAEYGAgIAAACECQQBBACgClIaDgAAgAiADa2oiAjYClIaDgAAgAkEAKAK8hoOAAE0NAkEAIAI2AryGg4AADAILIAAgBEEAKAKg3YKAABGDgICAAAAhAgsgAg8LIAALuDcFEn8CfgF8BH4CfyOAgICAAEHwAmsiAySAgICAAAJAAkAgAC0AFUECcSIEDQBBACEFIAIhBgwBCyACQQRqIQYgAigCACEFC0EAIQcCQANAAkACQCABLQAAIgJBJUcNACABIQIMAQsgAkUNAkEAIQICQANAIAJBAWohCCABIAJqQQFqLQAAIglBJUYNASAIIQIgCQ0ACwsgACABIAgQ94CAgAAgASEHIAEgCGoiAi0AAEUNAgsCQCACLQABIghFDQAgAkEBaiECQX8hCkEAIQtBACEMQQAhDUEAIQ5BACEPQQAhEEEAIRFBACESIAYhEwJAA0BBASEJAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAIQRh0QRh1IghBYGoOGgIEDwMPDw8PDw8KAQYNCw8FCQkJCQkJCQkJAAsgCEHsAEcNDiACLQABIghB7ABGDQZBASELIAJBAWohAgwHC0ErIRAMCgtBICEQDAkLQQEhDwwIC0EBIQ4MBwtBASENDAYLQSwhDAwFC0ECIQsgAi0AAiEIIAJBAmohAgsgCEEYdEEYdSEIDAYLIAhBUGohCQJAAkAgAi0AASIIQVBqQf8BcUEJTQ0AIAJBAWohFAwBCwNAIAhB/wFxIAlBCmxqQVBqIQkgAkECaiEIIAJBAWoiASECIAgtAAAiCEFQakH/AXFBCkkNAAsgAUEBaiEUIAEhAgsgCUH/////B3EhEiAIQf8BcSIJQS5GDQIgCUHsAEYNAiAIQRh0QRh1IQggFCECDAULAkACQCAERQ0AQgAhFQJAIAUoAgAgBSgCBCIITA0AIAUgCEEBajYCBCAFKAIIIAhBAnRqKAIAEPiAgIAAIRULIBWnIQgMAQsgEygCACEIIBNBBGohEwtBAEEAIAhrIAhBgICAgHhGGyAIIAhBAEgiCRshEkEBIBEgCRshCSACLQABIghBLkYNAiAIQewARg0CIAhBGHRBGHUhCCACQQFqIQIgCSERDAQLAkACQCACLQABIgFBKkYNACACQQFqIQkgAUEYdEEYdSEIQQAhAgJAIAFBUGpB/wFxQQlLDQBBACECA0AgCCACQQpsakFQaiECIAlBAWoiCSwAACIIQVBqQf8BcUEKSQ0ACwsgAkH/////B3EhCgwBCwJAAkAgBEUNAEIAIRUCQCAFKAIAIAUoAgQiCEwNACAFIAhBAWo2AgQgBSgCCCAIQQJ0aigCABD4gICAACEVCyAVpyEIDAELIBMoAgAhCCATQQRqIRMLQX9BACAIayAIQYCAgIB4RhsgCCAIQQBIGyEKIAJBAmohCSACLAACIQgLAkAgCEHsAEYNACAJIQIMBAsgCUF/aiECCyARIQkLIAItAAEhCCAJIREgAkEBaiIBIQIgCA0AC0EAIQsgCSERQQAhCCABIQILQQAhCUEAIQECQANAIAggCUGgtIGAAGosAABGDQEgAUEBaiEBIAlBBmoiCUGKAUcNAAwECwsCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAlBo7SBgABqLQAAIgYOEQEDAwMEBwcFBggICQsACAECIgtBASELC0EAIQwLAkBB+p/4ASABdkEBcQ0AAkAgBEUNAEIAIRYgBSgCACAFKAIEIghMDRkgBSAIQQFqNgIEIAUoAgggCEECdGooAgAQ+ICAgAAhFgwZCwJAAkAgCw4DAQEAAQsgE0EHakF4cSIIQQhqIQYgCCkDACEWDBoLIBNBBGohBiATNAIAIRYMGQsCQCAERQ0AQQAhDgJAIAUoAgAgBSgCBCIISg0AIBMhBgwcCyAFIAhBAWo2AgRBACEOIAUoAgggCEECdGooAgAQ+ICAgAAhFSATIQYMGgsCQAJAAkAgCw4DAQEAAQsgE0EHakF4cSIIQQhqIQYgCCkDACEVDAELIBNBBGohBiATNQIAIRULQQAhDgwZCwJAAkAgBEUNAEQAAAAAAAAAACEXIAUoAgAgBSgCBCIITA0BIAUgCEEBajYCBCAFKAIIIAhBAnRqKAIAEPmAgIAAIRcMAQsgE0EHakF4cSIIQQhqIRMgCCsDACEXCyADQeABaiAXEN6KgIAAIAMgAykD4AEiFTcD4AIgAyADQeABakEIaikDACIWQoCAgICAgICAgH+FIBYgF0QAAAAAAAAAAGMiBxsiFjcD6AJBBiAKIApBAEgbIghBgMLXLyAIQYDC1y9JGyIIIAlBDEYgCUHaAEZyIAhBAEdxayIMQf8fcSIIQQpwQQN0QeC1gYAAaisDACEXAkAgCEEKSQ0AIAhBCmohCANAIBdEu73X2d982z2iIRcgCEF2aiIIQRNLDQALCwJAIAlByABHDQACQCAMIBUgFhDkioCAAL1CNIinQf8PcUGBeGpBA21BEHRBEHVqQQ5KDQAgA0HQAWogFxDeioCAACADQcABaiAVIBZCgICAgICAgIBQQvTM+PiFvNblPxDiioCAACADQbABaiADKQPAASADQcABakEIaikDACADKQPQASADQdABakEIaikDABDaioCAACADKQOwASADQbABakEIaikDABDkioCAACEXCyADQaABaiAXEN6KgIAAIANBkAFqIBUgFiADKQOgASADQaAB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IQILIAILagEBfwJAAkACQCAANQIQIAGsfCAANQIIUw0AIAAgARCDgYCAACIBQQFODQEMAgsgAUEBSA0BCyABQQFqIQEDQCAAIAAoAhAiA0EBajYCECADIAAoAgRqIAI6AAAgAUF/aiIBQQFLDQALCws5AAJAIAAgAhCDgYCAACICQQFIDQAgACgCBCAAKAIQaiABIAIQ1IqAgAAaIAAgACgCECACajYCEAsLMwEBfyOAgICAAEEQayIDJICAgIAAIAMgAjYCDCAAIAEgAhD2gICAACADQRBqJICAgIAAC30BAX8CQAJAIAAtABQNAAJAIAA1AgggAVkNACAANQIMIAFZDQAgAEESEICBgIAADAELAkACQCAAKAIAIgJFDQAgAiABEIGBgIAAIQIMAQsgARDugICAACECCyACDQEgAEEHOgAUIAAoAgxFDQAgABCCgYCAAAtBACECCyACC9QBAgJ/An4jgICAgABBMGsiAiSAgICAAAJAAkAgASgCACIDQQFODQBBMCEADAELIAEgA0F/ajYCACACQSBqIAApAwAiBCAAQQhqIgEpAwAiBRDfioCAACIDEOGKgIAAIAJBEGogBCAFIAIpAyAgAkEgakEIaikDABDjioCAACACIAIpAxAgAkEQakEIaikDAEIAQoCAgICAgJCBwAAQ4oqAgAAgACACKQMANwMAIAEgAkEIaikDADcDACADQTBqIQALIAJBMGokgICAgAAgAEEYdEEYdQtPACAAIAE6ABQCQCAAKAIMRQ0AIAAQgoGAgAALAkAgAUESRw0AIAAoAgAiAEUNACAAKAKAAiIARQ0AIABBEjYCDCAAIAAoAiRBAWo2AiQLC7oCAQF/AkACQAJAIABBpAJqMwEAIAFaDQACQCAAKAKgAg0AIABBtAJqIgIgAigCAEEBajYCAAwCC0EAIQIgAC0AV0UNAQwCCwJAIAFCgAFWDQACQCAAQcgCaigCACICRQ0AIAAgAigCADYCyAIgAEGwAmoiACAAKAIAQQFqNgIAIAIPCyAAQcQCaigCACICRQ0AIAAgAigCADYCxAIgAEGwAmoiACAAKAIAQQFqNgIAIAIPCwJAIABBwAJqKAIAIgJFDQAgACACKAIANgLAAiAAQbACaiIAIAAoAgBBAWo2AgAgAg8LAkAgAEG8AmooAgAiAkUNACAAIAIoAgA2ArwC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CUHQAmooAgAgAUsNACAJQaYCai8BACEDDAELIAFBACgCpN2CgAARgYCAgAAAIQMLIAAgAzYCGAwBCyAAIAQ2AiQgCEGAIEGAwAAgBBtyIQgLIAAgBzoAEiAAIAg7ARAgACACp0H/////B3E2AgwLQQAhCQsgCQtMAQF/AkAgAC4BECIBQX9KDQAgACAAKAIAEO+DgIAAGiAALwEQIQELAkAgAUGAIHFFDQAgACgCCCAAKAIkEYKAgIAAAAsgAEEBOwEQC5yfAgoEfwF+En8Bfgl/AX4CfAF+BH8CfiOAgICAAEHQBWsiASSAgICAAEEHIQIgACgCaCEDIAAoAgAhBEIAIQUCQAJAAkACQCAAKAIkQQdHDQBBACEGIAMhBwwBCyAAKAJYIQggBC0AVCEJQQAhBiAAQQA2AnhCACEFIABCADcDOCAAQQA2AiQgBEGoA2pBADYCAAJAIAQoApgCRQ0AQQkhAiADIQcMAgsgAEHYAGohCiAEQeQCaiELIABB/ABqIQwgAEHgAGohDSAAQeABaiEOIAMgACgCIEEUbGohByABQZAEakEEciEPIAFBqAVqIRAgAUGABWpBFGohESABQZwEaiESQQAhE0IAIQVBACEGQQAhFANAIBQhFSAFQgF8IQUCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIActAAAiFA62AZ0BnAGbAbsBR0Y8OL4BAQMF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QQJxDQAgAiAALQAYOgASCwJAIAFBEnFFDQAgAigCDCEDAkAgAUGACHFFDQAgAigCACADaiEDCyADIAIoAhQoAnhMDQAgAEESNgIUIAAoAgBBjNCAgABCf0EBQQAQooGAgAAaCwuNAQEDfwJAIABBEWotAABBkAFxRQ0AIAAQo4GAgAALIABBEGoiAiABQRBqKAIAIgM2AgAgACABKQMANwMAIABBCGogAUEIaikDADcDACACIANB/19xIgQ7AQBBACECAkAgA0EScUUNACABQRFqLQAAQSBxDQAgACAEQYCAAXI7ARAgABD8gYCAACECCyACC0UBAX8CQCAAKAIAIgIoAhQ0AnggAVoNACAAQRI2AhQgAkGM0ICAAEJ/QQFBABCigYCAABpBEg8LIAIgAacQjYKAgABBAAtLAAJAAkAgAEERai0AAEGQAXENACAAKAIYRQ0BCyAAEKiBgIAACyAAQZAIOwEQIABBAToAEiAAQgA3AwggACABQQAgAUEAShs2AgALnwEBAX8gACABQX8gARs2AhQCQCAAKAIALQAQQQFxRQ0AAkACQAJAAkAgAUGcf2oOAgABAgtBgdyAgAAhAgwCC0GX3ICAACECDAELQf2CgYAAIQIgAUGEBEYNAEGNuoCAACECIAFB/wFxIgFBHEsNAEGEgIQKIAF2QQFxDQAgAUECdEGA2YKAAGooAgAhAgsgACACQX9BAUEAEP+BgIAACwsKACAAKAIEKAIIC3oBAn8gAEEyakEAOwEAIAAgAC0AAUH5AXE6AAECQCAALQAADQAgACAALwFGIgFBAWoiAjsBRgJAIAJB//8DcSAAKAJ0IgIvARhJDQAgACABOwFGDAELQQAhAQJAIAItAAgNACAAELuEgIAAIQELIAEPCyAAELyEgIAACzoBAX8CQAJAIAAQsISAgAAiAkEQRg0AIAINASABQQA2AgAgABC7hICAAA8LIAFBATYCAEEAIQILIAILXgECfwJAIABBMmovAQANACAAIAAtAAFBAnI6AAEgACgCdCIBIAEoAjggASgCQCAALwFGQQF0aiICLQAAQQh0IAItAAFyIAEvARpxaiAAQSBqIAEoAlARgICAgAAACwthAQJ/IAIgAEEoaigCACIDNgIIAkAgACgCdCgCPCADayIDQQAgA0EAShsgAEEwai8BACIEIAMgBEgbIAFJ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QTBqELWCgIAANgIAQQYhCAwBC0EHIQggACABKAIAEKeBgIAAIglFDQACQAJAQhwQ7oCAgAAiCg0AIAAQnoGAgAAMAQsgCkEQakIANwAAIApCADcACCAKQRhqQQA2AAAgCiACNgIEIAogADYCACAKQQE6ABEgACgCECELAkACQCABKAI8IgwNAEGAgH4hDQwBCyALQQxqIQhBfyENA0AgDUEBaiENIAgoAgAhDiAIQRBqIQggDiAMRw0ACwsgASgCMCALIA1BBHRqKAIANgIEIAVBADYCTCAFIAE2AkQgACgC9AIhCCAAIAVBwABqNgL0AiAFIAg2AkggBSAKNgJAIAAgAigCDCAGIAcgCkEIaiINIAVBPGogAxGMgICAAAAhCCAAIAUoAkg2AvQCAkAgCEUNAAJAIAhBB0cNACAAEJ6BgIAACwJAAkAgBSgCPCINDQAgBSAJNgIAIAQgAEGpuICAACAFELWCgIAANgIADAELIAUgDTYCECAEIABBv7mAgAAgBUEQahC1goCAADYCACAFKAI8EPSAgIAACyAAIAoQ5ICAgAAMAQsCQCANKAIAIg1FDQAgDUIANwIAQQAhCCANQQhqQQA2AgAgCkEBNgIMIAooAgggAigCADYCACACIAIoAghBAWo2AggCQCAFKAJMDQAgBSABKAIANgIgIAQgAEHuuICAACAFQSBqELWCgIAANgIAIAoQ34OAgABBASEIDAILIAogAUE0aiINKAIANgIYIA0gCjYCACABLgEiIgZBAUgNASABKAIEIQdBACEPQQAhAwNAAkACQAJAIAcgA0EMbCILakGts4GAABCCg4CAACIKRQ0AIAoQ14qAgABB/////wNxIgJFDQAgAkEBaiEMQQAhDiAKIQ0DQAJAIApFDQAgCiAOaiEEQQAhCANAIAhBxsmAgABqLQAAQbC2gYAAai0AACANIAhqLQAAQbC2gYAAai0AAEcNASAIQQFqIghBBkcNAAsCQCAORQ0AIARBf2otAABBIEcNAQsgBEEGai0AACIIQSByQSBGDQMLIAxBf2ohDCANQQFqIQ0gDkEBaiIOIAJHDQALCyABIAEoAhwgD0H//wNxcjYCHAwBCwJAIA5BB0EGIAgbIghqIAJLDQAgDCAIayEMIA0gCGohCkEAIQgDQCANIAhqIAogCGotAAA6AAAgDCAIQQFqIghH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Sw0BQYSAhAogDHZBAXENASAMQQJ0QYDZgoAAaigCACEHDAELQYHcgIAAIQcLIAIgBzYCECAAIANBv7mAgAAgAkEQahC1goCAACIHNgIECyAAKAIMIQwgAiAAKALgATYCBCACIAc2AgAgDEGQrIGAACACEN6AgIAAQQEhBwsgACABNgLgASAAKAL8ARD0gICAAAJAIAAoAuQBIgxFDQAgAC0AyAENAAJAIAMoAvADDQAgDCAMKAIYQX9qIg42AhggDg0BCyADIAwQ54CAgAALAkAgACgC7AEiDEUNACAALQDIAUEBSw0AIAMgDBDggICAAAsCQCAAKALYASIMRQ0AIAMgDBDkgICAAAsgAyAFNgKAAiACQZAKaiSAgICAACAHC40BAQN/I4CAgIAAQRBrIgEkgICAgAAgACgCACECA0AgAiACIAFBDGoQrYKAgABqIQIgASgCDCIDQbcBRg0ACwJAAkAgA0GLf2pBAkkNACADQdx+akECSQ0AIANBO0YNACADQQF0QbDhgYAAai8BAEE7Rw0BC0E7IQMLIAAgAjYCACABQRBqJICAgIAAIAMLYQEDfyAAKAIEIQECQCAAKAIAIgIgAEEIaiIDTQ0AA0AgACACQXRqNgIAIAAgAi8BAiACQQRqENeCgIAAIAAoAgAiAiADSw0ACwsgAUGWjICAAEEAELOBgIAAIAAgATYCBAuDZgIGfwF+I4CAgIAAQcABayIEJICAgIAAIAAoAgAhBQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJA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AhghBQJAAkAgDyAAKAIEIhCsgaciDkUNACAFIREMAQsCQCAQQQRqEPKAgIAAIhENAEGKGCEODAQLIBFBADYCACAFIAsgBRsgETYCACAAIBE2AhgLIBEgDmpBBGogASACIBAgDmsiESACIBFIGyIRENSKgIAAGiAAIAApAxAgEax8Ig83AxAgASARaiEBQQAhDiACIBFrIgJBAEoNAAwCCwtBACEOCyAEQSBqJICAgIAAIA4LvAEDA38CfgF/AkAgACkDECABVw0AAkACQAJAIAFCAFINACAAQQxqIQJBACEDDAELQQAhAyAAKAIMIgJBAEchBAJAIAJFDQAgADQCBCIFIAFZDQAgBUIBhiEGA0AgAigCACICQQBHIQQgAkUNASAGIAFTIQcgBiAFfCEGIAcNAAsLIARFDQEgAiEDCyACKAIAELODgIAAIAJBADYCAAsgAEEANgIoIAAgATcDECAAIAM2AhggAEIANwMgC0EACwQAQQALDgAgASAAKQMQNwMAQQALygIBA38jgICAgABBEGsiAiSAgICAACAAIAFBA3YiAzoACCAAQQQgA0ECdGs6AAogACgCNCEEAkACQAJAAkACQCABQXdxQX5qDgQAAQECAQsgAEGngICAADYCUCAAQaiAgIAANgJMIABBADsAASAAIAQvARo7AQ4gBEEcaiEBDAILIABBp4CAgAA2AlAgAEGogICAADYCTCAAQQA7AAEgAkGFi4GAADYCCCACQZWZBDYCBCACQc/BgIAANgIAQQshAEELQaj1gIAAIAIQ3oCAgAAMAgsgAEGpgICAAEGqgICAACADQf8BcSIBGzYCUCAAQauAgIAAQayAgIAAIAEbNgJMIAAgAUEARzoAAiAAQQE6AAEgACAELwEeOwEOIARBIGohAQsgACABLwEAOwEQIAAgBC0AFToAC0EAIQALIAJBEGokgICAgAAgAAuGAgEJfyOAgICAAEEQayIBJICAgIAAAkACQCAALwEYIgJFDQBBfEF7IAAtAAgbIAAoAjQoAigiA2ohBCACQQF0IAAvARIiAmohBSAAKAI4IgYgAmohAkEAIQcCQANAQYaaBCEIIAItAABBCHQgAkEBai0AAHIiCSAFSQ0BIAkgBEoNAQJAIAkgACAGIAlqIAAoAkwRg4CAgAAAaiADSg0AIAJBAmohAiAHQQFqIgcgAC8B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ABogAigCRCEAIAJB0ABqJICAgIAAIAALKgEBfyAAIAEgAhCGgYCAACEDAkAgAUUNACADDQAgACABEOSAgIAACyADC80DBAN/A34BfwF8I4CAgIAAQTBrIgMkgICAgAACQAJAAkACQCAAKAIYQSBIDQAgACAAKAIgIgQ2AgggACAALwEQQS1xIgU7ARAMAQsgAEEgQQAQn4GAgAANASAALwEQIQUgACgCCCEECwJAAkAgBUEEcUUNACAAKQMAIQYgA0EAOgAlIAYgBkI/hyIHfCAHhSEHQRQhBQNAIANBEGogBWogByAHQgqAIghCCn59p0EwcjoAACAFQX9qIQUgB0IJViEJIAghByAJDQALAkAgBkJ/VQ0AIANBEGogBWpBLToAACAFQX9qIQULIAQgBSADQRBqakEBakEVIAVrENSKgIAAGgwBCyADQSRqQQA7AQAgA0IANwIcIANBADYCECADIAQ2AhQgA0EgNgIYAkACQCAFQSBxRQ0AIAApAwC5IQoMAQsgACsDACEKCyADIAo5AwAgA0EQakG00ICAACADEP2AgIAAIAQgAygCIGpBADoAAAsgACgCCBDXioCAACEFIABBAToAEiAAIAVB/////wNxNgIMIAAgAC8BEEGCBHIiBUHT/wNxIAUgAhs7ARBBACEFDAELIABBADoAEkEHIQULIANBMGokgICAgAAgBQs1AAJAIAAoAhggAU4NACAAIAFBABCfgYCAAA8LIAAgACgCIDYCCCAAIAAvARBBLXE7ARBBAAveAQMBfwR+AX8jgICAgABBIGsiAiSAgICAAEKAgICAgICQgcAAIQNCgICAgICAkIHAAEKAgICAgIDA/z8gAUEBcRshBEIAIQUCQCABQQJJDQBCACEGA0AgAkEQaiAGIAMgBiADEOKKgIAAIAIgBSAEIAIpAxAiBkIAIAFBAnEiBxsgAkEQakEIaikDACIDQoCAgICAgMD/PyAHGxDiioCAACABQQNLIQcgAkEIaikDACEEIAIpAwAhBSABQQF1IQEgBw0ACwsgACAFNwMAIAAgBDcDCCACQSBqJICAgIAACyUAAkAgAEERai0AAEGQAXFFDQAgABCjgYCAAAsgAEEEOwEQIAALbQACQCAAQRFqLQAAQZABcUUNACAAIAEgAhCrhICAAA8LIAAgASkDADcDACAAQRBqIAFBEGooAgA2AgAgAEEIaiABQQhqKQMANwMAAkAgAUERai0AAEEgcQ0AIAAgAC8BEEH/nwJxIAJyOwEQCwvRAQMBfwF+An8jgICAgABBEGsiASSAgICAAAJAAkACQCAAQRFqLQAAQQRxRQ0AQgAhAiAAEO+BgIAADQELAkACQCAAKAIIIAAgACgCDCAALQASELGCgIAAIgNBAEoNAEEIIQQgAw0DIAAoAgggAUEIaiAAKAIMIAAtABIQsoKAgABBAUwNAQwDC0EIIQQgA0EBRw0CIAAoAgggAUEIaiAAKAIMIAAtABIQsoKAgAANAgsgASkDCCECCyAAIAI3AwBBBCEECyABQRBqJICAgIAAIAQLgQEAAkACQCABQcMASA0AIAAvARAiAUEEcQ0BAkAgAUEIcQ0AIAFBAnFFDQIgAEEBELCCgIAADwsgABCzgoCAAA8LIAFBwgBHDQACQCAALwEQIgFBAnENACABQSxxRQ0AIAAgAkEBEPGDgIAAGiAALwEQIQELIAAgAUHT/wNxOwEQCwuWAgECf0EAIQMCQCAALwEQIgRBAXENAAJAAkACQAJAAkAgAUG/f2oOBQAEAQIDBAsCQCAEQRBxDQAgAEHCACACEPeDgIAAIAAvARAiAUECcUUNBSAAIAFBwOQDcUEQcjsBEEEADwsgACAEQdDkA3E7ARBBAA8LIAAQrISAgABBAA8LIAAgABD4gICAADcDACAAIAAvARBBwOQDcUEEcjsBEEEADwsgACAAEPmAgIAAOQMAIAAgAC8BEEHA5ANxQQhyOwEQQQAPCyAAIARBA3ZBAnEgBHI7ARAgAEHCACACEPeDgIAAIAAgAC8BECIDQcP3A3E7ARACQCADQQJxDQAgACACOgASQQAPCyAALQASIAJHIQMLIAMLqwQEBH8CfgJ8An4jgICAgABBwABrIgMkgICAgAACQAJAIAEvARAiBCAALwEQIgVyIgZBAXFFDQAgBEEBcSAFQQFxayEGDAELAkAgBkEscUUNAAJAIAQgBXEiBkEkcUUNAEF/IQYgACkDACIHIAEpAwAiCFMNAiAHIAhVIQYMAgsCQCAGQQhxRQ0AQX8hBiAAKwMAIgkgASsDACIKYw0CIAkgCmQhBgwCCwJAIAVBJHFFDQACQCAEQQhxRQ0AIANBMGogACkDABDgioCAACADQSBqIAErAwAQ3oqAgAAgAykDMCIHIANBMGpBCGopAwAiCCADKQMgIgsgA0EgakEIaikDACIMENuKgIAAIQFBfyAHIAggCyAMENyKgIAAQQBKIAFBAEgbIQYMAwtBfyEGIARBJHFFDQIgACkDACIHIAEpAwAiCFMNAiAHIAhVIQYMAgtBASEGIAVBCHFFDQECQCAEQSRxDQBBfyEGDAILIANBEGogASkDABDgioCAACADIAArAwAQ3oqAgABBAUF/QQAgAykDECIHIANBEGpBCGopAwAiCCADKQMAIgsgA0EIaikDACIMENyKgIAAQQBKGyAHIAggCyAMENuKgIAAQQBIGyEGDAELAkAgBkECcUUNAEEBIQYgBUECcUUNAUF/IQYgBEECcUUNASACRQ0AIAAgASACQQAQrYSAgAAhBgwBCyAAIAEQroSAgAAhBgsgA0HAAGokgICAgAAgBgs9AQF/AkAgAC8BECICQSRxRQ0AIAApAwBCAFIPCwJAIAJBAXENACAAEPmAgIAARAAAAAAAAAAAYiEBCyABC5IBAQJ/I4CAgIAAQRBrIgEkgICAgAACQCAAKAIkIAApAzhBACABQQxqEKWEgIAAIgINAAJAIAEoAgxFDQAgAUGFi4GAADYCCCABQaWSBTYCBCABQc/BgIAANgIAQQshAkELQaj1gIAAIAEQ3oCAgAAMAQtBACECIABBADYCGCAAQQA6AAMLIAFBEGokgICAgAAgAgtbAQN/AkACQAJAIAAoAiQiAS0AACICQQNJDQACQCABEMaCgIAAIgNFDQAgAEEANgIYDAILIAEtAAAhAgtBACEDIABBADYCGCACQf8BcUUNAQsgAEEBOgACCyADC64BAgJ/AX4CQCABKAIQIgJBAU4NAEIADwsgAiABKAIMIgNqIQIgACADQShsaiEBQgAhBANAAkACQCABQRBqLwEAIgBBJHFFDQAgASkDACAEfCEEDAELAkAgAEEIcUUNACABEPiAgIAAIAR8IQQMAQsgAEEScUUNACAEIAFBDGo0AgB8IQQgAEGACHFFDQAgBCABNAIAfCEECyABQShqIQEgA0EBaiIDIAJIDQALIAQL+wICBX8BfiAAKAJYIQQCQCABQQFIDQAgBCAAKAIUIAFrQShsaiEEC0EAQcgBIAMbIAJBA3RB2ABqIgVqIQYCQCAAKAJgIAFBAnQiB2ooAgAiCEUNACAAIAgQ4oOAgAAgACgCYCAHakEANgIACwJAAkAgBCgCGCIHIAZIDQAgBCgCICEHDAELAkAgB0EBSA0AIAQoAhQgBCgCIBDkgICAAAsgBqwhCQJAAkAgBCgCFCIHRQ0AIAcgCRCBgYCAACEHDAELIAkQ7oCAgAAhBwsgBCAHNgIIIAQgBzYCIAJAIAcNACAEQQA2AhhBAA8LIAQgBjYCGAsgACgCYCABQQJ0aiAHNgIAIAdCADcDACAHIAI7ATQgB0EYakIANwMAIAdBEGpCADcDACAHQQhqQgA3AwAgByAHIAJBAnRqQdAAajYCQCAHIAM6AAACQCADDQAgByAEKAIIIAVqIgQ2AiQgBEEQakEANgIAIARBCGpCADcDACAEQgA3AwALIAcLbgEDf0EAIQECQCAAKALgAiICQQVvDQACQCAAIAAoAvgCIAKsQgKGQhR8EIaBgIAAIgINAEEHDwsgAiAAKALgAkECdGoiA0IANwIAQQAhASADQRBqQQA2AgAgA0EIakIANwIAIAAgAjYC+AILIAEL/woGB38BfgR/An4DfwF+I4CAgIAAQdAAayIEJICAgIAAAkACQCABLQBVDQAgACABQZHEgIAAEMaEgIAAQQEhBQwBCwJAIAEoArgBQQJIDQAgACABQaiegIAAEMaEgIAAQQEhBQwBCyABKAI8IQYCQAJAIAMNAEGts4GAACEHDAELQQEhBQJAQoSAkIDAgIACIAMzARCIp0EBcQ0AIAAgAUGD2YCAABDGhICAAAwCCyADQQEQ+oCAgAAhByABIAEoAjxBeHFBBnI2AjwLIAEtAF4hCEEAIQkgAUEAOgBeIAEgASgCGCIKQQZyNgIYIAEgASkDICILQv7b/v9ug0KBBIQ3AyBBASEMAkAgASgCECACQQR0aiIFKAIEIg0oAgQoAgAiDi0ADA0AIA4tABBBAEchDAsgBSgCACEPIAEpA3AhECABKQNoIREgASgCFCEOIAQgBzYCQCABIABBg/SAgAAgBEHAAGoQz4SAgAAhBSABIAY2AjwCQCAFDQAgASgCECIHIA5BBHRqIgkoAgQhBgJAAkAgA0UNACAGKAIEKAIAKAJAIQUgBEIANwNIAkAgBSgCACISRQ0AIAUgBEHIAGogEigCGBGDgICAAAANAiAEKQNIQgBVDQIgASgCECEHCyABIAEoAhhBCHI2AhgLIA0oAgQiBS0AFiESIAUoAighEyAFKAIkIRQgBiAHIAJBBHRqKAIMKAJQEKmDgIAAAkAgDSgCBCgCACgC5AEiAigCECIFQX9KDQBCACAFrEIKhn0gAigCHCACKAIYaqx/IhVCgJTr3AMgFUKAlOvcA1MbpyEFCyAGIAIoAhQiAiAFIAUgAkgbENCEgIAAGiAGQSEQ0YSAgAAgASAAQdOBgYAAENKEgIAAIgUNASANIANFQQF0QQAQt4GAgAAiBQ0BIBIgFCATayIFIAUgEkgbIQcgDSgCBCECAkAgAw0AIAIoAgAtAAVB/wFxQQVHDQAgAUEANgJkC0EHIQUgBiACKAIkIAdBABC4gYCAAA0BAkAgDA0AIAYgASgCZCAHQQAQuIGAgAANAgsgAS0AVw0BQQAhBQJAAkAgASwAWiICQQBIDQAgAkH/AXEhBQwBCyANKAIEIgItABFFDQBBAkEBIAItABIbIQULIAYgBRDThICAABogAUGwAWogDjoAACAEIA82AjAgASAAQZyOgYAAIARBMGoQz4SAgAAiBQ0BIAQgDzYCICABIABB3KCBgAAgBEEgahDPhICAACIFDQEgAUEAOgCwASAEIA82AhAgASAAQYWNgYAAIARBEGoQz4SAgAAhBSABIAEoAhhBe3E2AhggBQ0BIAQgDzYCACABIABB7ZmBgAAgBBDPhICAACIFDQFBfiEAA0AgDSAAQcbOgYAAai0AACIFIARByABqEKiEgIAAIAYgBSAEKAJIIABBx86BgABqLQAAahC7gYCAACIFDQIgAEECaiIAQQdNDQALAkAgAw0AIA0gBhDUhICAACIFDQILIAYQx4SAgAAiBUEAR0EBdCEAAkAgBQ0AIAMNAEEAIQVBACEAAkAgBigCBCICLQARRQ0AQQJBASACLQASGyEACyANIAAQ04SAgAAaQQAhAAsgAw0BIAANASANIAYoAgQiBSgCJCIAIAUtABYiAyAAIAUoAihrIgUgBSADSBtBARC4gYCAACEFDAELIAAgAUHEmYCAABDGhICAAEEBIQULIAEgEDcDcCABIBE3A2ggASALNwMgIAEgCjYCGCABIAg6AF4gAUGwAWpBADoAACANQX9BAEEBELiBgIAAGiABQQE6AFUCQCAJRQ0AIAkoAgQQ5oGAgAAgCUEANgIMIAlBADYCBAsgARC8gYCAAAsgBEHQAGokgICAgAAgBQscAQF/IAAgACgCACIBKALQATYCBCABIAA2AtABC/0BAQN/IAAoAhQhAQJAAkAgAEERai0AAEGQAXENACAAKAIYRQ0BCyAAEKiBgIAACwJAIAFCIBCBgYCAACICDQBBBw8LAkACQCABRQ0AIAFB1AJqKAIAIAJNDQBBgAEhAyABQcwCaigCACACTQ0BIAFB0AJqKAIAIAJLDQAgAUGmAmovAQAhAwwBCyACQQAoAqTdgoAAEYGAgIAAACEDCyACQQA2AhQgAkIANwIIIAIgATYCBCACQQA2AgAgAkEANgIcIAJBATsBGiAAQa2AgIAANgIkIABBkCA7ARAgACACNgIIIAIgAkEgajYCECACIANB4P8/akEEdjsBGEEAC8sDBAZ/AX4BfwF+I4CAgIAAQbABayIBJICAgIAAQQAhAiABQQBBoAEQ1YqAgAAhAwJAIABFDQBBACECA0AgACgCCCEEIABBADYCCAJAAkAgAg0AIAMhBQwBC0EAIQYgAyEFA0AgA0GgAWohAQJAA0AgAikDACEHIAAhCANAAkAgByAIIgApAwAiCVUNAAJAIAcgCVkNACABIAI2AgggAiEBCyACKAIIIgINAgwDCyABIAA2AgggACEBIAAoAggiCA0ACwsgACEBIAIhAAsgASAANgIIIAMoAqgBIQAgBUEANgIAIAMgBkEBaiIGQQJ0aiIFKAIAIgINAAsLIAUgADYCACADKAIAIQIgBCEAIAQNAAsLQQEhBQNAAkAgAyAFQQJ0aigCACIARQ0AAkAgAg0AIAAhAgwBCyADQaABaiEBAkADQCACKQMAIQcgACEIA0ACQCAHIAgiACkDACIJVQ0AAkAgByAJWQ0AIAEgAjYCCCACIQELIAIoAggiAg0CDAMLIAEgADYCCCAAIQEgACgCCCIIDQALCyAAIQEgAiEACyABIAA2AgggAygCqAEhAgsgBUEBaiIFQShHDQALIANBsAFqJICAgIAAIAILbgECfyOAgICAAEEQayIDJICAgIAAA0ACQAJAIAAiBCgCDCIARQ0AIAAgASADQQxqEISEgIAAIAMoAgwgBDYCCAwBCyABIAQ2AgALIARBCGohASAEKAIIIgANAAsgAiAENgIAIANBEGokgICAgAALawECfwJAAkAgAC8BGCIBRQ0AIAFBf2ohAiAAKAIQIQEMAQsCQCAAKAIEQvgHEIGBgIAAIgENAEEADwsgASAAKAIANgIAIAAgATYCACABQQhqIQFBPiECCyAAIAI7ARggACABQRBqNgIQIAELgAEBBH8jgICAgABBEGsiASSAgICAACAAKAIIIQIgAEIANwMIAkACQCACDQAgACEDDAELQQEhBANAIAIiAyAANgIMIAEgAygCCDYCDCADIAFBDGogBBD6hICAADYCCCAEQQFqIQQgAyEAIAEoAgwiAg0ACwsgAUEQaiSAgICAACADC2UBAn8CQCAAEIWEgIAAIgJFDQAgAkEANgIIIAIgATcDAAJAAkAgACgCDCIDRQ0AAkAgAykDACABUw0AIAAgAC8BGkH+/wNxOwEaCyADIAI2AggMAQsgACACNgIICyAAIAI2AgwLC3QBAX8CQCAALwEaIgJBAnENAAJAIAJBAXENACAAIAAoAggQg4SAgAA2AgggAC8BGiECCyAAIAJBA3I7ARoLAkAgACgCCCICDQBBAA8LIAEgAikDADcDACAAIAIoAggiAjYCCAJAIAINACAAEM6EgIAAC0EBC5QFAQh/I4CAgIAAQTBrIgQkgICAgAAgACgCFCEFIAMhBgJAIAJFDQAgAyEGA0AgACgCEEUNASAAIAIQ+ISAgAANASAGQX9qIQcCQCAAKAIEIgggAiAEQSxqQQAgCCgC3AERhYCAgAAARQ0AIAQgAjYCICAAQervgIAAIARBIGoQioSAgAAgByEGDAILIAQoAiwoAgQhCQJAAkACQCABRQ0AIAkoAAQiCEEYdCAIQQh0QYCA/AdxciAIQQh2QYD+A3EgCEEYdnJyIQoCQCAAKAIAIgstABFFDQAgACACQQJBABCLhICAACAAKAIAIQsLIAogCygCKEECdkF+aksNAQJAIApBAUgNACAKQX9qIQggCUELaiEGA0AgBkF9aigAACICQRh0IAJBCHRBgID8B3FyIAJBCHZBgP4DcSACQRh2cnIhAgJAIAstABFFDQAgACACQQJBABCLhICAAAsgACACEPiEgIAAGiAIRQ0BIAhBf2ohCCAGQQRqIQYgACgCACELDAALCyAHIAprIQYMAgsCQCAAKAIALQARRQ0AIAdFDQAgACAJKAAAIgZBGHQgBkEIdEGAgPwHcXIgBkEIdkGA/gNxIAZBGHZyckEEIAIQi4SAgAALIAch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AEE4bGohCQsgB0EDSiEKIAUhByAKDQALCyABIAYgCCgCBEE4bGooAhhFNgIAIAMoAgwtABchBQsgAkEQaiSAgICAACAFC5UDAQd/I4CAgIAAQYACayICJICAgIAAIAAoAgghAwJAAkAgACgCDA0AIAAgAygCHBCihICAACIENgIMAkAgBA0AQQchAwwCCyAEQQA6ABcgBCAAKAIIIgMoAhwvAQY7ARQLIABBsoCAgABBs4CAgABBtICAgAAgAy0APCIDQQJGGyADQQFGGzYCICABKAIAIQRBACEFIAJBAEGAAhDVioCAACEGAkAgBEUNAANAAkACQCABKAIEIgNFDQACQCADIARHDQBBACEHDAILIAMgBCgCBGohBwwBCyAEKAIEIQcLIARBADYCBAJAAkAgBigCACIIDQAgBiEDDAELIAYhAwNAIAAgBCAIEOyEgIAAIQQgA0EANgIAIANBBGoiAygCACIIDQALCyADIAQ2AgAgByEEIAcNAAsLQQAhAwNAAkAgBiAFaigCACIERQ0AAkAgAw0AIAQhAwwBCyAAIAMgBBDshICAACEDCyAFQQRqIgVBgAJHDQALIAEgAzYCACAAKAIMLQAXIQMLIAJBgAJqJICAgIAAIAMLkAEBA39BAiEBA0AgASICQQF0IQEgAiAASA0AC0EAIQECQAJAQQAoAvjegoAAIgBFDQBB5AAgABGBgICAAAANAQsgAkE8bEEQaiIArBDugICAACIDRQ0AIANBACAAENWKgIAAIgEgAUEQaiIANgIMIAFBADYCBCABIAI2AgAgASAAIAJBOGxqNgIIIAEhAQsgAQuZAgMBfwF+B38jgICAgABBEGsiBCSAgICAACACKQMAIQUgAyABEJyEgIAAIgY2AgBBAEEHIAYbIQcgBkEARyEIAkACQAJAIAFBAUgNACAIRQ0AIABBKGohCUEAIQpBASELA0ACQAJAIAAgBigCDCAKaiIIIAkgBRDyhICAACIHDQAgBEIANwMIIAggBEEIahDzhICAACEHIAhBCGoiDCAEKQMIIAgpAwB8NwMAIAdFDQELIAhBCGopAwAhBQwDCyAIEPGEgIAAIQcgDCkDACEFIAdFIQggCyABTg0BIAtBAWohCyAKQThqIQogB0UNAAsLIAgNAQsgBhDqg4CAACADQQA2AgALIAIgBTcDACAEQRBqJICA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gAAgBEEoaiACLQAEEPqAgIAAIQAgBCACLQAEEPqAgIAAIQECQAJAAkAgAEUNACABDQELIANFDQEgA0EHOgAADAELIAIoAgggBCgCNCAAIAQoAgwgASACKAIMEYeAgIAAACEFCwJAIAQoAkBFDQAgBEEoahCogYCAAAsgBCgCGEUNACAEEKiBgIAACyAEQdAAaiSAgICAACAFC/gBAQR/IAEoAgwhAiAAKAIMIQMCQAJAIAEvARAiBCAALwEQIgVyQYAIcUUNAAJAIAVBgAhxIgUgBHFFDQAgACgCACABKAIAaw8LAkAgBUUNAAJAIAJBAUgNACABKAIIIQFBfyEEIAIhAwNAIAEtAAANBCABQQFqIQEgA0F/aiIDDQALCyAAKAIAIAJrDwsCQCADQQFIDQAgACgCCCEAIAMhAgJAA0AgAC0AAA0BIABBAWohACACQX9qIgJFDQIMAAsLQQEPCyADIAEoAgBrDwsgACgCCCABKAIIIAIgAyADIAJKGxDPioCAACIBIAMgAmsgARshBAsgBAvjAQEEfyOAgICAAEEQayECAkACQCABQv//////////AFYNAEEAIQMDQCACQQZqIANqIAGnQYABcjoAACADQQFqIQMgAUL/AFYhBCABQgeIIQEgBA0ACyACIAItAAZB/wBxOgAGIANBf2ohBSACQQZqQX9qIQIgAyEEA0AgACACIARqLQAAOgAAIABBAWohACAEQX9qIQQgBUF/aiIFQX9HDQAMAgsLIAAgATwACCABQgiIIQFBByEDA0AgACADaiABp0GAAXI6AAAgAUIHiCEBIANBf2oiA0F/Rw0AC0EJIQMLIAML9wQBA38jgICAgABBIGsiASSAgICAAAJAAkACQAJAAkAgACwARCICQQBIDQAgACgCdCEDIAJFDQEgAygCSBCWgYCAACAAIAAtAERBf2oiAzoARAJAIANB/wFxRQ0AA0AgACADQRh0QRh1QQJ0akH4AGooAgAoAkgQloGAgAAgACAALQBEQX9qIgM6AEQgA0H/AXENAAsLIAAgACgCeCIDNgJ0DAILAkAgACgCQCIDDQAgAEEBOgAADAMLAkAgAC0AACICQQNJDQACQCACQQRHDQAgACgCBCECDAULIAAoAhAQ9ICAgAAgAEEBOgAAIABBADYCECAAKAJAIQMLAkAgACgCCCgCBCADIABB9ABqQQAgAC0AAhDVhICAACICRQ0AIABBAToAAAwECyAAQQA6AEQgACAAKAJ0IgMtAAE6AEULAkAgAy0AAEUNACADLQABIAAoAnBFRg0BCyABQYWLgYAANgIIIAFBh7QENgIEIAFBz8GAgAA2AgBBCyECQQtBqPWAgAAgARDegICAAAwCC0EAIQIgAEEAOwFGIABBMmpBADsBACAAIAAtAAFB8QFxOgABAkAgAy8BGEUNACAAQQA6AAAMAgsCQCADLQAIDQACQCADKAIEQQFHDQAgAy0ACSADKAI4akEIaigAACEDIABBADoAACAAIANBGHQgA0EIdEGAgPwHcXIgA0EIdkGA/gNxIANBGHZychCyhICAACECDAMLIAFBhYuBgAA2AhggAUGTtAQ2AhQgAUHPwYCAADYCEEELIQJBC0Go9YCAACABQRBqEN6AgIAADAILIABBAToAAAtBECECCyABQSBqJICAgIAAIAILbQECfyAAQTJqQQA7AQAgACAALQABQfkBcToAASAAIAAsAEQiAUF/aiICOgBEIAAgAUEBdCAAakHGAGovAQA7AUYgACgCdCEBIAAgACACQRh0QRh1QQJ0akH4AGooAgA2AnQgASgCSBCWgYCAAAvaAQEDfyOAgICAAEEQayICJICAgIAAAkACQCAALABEIgNBE0gNACACQYWLgYAANgIIIAJB/bIENgIEIAJBz8GAgAA2AgBBCyEAQQtBqPWAgAAgAhDegICAAAwBCyAAQTJqQQA7AQAgACADQQF0akHIAGogAC8BRjsBACAAIANBAWo6AEQgACAALQABQfkBcToAASAAKAIUIQQgACADQQJ0akH4AGogACgCdDYCACAAQQA7AUYgBCABIABB9ABqIAAgAC0AAhDVhICAACEACyACQRBqJICAgIAAIAALeQECfwJAIAFFDQACQCABKAIcIgIoAhQiA0UNACAAIAMQ5YCAgAALAkAgAigCGCIDRQ0AIAAgAxDEgoCAAAsCQCACKAIIIgJFDQAgACACQQEQ1oSAgAALAkAgASgCDCICRQ0AIAAgAhDlgICAAAsgACABEOSAgIAACwvBAgEDfyOAgICAAEEQayIFJICAgIAAIAAoAgQhBgJAAkAgAUEBSw0AAkAgAQ0AIAVBhYuBgAA2AgggBUG5rQQ2AgQgBUHPwYCAADYCAEELIQBB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IA8gESAPKAJMEYOAgIAAACERIA9BADoADCAHIApqIBE2AgAgEkEYdCASQQh0QYCA/AdxciASQQh2QYD+A3EgEkEYdnJyIRoMAQsgBiAKaiIaIA8oAjggDygCQCANQQF0ayATaiINLQAAQQh0IA1BAWotAAByIA8vARpxaiISNgIAIBIoAAAhDSAHIApqIA8gEiAPKAJMEYOAgIAAACIdNgIAIA1BCHZBgP4DcSANQRh2ciEeIA1BGHQgDUEIdEGAgPwHcXIhDQJAIBctABhBDHFFDQAgEiAPKAI4ayIfIB1qIBcoAihKDQAgECAfaiASIB0Q1IqAgAAaIBogECASIA8oAjhrajYCAAsgDSAeciEaIA8gESAPLQAMayAdIAFB/ANqEMOEgIAAIAEoAvwDIQ0LIAxBf2ohDCATQX5qIRMgCkF8aiEKIA1FDQEMAgsLIAEgGjYC7AIgASAXKAIkIBxBA2pB/P///wdxIg1BBmxqrBDugICAACIKNgLoAQJAIAoNACABQQc2AvwDQQAhEgwDCyABIAEoAvADIgw2AuQBIAEgCiANQQJ0aiISNgLsASASIA1BAXRqIR8gDEESaiEgIAwoAjgiHCAMLwESaiEKIAwtAAgiIUECdCEiIAwtAAIhI0EAIR4gDEE4aiIkISVBACEmIAwhGwJAAkADQCAbLwEaIR0gEiABKALgASINQQF0akEAIBstAAwgGy8BGCISakEBdBDVioCAABoCQAJAAkACQCAbLQAMIhFFDQAgEiAbLwEcIhNJDQECQCATRQ0AIA1BAnQhEgNAIAEoAugBIBJqIBwgCi0AAEEIdCAKQQFqLQAAciAdcWo2AgAgASANQQFqIg02AuABIApBAmohCiASQQRqIRIgE0F/aiITDQALCyARQQEgEUEBSxshESANQQJ0IRIgG0EkaiETA0AgASgC6AEgEmogEygCADYCACASQQRqIRIgE0EEaiETIA1BAWohDSARQX9qIhENAAsgASANNgLgAQsCQCAKIBwgIC8BAGogGy8BGEEBdGoiE08NACANQQJ0IRIDQCABKALoASASaiAcIAotAABBCHQgCkEBai0AAHIgHXFqNgIAIAEgDUEBaiINNgLgASASQQRqIRIgCkECaiIKIBNJDQALCyABQZADaiAmQQJ0IgpqIA02AgAgJiAWTw0CICMNAiABKALsASANQQF0IhJqIAFB8AJqIApqKAIAIhM7AQAgHyAeaiABQcgDaiAKaigCACATQf//A3EiChDUioCAACETIAEoAugBIA1BAnQiEWogEyAiajYCACABKALsASASaiISIBIvAQAgImsiEjsBACAKIB5qIR4CQCAbLQAIRQ0AIBJB//8DcUEDSw0CA0AgHyAeakEAOgAAIAEoAuwBIAEoAuABIg1BAXRqIgogCi8BAEEBaiIKOwEAIB5BAWohHiAKQf//A3FBBEkNAAwDCwsgASgC6AEgEWooAgAgJSgCACgACDYAACABKALgASENDAELIAFBhYuBgAA2AogBIAFBjckENgKEASABQc/BgIAANgKAAUELQaj1gIAAIAFBgAFqEN6AgIAADAQLIAEgDUEBajYC4AELAkAgJiAWRg0AIAFB8ANqICZBAWoiJkECdGooAgAiGygCOCIcLQAAICQoAgAtAABHDQIgG0E4aiElIBwgG0ESaiIgLwEAaiEKIAEoAuwBIRIMAQsLICIgFygCKGpBdGohHEEAIRFBACEKA0AgAUHgAWogCkECdGoiDUEQaiAMKAI8NgIAIA1BKGogAUGQA2ogEUECdCIeaigCACIbNgIAQQAhHQJAIApFDQAgCkF/aiINIAogGyABQeABaiANQQJ0akEoaigCAEYbIR0LAkAgIw0AIAFB4AFqIB1BAWoiHUECdGoiCkEoaiAbQQFqNgIAIApBEGogDygCPDYCAAsgAUHwAmogHmoiEyAcIAwoAhRrIg02AgACQCAMLQAMRQ0AIAxBJGohCkEAIRIDQCATIA0gDCAKKAIAIAwoAkwRg4CAgAAAakECaiINNgIAIApBBGohCiASQQFqIhIgDC0ADEkNAAsLIAFBsANqIB5qIBs2AgACQCARIBZHDQBBACEeIBghGwNAAkACQCABQfACaiAeQQJ0IiVqIh8oAgAiCiAcSg0AIAFBsANqICVqKAIAIQ0MAQsgHkECaiEmIAFBsANqICVqIRMgAUGwA2ogHkEBaiIdQQJ0Ig1qISAgAUHwAmogDWohEgNAAkAgHSAbSA0AAkAgHkEESQ0AIB8gCjYCACABQYWLgYAANgJoIAFB8skENgJkIAFBz8GAgAA2AmBBC0Go9YCAACABQeAAahDegICAAAwICyASQQA2AgAgICABKALgATYCACAmIRsLAkAgASgC7AEgEygCACIRQX9qIg1BAXRqLwEAIgwNACABQeABaiANEOaEgIAAIQwLIAogDEECaiIMayEKAkAgIw0AQQAhDCARIAEoAuABTg0AAkAgASgC7AEgEUEBdGovAQAiDA0AIAFB4AFqIBEQ5oSAgAAhDAsgDEECaiEMCyATIA02AgAgEiASKAIAIAxqNgIAIAogHEoNAAsLIB8gCjYCAAJAIA0gASgC4AEiEk4NACABQbADaiAlaiERIA1BAXQhDCAlIAFB8AJqakEEaiETA0ACQCABKALsASAMai8BACISDQAgAUHgAWogDRDmhICAACESCwJAIBJBAmoiEiAKaiIKIBxMDQAgASgC4AEhEgwCCyAfIAo2AgAgESANQQFqIg02AgACQCAjDQBBACESIA0gASgC4AFODQACQCABKALsASAMakECai8BACISDQAgAUHgAWogDRDmhICAACESCyASQQJqIRILIBMgEygCACASazYCACAMQQJqIQwgDSABKALgASISSA0ACwsCQAJAIA0gEkgNACAeQQFqIRsMAQsCQAJAIB4NAEEAIQoMAQsgJSABQbADampBfGooAgAhCgsCQCANIApKDQAgAUGFi4GAADYCWCABQZPKBDYCVCABQc/BgIAANgJQQQtBqPWAgAAgAUHQAGoQ3oCAgAAMBgsgHkEBaiIeIBtIDQELC0EAICNBAXRrISYgG0F/aiInISUDQAJAAkACQCAlQQFIDQAgAUHwAmogJUECdCIoaiIpKAIAIRIgAUHwAmogJUF/aiIqQQJ0IgpqIisoAgAhEwJAIAEoAuwBIgwgAUGwA2ogCmoiHygCACIRICNrIgpBAXRqLwEADQAgAUHgAWogChDmhICAABogASgC7AEhDAtBAEF+ICUgJ0YbISAgEUEBdEF+aiEKA0AgEUF/aiENAkAgDCAKai8BAA0AIAFB4AFqIA0Q5oSAgAAaCwJAAkAgEg0AIAEoAuwBIgwgJmogCmpBAmovAQBBAmohHSAMIApqLwEAIR4MAQsgFA0DIBIgASgC7AEiDCAmaiAKakECai8BAGpBAmoiHSATICBqIAwgCmovAQAiHmtKDQMLIB8gDTYCACAKQX5qIQogEyAea0F+aiETIB0hEiANIREgDUEBakEBSg0ADAMLCyAkKAIALQAAIR4CQAJAIBtBAU4NAEEAIRJBACEkDAELIA4gFWshGkEAIRIgAUGQA2ohEyABQdADaiEMIAFB8ANqIQ1BACEKA0ACQAJAAkAgCiAWSw0AIAwgDSgCACIRNgIAIA1BADYCACABIBEoAkgQvYGAgAAiHTYC/AMgEkEBaiESQQJBASAaIApGGyARKAJILgEeRg0BIB0NASABQYWLgYAANgJIIAFB3soENgJEIAFBz8GAgAA2AkBBC0Go9YCAACABQcAAahDegICAACABQQs2AvwDDA0LIAEgFyABQcgBaiABQewCakEBIAEoAuwCIBQbQQAQ0IOAgAAiETYC/AMgEQ0MIAEoAsgBIhEgHhDMg4CAACAMIBE2AgAgEyABKALgATYCACASQQFqIRIgFy0AEUUNASAXIBEoAgRBBSAPKAIEIAFB/ANqENmDgIAAIAEoAvwDRQ0BDAwLIB0NCwsgDUEEaiENIAxBBGohDCATQQRqIRMgGyAKQQFqIgpHDQALAkAgEkEBSA0AQQAhEwNAIAFB0AJqIBNBAnQiCmogAUHQA2ogCmooAgAiDSgCBCIMNgIAIAFBsAJqIApqIAw2AgAgAUGmAmogE0EBdGogDSgCSC8BHDsBAAJAIBNFDQAgAUHQAmohCiATIQ0CQANAIAooAgAgDEYNASAKQQRqIQogDUF/aiINRQ0CDAALCyABQYWLgYAANgI4IAFBjMsENgI0IAFBz8GAgAA2AjBBC0Go9YCAACABQTBqEN6AgIAAIAFBCzYC/AMMDAsgE0EBaiITIBJHDQALQQAhEwNAQQAhCgJAIBJBAUYNAEEAIQpBASENIAUhDANAIA0gCiAMKAIAIAFBsAJqIApBAnRqKAIASRshCiAMQQRqIQwgEiANQQFqIg1HDQALCyABQbACaiAKQQJ0IgxqIg0oAgAhGiANQX82AgACQCAKIBNGDQACQCAKIBNMDQAgAUHQA2ogDGooAgAoAkgiDUEAOwEcIA0gCiAXKAIwakEBahDXg4CAAAsgAUHQA2ogE0ECdGooAgAiDSgCSCIMIAFBpgJqIApBAXRqLwEAOwEcIAwgGhDXg4CAACANIBo2AgQLQQEhJCATQQFqIhMgEkcNAAwCCwtBACEkIAEoAuwCIRoLIBkgAUHQA2ogEkF/aiIOQQJ0aigCACINKAIEIgpBGHQgCkEIdEGAgPwHcXIgCkEIdkGA/gNxIApBGHZycjYAACABIBo2AuwCAkAgHkEIcQ0AIBggEkYNACANKAI4IAFB0ANqIAFB8ANqIBIgGEobIBZBAnRqKAIAKAI4KAAINgAICwJAIBctABFFDQAgASgC4AEiJkEBSA0AIAEoAtADIhsvARggGy0ADGohHSAjRSEgQQAhEUEAIQxBACEaIBshEwNAIAEoAugBIBFBAnRqIR8CQCARIB1HDQAgESAgaiEeIAMgDEECdCINaiEKIAQgDWohDQNAIAogDSAMQQFqIgwgEkgbIRMgCkEEaiEKIA1BBGohDSARIB4gEygCACITLwEYaiATLQAMaiIdRg0ACwsgHygCACEKAkACQCARIAFBsANqIBpBAnRqKAIARw0AIAFB0ANqIBpBAWoiGkECdGooAgAhGyAjRQ0BCwJAIAwgEk4NACAbKAIEIAFB0AJqIAxBAnRqKAIARw0AIAogEygCOEkNACAKIBMoAjxJDQELAkAgIQ0AIBcgCigAACINQRh0IA1BCHRBgID8B3FyIA1BCHZBgP4DcSANQRh2cnJBBSAbKAIEIAFB/ANqENmDgIAACwJAIAEoAuwBIBFBAXRqLwEAIg0NACABQeABaiAREOaEgIAAIQ0LAkAgDSAbLwEQTQ0AIBsgEyAKIAFB/ANqENuDgIAACyABKAL8Aw0LIAEoAuABISYLIBFBAWoiESAmSA0ACwsCQCASQQJIDQBBACEeQQAhJgNAIBAgJmohGiABKALsASABQbADaiAeQQJ0IgpqKAIAIhFBAXRqLwEAIgwgImohGyABKALoASINIBFBAnRqKAIAIR0CQAJAIAFB0ANqIApqKAIAIh8tAAgNACAfKAI4IB0oAAA2AAgMAQsCQCAjRQ0AIB8gDSARQX9qIhFBAnRqKAIAIAFByAFqIB8oAlARgICAgAAAIBpBBGogASkDyAEQpISAgABBBGohGyAaIR1BACEaDAELIB1BfGohHSAMQQRHDQAgDyAdIA8oAkwRg4CAgAAAIRsLQQAhDSACIQoCQANAIApBBGohDCAKKAIAIBFKDQEgDUEGSSETIAwhCiANQQFqIQ0gEw0ACwsCQAJAIAxBZGooAgAiCiAdSQ0AIAogHSAbakkNAQsgDyAeIBVqIB0gGyAaIB8oAgQgAUH8A2oQxISAgAAgASgC/AMNCyAbICZqISYgHkEBaiIeIA5GDQIMAQsLIAFBhYuBgAA2AhggAUGpzAQ2AhQgAUHPwYCAADYCEEELQaj1gIAAIAFBEGoQ3oCAgAAgAUELNgL8AwwJCwJAQQEgEmsiESASTg0AICNFISUgASgCsAMhGANAAkAgAUHkAmogESARQR91IgpqIApzIgpqIiYtAAANAAJAAkACQCARQX9KDQAgAUGQA2ogCkECdEF8aiINaigCACABQbADaiANaigCAEgNAwwBCyARDQBBACEbQQAhEyAYIRoMAQsCQAJAIAogFkoNACABQZADaiAKQX9qIg1BAnRqKAIAICVqIRMMAQsgCkF/aiENIAEoAuABIRMLIAFBsANqIApBAnRqKAIAIAFBsANqIA1BAnRqKAIAICVqIhtrIRoLIAFB0ANqIApBAnQiFWooAgAiHigCQCEMIB4tAAkhHSAeKAI4ISAgHi0ADCEfIB4vARgiDSEKAkAgEyAbTg0AAkAgHiATIBsgE2sgAUHgAWoQ54SAgAAiCiANTA0AIAFBhYuBgAA2AiggAUHdxAQ2AiQgAUHPwYCAADYCIEELQaj1gIAAIAFBIGoQ3oCAgAAgAUELNgL8AwwNCyAeKAJAIiMgIyAKQQF0aiANQQF0ENCKgIAAGiANIAprIQoLIAwgGkEBdGohDgJAIBMgDWogH2oiDCAaIBtqIg1MDQAgCiAeIA0gDCANayABQeABahDnhICAAGshCgsgASAdICBqIhRBBWoiIi0AAEEIdCAUQQZqLQAAckF/akH//wNxICBqQQFqIg02AsgBAkACQCANIA5JDQAgDSAeKAI8Sw0AAkAgGyATTg0AIB4oAkAiDSAaIBMgG2siDCAMIBpKGyIMQQF0aiANIApBAXQQ0IqAgAAaIB4gDiABQcgBaiANIBsgDCABQeABahDohICAAA0BIAogDGohCgsCQCAeLQAMIiNFDQAgHkEcaiENQQAhHwNAAkAgEyANLwEAaiIdIBtrIgxBAEgNACAMIBpODQAgHigCQCAMQQF0aiEjAkAgCiAMTA0AICNBAmogIyAKIAxrQQF0ENCKgIAAGgsCQCABKALsASAdQQF0ai8BAA0AIAFB4AFqIB0Q5oSAgAAaCyAeIA4gAUHIAWogIyAdQQEgAUHgAWoQ6ISAgAANAyAKQQFqIQogHi0ADCEjCyANQQJqIQ0gH0EBaiIfICNB/wFxSQ0ACwsgHiAOIAFByAFqIB4oAkAgCkEBdGogCiAbaiAaIAprIAFB4AFqEOiEgIAADQAgHkEAOgAMIB4gGjsBGCAUQQNqIBpBCHY6AAAgFEEEaiAeLQAYOgAAICIgASgCyAEgIGsiCkEIdCAKQYD+A3FBCHZyOwAAIAFBADYC/AMMAQsCQCAaQQFIDQAgG0ECdCENIBtBAXQhCiAaQQFqIQwgASgC7AEhEwNAAkAgEyAKai8BAA0AIAEoAuQBIhMgASgC6AEgDWooAgAgEygCTBGDgICAAAAhHSABKALsASITIApqIB07AQALIA1BBGohDSAKQQJqIQogDEF/aiIMQQFKDQALCyABIAFB4AFqIBsgGiAeEOWEgIAAIgo2AvwDIAoNDAsgJkEBOgAAIB4gHCABQfACaiAVaigCAGs2AhQLIBFBAWoiESASRw0ACwsCQAJAIAtBAUcNACAPLwEYDQAgASgC0AMiCigCFCAPLQAJSA0AIAEgCkF/EOOEgIAANgL8AyAKIA8gAUH8A2oQ5ISAgAAgASgC/AMNASABIAooAjQgCiAKKAIEEJKEgIAANgL8AwwBCyAkIBctABFBAEcgIUVxcUEBRw0AIAFB0ANqIQ0gEiEMA0AgFyANKAIAIhMoAjgoAAgiCkEYdCAKQQh0QYCA/AdxciAKQQh2QYD+A3EgCkEYdnJyQQUgEygCBCABQfwDahDZg4CAACANQQRqIQ0gDEF/aiIMDQALCyASIBZKDQggFkEBaiENIAFB8ANqIBJBAnRqIQogASgC/AMhDANAAkAgDA0AIAEgCigCACIMKAI0IAwgDCgCBBCShICAACIMNgL8AwsgCkEEaiEKIBIgDUF/aiINRw0ADAkLCyARIQ0gEiEdCyArIBM2AgAgKSAdNgIAQQAhCgJAICVBAkgNACAoIAFBsANqakF4aigCACEKCyAqISUgDSAKSg0ACyABQYWLgYAANgIIIAFBvcoENgIEIAFBz8GAgAA2AgBBC0Go9YCAACABEN6AgIAADAMLIB1BAWohCiABQfADaiARQQFqIhFBAnRqKAIAIQwMAAsLIAFBhYuBgAA2AnggAUH1yAQ2AnQgAUHPwYCAADYCcEELQaj1gIAAIAFB8ABqEN6AgIAACyABQQs2AvwDQQAhEgwBCyABIBo2AuwCQQAhEiABQfADakEAIAxBAnRBBGoQ1YqAgAAaCyABKALoASIKRQ0AAkBBACgC+NyCgABFDQAgCkEAKAKk3YKAABGBgICAAAAhDUEAQQAoApSGg4AAIA1rNgKUhoOAAEEAQQAoAriGg4AAQX9qNgK4hoOAAAsgCkEAKAKc3YKAABGCgICAAAALIBZBAWohDSABQfADaiEKA0ACQCAKKAIAIgxFDQAgDCgCSBCWgYCAAAsgCkEEaiEKIA1Bf2oiDQ0ACwJAIBJBAUgNACABQdADaiEKA0ACQCAKKAIAIg1FDQAgDSgCSBCWgYCAAAsgCkEEaiEKIBJBf2oiEg0ACwsgASgC/AMhCgsCQCAJRQ0AIAkQxYGAgAALIBAhCQsgCEEAOgAMIAgoAkgQloGAgAAgACAALQBEQX9qIg06AEQgACANQRh0QRh1QQJ0akH4AGooAgAhCAsgACAINgJ0IApFDQALCwJAIAlFDQAgCRDFgYCAAAsgAUGABGokgICAgAAgCgsuAQF/IAEgAhCngYCAACECAkAgACgCACIDRQ0AIAEgAxDkgICAAAsgACACNgIACyMBAX8CQCAAQQAQwYGAgAAiAQ0AIABBABDAgYCAACEBCyABC4oDAgN/AX4jgICAgABB0ABrIgMkgICAgABBByEEAkACQCAAKAIAIgUtAFcNACAAKAIEKAIADQECQCAAKAIQQQNxIgRFDQAgASkCACEGIAMgAjYCTCADIAY3A0AgAyAEQQJ0QYzOgYAAaigCADYCSCAFQae0gIAAIANBwABqELWCgIAAIQQgACgCBCAENgIAQQEhBAwBCwJAIAUtACBBAXFFDQAgA0GFi4GAADYCOCADQemaCDYCNCADQc/BgIAANgIwQQshBEELQaj1gIAAIANBMGoQ3oCAgAAMAQsgAyABKAIEIgRBrIWBgAAgBBs2AiAgBUGtlIGAACADQSBqELWCgIAAIQQCQCACRQ0AIAItAABFDQAgAyACNgIUIAMgBDYCECAFQbq5gIAAIANBEGoQtYKAgAAhBAsgACgCBCAENgIAIANBhYuBgAA2AgggA0Hwmgg2AgQgA0HPwYCAADYCAEELIQRBC0Go9YCAACADEN6AgIAACyAAIAQ2AgwLIANB0ABqJICAgIAAC4YBAgN/AX5BACECAkACQCAALQAAIgNBRmoiBEF2SQ0AIABBAWohAEIAIQUDQCAFQgp+IAOtQjiGQjiHfEJQfCIFQoCAgIAQVg0BIAAtAAAhAyAAQQFqIQAgA0FGakF1Sw0ACyAFp0EAIARBdUsgA0VxIgMbIQIMAQtBACEDCyABIAI2AgAgAwuBAQEFfwJAIAAoAhQiA0EBTg0AQQAPC0EAIQRBACEFAkADQCAAKAIQIAUgBUECSXMiBkEEdGooAgwhBwJAAkAgAkUNACAAIAYgAhD2hICAAEUNAQsgB0EYaiABQQAQvIKAgAAoAggiBA0CIAAoAhQhAwsgBUEBaiIFIANIDQALCyAEC6wDAQd/I4CAgIAAQdAAayIEJICAgIAAAkAgAkUNACACKAIAIgVFDQAgAigCCEUNACAAKAIAIAUgACgCBBC7goCAACIGRQ0AAkACQCACKAIEIgdFDQACQAJAIAIoAgAiBUUNACAHIQgDQAJAAkAgBS0AACIJIAgtAAAiCkcNACAJDQEgBigCCCIFRQ0FA0ACQCAFLwA3IghBA3FBAkcNACACKAIIIQkMBgsgBSgCFCIFDQAMBgsLIAlBsLaBgABqLQAAIApBsLaBgABqLQAARw0CCyAIQQFqIQggBUEBaiEFDAALCyAAKAIAIAcgACgCBBDKhICAACEFIAIoAgghCSAFRQ0CIAUvADchCAsgBSAIQfv/A3E7ADcgCSAFLwEyQQFqIAUoAgggBRD3hICAACAFIAUvADdBgAFyOwA3IAUoAiQNAiAGIAUoAggvAQA7ASYgBiAGKAIcQRByNgIcDAILIAIoAgghCQsgBCAGLwEoOwE4IAlBASAGQSZqIARBCGoQ94SAgAAgBiAELwE4OwEoIAYgBigCHEEQcjYCHAsgBEHQAGokgICAgABBAAu8AQEEfyAALwEyIgFBBSABQQVJGyECIAAoAgghAwJAIAAoAgwiBC4BJiIBQeIASg0AQeMAIQEgBEHjADsBJgsgAyABQXZqIAEgACgCJBs7AQAgA0ECakGczoGAACACQQF0IgEQ1IqAgAAaAkAgAiAALwEyIgRPDQAgASADakECaiEBA0AgAUEXOwEAIAFBAmohASACQQFqIgIgAC8BMiIESQ0ACwsCQCAALQA2RQ0AIAMgBEEBdGpBADsBAAsLFwAgABDOhICAACAAKAIEIAAQ5ICAgAALTAECfwJAIAAoAgAiAUUNAANAIAEoAgAhAiAAKAIEIAEQ5ICAgAAgAiEBIAINAAsLIABBADYCACAAQoCAgICAgMAANwIUIABCADcCCAtdAQF/I4CAgIAAQRBrIgQkgICAgAAgBCADNgIMAkACQCAAIAIgAxCxgYCAACIDDQBBByECDAELIAAgASADENKEgIAAIQIgACADEOSAgIAACyAEQRBqJICAgIAAIAILjQEBAX4gACgCBCgCACgC5AEhAAJAIAFFDQACQCABQX9KDQBCACABrEIKhn0gACgCHCAAKAIYaqx/pyEBCyAAIAE2AhQLAkAgACgCECIBQX9KDQBCACABrEIKhn0gACgCHCAAKAIYaqx/IgJCgJTr3AMgAkKAlOvcA1MbpyEBCyAAKAIUIgAgASABIABIGwvSAQEEfwJAAkACQAJAIAAoAgQoAgAiAC0ADEUNAEEAIQIgAEEAOgAJIABBATsABwwBCyAAIAFBB3EiA0EERjoACSAAIANBAksiAjoACCAAIANBAUY6AAcgA0EBRw0BC0EAIQQgAEEAOgAKQQAhAwwBCwJAAkAgAUEIcUUNAEEDIQMMAQtBAiEDCyAAIAM6AApBASEECyAAQQwgA0ECdCIFIAQbIAUgAUEQcUEEdhsgA0EAIAIbcjoACyAAIAAtABVB/gFxIAFBBXZBAXFyQQFzOgAVC+QBAQJ/I4CAgIAAQRBrIgMkgICAgAACQCAAIAJBf0GAAUEAIANBDGpBABCSgYCAACICDQACQCADKAIMIgQQk4GAgAAiAkHkAEcNAANAAkAgBEEAEJyCgIAAIgJFDQACQCACQfeDgYAAQQMQ1oqAgABFDQAgAkGS/ICAAEEDENaKgIAADQELIAAgASACENKEgIAAIgINAgsgBBCTgYCAACICQeQARg0ACwsCQEEAIAIgAkHlAEYbIgJFDQAgASAAIAAQw4KAgAAQxoSAgAALIAQQl4GAgAAaCyADQRBqJICAgIAAIAILTQEBfyABQf8BcSEBAkACQCAAKAIEIgAtABhBAnFFDQBBCCECIAAtABEgAUEAR0cNAQsgACABQQJGOgASQQAhAiAAIAFBAEc6ABELIAIL8wEBBH8jgICAgABBMGsiAiSAgICAAAJAAkAgACgCBCgCACgCQCIDKAIAIgRFDQAgAiABKAIEIgU1AjAgBTQCJH43AwAgA0ELIAIgBCgCKBGEgICAAAAiBEEMRg0AIAQNAQtBACEEIAJBAEEwENWKgIAAIgNBATYCECADIAA2AgQgAyABNgIYIAMgASgCADYCFCADQf////8HELaBgIAAGgJAIAMQ4IGAgAAiAQ0AIAAoAgQiAyADLwEYQf3/A3E7ARgMAQsCQCADKAIEKAIEKAIAIgMtAAwNACADEKWDgIAACyABIQQLIAJBMGokgICAgAAgBAucAwEDfyOAgICAAEEgayIFJICAgIAAAkACQAJAIAAoAjAgAU8NACAFQYWLgYAANgIIIAVB1JsENgIEIAVBz8GAgAA2AgBBCyEEQQtBqPWAgAAgBRDegICAAAwBCyAAKAIAIgYgASAFQRxqIAQgBigC3AERhYCAgAAAIgQNACACIAUoAhwiBigCCCIENgIAAkACQCAELQAADQACQCAGKAIIIgcoAgQgAUYNACAHIAY2AkggByAANgI0IAcgBigCBDYCOCAHIAE2AgQgB0HkAEEAIAFBAUYbOgAJIAIoAgAhBAsgBBCjg4CAACIEDQELQQAhBCADRQ0CAkAgAigCACIBLwEYRQ0AIAEtAAEgAy0ARUYNAwsgBUGFi4GAADYCGCAFQembBDYCFCAFQc/BgIAANgIQQQshBEELQaj1gIAAIAVBEGoQ3oCAgAALIAIoAgAiAUUNACABKAJIEJaBgIAACyADRQ0AIAMgAy0AREF/aiIBOgBEIAMgAyABQRh0QRh1QQJ0akH4AGooAgA2AnQLIAVBIGokgICAgAAgBAvbAgEDfwJAIAFFDQADQCABKAI0IQMCQCABKAIcIgRFDQAgACAEEMSCgIAACyAAIAEoAiAQ2oSAgAACQCABKAIkIgRFDQAgACAEEOWAgIAACwJAIAEoAigiBEUNACAAIAQQxIKAgAALAkAgASgCLCIERQ0AIAAgBBDlgICAAAsCQCABKAIwIgRFDQAgACAEEMSCgIAACwJAIAEoAjwiBEUNACAAIAQQ5YCAgAALAkAgASgCQCIERQ0AIAAgBBDbhICAAAsCQCABKAJIIgRFDQADQCAEKAIkIQUgACAEENmEgIAAIAUhBCAFDQALCwJAIAEoAkQiBEUNAANAAkAgBCgCICIFRQ0AIAUgBCgCJDYCAAJAIAQoAiQiBUUNACAFIAQoAiA2AiALIARBADYCICABKAJEIQQLIAQNAAsLAkAgAkUNACAAIAEQ5ICAgAALQQEhAiADIQEgAw0ACwsLFAACQCABRQ0AIAAgARDlgICAAAsLFgACQCABRQ0AIAAgAUEBENaEgIAACwvsAQEBfwJAIAFFDQACQCABKAIgIgJFDQAgAiABKAIkNgIAAkAgASgCJCICRQ0AIAIgASgCIDYCIAsgAUEANgIgCwJAIAEoAigiAkUNACAAIAIQ5YCAgAALAkAgASgCCCICRQ0AIAAgAhDEgoCAAAsCQCABKAIMIgJFDQAgACACEMSCgIAACwJAIAEoAhwiAkUNACAAIAIQ5YCAgAALAkAgASgCGCICRQ0AIAAgAhDlgICAAAsCQCABKAIAIgJFDQAgACACEOSAgIAACwJAIAEoAgQiAkUNACAAIAIQ5ICAgAALIAAgARDkgICAAAsLzwIBBX8CQCABRQ0AAkAgASgCAEEBSA0AIAFBwABqIQJBACEDA0ACQCACQUxqKAIAIgRFDQAgACAEEOSAgIAACwJAIAJBUGooAgAiBEUNACAAIAQQ5ICAgAALAkAgAkFUaigCACIERQ0AIAAgBBDkgICAAAsCQCACQW1qIgQvAAAiBUECcUUNACACKAIAIgZFDQAgACAGEOSAgIAAIAQvAAAhBQsCQCAFQQRxRQ0AIAIoAgAiBUUNACAAIAUQxIKAgAALIAAgAkFYaigCABDhgICAAAJAIAJBXGooAgAiBUUNACAAIAVBARDWhICAAAsCQAJAIARBAWotAABBBHFFDQAgACACQXRqKAIAEOaAgIAADAELIAJBdGooAgAiBEUNACAAIAQQ5YCAgAALIAJBwABqIQIgA0EBaiIDIAEoAgBIDQALCyAAIAEQ5ICAgAALC1EBAn8CQCABRQ0AAkAgASgCAEEBSA0AIAFBDGohAkEAIQMDQCAAIAIQ3ISAgAAgAkEYaiECIANBAWoiAyABKAIASA0ACwsgACABEOSAgIAACwtLAQF/AkAgASgCBCICRQ0AIAAgAhDEgoCAAAsCQCABKAIIIgJFDQAgACACQQEQ1oSAgAALAkAgASgCACIBRQ0AIAAgARDkgICAAAsLUwEBfyAAIAAoAiQQpIOAgAAiATYCRAJAIAENACAAIAAoAggiASgCGDYCCCABQQBByAEQ1YqAgAAaQQcPCyABQgA3AAAgACAAKAJEQQRqNgJEQQALXgECfwJAIAAoAgAgARC5g4CAACICDQBBAA8LAkAgAigCCCIDKAIEIAFGDQAgAyACNgJIIAMgADYCNCADIAE2AgQgAyACKAIENgI4IANB5ABBACABQQFGGzoACQsgAwtvAQJ/AkAgACgCQCICDQAgACgCMCEDAkBCgAQQ7oCAgAAiAg0AIAAgAjYCQEEHDwsgAkEEakEAQfwDENWKgIAAGiAAIAI2AkAgAiADNgIAC0EAIQACQCACKAIAIAFJDQAgAiABEISDgIAAIQALIAAL0gEBA39BACEFAkACQCACKAIcIgYgA2siB0EASg0AIARBAUgNAQJAA0AgAS0AAA0BIAFBAWohASAEQX9qIgQNAAwDCwsgACgCSBC9gYCAACIFDQEgAUEAIAQQ1YqAgAAaQQAPCwJAAkAgByAESA0AIAQhBwwBCyAAIAEgB2ogAiAGIAQgB2sQ4ISAgAAiBQ0BC0EAIQUgASACKAIQIANqIAcQz4qAgABFDQAgACgCSBC9gYCAACIFDQAgASACKAIQIANqIAcQ0IqAgAAaQQAhBQsgBQvzCAEPfyOAgICAAEGAAWsiAySAgICAACACIAFqIQQgAC0ACSIFQQFqIQYCQAJAAkAgBSAAKAI4IgdqIghBAmotAAANACAHIAZqLQAADQAgAUEIdiEJQQAhCkEAIQsgBiEMIAIhBSABIQ0MAQsgBiEFAkADQCAHIAUiDEH//wNxIglqIg4tAAAiC0EIdCAOLQABIgpyIgVB//8DcSINIAFPDQEgCUEEaiANTQ0ACyAFQf//A3FFDQAgA0GFi4GAADYCeCADQZaYBDYCdCADQc/BgIAANgJwQQshBUELQaj1gIAAIANB8ABqEN6AgIAADAILAkAgACgCNCgCKCIPQXxqIA1PDQAgA0GFi4GAADYCKCADQZuYBDYCJCADQc/BgIAANgIgQQshBUELQaj1gIAAIANBIGoQ3oCAgAAMAgtBACEQAkACQCAFQf//A3FFDQAgBEEDaiANSQ0AAkAgDSAETw0AIANBhYuBgAA2AlggA0GnmAQ2AlQgA0HPwYCAADYCUEELIQVBC0Go9YCAACADQdAAahDegICAAAwECwJAIA0gB2oiC0ECai0AAEEIdCALQQNqLQAAciANaiIRIA9NDQAgA0GFi4GAADYCaCADQaqYBDYCZCADQc/BgIAANgJgQQshBUELQaj1gIAAIANB4ABqEN6AgIAADAQLIA0gBGshECARIAFrIQUgCy0AASEKIAstAAAhCwwBCyAEIREgAiEFCwJAAkAgBiAJTw0AIA5BAmotAABBCHQgDkEDai0AAHIgCWoiDUEDaiABSQ0AAkAgDSABSw0AIBEgDGshBSAQIAEgDWtqIRAgDCENDAILIANBhYuBgAA2AkggA0G3mAQ2AkQgA0HPwYCAADYCQEELIQVBC0Go9YCAACADQcAAahDegICAAAwDCyABIQ0LAkAgCEEHaiIOLQAAIgkgEEH/AXFPDQAgA0GFi4GAADYCOCADQb2YBDYCNCADQc/BgIAANgIwQQshBUELQaj1gIAAIANBMGoQ3oCAgAAMAgsgDiAJIBBrOgAAIA1B//8DcSIBQQh2IQkgESEECwJAAkAgCEEFaiIPLQAAQQh0IAhBBmotAAByIg4gAUkNAAJAIA4gAU0NACADQYWLgYAANgIIIANBxpgENgIEIANBz8GAgAA2AgBBCyEFQQtBqPWAgAAgAxDegICAAAwDCwJAIAYgDEH//wNxRg0AIANBhYuBgAA2AhggA0HHmAQ2AhQgA0HPwYCAADYCEEELIQVBC0Go9YCAACADQRBqEN6AgIAADAMLIA8gBDoAASAHIAZqIg0gCjoAASANIAs6AAAgDyAEQQh2OgAADAELIAcgDEH//wNxaiIOIA06AAEgDiAJOgAACwJAIAAoAjQtABhBDHFFDQAgByABakEAIAVB//8DcRDVioCAABoLIAcgAWoiDSAKOgABIA0gCzoAACANQQNqIAU6AAAgDUECaiAFQQh2OgAAIAAgACgCFCACajYCFEEAIQULIANBgAFqJICAgIAAIAUL4QMBCn8jgICAgABBMGsiAySAgICAACAAKAI4IgQgAC0ACSIFQQFqIgZqIgctAABBCHQgBy0AAXIhByAAKAI0KAIoIgggAWshCQJAAkADQCAHIgAgCUoNAQJAIAAgBGoiB0ECaiIKLQAAQQh0IAdBA2otAAByIgsgAWsiDEEASA0AAkAgDEEDSw0AQQAhCyAFIARqQQdqIgAtAABBOUsNBCAEIAZqIAcvAAA7AAAgACAALQAAIAxqOgAAIAchCwwECwJAIAwgAGoiACAJTA0AIANBhYuBgAA2AhggA0HulgQ2AhQgA0HPwYCAADYCEEELQaj1gIAAIANBEGoQ3oCAgAAgAkELNgIAQQAhCwwECyAKIAxBCHQgDEGA/gNxQQh2cjsAACAEIABqIQsMAwsgACEGIActAABBCHQgBy0AAXIiByALIABqSg0AC0EAIQsgB0UNASADQYWLgYAANgIoIANB/ZYENgIkIANBz8GAgAA2AiBBC0Go9YCAACADQSBqEN6AgIAAIAJBCzYCAAwBC0EAIQsgACAIQXxqTA0AIANBhYuBgAA2AgggA0GElwQ2AgQgA0HPwYCAADYCAEELQaj1gIAAIAMQ3oCAgAAgAkELNgIACyADQTBqJICAgIAAIAsL1goBEH8jgICAgABBkAFrIgIkgICAgAAgAC8BGCIDQQF0IAAvARIiBGohBSAAKAI0KAIoIQYCQAJAAkACQCAALQAJIAAoAjgiB2oiCEEHaiIJLQAAIAFMDQAgBkF8aiEKDAELAkAgCEEBai0AAEEIdCAIQQJqLQAAciILIAZBfGoiCkwNACACQYWLgYAANgI4IAJB6pUENgI0IAJBz8GAgAA2AjBBCyEEQQtBqPWAgAAgAkEwahDegICAAAwDCyALRQ0AAkAgByALaiIBLQAAQQh0IAEtAAFyIgwgCkwNACACQYWLgYAANgJIIAJB7ZUENgJEIAJBz8GAgAA2AkBBCyEEQQtBqPWAgAAgAkHAAGoQ3oCAgAAMAwsCQCAMRQ0AIAcgDGoiDS0AAA0BIA1BAWotAAANAQsCQCALIAhBBWotAABBCHQgCEEGai0AAHIiDUsNACACQYWLgYAANgKIASACQfWVBDYChAEgAkHPwYCAADYCgAFBCyEEQQtBqPWAgAAgAkGAAWoQ3oCAgAAMAwsgAUECai0AAEEIdCABQQNqLQAAciIOIAtqIQECQAJAAkAgDEUNAAJAIAwgAU8NACACQYWLgYAANgJoIAJB+JUENgJkIAJBz8GAgAA2AmBBCyEEQQtBqPWAgAAgAkHgAGoQ3oCAgAAMBgsgDCAHaiIPQQJqLQAAQQh0IA9BA2otAAByIg8gDGogBkwNASACQYWLgYAANgJ4IAJB+pUENgJ0IAJBz8GAgAA2AnBBCyEEQQtBqPWAgAAgAkHwAGoQ3oCAgAAMBQtBACEPIAEgBkwNASACQYWLgYAANgJYIAJB/pUENgJUIAJBz8GAgAA2AlBBCyEEQQtBqPWAgAAgAkHQAGoQ3oCAgAAMBAsgByAPIAFqaiAHIAFqIAwgAWsQ0IqAgAAaIA8gDmohDgsgByAOIA1qIgFqIAcgDWogCyANaxDQioCAABogA0UNASAHIAVqIQYgByAEaiEEA0AgDiENAkACQCAELQAAQQh0IARBAWotAAByIgMgC0kNACAPIQ0gAyAMTw0BCyAEIAMgDWoiDUEIdCANQYD+A3FBCHZyOwAACyAEQQJqIgQgBkkNAAwCCwsCQAJAIAMNACAGIQEMAQsgByAEaiELIAYgCEEFai0AAEEIdCAIQQZqLQAAciINayEQIAcgDWohEUEAIQ8gBiEBIAchDgNAAkACQCALLQAAQQh0IAtBAWotAAByIgQgDUkNACAEIApMDQELIAJBhYuBgAA2AhggAkGblgQ2AhQgAkHPwYCAADYCEEELIQRBC0Go9YCAACACQRBqEN6AgIAADAQLAkACQCABIAAgDiAEaiAAKAJMEYOAgIAAACIMayIBIA1IDQAgBCAMaiAGTA0BCyACQYWLgYAANgIoIAJBoZYENgIkIAJBz8GAgAA2AiBBCyEEQQtBqPWAgAAgAkEgahDegICAAAwECyALIAFBCHQgAUGA/gNxQQh2cjsAAAJAAkAgDw0AQQAhDyABIARGDQEgACgCNCgCACgC4AEiDiANaiARIBAQ1IqAgAAaIA4hDwsgByABaiAOIARqIAwQ1IqAgAAaCyALQQJqIQsgA0F/aiIDDQALCyAJQQA6AAALAkAgASAFayILIAktAABqIAAoAhRGDQAgAkGFi4GAADYCCCACQbSWBDYCBCACQc/BgIAANgIAQQshBEELQaj1gIAAIAIQ3oCAgAAMAQtBACEEIAhBAWpBADsAACAIQQVqIAFBCHQgAUGA/gNxQQh2cjsAACAHIAVqQQAgCxDVioCAABoLIAJBkAFqJICAgIAAIAQLuQEBBX8CQCACKAIADQAgASgCBCEDIAEoAjgiBCAAKAI4IgUgAC0ACWoiBkEFai0AAEEIdCAGQQZqLQAAciIHaiAFIAdqIAAoAjQiBSgCKCAHaxDUioCAABogBEHkAEEAIANBAUYbaiAGIAAvARhBAXQgAC8BEmoQ1IqAgAAaIAFBADoAAAJAIAEQo4OAgAAiAA0AIAEQwYSAgAAiAA0AIAUtABFFDQEgARDYg4CAACEACyACIAA2AgALC64FARJ/I4CAgIAAQTBrIgQkgICAgAAgAygCQCEFIAMoAjQiBigCACgC4AEiB0EAIAMtAAkgAygCOCIIaiIJQQVqIgotAABBCHQgCUEGai0AAHIiCyALIAYoAigiBksbIgtqIAggC2oiDCAGIAtrENSKgIAAGiAAQShqIQsgCCAGaiENQX8hBgJAA0AgBkEBaiEGIAsoAgAgAUoNASALQQRqIQsgBkEGSQ0ACwsgAiABaiEOIA0hDwJAA0AgAUECdCEQIAFBAXQhESAAIAZBAnRqIgtBKGohEiALQRBqKAIAIRMCQANAIAAoAgggEGooAgAiCyAAKAIMIBFqLwEAIhRqIRUCQAJAAkAgCyAMSQ0AIAsgDU8NACAVIA1NDQEgBEGFi4GAADYCCCAEQY7DBDYCBCAEQc/BgIAANgIAQQshBkELQaj1gIAAIAQQ3oCAgAAMBgsgCyATTw0BIBUgE00NASAEQYWLgYAANgIoIARBk8MENgIkIARBz8GAgAA2AiBBCyEGQQtBqPWAgAAgBEEgahDegICAAAwFCyAHIAsgCGtqIQsLIAUgDyAUayIPIAhrIhVBCHQgFUGA/gNxQQh2cjsAAAJAIA8gBUECaiIFTw0AIARBhYuBgAA2AhggBEGZwwQ2AhQgBEHPwYCAADYCEEELIQZBC0Go9YCAACAEQRBqEN6AgIAADAQLIA8gCyAUENCKgIAAGiABQQFqIgEgDk4NASAQQQRqIRAgEUECaiERIBIoAgAgAUoNAAsgBkEBaiEGDAELC0EAIQYgA0EAOgAMIAMgAjsBGCAJQQFqQQA7AAAgCUEDaiADQRlqLQAAOgAAIAMtABghCyAKIBU6AAEgCiAVQQh2OgAAIAlBBGogCzoAACAJQQdqQQA6AAALIARBMGokgICAgAAgBgs5AQF/IAAoAgQiAiAAKAIIIAFBAnRqKAIAIAIoAkwRg4CAgAAAIQIgACgCDCABQQF0aiACOwEAIAILkgIBC38CQCACQQFIDQAgAiABaiEEIAAoAjgiBSAAKAI0KAIoaiEGIAAtAAkgAC0ACmogBWpBCGohByABQQJ0IQIgAUEBdCEIQQAhCUEAIQpBACELA0ACQCADKAIIIAJqKAIAIgwgB0kNACAMIAZPDQACQAJAIAsgDCADKAIMIAhqLwEAIg1qIg5GDQACQCALRQ0AIAAgCyAFa0H//wNxIApB//8DcRDhhICAABoLIA4gBksNBAwBCyAKIA1qIQ0LIAlBAWohCSAMIQsgDSEKCyACQQRqIQIgCEECaiEIIAFBAWoiASAESA0ACwJAIAtFDQAgACALIAVrQf//A3EgCkH//wNxEOGEgIAAGgsgCQ8LQQALuwMBC38jgICAgABBEGsiBySAgICAAEEAIQgCQCAFQQFIDQAgBSAEaiEJIAIoAgAhCiAAKAI4IQsgBkEoaiEMQX8hBQJAA0AgBUEBaiEFIAxBBGohDSAMKAIAIARKDQEgDSEMIAVBBkkNAAsLIARBAXQhDiAEQQJ0IQ8gBEEBaiEEIA1BZGooAgAhEANAIAYoAgwgDmovAQAhDAJAAkACQAJAAkAgCy0AAQ0AIAstAAJFDQELIAAgDCAHQQxqEOKEgIAAIhENAQsgCiABayAMSA0BIAogDGsiCiERCyAGKAIIIA9qKAIAIg0gEE8NASANIAxqIBBNDQEgB0GFi4GAADYCCCAHQe7DBDYCBCAHQc/BgIAANgIAQQtBqPWAgAAgBxDegICAAAtBASEIDAILIAMgESANIAwQ0IqAgAAgC2siDEEIdCAMQYD+A3FBCHZyOwAAAkAgBCAJTg0AAkAgBiAFQQJ0akEoaigCACAESg0AIAYgBUEBaiIFQQJ0akEQaigCACEQCyADQQJqIQMgDkECaiEOIA9BBGohDyAEQQFqIQQMAQsLIAIgCjYCAAsgB0EQaiSAgICAACAIC9MCAQZ/IAQgBC0AAGohBiACIAItAABqIQcCQAJAAkACQCACLQABIgggBC0AASIJRw0AIAhBeWpBekkNAiAIQYTOgYAAai0AACIIQQEgCEEBSxshCiAHIQggBiEJAkADQCAILQAAIAktAABrIgsNASAIQQFqIQggCUEBaiEJIApBf2oiCkUNBAwACwsgBi0AACAHLAAAIghzQRh0QRh1QX9KDQFBAUF/IAhBf0obIQoMAwsgCCAJayELAkAgCEEISQ0AIAlBB0sNAQtBASEKAkBBAUF/IAsgCEEHSxsgCUEHSxsiC0EBSA0AIAtBfyAHLAAAQX9KGyELDAELIAYsAABBAEgNAgsgCyEKIAsNAQtBACEIAkAgACgCCCgCHC8BBkECSQ0AIAAgASACIAMgBCAFEPCEgIAAIQgLIAgPC0EAIAprIAogACgCCCgCHCgCEC0AABsLkAIBBn8jgICAgABBEGsiBiSAgICAACACLQAAIQcgBC0AACEIIAYgAiwAASIJQf8BcTYCDAJAIAlBf0oNACACQQFqIAZBDGoQlIKAgAAaCyAEIAhqIQkgAiAHaiEKIAYgBCwAASIIQf8BcSIHNgIIAkAgCEF/Sg0AIARBAWogBkEIahCUgoCAABogBigCCCEHCyAAKAIIKAIcIQsCQAJAIAogCSAGKAIMIgggByAIIAdIG0FzakECbRDPioCAACIJIAggB2sgCRsiBw0AQQAhByALLwEGQQJJDQEgACABIAIgAyAEIAUQ8ISAgAAhBwwBC0EAIAdrIAcgCygCEC0AABshBwsgBkEQaiSAgICAACAHCz4BAX8gACgCDCEGAkAgASgCAA0AIAAoAggoAhwgBSAEIAYQo4SAgAAgAUEBNgIACyADIAIgBkEAEJSEgIAAC78BAQN/I4CAgIAAQRBrIgMkgICAgAAgA0EANgIMIANBADYCCCADQQxqIQQCQANAIAJBCGohBQJAA0AgACADQQhqIAFBCGogASgCACAFIAIoAgAgACgCIBGMgICAAABBAEoNASAEIAE2AgAgAUEEaiEEIAEoAgQiAQ0ACyAEIAI2AgAMAgsgBCACNgIAIANBADYCCCACQQRqIQQgAigCBCICDQALIAQgATYCAAsgAygCDCEBIANBEGokgICAgAAgAQujAQEDfyOAgICAAEEQayICJICAgIAAAkACQEEAKAL43oKAACIDRQ0AQYoaIQRBygEgAxGBgICAAAANAQsgAiAAKAIAQQAgAUGeICACQQxqEOiDgIAAIgQ2AgwgBA0AIAJCADcDAAJAIAEoAgAiBCgCACIBDQBBACEEDAELIARBEiACIAEoAigRhICAgAAAGiACKAIMIQQLIAJBEGokgICAgAAgBAvBAQEFfwJAIAJBAUgNACACIQMDQCAAKAIADQEgACgCBCAAKAIQIgRqIAEgAiADa2ogACgCCCAEayIEIAMgAyAEShsiBBDUioCAABogACAAKAIQIARqIgU2AhACQCAFIAAoAghHDQAgACAAKAIgIgYgACgCBCAAKAIMIgdqIAUgB2sgACkDGCAHrHwgBigCACgCDBGKgICAAAA2AgAgAEIANwIMIAAgACkDGCAANAIIfDcDGAsgAyAEayIDQQBKDQALCwuIAQEEfwJAIAAoAgANACAAKAIEIgJFDQAgACgCECIDIAAoAgwiBEwNACAAIAAoAiAiBSACIARqIAMgBGsgACkDGCAErHwgBSgCACgCDBGKgICAAAA2AgALIAEgACkDGCAANAIQfDcDACAAKAIEEPSAgIAAIAAoAgAhASAAQQBBKBDVioCAABogAQs+AQF/IAAoAgwhBgJAIAEoAgANACAAKAIIKAIcIAUgBCAGEKOEgIAAIAFBATYCAAsgAyACIAZBARCUhICAAAvuBAYEfwF+AX8BfgJ/A34jgICAgABB0ABrIgEkgICAgAAgAUIANwMIAkACQCAAKQMAIAApAwhTDQACQAJAAkAgACgCMCICDQBBACEDDAELIAIoAgQhBCACKQMIIQUgAkEwaigCACEGIAIoAgAoAggoAgwhAyABQRhqQQBBKBDVioCAABogASADrCIHEO6AgIAAIgg2AhwCQAJAIAgNACABQQc2AhgMAQsgASAGNgI4IAEgAzYCICABIAUgBSAHgSIHfTcDMCABIAenIgM2AiggASADNgIkCwJAAkADQCAEKAIMIAQoAggoAgRBOGxqIgYoAhhFDQEgBigCFCIJrCEKQQEhAyABNAIoIQsgASkDMCEMAkAgCUGAAUkNAEEBIQMgCiEHA0AgA0EBaiEDIAdC//8AViEIIAdCB4ghByAIDQALCyAMIAp8IAt8IAOsfCAFIAI0AhB8VQ0BIAFBGGogAUHGAGogAUHGAGogChCkhICAABDuhICAACABQRhqIAYoAiAgCRDuhICAACACKAIEIAFBFGoQmoSAgAAiA0UNAAsgAUEYaiACQThqEO+EgIAAGgwBCyABQRhqIAJBOGoQ74SAgAAhAwsgAkEoaiACQThqKQMAIgc3AwAgAiACQTBqKQMANwMgAkAgByACKQMIIgpSDQAgAkEBNgIUCyADDQBBACEDIAIoAhRFDQELIAAQ64OAgAAMAgsgAigCACAAIAJBIGogChDyhICAACIDDQELIAAgAUEIahDzhICAACIDDQAgACABKAIIIgM2AhQgACADIABBIGoQ9ISAgAAhAwsgAUHQAGokgICAgAAgAwudAgICfwF+AkACQEEAKAL43oKAACIERQ0AQYoCIQVByQEgBBGBgICAAAANAQsCQCABKAIsRQ0AIAFBADYCLAsgASADNwMAIAEgAikDCCIGNwMIIAEgAigCACICNgIYAkAgBiAAKAIIIgUoAhg0AqgBVQ0AIAIoAgAoAgBBA0gN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OgAEDAELIAcgBxDXioCAAEH/////A3FqQQFqIAIoAgAgBhDUioCAACIBIAZqQQA6AAAgARD8hYCAACABIAkQjIWAgAAhDiAJIAkvAQpBBHI7AQoLIAogCEEMbGogDjoABSAAQcwAakEANgIAIAQgBC8BIkEBajsBIiAEIAQvASRBAWo7ASQLIANBIGokgICAgAALoQMBBn8jgICAgABBwABrIgQkgICAgAAgACgCACEFAkAgACgC5AEiBkUNAAJAAkAgBUGxAWotAAANAEEEIQcMAQtBBEEFIAVBsAFqLQAAQQFGGyEHCyAGKAIEIQggBi4BIiEJIARBADYCICAEQbWAgIAANgIQIARBtoCAgAA2AgwgBCAHOwEcIAggCUF/aiIJQQxsaiEHAkAgAUUNACAEQQhqIAEQ/4WAgAAaIAQvARwNACAEIAcoAgA2AgAgAEGllICAACAEELOBgIAADAELAkAgCCAJQQxsai0ACkHgAHFFDQAgAEHRx4CAAEEAELOBgIAADAELIARBCGpBAEE0ENWKgIAAGiAEQbUBOgAIIAUgAiADEICGgIAAIQggBCABNgIUIAQgCDYCECAEQYDAADYCDCAFIARBCGpBAUEAEIGGgIAAIQgCQCAEKAIQIglFDQAgBSAJEOSAgIAACyAAIAYgByAIEPOFgIAACwJAIAAtAMgBQQJJDQAgACABEIKGgIAACwJAIAFFDQAgBSABEOWAgIAACyAEQcAAaiSAgICAAAu9AQEDfyOAgICAAEEQayIEJICAgIAAAkACQCAAKAIAQjQQgYGAgAAiBUUNACAFQQBBNBDVioCAACIGQf//AzsBIiAGIAE6AAAgACgCACAGIAIgAxC+hYCAACAAKAIAQYQBaigCACICIAYoAhhODQEgBCACNgIAIABBgJeBgAAgBBCzgYCAAAwBCwJAIAJFDQAgACgCACACEOWAgIAACyADRQ0AIAAoAgAgAxDlgICAAAsgBEEQaiSAgICAACAFC/kBAQN/AkAgACgCACACKAIEIgNBNWqtEIGBgIAAIgRFDQAgBEGAgIAENgIEIAQgAToAACAEQQA2AiggBEIANwIMIARCADcCLCAEQQA2AhQgBEEAOwEgIARBADYCHCAEQQA7AAEgBCAEQTRqIgE2AgggASACKAIAIgUgAxDUioCAACADakEAOgAAIAQgBSAAKALgAWs2AiQCQCAEKAIIIgMtAAAiAUGguYGAAGosAABBf0oNACAEQYCBgCBBgICAICABQSJGGyAEKAIEcjYCBCADEPyFgIAACyAEQQE2AhggAC0AyAFBAkkNACAAIAQgAhCvhYCAABoLIAQLQgEDf0EAIQECQCAAKAIEIgJBgJCAIHENACAAKAIIEIOGgIAAIgNFDQAgAEGqAToAACAAIAMgAnI2AgRBASEBCyABC5wBAQJ/AkAgACgC5AEiAkUNACACLgEiIgBBAUgNACAAQf//A3FBDGwgAigCBGoiAEF4aiIDIAMtAABB8AFxIAFBD3FyOgAAIAIgAigCHEGAEHI2AhwgAEF+ai0AAEEIcUUNACACKAIIIgBFDQADQAJAIAIuASJBf2ogACgCBC4BAEcNACAAIAAvADdBCHI7ADcLIAAoAhQiAA0ACwsL6QYBDn8jgICAgABBEGsiBSSAgICAAAJAAkACQCAAKALkASIGRQ0AAkAgBigCHCIHQQRxRQ0AIAUgBigCADYCACAAQe+JgIAAIAUQs4GAgAAMAQsgBiAHQQRyNgIcAkACQAJAIAENAEEBIQcgBigCBCAGLgEiQX9qIghBDGxqIgkgCS8BCiIKQQFyOwEKIApB4ABxRQ0BIABBnvaAgABBABCzgYCAAAwBCyABKAIAIgtBAUgNAUF/IQhBACEJQQAhDANAQQAhCgJAIAEgDEEEdGpBCGooAgAiB0UNAANAAkAgB0EFai0AAEEgcQ0AIAchCgwCCyAHKAIMIgcNAAtBACEKCyAKIQ0CQAJAAkACQCAKLQAAIgdBj39qDgUAAgICAQILIAooAgwiDS0AAEH1AEcNAgsgDUE7OgAAIAotAAAhBwsgB0H/AXFBO0cNAAJAIAYuASIiDkEBTg0AQQAhCAwBCyAKKAIIIQ8gBigCBCEQQQAhCAJAA0AgECAIQQxsaiIRKAIAIQcgDyEKAkACQANAAkACQCAKLQAAIg0gBy0AACISRw0AIA0NASARIBEvAQoiB0EBcjsBCiAHQeAAcQ0DDAYLIA1BsLaBgABqLQAAIBJBsLaBgABqLQAARw0DCyAHQQFqIQcgCkEBaiEKDAALCyAAQZ72gIAAQQAQs4GAgAAMAgsgCEEBaiIIIA5HDQALIA4hCAwBCyARIQkLIAxBAWoiDCALRw0ACyALQQFGIQcLIAdFDQAgCUUNACAEQQFGDQAgCS0ABEFwcUH/AXFBwABHDQACQCABRQ0AIAAtAMgBQf8BcUECSQ0AQQAhCgJAIAEoAggiB0UNAANAAkAgB0EFai0AAEEgcQ0AIAchCgwCCyAHKAIMIgcNAAsLIAAoAoQCIgdFDQAgBkEgaiENA0ACQCAHKAIAIApHDQAgByANNgIADAILIAcoAgwiBw0ACwsgBiACOgAqIAYgCDsBICAGIAYoAhwgA0EDdHI2AhwCQCABRQ0AIAAgAUEQai0AADoAxgELIAAgARCEhoCAABoMAQsgA0UNASAAQdL2gIAAQQAQs4GAgAALIAFFDQEgACgCACABEMSCgIAADAELIABBAEEAQQAgASACQQBBACAEQQBBAhCbhYCAAAsgBUEQaiSAgICAAAu8IgEMfyOAgICAAEHQAmsiCySAgICAACAAKAIAIQxBACENIAtBADYCxAEgC0EANgLAAQJAIAAoAiQNAAJAIApBAkYNACAALQDIAUH/AXFBAUYNAQsgABC6goCAAA0AIAAgBBCEhoCAAA0AAkACQAJAAkAgA0UNAEEAIQ0gACABIAIgC0HEAWoQ6oWAgAAiAUEASA0EAkAgDEGxAWotAAANACAAIAMQhYaAgAAhDSACKAIEDQAgDUUNAEEBIAEgDSgCPCAMKAIQQRxqKAIARhshAQtBACENIAtB4AFqQQA7AQAgC0HcAWpBADYCACALQdgBakG3gICAADYCACALQdQBakG4gICAADYCACALQcgBakEIakG5gICAADYCACALIAA2AsgBIAsgCygCxAEiDjYC+AEgC0Gqi4CAADYC9AEgCyAANgLMASALIAFBAUY6AOwBIAAoAgAoAhAgAUEEdGoiAigCDCEPIAIoAgAhAiALQeQBaiALQcgBajYCACALIAI2AvABIAsgDzYC6AEgC0GAAmpBAEHMABDVioCAABogCyADNgKgAiALQcgBakEEciALQYACahCJhoCAABogAEEAIANBCGoQioaAgAAiEEUNBAJAIAFBAUcNACAMKAIQQRxqKAIAIBAoAjxGDQAgCyAQKAIANgKwASAAQeqsgYAAIAtBsAFqELOBgIAADAMLQQAhESAQLQAcQYABcUUNASAQKAIIIg1FDQEDQAJAIA0vADdBA3FBAkcNACANIREMAwsgDSgCFCINDQAMAgsLIAAo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IAAtAMgBQQFLDQAgACAAIAAoAkQgARCnhYCAACIBNgJEIAAgACABIAIQp4WAgAA2AkQgA0EBNgIMIANB0ZKBgAA2AgggBEGbASADQQhqQQAQqoWAgAAhAgwBCyAAQSwgASACEJaFgIAAIQILIANBEGokgICAgAAgAgtRAAJAIAFFDQAgAkUNACABLQAAQfkARw0AIAAtAMgBQQFLDQAgACgCACEBIAIgAzoAAAJAIAIoAhAiAEUNACABIAAQ5YCAgAALIAJBADYCEAsLjgEBAn8jgICAgABBIGsiAiSAgICAAAJAIAFFDQACQCAALQDIASIDQQJJDQAgAEEDOgDIASACQRRqQgA3AgAgAkIANwIMIAJByoCAgAA2AgggAkHLgICAADYCBCACIAA2AgAgAiABEP+FgIAAGiAAIAM6AMgBCyAAKAIAIAEQ5YCAgAALIAJBIGokgICAgAALYAECfyOAgICAAEEQayIDJICAgIAAIAMgAjYCCEEAIQQCQCACRQ0AIAIQ14qAgABB/////wNxIQQLIAMgBDYCDCAAIAEgA0EIakEAEKqFgIAAIQIgA0EQaiSAgICAACACC2QBAn8jgICAgABBIGsiASSAgICAACABQQA2AhggAUG1gICAADYCCCABQbaAgIAANgIEQQEhAiABQQE7ARQCQCAARQ0AIAEgABD/hYCAABogAS8BFCECCyABQSBqJICAgIAAIAILtwIBBn8jgICAgABBEGsiAySAgICAAAJAAkAgAigCAEEBSA0AIAJBCGohBEEAIQVBACEGA0BBASEHAkAgBCgCACIILQAAQbEBRw0AIAgoAhQoAgAhBwsCQAJAAkACQCAHIAFHDQAgACAIKAIUQQBBAEEAQQBBAEGABEEAEKaFgIAAIQcgCEEANgIUIAdFDQIgBkUNASAHIAY2AjQgB0GHAToAAAwBCyADIAE2AgggAyAHNgIAIANBwLmAgABBrbOBgAAgB0EBShs2AgQgAEHk8YCAACADELOBgIAADAILIAchBgsgBEEQaiEEIAVBAWoiBSACKAIASA0BCwsgBkUNACAGKAI0RQ0BIAYgBigCBEGACHI2AgQMAQtBACEGCyAAKAIAIAIQxIKAgAAgA0EQaiSAgICAACAGC0MAAkAgAUUNACABIAI2AhQgASABKAIEQYCggAJyNgIEIAAgARDIhYCA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ABshEEEAIRcCQCADRQ0AAkAgAyAFQYgDahCugoCAAEUNACAFQeQAIAUoAogDIgIgAkEBSBsiGjYCiANBACEXDAELQQAhAgJAIBBBAEgNACAGKAIQIBBBBHRqKAIAIQILIABBACADIAIQtIKAgAAhFyAFKAKIAyEaCyAHQccAIBpBf2pBAUEAELeCgIAAGgJAIAYoAhRBAUgNACAEQV9xIREgF0EARyEbIAZBIWohHEEAIQ4DQAJAAkAgEEEASA0AIA4gEEcNAQsgACAOEO6FgIAAIAYoAhAgDkEEdCIWaigCDCIVQRBqKAIAIgRFDQBBACEKQQAhCANAIAQoAgghAgJAAkAgF0UNACAXIAJHDQELIAIoAhxBB3ZBf3NBAXEgCGohCAJAAkAgAigCCCIBDQBBACECDAELQQAhAgNAIAJBAWohAiABKAIUIgENAAsgCCACaiEICyACIAogAiAKShshCgsgBCgCACIEDQALIAhFDQAgBiAIIBtqQQJ0QQRqrRCBgYCAACILRQ0CAkACQCAXDQBBACEEDAELIAtBADYCBEEBIQQLAkAgFSgCECIIRQ0AIAtBBGohDQNAIAgoAgghAgJAAkAgF0UNACAXIAJHDQELAkAgAi0AHEGAAXENACALIARBAWoiBEECdGogAigCFDYCAAsgAigCCCICRQ0AIA0gBEECdGohAQNAIAEgAigCLDYCACABQQRqIQEgBEEBaiEEIAIoAhQiAg0ACwsgCCgCACIIDQALCyALIAQ2AgAgAEEAOgATIABBADYCHCAAIAAoAiwiAiAKQQhqIgEgAiABShs2AiwgByAHQZsBQQIgBEEBELeCgIAAIAtBchDmhYCAAAJAIAcoAmwiAkEBSA0AIAJBFGwgBygCaGpBbmogDkH/AXE7AQALIAdBMkECQQBBABC3goCAACEEIAUgBigCECAWaigCADYC0AIgBkGWs4GAACAFQdACahC1goCAACECIAcgB0H1AEEAQQNBABC3goCAACACQXoQ5oWAgAAgB0HvAEECQQNBAxC3goCAABogBxCGh4CAABogBygCbCECQfyKg4AAIQECQCAHKAIALQBXDQAgBygCaCACQX9qIAQgBEEASBtBFGxqIQELIAEgAjYCCCAVKAIQIhNFDQADQAJAIBMoAggiCi0AKw0AAkAgF0UNACAXIApHDQELQQAh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aiIEIANHDQALCyACQSBqJICAgIAAC2gBAX8CQAJAIAAoAgAiA0UNACADQgwQgYGAgAAhAwwBC0IMEO6AgIAAIQMLAkAgA0UNACADIAE2AgggAyACNgIEIAMgACgCeDYCACAAIAM2AnggAg8LIAAoAgAgAiABEYmAgIAAAEEAC5ECAQF/I4CAgIAAQSBrIgMkgICAgAACQCAAKAIALQBXDQAgAS0ABEGAAXENACADQdGAgIAANgIEIAMgADYCAAJAIAAtABZFDQAgA0EANgIMIANB0oCAgAA2AgggAyABEImGgIAAGgsgA0EAOwEUIANBzoCAgAA2AgwgA0HTgICAADYCCCADIAEQiYaAgAAaIAAoAiQNACADQQA2AgwgA0HUgICAADYCCCADQdWAgIAANgIEIAMgAjYCGCADIAA2AgAgAyABEImGgIAAGiAAKAIkDQAgA0HWgICAADYCDCADQbuAgIAANgIIIANB0YCAgAA2AgQgAyAANgIAIAMgARCJhoCAABoLIANBIGokgICAgAALkwEBAn8CQAJAIAEoAgAiAkEBSA0AIAFBHGohAQNAAkAgAUFsaiAARg0AAkAgACgCECABQXxqKAIARw0AIAAoAgwgAUF4aigCABCNgYCAAEUNBAsgASgCACIDRQ0AIANBBWotAABBCHFFDQAgACADKAIgEJyGgIAADQMLIAFBwABqIQEgAkF/aiICDQALC0EADwtBAQugBwUFfwF+AX8BfgN/I4CAgIAAQdAAayICJICAgIAAAkAgAC0AxwENACAALQAQDQAgACgCACEDIAAoAgghBANAIAEiBSgCNCIBDQALIABBAToAECAFKAIgIQYgAykDICEHIAQgBSgCHCIIKAIAEMKCgIAAAkAgCCgCAEEASg0AIAJBADYCPCACIAA2AjAgAiAGNgI0DAELIAdCxACDIQkgB0IEgyEHIAhBEWohAUEAIQVBACEKA0AgAUF3aigCACELAkACQCABQXtqKAIAIgxFDQAgAS0AAEEDcQ0AIAQoAgAtAFcNASAEKAJ0IAVqIAxCf0EBQX8QooGAgAAaDAELAkAgCVANACALLQAAQacBRw0AIAsoAiwhDAJAAkAgCy4BICILQX9KDQAgDC4BICILQQBODQBByeCAgAAhCwwBCyAMKAIEIAtB//8DcUEMbGooAgAhCwsCQCAHUA0A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AkACQCADDQAgBEEBcUUNAiAAKAIkIAFHDQIgBEF8cUECciEEDAELIARBfHEhBAsgACAENgIECwJAAkAgAC0AACIFQawBRg0AIAVBpwFHDQEgAg0BIAAoAhwgAUcNASAAIARB////fnE2AgQMAQsgACgCFCIFRQ0AIAUoAgBBAUgNAEEAIQZBCCEEA0AgBSAEaigCACABIAIQq4aAgAAgBEEQaiEEIAZBAWoiBiAAKAIUIgUoAgBIDQALCyAAKAIMIAEgAhCrhoCAACAAKAIQIgANAAsLC48CAQN/I4CAgIAAQcAAayICJICAgIAAIAIgADYCICACIAAoAgBB1wBqNgIkA0AgAkEANgI4IAJCADcDKCACQQA2AjACQAJAIAEoAiAiA0UNACADKAIAQQFIDQBBAyEEIANBLGotAABBwABxDQELQQEhBAsgAiAENgI0IAJBIGogASgCJBCAiICAAAJAIAIoAihFDQAgAkIANwIMIAJBu4CAgAA2AgggAkHYgICAADYCBCACIAA2AgAgAkEANgIUIAIgAkEgajYCGAJAIAEoAiQiBEUNACACIAQQ/4WAgAAaCyACKAI4IgRFDQAgAigCICgCACAEEOSAgIAACyACKAIsDQALIAJBwABqJICAgIAAC6gBAQF/AkAgAEUNAANAAkAgACgCJCICRQ0AIAIoAhgiAiABKAIATA0AIAEgAjYCAAsCQCAAKAIsIgJFDQAgAigCGCICIAEoAgBMDQAgASACNgIACwJAIAAoAjwiAkUNACACKAIYIgIgASgCAEwNACABIAI2AgALIAAoAhwgARCqiICAACAAKAIoIAEQqoiAgAAgACgCMCABEKqIgIAAIAAoAjQiAA0ACwsL1gMBBX8jgICAgABBwABrIgQkgICAgABBACEFAkAgAkUNACABKAIEQYDAgBBxDQAgAy0AJEHQAHENAAJAAkAgASgCNEUNACABIQYDQCAGKAJEDQMgBigCNCIGDQAMAgsLIAEoAkQiBkUNACAGKAIIRQ0BCyABKAI8DQBBACEFAkAgAi0AAEEsRw0AQQAhBQNAIAAgASACKAIQIAMQroaAgAAgBWohBSACKAIMIgItAABBLEYNAAsLIAIgAxCCiICAAEUNACABIAEoAgRBgICACHI2AgQgBUEBaiEHA0AgACgCACACQQBBABCBhoCAACIGQX9B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EyIJQQdLDQAgACAJQQFqOgATIAAgCUECdGpBkAFqIA82AgALIAsgBRC3hoCAACALQSRBJiACLQAgQQFxGyANIAFBABC3goCAABoCQCACKAIMIgFFDQAgC0HDACABQQBBABC3goCAABoLIAsgChC3hoCAAAt2AQF/I4CAgIAAQSBrIgQkgICAgAAgACADIAEoAiAgAhCliICAACAEQQhqIgBCADcDACAEQRBqQgA3AwAgAEG7gICAADYCACAEQgA3AwAgBCADNgIYIARB3ICAgAA2AgQgBCABEImGgIAAGiAEQSBqJICAgIAAC9oCAgN/AX4jgICAgABBEGsiBCSAgICAAAJAAkAgASgCACIFIAJqIgYgASgCBE0NAAJAAkACQCAGQcgBSA0AIARByAE2AgAgAEHq8oCAACAEELOBgIAADAELIAAoAgAgASAFrEIBhiACrHwiB0LIASAHQsgBUxsiB0IGhkIIhBCGgYCAACIBDQELQQAhAQwCCyABIAc+AgQgASgCACEFCwJAIAUgA0wNACAFQQZ0IAFqQUhqIQYgBSACakEGdCABakFIaiEAA0AgACAGQcAAENSKgIAAQUBqIQAgBkFAaiEGIAVBf2oiBSADSg0ACyABKAIAIQULIAEgBSACajYCACABIANBBnRqIgZBCGpBACACQQZ0ENWKgIAAGiACQQFIDQAgAyACaiEFIAZBMGohBgNAIAZBfzYCACAGQcAAaiEGIANBAWoiAyAFSA0ACwsgBEEQaiSAgICAACABC5UBAQN/AkAgAEUNAANAIAAgATYCJCAAIAAoAgQgAnI2AgQCQCAALQAAQawBRw0AIAAoAhQiA0UNACADKAIAQQFIDQBBACEEQQghBQNAIAMgBWooAgAgASACEM+GgIAAIAVBEGohBSAEQQFqIgQgACgCFCIDKAIASA0ACwsgACgCDCABIAIQz4aAgAAgACgCECIADQALCwvKAwEFfwJAIAFFDQADQAJAIAEoAhwiA0UNACADKAIAQQFIDQAgA0EIaiEEQQAhBQNAIAQgACAEKAIAEIOIgIAANgIAIARBEGohBCAFQQFqIgUgAygCAEgNAAsLAkAgASgCKCIDRQ0AIAMoAgBBAUgNACADQQhqIQRBACEFA0AgBCAAIAQoAgAQg4iAgAA2AgAgBEEQaiEEIAVBAWoiBSADKAIASA0A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IAFBGGooAgBBfxC5h4CAACADQQAQt4KAgAAaDAMLIAVBxwAgACABKAIIIAFBGGooAgBBfxC6h4CAACADQQAQt4KAgAAaDAILAkAgAUEYaigCACIALQAAQacBRw0AIAVBxwAgASgCCCAAKAIcEKqGgIAAIANBABC3goCAABoMAgsgBUHLAEEAIANBABC3goCAABoMAQtBrdiAgAAhAAJAIAEoAggQt4eAgAAiAUHBAEgNACABQf8BcUECdEGsw4KAAGooAgAhAAsgBSAFQfUAQQAgA0EAELeCgIAAIABBABDmhYCAAAsgBEHAAGokgICAgAAgAwtnAQF/I4CAgIAAQRBrIgMkgICAgAACQCABQQdqLQAAQcAAcUUNAAJAIAJBBmotAABBCHENACAAKAIALQAgQYABcQ0BCyADIAE2AgAgAEHRm4GAACADELOBgIAACyADQRBqJICAgIAAC9sCAgJ/AX4jgICAgABBEGsiBCSAgICAACAEQQA2AgwgBEEANgIIAkACQCADRQ0AIAMtAABBpwFHDQAgAygCLCIDRQ0AIAMtACtBAUcNACADQTRqIQMDQCADKAIAIgVBGGohAyAFKAIAIABHDQALIAUoAggiAygCACgCSCIFRQ0AIAMgAiABKAIgIARBDGogBEEIaiAFEYeAgIAAAEUNAAJAAkAgASgCICIDDQBCKSEGDAELIAMQ14qAgABB/////wNxQSlqrSEGCyAAIAYQsIGAgAAiA0UNACADIAFBKBDUioCAACIFIAVBKGoiAjYCIAJAAkAgASgCICIADQBBASEBDAELIAAQ14qAgABB/////wNxQQFqIQELIAIgACABENSKgIAAGiAFIAQoAgw2AhAgBSAEKAIINgIIIAUgBSgCBEEQcjYCBAwBCyABIQMLIARBEGokgICAgAAgAwuEDwEPfyOAgICAAEEQayIEJICAgIAAIARBADYCDCAEQQA2AgQgASgCDCEFIAAtABchBgJAIAAgARC7h4CAAA0AIAAgARC8h4CAACEHAkAgASgCDCIILQAAIglBsAFHDQAgCC0AAiEJCwJAAkACQCAJQf8BcSIJQYoBRg0AQQEhCiAJQbEBRw0CIAhBFGohCQwBCyAIKAIUQRxqIQkLIAkoAgAoAgAhCgsgACgCACAKQQVsQQFqrRCwgYCAACELAkAgACgCAC0AVw0AQQAhCCAAKAIIIQkgACABQQNBACAEQQxqIAIgA0YiDBsgCyAEQQRqEL2HgIAAIQ0gAEEAOgAXIAAgBSAEQQhqELCHgIAAIQ4gACAGOgAXAkACQAJAIApBAUgNACALIQYDQCAIIAYoAgBHDQIgBkEEaiEGIAogCEEBaiIIRw0ACyAOIQYMAgsgDiEGIApFDQEgACAKEMmGgIAAIQYMAQsgDiEGIAogCEYNACAAIAoQyYaAgAAhBiAOIQggCyEPIAohEANAIAlB0AAgCCAPKAIAIAZqQQAQt4KAgAAaIAhBAWohCCAPQQRqIQ8gEEF/aiIQDQALCwJAAkAgDUEFRw0AIAAgACgCOEF/aiIRNgI4IAEoAhQhBUEAIQ8gACABKAIMEIqFgIAAIRICQCAMDQACQAJAIAAtABMiAQ0AIAAgACgCLEEBaiIPNgIsDAELIAAgAUF/aiIBOgATIAAgAUH/AXFBAnRqQZABaigCACEPCyAJQeYAIAYgBiAPELeCgIAAGgsCQCAFKAIAQQFIDQAgBUEIaiEBQQAhCgNAIAAgASgCACAEEKmHgIAAIQgCQCAPRQ0AIAEoAgAQvoeAgABFDQAgCUHmACAPIAggDxC3goCAABoLAkAgBCgCACIQRQ0AIAAtABMiDUEHSw0AIAAgDUEBajoAEyAAIA1BAnRqQZABaiAQNgIACwJAAkACQAJAIAIgA0cNACAKIAUoAgBBf2pODQELIAkgCUEzQTUgBiAIRhsgBiARIAgQt4KAgAAgEkF+EOaFgIAAIAkoAmwiCEEBSA0CIActAAAhEAwBCyAJIAlBMkE0IAYgCEYbIAYgAiAIELeCgIAAIBJBfhDmhYCAACAJKAJsIghBAUgNASAHLQAAQRByIRALIAhBFGwgCSgCaGpBbmogEEEYdEEYdTsBAAsgAUEQaiEBIApBAWoiCiAFKAIASA0ACwsCQCAPDQAgCSARELeGgIAADAILIAlBMiAPIANBABC3goCAABogCUEIQQAgAkEAELeCgIAAGiAJIBEQt4aAgAAgAC0AEyIJQQdLDQEgACAJQQFqOgATIAAgCUECdGpBkAFqIA82AgAMAQtBACESIAIhDwJAIAwNACAAIAAoAjhBf2oiEjYCOCASIQ8LAkAgCkEBSA0AQQAhCANAIAAoAiQNAwJAIAEoAgwgCBC/h4CAABC+h4CAAEUNACAJQTIgBiAIaiAPQQAQt4KAgAAaCyAKIAhBAWoiCEcNAAsLAkACQCANQQFHDQAgCUEdIAQoAgQiECACIAYQt4KAgAAaIAlBCEEAQQBBABC3goCAACERDAELIAkgCUHgACAGIApBABC3goCAACAHIAoQ5oWAgAAgBCgCBCEQAkAgAiADRw0AIAlBGyAQIAIgBhC3goCAACEBIAkoAgAtAFcNAiAJKAJoIAFBFGxqIgkgCjYCECAJQf0BOgABDAILIAlBHCAQQQAgBhC3goCAACERIAkoAgAtAFcNACAJKAJoIBFBFGxqIgEgCjYCECABQf0BOgABCwJAIAQoAgwiAUUNACAKQQFHDQAgCUEzIAEgAkEAELeCgIAAGgsCQCACIANHDQAgCUEIQQAgAkEAELeCgIAAGgsCQCASRQ0AIAkgEhC3hoCAAAsgCUEjIBAgAkEAELeCgIAAIRIgAiENAkAgCkECSA0AIAAgACgCOEF/aiINNgI4CwJAIApBAUgNAEEAIQEDQAJAAkAgAC0AEyIIDQAgACAAKAIsQQFqIgg2AiwMAQsgACAIQX9qIgg6ABMgACAIQf8BcUECdGpBkAFqKAIAIQgLIAAgBSABEL+HgIAAEIqFgIAAIQ8gCUHeACAQIAEgCBC3goCAABogCSAJQTQgBiABaiANIAgQt4KAgAAgD0F+EOaFgIAAAkAgCEUNACAALQATIg9BB0sNACAAIA9BAWo6ABMgACAPQQJ0akGQAWogCDYCAAsgCiABQQFqIgFHDQALCyAJQQhBACADQQAQt4KAgAAaAkAgCkECSA0AIAkgDRC3hoCAACAJQSYgECASQQFqQQAQt4KAgAAaIAlBCEEAIAJBABC3goCAABoLIAkoAmwhAUH8ioOAACEIAkAgCSgCAC0AVw0AIAkoAmggAUF/aiARIBFBAEgbQRRsaiEICyAIIAE2AggLIAYgDkYNACAGRQ0AIAAtABMiCUEHSw0AIAAgCUEBajoAEyAAIAlBAnRqQZABaiAGNgIACwJAIAtFDQAgACgCACALEOSAgIAACyAHRQ0AIAAoAgAgBxDkgICAAAsgBEEQaiSAgICAAAv9AgEEfyOAgICAAEGwAWsiBSSAgICAAEEAIQYgBUEANgIEIAAoAgAhByAFQcAAakEAQTQQ1YqAgAAaIAVBCGpBAEE0ENWKgIAAGiAFQfgAakEAQTQQ1YqAgAAaAkAgASgCDCIIRQ0AIAcgCEEAQQAQgYaAgAAhBgsCQCAHLQBXDQAgBUEsOgB4IAUgBjYCTCAFQTk6AEAgBSAGNgIUIAVBNzoACCAFIAEoAhQiASgCCDYCUCAFIAFBGGooAgA2AhggBSAFQQhqNgKIASAFIAVBwABqNgKEASAGIAAgBiAFQQRqELCHgIAAELGHgIAAAkACQCADRQ0AIAAgBUH4AGogAiAEIAMRjYCAgAAADAELIAYgBigCBEEBcjYCBCAAIAVB+ABqIAIQn4eAgAAaCyAFKAIEIgFFDQAgAC0AEyIIQQdLDQAgACAIQQFqOgATIAAgCEECdGpBkAFqIAE2AgALAkAgBkUNACAHIAYQ5YCAgAALIAVBsAFqJICAgIAAC+YBAQN/IAEtAAAiAyEEAkAgA0GwAUcNACABLQACIQQLAkACQAJAAkAgBEH/AXEiBEGKAUYNACAEQbEBRw0CIAFBFGohBAwBCyABKAIUQRxqIQQLIAQoAgAoAgAiBUEBRw0BCyAAIAEgAhCph4CAAA8LIAJBADYCAAJAIANBigFHDQAgACABEKaHgIAADwsgACAAKAIsIgQgBWo2AiwgBEEBaiECAkAgBUEBSA0AQQghBCACIQMDQCAAIAEoAhQgBGooAgAgAxD3hoCAACAEQRBqIQQgA0EBaiEDIAVBf2oiBQ0ACwsgAgt0AQF/AkAgAEUNAAJAA0AgACgCBCICQYDAIHFFDQECQAJAIAJBgIAgcUUNACAAKAIUQQhqIQAMAQsgAEEMaiEACyAAKAIAIgANAAwCCwsgACABNgIcIAAgAC0AADoAAiAAQbABOgAAIAAgAkH/v39xNgIECwtXAQN/IAAoAmwiAUF/aiECQfyKg4AAIQMCQCAAKAIALQBXDQAgACgCaCACQRRsaiEDCwJAIAMtAABB0ABHDQAgAUEBSA0AIAAoAmggAkEUbGpBATsBAgsLaAECfyAAEOWFgIAAIQYCQCACQQJHDQAgACgCbCIHIAAgBxtBAToAFQsgBiAGQcYAIAEgAkEAELeCgIAAIAMgBBDmhYCAAAJAIAYoAmwiAEEBSA0AIABBFGwgBigCaGpBbmogBTsBAAsLtAEBAn8gACgCCCEHAkACQCAAKAIAIARBAnRBHGqsEIGBgIAAIggNACAFLQAEQRBxRQ0BIAAoAgAgBRDkgICAAA8LIAggBDoAGiAIQQA2AhQgCEEANgIMIAggBTYCBCAIQQA2AgAgCCAHKAJsNgIQIAcgB0HBAEHCACAGGyABIAIgAxC3goCAACAIQXEQ5oWAgAAgBygCbCIIQQFIDQAgCEEUbCAHKAJoakFuaiAGQS5xOwEACwtTAQF/IAAoAgAhAwJAAkAgAQ0AQQAhAQwBCyADIAFBAEEAEIGGgIAAIQELAkAgAy0AVw0AIAAgASACEOiFgIAACwJAIAFFDQAgAyABEOWAgIAACws/AQF/AkAgACgCAEIIEIGBgIAAIgVFDQAgBSADKQAANwAACyAAIAAgAUEAIAJBABC3goCAACAFIAQQ5oWAgAALqwIBAn8DfwJAIAAoAgRBgMAQcUUNAANAIAAoAgwiACgCBEGAwBBxDQALCwJAIAAtAAAiAUGwAUcNACAALQACIQELAkACQAJAAkACQAJAAkACQAJAAkAgAUH/AXEiAUGwAUoNACABQYoBRg0CIAFB2X5qDgMBBgEFCyABQc9+ag4CAwIFCyAAKAIsIgJFDQRBxAAhASAALgEgIgBBAEgNBiACLgEiIABMDQYgAigCBCAAQQxsai0ABSEBDAYLIAAoAhQoAhxBCGohAAwGCyAAKAIMKAIUKAIcIAAuASBBBHRqQQhqIQAMBQsgACgCFEEIaiEADAQLIAFBJEYNAQsgAC0AASEBDAELIAAoAghBABCMhYCAACEBCyABQRh0QRh1DwsgACgCACEADAALC0YAIAAQt4eAgAAhAAJAIAFBwQBIDQAgAEHBAEgNAEHDAEHDAEHBACAAQcIASxsgAUHCAEsbDwsgASAAIABBwQBIG0HAAHIL8AcBCX8jgICAgABBEGsiBCSAgICAAAJAAkACQCABRQ0AIAINAQsgAiABR0EBdCEFDAELAkAgAEUNACABLQAAQZwBRw0AQQAhBiAEQQA2AgwgACgCACACQQFBwQAgBEEMahDbgoCAABogBCgCDCIFRQ0AIAAoAggiB0GAgICAeEEBIAEuASAiCEF/anQgCEEfShsgBygC2AFyNgLYAQJAIAAoAtwBIAgQxIeAgAAiCEUNAAJAQoSAkIDAgIACIAgzARCIQgGDUA0AIAhBARD6gICAABoLIAggBUEAEPmDgIAARSEGCyAFEOqBgIAAIAgQ6oGAgABBACEFIAYNAQsCQAJAIAIoAgQiCSABKAIEIgpyIgtBgBBxRQ0AIAogCXFBgBBxRQ0BQQAhBSABKAIIIAIoAghGDQIMAQsgAi0AACEIAkACQCABLQAAIgZBxwBGDQAgBiAIQf8BcUYNAQsCQCAGQfEARw0AQQEhBSAAIAEoAgwgAiADELmHgIAAQQJIDQMgAi0AACEICyAIQf8BcUHxAEcNAUEBIQUgACABIAIoAgwgAxC5h4CAAEECTg0BDAILAkAgASgCCCIIRQ0AAkACQAJAAkAgBkHYfmoOBQIBAQECAAsgBkHxAEYNAkEAIQUgBkH5AEYNBQsgAigCCCIHRQ0CIAZBpwFGDQIgBkGpAUYNAkECIQUgCCAHENGKgIAADQQMAgsgAigCCCEFA0ACQAJAIAgtAAAiBiAFLQAAIgdHDQAgBg0BQQIhBSAKQYCAgAhxIghBGHYgCUEYdkEBcUcNBiAIRQ0EIAAgASgCLCACKAIsQQEQxYeAgAANBiACKAIEIQkgASgCBCEKDAQLIAZBsLaBgABqLQAAIAdBsLaBgABqLQAARw0ECyAFQQFqIQUgCEEBaiEIDAALC0ECIQUgAigCCCIGRQ0CA0ACQAJAIAgtAAAiByAGLQAAIgxHDQAgB0UNAwwBCyAHQbC2gYAAai0AACAMQbC2gYAAai0AAEcNBAsgBkEBaiEGIAhBAWohCAwACwtBAiEFIAkgCnNBhAhxDQECQCALQYCABHENACALQYAgcQ0CAkAgC0EgcQ0AIAAgASgCDCACKAIMIAMQuYeAgAANAwsgACABKAIQIAIoAhAgAxC5h4CAAA0CIAEoAhQgAigCFCADEKOGgIAADQIgAS0AACIIQfUARg0AIAhBqgFGDQAgC0GAgAFxDQAgAS8BICACLwEgRw0CAkAgAS0AAiACLQACRg0AIAhBrwFGDQMLIAhBMUYNACABKAIcIgggA0YNACAIIAIoAhxHDQILQQAhBQwBC0ECIQULIARBEGokgICAgAAgBQuBAQECf0EBIQQCQCAAIAEgAiADELmHgIAARQ0AAkAgAi0AACIFQStHDQAgACABIAIoAgwgAxC6h4CAAA0BIAAgASACKAIQIAMQuoeAgAANASACLQAAIQULAkAgBUH/AXFBM0cNACAAIAEgAigCDCADQQAQxoeAgAANAQtBACEECyAEC/YBAQR/I4CAgIAAQRBrIgIkgICAgAACQCABKAIMIgMtAAAiBEGwAUcNACADLQACIQQLAkACQAJAIARB/wFxIgRBigFGDQBBASEFIARBsQFHDQIgA0EUaiEEDAELIAMoAhRBHGohBAsgBCgCACgCACEFCwJAAkAgAUEFai0AAEEQcUUNACAAKAIALQBXDQBBACEEIAUgASgCFCgCHCgCACIBRg0BQQEhBCAAKAIkDQEgAiAFNgIEIAIgATYCACAAQbjxgIAAIAIQs4GAgAAMAQtBACEEIAVBAUYNACAAIAMQyIeAgABBASEECyACQRBqJICAgIAAIAQLpQIDBH8BfgF/AkAgASgCDCICLQAAIgNBsAFHDQAgAi0AAiEDCwJAAkACQCADQf8BcSIDQYoBRg0AQQEhBCADQbEBRw0CIAJBFGohAwwBCyACKAIUQRxqIQMLIAMoAgAoAgAhBAtBACEFAkAgAUEFai0AAEEQcUUNACABKAIUIQULIARBAWqsIQYCQAJAIAAoAgAiAUUNACABIAYQgYGAgAAhBwwBCyAGEO6AgIAAIQcLAkAgB0UNAAJAIARBAUgNAEEAIQFBCCEAA0AgAiABEL+HgIAAELeHgIAAIQMCQCAFRQ0AIAUoAhwgAGooAgAgAxC4h4CAACEDCyAHIAFqIAM6AAAgAEEQaiEAIAQgAUEBaiIBRw0ACwsgByAEakEAOgAACyAHC/0NBg1/AX4BfwF+BH8BfiOAgICAAEHAAGsiBiSAgICAACAAEOWFgIAAIQcgACAAKAIoIghBAWo2AigCQAJAIAMNAEEAIQMMAQsgAUEFai0AAEEQcUUNAEEAIQkCQCABKAIUKAIcIgooAgAiC0EBSA0AIApBCGohCkEAIQkDQCAKKAIAEL6HgIAADQEgCkEQaiEKIAsgCUEBaiIJRw0ACyALIQkLQQAgAyAJIAtGGyEDCyACQQRxIQoCQAJAIAAoAiQNACABKAIEQcAgcUGAIEcNACABKAIUIgkoAjQNACAJLQAEQQlxDQAgCSgCPA0AIAkoAiQNACAJKAIgIgsoAgBBAUcNACALQRxqKAIADQAgC0EYaigCACIMLQArQQFGDQACQCAJKAIcIg0oAgAiDkEBSA0AIA1BCGohCyAOIQ8DQCALKAIALQAAQacBRw0CIAtBEGohCyAPQX9qIg8NAAsgCUUNAQsCQAJAIAwoAjwiDw0AQYCAfiEQDAELIAAoAgAoAhBBDGohCUF/IRADQCAQQQFqIRAgCSgCACELIAlBEGohCSALIA9HDQALCyAAIBAQ7oWAgAACQCAOQQFHDQAgDSgCCC4BIEF/Sg0AIAdBDkEAQQBBABC3goCAACEJIAAgCCAQIAxB8AAQ54WAgAAgBiAMKAIANgIAIABBAEHr/YCAACAGEK+GgIAAIAcoAmwhCkH8ioOAACEAAkAgBygCAC0AVw0AIAcoAmggCkF/aiAJIAlBAEgbQRRsaiEACyAAIAo2AghBASEJDAILAkAgDkEBSA0AIA1BCGohC0EBIQkDQCABKAIMIAlBf2oQv4eAgAAhEUHEACEPAkAgCygCAC4BICISQQBIDQAgDC4BIiASTA0AIAwoAgQgEkEMbGotAAUhDwsgD0EYdEEYdSIPQcIASiARIA8QuIeAgABBv39qQQJJciEPAkAgCSAOTg0AIAtBEGohCyAJQQFqIQkgDw0BCwsgD0UNAQsgDCgCCCIMRQ0AQn8gDq2GQn+FIRMgDkEBSCEUA0ACQCAOIAwvATQiCUoNACAMKAIkDQAgCUE+Sw0AAkAgCkUNACAOIAwvATJIDQEgDiAJTg0AIAwtADZFDQELQgAhFQJAIBQNAEEAIRYDQCAAIAEoAgwgFhC/h4CAACANIBZBBHRqQQhqKAIAIgkQ2oKAgAAhFyAJLwEgIRggDCgCBCEZQQAhEgJAA0ACQCAZIBJBAXRqLwEAIBhB//8DcUcNACAXRQ0CIAwoAiAgEkECdGooAgAhCSAXKAIAIQsDQAJAAkAgCy0AACIPIAktAAAiEUcNACAPDQEMBQsgD0GwtoGAAGotAAAgEUGwtoGAAGotAABHDQILIAlBAWohCSALQQFqIQsMAAsLIBJBAWoiEiAORw0ADAMLCyASIA5GDQFCASASrYYiGiAVg0IAUg0BAkAgBEUNACAEIBZBAnRqIBI2AgALIBogFYQhFSAWQQFqIhYgDkcNAAsLIBUgE1INACAHQQ5BAEEAQQAQt4KAgAAhCyAGIAwoAgA2AhAgAEEAQcz9gIAAIAZBEGoQr4aAgAAgB0HwACAIIAwoAiwgEBC3goCAABogACAMENqGgIAAIAwoAhwtAAAhCQJAIANFDQAgACAAKAIsQQFqIgo2AiwgAyAKNgIAIA5BAUcNACAHIAggChDJh4CAAAsgBygCbCEKQfyKg4AAIQACQCAHKAIALQBXDQAgBygCaCAKQX9qIAsgC0EASBtBFGxqIQALIAlBA2ohCSAAIAo2AggMAwsgDCgCFCIMDQALCwJAIAJBAXFFDQAgAUEFai0AAEEQcQ0AIAEoAgwhCSABQQA2AgwgBkEANgI4IAZBtYCAgAA2AiggBkG2gICAADYCJCAGQQE7ATQgBkEgaiABEP+FgIAAGiAGLwE0IQsgASAJNgIMAkAgC0UNACABKAIUKAIAQQJKDQELQX8hCCAAIAAoAihBf2o2AihBBSEJDAELIAAoAoABIQkCQAJAAkACQCAKRQ0AIABBADYCgAEMAQsgAw0BCyAAIAEgCBDKh4CAAAwBCyAAIAAoAiwiC0EBaiIKNgIsIAMgCjYCACAAIAEgCBDKh4CAACAKIAtJDQAgByAIIAoQyYeAgAALIAAgCTYCgAFBAiEJCwJAIARFDQAgCUEDRg0AIAlBBEYNAAJAIAEoAgwiAS0AACIKQbABRw0AIAEtAAIhCgsCQAJAAkAgCkH/AXEiCkGKAUYNAEEBIQAgCkGxAUcNAiABQRRqIQoMAQsgASgCFEEcaiEKCyAKKAIAKAIAIgBBAUgNAQtBACEKA0AgBCAKNgIAIARBBGohBCAAIApBAWoiCkcNAAsLIAUgCDYCACAGQcAAaiSAgICAACAJC6wBAQJ/A38CQCAALQAAIgFB035qQQJJDQACQCABQbABRw0AIAAtAAIhAQtBACECAkAgAUH/AXEiAUHnfmpBA0kNACABQfUARg0AAkAgAUGnAUcNAEEBIQIgAEEGai0AAEEgcQ0BIAAoAiwiAUUNAUEAIQIgAC4BICIAQQBIDQEgASgCBCIBRQ0BIAEgAEEMbGotAARBD3FFDwtBASECCyACDwsgACgCDCEADAALC6IBAQJ/IAAtAAAiAiEDAkAgAkGwAUcNACAALQACIQMLAkACQAJAIANB/wFxIgNBigFGDQAgA0GxAUcNAiAAQRRqIQMMAQsgACgCFEEcaiEDCyADKAIAKAIAQQJIDQACQAJAAkAgAkGKAUYNACAALQACQYoBRw0BCyAAKAIUQRxqIQAMAQsgAEEUaiEACyAAKAIAIAFBBHRqQQhqKAIAIQALIAALTwECfyAAIAAoAgAgACgCQEEKIAAoAjhrIgNBAnStEPCDgIAAIgQ2AkACQCAEDQAgAEEANgI8DwsgACADNgI8IAQgAkECdGogASgCbDYCAAuuAQEFfwJAIAAtAAAiAUFVakH/AXFBAUsNACAAKAIQEMGHgIAAIQICQAJAIAAoAgwQwYeAgAAiAygCBCIEQYGAgIABcUGAgICAAUYNACACKAIEIgVBgYCAgAJxQYCAgIACRw0BCyACIAMgAUH/AXFBLEYbDwsCQCAFQYGAgIABcUGAgICAAUYNACAEQYGAgIACcUGAgICAAkcNAQsgAyACIAFB/wFxQSxGGyEACyAAC64BAQN/AkAgAUUNACACQQBHIQMDQEECIQQCQAJAAkAgACABKAIMEKGGgIAADQAgACABKAIIEKGGgIAADQACQCABKAIoIgVFDQAgACAFEP+FgIAADQELAkAgASgCGCIFRQ0AIAAgBRD/hYCAAA0BCyABKAIcIgVFDQEgACAFEP+FgIAAIgVBAEcgA3JFDQIgBUEAR0EBdCEECyAEDwsgAg0CCyABKAIkIgENAAsLQQALPwEBfwJAIAAoAgAiAigCgAJFDQAgASgCNA0AA0AgASIAKAI4IgENAAsgACgCQCIBRQ0AIAIgASgCCDYCgAILC14BAn9BACECAkAgAEUNACABQShsIAAoAmRqIgFBaGotAABBAXENACAAKAIAIgNCKBCwgYCAACIARQ0AIAAgAzYCFCAAQQE7ARAgACABQVhqEIuCgIAAGiAAIQILIAILxwEBAX9BASEEAkAgAUUNACACRQ0AIAEtABAgAi0AEEcNACABLQARIAItABFHDQAgAS0AEiACLQASRw0AIAEtABQgAi0AFEcNACAAIAEoAhggAigCGEF/ELmHgIAADQAgACABKAIcIAIoAhxBfxC5h4CAAA0AIAEoAgggAigCCEF/EKOGgIAAIgQNACABKAIMIAIoAgxBfxCjhoCAACIEDQACQCADRQ0AIAAgASgCKCACKAIoQX8QuYeAgAAiBA0BC0EAIQQLIAQLwQIBAn8CQCAAIAEgAiADELmHgIAARQ0AA0BBACEFAkACQAJAAkACQAJAAkACQAJAAkAgAS0AACIGQeUASg0AIAZBUGoOCgIBBwcDAwMDAwMGCwJAIAZBmn9qDg0EAwMDAwMEBAQDBwkIAAsgBkHTfmoOCQgIBAYGBgYGCAYLIARFDQZBASEEIAFBBWotAABBEHENBQwHCyAEDQRBASEFIAAgASgCFCIGKAIIIAIgA0EBEMaHgIAADQRBASEEQQEhBSAAIAZBGGooAgAgAiADQQEQxoeAgABFDQYMBAtBASEECyAAIAEoAhAgAiADIAQQxoeAgABFDQRBAQ8LIAQNAUEBIQQgAS0AAkEtRg0DDAELIAZBE0YNAQsgBQ8LQQEhBAsgACABKAIMIgEgAiADELmHgIAADQALCyACLQAAQfkARwu3AgECf0EBIQICQCABLQAEQQFxDQACQAJAAkACQAJAIAEtAAAiA0FVag4PBQEFBAQCBQUFAwMDAwMDAAsgA0HjfmoiA0EUSw0DQQEgA3RBgYDTAHENBCADQQpHDQNBASECIAAoAhggASgCHEcNBCAAQQE7ARRBAg8LIAAvARQNAyABKAIMIgNFDQMgACADEP+FgIAAGiAALwEURQ0DIABBADsBFCABKAIQIgFFDQMgACABEP+FgIAAGkEBDwsgASgCDCIBRQ0CQQJBASAAIAEQ/4WAgABBAkYbDwsgASgCECEAAkAgASgCDCIBLQAAQacBRw0AIAEoAiwiAUUNAEEBIQIgAS0AK0EBRg0CCyAALQAAQacBRw0AIAAoAiwiAUUNAEEBIQIgAS0AK0EBRg0BC0EAIQILIAILeAEBfyOAgICAAEEQayICJICAgIAAAkACQCABQQVqLQAAQRBxRQ0AIAAoAiQNASABKAIUKAIcKAIAIQEgAkEBNgIEIAIgATYCACAAQbjxgIAAIAIQs4GAgAAMAQsgAEG35ICAAEEAELOBgIAACyACQRBqJICAgIAAC5EBAQF/IABBxwBBACACQQAQt4KAgAAaIABBIyABQQBBABC3goCAACEDIABB3gAgAUEAIAIQt4KAgAAaAkAgACgCbCIBQQFIDQAgAUEUbCAAKAJoakFuakGAATsBAAtB/IqDgAAhAgJAIAAoAgAtAFcNACAAKAJoIAFBf2ogAyADQQBIG0EUbGohAgsgAiABNgIIC7YMAQt/I4CAgIAAQcAAayIDJICAgIAAIAAoAgghBEEAIQUCQAJAIAEoAgQiBkHAAHENACAAKAI0DQACQCAGQYCAgBBxRQ0AIARBDkEAQQBBABC3goCAACEHAkAgAUEFai0AAEEQcUUNACADIAEoAhQoAhA2AhAgAEEAQaPygIAAIANBEGoQr4aAgAALIARBCSABQTBqKAIAIAEoAixBABC3goCAABogBEHzACACIAEoAhxBABC3goCAABogBCgCbCEFQfyKg4AAIQYCQCAEKAIALQBXDQAgBCgCaCAFQX9qIAcgB0EASBtBFGxqIQYLIAYgBTYCCAwCCyAAIAAoAixBAWoiBTYCLCABIAZBgICAEHI2AgQgAUEwaiAFNgIAIAEgBEHKAEEAIAVBABC3goCAAEEBajYCLCAEQQ5BAEEAQQAQt4KAgAAhBQsCQCABKAIMIggtAAAiBkGwAUcNACAILQACIQYLAkACQAJAIAZB/wFxIgZBigFGDQBBASEJIAZBsQFHDQIgCEEUaiEGDAELIAgoAhRBHGohBgsgBigCACgCACEJCyABIAI2AhwgBEH2ACACIAlBABC3goCAACEKIAAoAgAgCUEBEKGHgIAAIQsCQAJAIAFBBWotAABBEHFFDQAgASgCFCIGKAIcIQcgAyAGKAIQNgIEIANBrbOBgABBnLKBgAAgBRs2AgAgAEEBQZDygIAAIAMQr4aAgAAgBygCACAJRw0BQQAhDCADQTBqQQA2AgAgA0IANwMoIAMgAjYCJCADQQs6ACAgACABELyHgIAAIQ0gBkEANgIIIAMgDTYCNCAAKAIAIAZBABCXhoCAACEGAkAgACgCAC0AVw0AIAAgBiADQSBqEKKFgIAARSEMCwJAIAZFDQAgACgCACAGQQEQ1oSAgAALAkAgAygCNCIGRQ0AIAAoAgAgBhDkgICAAAsCQCAMRQ0AIAlBAUgNAiALQRRqIQYgB0EIaiEHQQAhDANAIAYgACAIIAwQv4eAgAAgBygCABDagoCAADYCACAGQQRqIQYgB0EQaiEHIAkgDEEBaiIMRw0ADAMLCyALRQ0CIAsgCygCAEF/aiIENgIAIAQNAiALKAIMIAsQ5ICAgAAMAgsgASgCFCIHRQ0AIAMgCBC3h4CAACIGOgAfAkACQCAGQcAASg0AIANBwQA6AB8MAQsgBkHFAEcNACADQcMAOgAfCwJAIAtFDQAgCyAAIAEoAgwQioWAgAA2AhQLAkACQAJAAkAgAC0AEyIMDQAgACgCLEEBaiIMIQYMAQsgACAMQX9qIgY6ABMgACAGQf8BcSIJQQJ0akGQAWooAgAhBiAJDQEgACgCLCEMCyAAIAxBAWoiCDYCLAwBCyAAIAxBfmoiDDoAEyAAIAxB/wFxQQJ0akGQAWooAgAhCAsCQCAHKAIAIgxBAUgNACAMQQFqIQ0gB0EIaiEHIAUhCQNAIAcoAgAhDEEAIQUCQCAJRQ0AIANBADYCOCADQbWAgIAANgIoIANBtoCAgAA2AiQgA0EBOwE0AkAgDEUNACADQSBqIAwQ/4WAgAAaIAMvATQNACAEIAlBf2oQtYaAgAAaIAQgCRC1hoCAABogASABKAIEQf///29xNgIEQQAhBQwBCyAJIQULIAAgDCAGEOiFgIAAIAQgBEHhACAGQQEgCBC3goCAACADQR9qQQEQ5oWAgAAgBEGKASACIAggBhC3goCAACEMAkAgBCgCAC0AVw0AIAQoAmggDEEUbGoiDEEBNgIQIAxB/QE6AAELIAdBEGohByAFIQkgDUF/aiINQQFKDQALCwJAIAZFDQAgAC0AEyIHQQdLDQAgACAHQQFqOgATIAAgB0ECdGpBkAFqIAY2AgALIAhFDQAgAC0AEyIGQQdLDQAgACAGQQFqOgATIAAgBkECdGpBkAFqIAg2AgALAkAgC0UNACAEIAogC0F4EOaFgIAACyAFRQ0AIAQoAmwhBkH8ioOAACEHAkAgBCgCAC0AVw0AIAQoAmggBkF/aiAFIAVBAEgbQRRsaiEHCyAHIAY2AgggBEHDACABQTBqKAIAIAEoAixBARC3goCAABogAEEANgIcIABBADoAEwsgA0HAAGokgICAgAALxwEBBX8CQCABDQBBAA8LAkAgACABKAIAQRhsQQxqrRCwgYCAACICRQ0AIAIgASgCADYCACABKAIAQQFIDQBBACEDQQAhBANAIAIgA2oiBUEUaiAAIAEgA2oiBkEUaigCAEEAEJeGgIAANgIAIAVBEGogACAGQRBqKAIAQQAQmIaAgAA2AgAgBUEMaiAAIAZBDGooAgAQp4GAgAA2AgAgBUEgaiAGQSBqLQAAOgAAIANBGGohAyAEQQFqIgQgASgCAEgNAAsLIAIL0wIBBH9BACEDAkAgAkUNACAAQuQAELCBgIAAIgRFDQAgBCAAIAIoAgAQp4GAgAA2AgAgBCAAIAIoAgQQp4GAgAA2AgRBACEDQQAhBQJAIAIoAigiBkUNACAAIAZBAEEAEIGGgIAAIQULIAQgBTYCKCAEIAIoAiw2AiwgBCAAIAIoAghBABCYhoCAADYCCCAAIAIoAgxBABCYhoCAACEFIAQgAikCMDcCMCAEIAU2AgwgBCACLQAQOgAQIAQgAi8AETsAESAEIAItABQ6ABQgBCACKAI4NgI4IAQgAigCUDYCUCAEIAItAGA6AGACQCACKAIYIgVFDQAgACAFQQBBABCBhoCAACEDCyAEIAM2AhgCQAJAIAIoAhwiAw0AQQAhAAwBCyAAIANBAEEAEIGGgIAAIQALIAQgATYCSCAEIAA2AhwgBCACLQATOgATIAQhAwsgAwsKACAAKAIYIAFHCzAAAkAgAS0AAEGsAUcNACABQQdqLQAAQQFxRQ0AIAAoAhggASgCLBDQh4CAAAtBAAukAQEEf0EAIQICQCABRQ0AIAAgASgCAEEDdEEIaq0QgYGAgAAiA0UNACADIAEoAgA2AgAgAyABLQAEOgAEAkAgASgCAEEBSA0AIAFBCGohAiADQQhqIQRBACEFA0AgBCAAIAIoAgAQp4GAgAA2AgAgBEEEaiACQQRqKAIANgIAIARBCGohBCACQQhqIQIgBUEBaiIFIAEoAgBIDQALCyADIQILIAILkQEBAn8CQCAARQ0AIABBxABqIQICQAJAAkAgACgCRCIDDQAgAUEANgIkDAELQQAgAyABQQAQxYeAgAANASABIAIoAgAiADYCJCAARQ0AIAAgAUEkajYCIAsgASACNgIgIAIgATYCAA8LIAEoAgggAigCACgCCEF/EKOGgIAARQ0AIAAgACgCBEGAgIAQcjYCBAsLRwEBfwJAIAANAEEADwsgACABENKHgIAAIQICQCABQQFxRQ0AIAAoAgwgARDRh4CAACACaiAAKAIQIAEQ0YeAgABqIQILIAILeAEBf0E0IQICQCABRQ0AIAAtAABBsgFGDQAgAEEHai0AAEEBcQ0AQRwhAiAAKAIMDQBBHEEMIAAoAhQbIQILAkAgAEEFai0AAEEIcQ0AIAAoAggiAEUNACACQQFyIAAQ14qAgABB/////wNxaiECCyACQQdqQXhxC8IBAQF/AkAgAS8BNCACTg0AAkAgACACQQlsrBCwgYCAACIADQBBBw8LIAEgACABKAIgIAEvATRBAnQQ1IqAgAAiADYCICABIAAgAkECdGogASgCCCABLwEyQQF0QQJqENSKgIAAIgA2AgggASAAIAJBAXQiA2ogASgCBCABLwE0QQF0ENSKgIAAIgA2AgQgACADaiABKAIcIAEvATQQ1IqAgAAhACABIAI7ATQgASAANgIcIAEgAS8AN0EQcjsANwtBAAuFCQENfyOAgICAAEEwayIEJICAgIAAIAAoAgAhBSAEQSBqQgA3AwAgBEIANwMYAkACQAJAIAENAEEAIQYgA0EANgIAIAJBADsBACAFQdcAaiEHDAELQf//ASEIIAUgASgCACIAQQxsrRCwgYCAACEGAkACQCAAQf//AUgNACADIAY2AgAgAkH//wE7AQAgBUHXAGohBwwBCyADIAY2AgAgAiAAOwEAIAVB1wBqIQcgAEEBSA0BIAAhCAtBACEJIAYhCgNAIActAAANAiABIAlBBHRqIgtBCGohDAJAAkACQAJAIAtBDGooAgAiDUUNACALQRFqLQAAQQNxRQ0BCwJAIAwoAgAiACgCBCIOQYDAIHFFDQADQAJAAkAgDkGAgCBxRQ0AIAAoAhRBCGohAAwBCyAAQQxqIQALIAAoAgAiACgCBCIOQYDAIHENAAsLAkAgAC0AAEGNAUcNAANAIAAoAhAiAC0AAEGNAUYNAAsLAkACQAJAIAAtAAAiDkE7Rg0AIA5BpwFHDQIgAEEHai0AAEEDcQ0CIAAoAiwiDkUNAgJAIAAuASAiAEF/Sg0AIA4uASAiAEEATg0AQcnggIAAIQ0MBAsgDigCBCAAQf//A3FBDGxqIQAMAQsgAEEIaiEACyAAKAIAIQ0LIA1FDQELIA0Qg4aAgAANACAFIA0Qp4GAgAAhDQwBCyAEIAlBAWo2AhAgBUGp64CAACAEQRBqELWCgIAAIQ0LIARBADYCLAJAAkACQANAIA1FDQEgBEEYaiANQQAQvIKAgAAoAggiAEUNAgJAIAAtAAlBgAFxRQ0AIAogCi8BCkGACHI7AQoLAkACQCANENeKgIAAQf////8DcSIPDQBBACEADAELIA8hAAJAA0ACQCAAQQFKDQAgDS0AACEOQQAhEAwCCyANIABqIQ4gAEF/aiIQIQAgDkF/ai0AACIOQUZqQXVLDQALCyAQIA8gDkH/AXFBOkYbIQALIAQgADYCACAEIA02AgQgBCAEKAIsQQFqIgA2AiwgBCAANgIIIAVByI2AgAAgBBC1goCAACENIAQoAixBBEkNAEEEIARBLGoQjIGAgAAMAAsLQQAhDSAKQQA2AgBBASEPQQAhEAwBCyAKIA02AgACQCANLQAAIgANAEEAIQ9BACEQDAELIA1BAWohDkEAIQ9BACEQA0AgAEH/AXFBsLaBgABqLQAAIBBqIRAgDi0AACEAIA5BAWohDiAADQALCyAKIBA6AAcCQCALQRJqLQAAQQFxRQ0AIAogCi8BCkGACHI7AQoLAkAgDw0AIARBGGogDSAMEPCCgIAAIAxHDQAgBRCegYCAAAsgCkEMaiEKIAlBAWoiCSAIRw0ACyAIIQkMAQtBACEJCyAEQRhqEOiBgIAAAkAgBy0AAEUNAAJAAkACQCAJRQ0AIAYhAANAAkAgACgCACIORQ0AIAUgDhDkgICAAAsgAEEMaiEAIAlBf2oiCQ0ADAILCyAGRQ0BCyAFIAYQ5ICAgAALIAJBADsBACADQQA2AgALIARBMGokgICAgAALwwMBC38jgICAgABBIGsiBCSAgICAAAJAIAAoAgAiBS0AVw0AIARBGGpCADcDACAEQRBqQgA3AwAgBEEIakIANwMAIARCADcDACAEIAIoAiA2AgQCQCABLgEiQQFIDQAgAigCHEEIaiEGIAEoAgQhAkEAIQcDQCABIAEoAhwgAkEKaiIILwEAQeIAcXI2AhwgBCAGKAIAIglBAEEAQQAQ94eAgAAhCiACQQVqIgsgCRC3h4CAACIMOgAAAkAgCkUNACAKENeKgIAAQf////8DcSEMAkACQCACKAIAIg0NAEEAIQ4MAQsgDRDXioCAAEH/////A3EhDgsgAiAFIA0gDCAOakECaq0Q8IOAgAAiDTYCAAJAAkAgDUUNACAOIA1qQQFqIAogDEEBahDUioCAABogCC8BAEEEciEKDAELIAgvAQBB+3txIQoLIAggCjsBACALLQAAIQwLAkAgDEEYdEEYdUHAAEoNACALIAM6AAALAkAgACAJEIqFgIAAIgpFDQAgBSACIAooAgAQkYaAgAALIAZBEGohBiACQQxqIQIgB0EBaiIHIAEuASJIDQALCyABQQE7ASgLIARBIGokgICAgAAL9QIBB38jgICAgABBEGsiAySAgICAACABKAIAIQQCQAJAAkACQCACLQAAIgUNAEEAIQYgAiEHDAELAkACQCAFQaC5gYAAai0AAEEGcQ0AQQAhBiACIQcgBUHfAEcNAQtBASEIA0AgAiAIIgZqIgctAAAiCUUNASAGQQFqIQggCUGguYGAAGotAABBBnENACAJQd8ARg0ACwsgBUFGakF1Sw0BCyADQTs2AgwgAiAGIANBDGoQ3IKAgAAhCSADKAIMQTtHDQAgBy0AAA0AQQAhBiAJDQELIAAgBGpBIjoAAEEBIQYgBEEBaiEECwJAIAItAAAiCUUNAANAIAAgBGogCToAACAEQQFqIQkCQAJAIAItAABBIkYNACAJIQQMAQsgACAJakEiOgAAIARBAmohBAsgAkEBaiICLQAAIgkNAAsLAkAgBkUNACAAIARqQSI6AAAgBEEBaiEECyAAIARqQQA6AAAgASAENgIAIANBEGokgICAgAALmzwCHX8BfiOAgICAAEHwAWsiAiSAgICAACAAKAIYIgMoAgAhBAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAS0AACIFQYkBSg0AIAVBU2oOHwkQEAoHAgIKCgoKCgoQAxAQEBAQEBAQEBAQEBAQEAEGCwJAIAVB9n5qDgQHEBAEAAsgBUHVfmoOAggEBwsgASADKAIEIgVBGGooAgA2AiwgAUGniQE7AQAgASABLwEgQX9qOwEgIAEgBUEwaigCADYCHAwOC0EAIQYgAkGwAWohByADIQUCQANAIAcgBSgCEDYCACAFKAIMIgVFDQEgB0EEaiEHIAZBB0khCCAGQQFqIQYgCA0ACwsCQAJAIAEoAgwiBQ0AQQAhCAwBCyAAIAUQ/4WAgAAaIAEoAgwhCAsgCBC+h4CAAA0SIAQtAMgBQQFLDRIgAS0AACEFIAFBqgE6AAAgAUGh0oCAAEGM1oCAACAFQTNGIgUbNgIIIAEgASgCBEGAgICAAUGAgICAAiAFG3I2AgRBACEHIAJBsAFqIQUCQANAIAMgBSgCADYCECADKAIMIgNFDQEgBUEEaiEFIAdBB0khBiAHQQFqIQcgBg0ACwsCQCAIRQ0AIAQoAgAgCBDlgICAAAsgAUEANgIMDBILIAQoAgAhCSABKAIIIQggAUF/NgIcQQAhCiACQQA2ArABIAFBHGohC0EAIQwMDwsgASgCDCEHAkAgAy0AGEEocUUNACAEIANB5LmAgABBACABENmHgIAAC0EAIQ0CQAJAIAEoAhAiBS0AAEE7Rw0AIAchACAFIQYMAQsgBSgCECEGIAUoAgwhACAHKAIIIQ0LIAYoAgghCCAAKAIIIQoCQCAELQDIAUECSQ0AIAQoAoQCIgdFDQAgByEFAkADQAJAIAUoAgAgBkcNACAFIAE2AgAgBCgChAIhBwwCCyAFKAIMIgUNAAsLIAdFDQAgAUEsaiEFA0ACQCAHKAIAIABHDQAgByAFNgIADAILIAcoAgwiBw0ACwsgBCgCACEJIAFBfzYCHEEAIQwgAkEANgKwASABQRxqIQsgDUUNDkEAIQwgAy0AGEEGcQ0OAkAgCSgCFCIOQQFODQBBACEPQQAhDAwNCyAJKAIQIRBBACEPA0AgECAPQQR0aigCACEFIA0hBwJAA0ACQAJAIAUtAAAiBiAHLQAAIgBHDQAgBg0BIBAgD0EEdGooAgwhDAwRCyAGQbC2gYAAai0AACAAQbC2gYAAai0AAEcNAgsgB0EBaiEHIAVBAWohBQwACwsgD0EBaiIPIA5HDQALQQAhDAwNC0EAIQZBACEFAkAgASgCFCIIRQ0AIAgoAgAhBQsgBCgCACIHLQBUIQ4CQCABQQdqLQAAQQFxRQ0AQQAgASgCLCIGIAYtABBBpgFGGyEGCyADKAIYIQogA0EYaiEPQQAhEAJAAkACQAJAAkACQAJAAkACQAJAAkAgByABKAIIIhEgBSAOQf8BcSIOQQAQ7IKAgAAiBw0AIAQoAgAgEUF+IA5BABDsgoCAACIHQQBHIQUgB0UhDgwBCyAHKAIUIQ4CQCAHQQVqLQAAQQRxRQ0AIAEgASgCBEGAgCByNgIEAkAgBUECRw0AIAEgCEEYaigCABDah4CAACIFNgIcIAVBf0oNASACIAE2AkAgBEGTkoGAACACQcAAahCzgYCAACADIAMoAhRBAWo2AhQMAQsgAUGAgIAEQYCAgDwgBygCIC0AAEH1AEYbNgIcCwJAAkACQCAEQR9BACAHKAIgQQAQ6YWAgAAOAgIAAQsgAiABNgIwIARBvvuAgAAgAkEwahCzgYCAACADIAMoAhRBAWo2AhQLIAFB+QA6AAAMGgsCQCAHKAIEIgVBgNAAcUUNACABIAEoAgRBgIDAAHI2AgQLIA8oAgAhEAJAAkAgBUGAEHENACAQQSpxRQ0BIAQgA0HhooCAAEEAIAEQ2YeAgAAgBygCBCEFDAELIAEgEEEucToAAiAQQYCAEHFFDQAgASABKAIEQYCAgIAEcjYCBAsCQCAFQYCAEHFFDQAgBC0AEg0AIAQoAgAtABhBIHFFDQILIA5BAEchEAJAAkAgBUGAgKABcQ0AQQEhDgwBC0EBIQ4gBC0AyAFBAUsNACAEIAEgBxCsh4CAAAtBASEFCyAEQcgBaiERIAQtAMgBQQJPDQECQCAHRQ0AIAcoAhgNAEHYwoCAACENIAYNDwsgEEUNAyAHKAIEQYCABHEhEAJAIA8oAgAiDUEBcUUNAAJAIBBFDQAgBkUNAQsgBkUNBSANQYCAAXENBQsgAiABNgIEIAJBrIyAgABBwtOAgAAgECAGchs2AgAgBEGJm4GAACACELOBgIAADAgLIARByAFqIRFBACEHIAQtAMgBQQJJDQEgDkEARyEQC0EBIQUgAUEHai0AAEEBcQ0OIAAgCBChhoCAABogEEUNFwwQC0EBIQ5BACEQDAILQQAhECAFRQ0BIA4NA0EAIRBBpZuBgAAhDQwKC0EBIRAgBQ0BCyAEKAIAQbEBai0AAA0AQaj7gIAAIQ0MCAtBpZuBgAAhDSAORQ0HIBANCAsgAUEHai0AAEEBcUUNCSACIAE2AhAgBEHlm4GAACACQRBqELOBgIAACyADIAMoAhRBAWo2AhQMCAsgBUEURw0JCyABQQVqLQAAQRBxRQ0IIAMoAhAhBQJAAkAgAy0AGEEucUUNACAEIANBhamAgAAgASABENmHgIAADAELIAAgASgCFBCJhoCAABoLIAUgAygCEEYNCCABIAEoAgRBwAByNgIEIAMgAygCGEHAAHI2AhgMCAsgBUGcAUcNByADLQAYQS5xRQ0HIAQgA0HanoCAACABIAEQ2YeAgAAMBwsgASgCECIHRQ0AAkADQCAHKAIEIgVBgMAgcUUNAQJAAkAgBUGAgCBxRQ0AIAcoAhRBCGohBQwBCyAHQQxqIQULIAUoAgAiBw0ADAILCwJAIActAAAiBUGqAUYNACAFQTtHDQELQQIhBSAAIAcQ14eAgABBAkYNDCAHLQAAQaoBRw0AIAEgAS0AADoAAiABQa8BOgAAQQAhBQwMCyAEKAIALQBXDQUCQCABKAIMIgYtAAAiBUGwAUcNACAGLQACIQULAkACQAJAIAVB/wFxIgVBigFGDQBBASEHIAVBsQFHDQIgBkEUaiEFDAELIAYoAhRBHGohBQsgBSgCACgCACEHCwJAAkACQCABLQAAQTBHDQACQCABKAIUIgAoAggiBi0AACIFQbABRw0AIAYtAAIhBQsCQAJAAkAgBUH/AXEiCEGKAUYNAEEBIQUgCEGxAUcNAiAGQRRqIQUMAQsgBigCFEEcaiEFCyAFKAIAKAIAIQULIAUgB0cNAgJAIABBGGooAgAiBi0AACIFQbABRw0AIAYtAAIhBQsCQCAFQf8BcSIIQYoBRg0AQQEhBSAIQbEBRw0DIAZBFGohBQwCCyAGKAIUQRxqIQUMAQsCQCABKAIQIgYtAAAiBUGwAUcNACAGLQACIQULAkAgBUH/AXEiCEGKAUYNAEEBIQUgCEGxAUcNAiAGQRRqIQUMAQsgBigCFEEcaiEFCyAFKAIAKAIAIQULIAcgBUYNBSAEQbfkgIAAQQAQs4GAgAAgBCgCACEHAkADQAJAIAEtAARBA3ENACABKAIkIgVBAEoNAgsgASgCDCIBDQAMBwsLIAcgBTYCRAwFCyACIAE2AiAgBCANIAJBIGoQs4GAgAAgAyADKAIUQQFqNgIUIBBFDQILIA8gDygCACAGRUH//35zcTYCAAsgACAIEKGGgIAAGgwBCyAAIAgQoYaAgAAaDAYLAkACQAJAIAZFDQAgAygCHCEFAkAgES0AAEEBSw0AAkACQCAFDQBBACEIDAELIAUoAkghCAsgBCAIIAYgBxDbh4CAACAEKAIALQBXDQQLIAAgBigCCBChhoCAABogACAGKAIMEKGGgIAAGgJAIAYoAigiB0UNACAAIAcQ/4WAgAAaCyAFIAYQ0IeAgAAgDygCACEFQYCAAiEHIA8hBgwBCyABQQA6AAIgAUGoAToAAAJAIAFBB2oiDi0AAEEBcUUNACABKAIsKAIoIgVFDQAgACAFEP+FgIAAGgsgAkHYAWpBCGohBSACQbABakEIaiEGIAJBwAFqIQADQCADKAIEIQggBkIANwMAIABCADcDACAFQgA3AwAgBUEIakIANwMAIAZB4oCAgAA2AgAgAkIANwOwASACQeOAgIAANgK0ASACQeSAgIAANgK8ASACIAg2AtwBIAIgAkHYAWo2AsgBIAIgBCgCADYC2AEgAkGwAWogASgCFBChhoCAABoCQCAOLQAAQQFxRQ0AIAEoAiwoAigiCEUNACACQbABaiAIEP+FgIAAGgsCQCACKALoASIIRQ0AIAQoAgAgCBDkgICAAAsCQCACLwHEASIIRQ0AIAhBAXENACABIAEtAAJBAWo6AAIgAygCDCIDDQEMAwsLIAdFDQEgA0EYaiEGIAcoAgRBgKCAwABxQZCAgMAAcyEFIAMoAhghBwsgBiAFIAdyNgIACyAPIA8oAgAgCkGBgAFxcjYCAAwFCyAEKAIkQQBHQQF0IQUMBQsgDyAORw0CC0EAIQUDQAJAAkAgBUGZyYCAAGotAAAiByANIAVqLQAAIgZHDQAgBw0BIAkoAhAiBSgCACENIAUoAgwhDAwECyAHQbC2gYAAai0AACAGQbC2gYAAai0AAEcNAwsgBUEBaiEFDAALC0EAIQ0LIAhBAWohEiAEQfAAaiETIAFBLGohFEEAIRVBACEWQQAhFyADIRgCQAJAAkACQAJAAkACQANAAkACQCAYKAIEIhkNAEEAIQ8MAQsCQAJAIBkoAgBBAU4NAEEAIQ8MAQsgGUEIaiEOQQAhGkEAIQ8DQCAOKAIQIRsCQAJAAkACQCAOQSZqIhwtAABBIHFFDQACQAJAIA4oAhQoAhwiACgCACIGQQFODQBBACEQDAELIABBEWohBUEAIQdBACEQA0ACQCAFQXdqIAggCiANEN+HgIAARQ0AAkAgD0EBSA0AAkACQCAcLQAAQQRxRQ0AIA4oAiwgCBDgh4CAAEF/Sg0BCwJAIAIoArABIgZFDQAgCSAGEMSCgIAACyACQQA2ArABDAELIA4tACQiEUEQcUUNAQJAIBFBCHENAAJAIAIoArABIgZFDQAgCSAGEMSCgIAAC0EAIQ8gAkEANgKwAQwBCyAEIAJBsAFqIBUgAS4BIBDhh4CAAAsgASAHOwEgIAUgBS8AACIGQcAAcjsAACAPQQFqIQ8CQCAGQYABcUUNAEECIRcgDiEVDAcLIAAoAgAhBkECIRdBASEQIA4hFQsgBUEQaiEFIAdBAWoiByAGSA0ACwsgCkUNAyAQRQ0BDAMLIApFDQELAkAgDUUNACAbKAI8IAxHDQIgDA0AIA1BkpOBgAAQ0YqAgAANAgsgDigCDCIQIQUCQCAQDQAgGygCACEFCyAKIQcDQAJAAkAgBS0AACIGIActAAAiAEcNACAGDQEgBC0AyAFBAkkNAyAQRQ0DIAQoAoQCIgVFDQMDQAJAIAUoAgAgFEcNACAFQQA2AgAMBQsgBSgCDCIFDQAMBAsLIAZBsLaBgABqLQAAIABBsLaBgABqLQAARw0DCyAHQQFqIQcgBUEBaiEFDAALC0EAIRACQCAIRQ0AIAgtAAAiBUUNAEEAIRAgEiEHA0AgBUH/AXFBsLaBgABqLQAAIBBqIRAgBy0AACEFIAdBAWohByAFDQALCwJAIBsuASIiHUEBSA0AIBsoAgQhEUEAIR4CQANAAkAgES0AByAQQf8BcUcNACARKAIAIQBBACEFAkACQANAAkACQCAAIAVqLQAAIgcgCCAFai0AACIGRw0AIAcNASAPQQFIDQQCQCAcLQAAQQRxRQ0AIA4oAiwgCBDgh4CAAEF/Sg0ECwJAIAIoArABIgVFDQAgCSAFEMSCgIAACyACQQA2ArABDAQLIAdBsLaBgABqLQAAIAZBsLaBgABqLQAARw0ECyAFQQFqIQUMAAsLIA4tACQiBUEQcUUNAQJAIAVBCHENAAJAIAIoArABIgVFDQAgCSAFEMSCgIAAC0EAIQ8gAkEANgKwAQwBCyAEIAJBsAFqIBUgAS4BIBDhh4CAAAsgAUF/IB4gHiAbLgEgRhs7ASAgD0EBaiEPIBwtAABBIHFFDQIgDigCFCgCHCAeQQR0akERaiIFIAUvAABBwAByOwAADAILIBFBDGohESAeQQFqIh4gHUcNAAwCCwsgDiEVCyAPDQAgFSAOIBsoAhxBgARxIgUbIRUgBUEJdkEBcyAXaiEXQQAhDwsgDkHAAGohDiAaQQFqIhogGSgCAEgNAAsLAkAgFQ0AQQAhFQwBCyAVKAIoIQUgFCAVKAIQIgc2AgAgCyAFNgIAAkAgFS0AJEHIAHFFDQAgASABKAIEQYCAgAFyNgIECyAHKAI8IQwLAkAgDw0AIA0NAEEAIRACQCATKAIAIg9FDQAgBC0AjAEhDgJAAkACQCAELQCNAUUNACAYQRlqLQAAQQRxRQ0DIApFDQEgDygCACEFIAohBwNAAkACQCAHLQAAIgYgBS0AACIARw0AIAYNAQwECyAGQbC2gYAAai0AACAAQbC2gYAAai0AAEcNBQsgBUEBaiEFIAdBAWohBwwACwsCQCAKRQ0AIA5B/wFxQYABRg0AQQAhBQNAAkACQCAFQc6MgIAAai0AACIHIAogBWotAAAiBkcNACAHDQFBASEFDAULIAdBsLaBgABqLQAAIAZBsLaBgABqLQAARw0CCyAFQQFqIQUMAAsLIApFDQIgDkH/AXFB/wBGDQJBACEFA0ACQAJAIAVB2N+AgABqLQAAIgcgCiAFai0AACIGRw0AIAcNAUEAIQUMBAsgB0GwtoGAAGotAAAgBkGwtoGAAGotAABGDQBBACEQDAQLIAVBAWohBQwACwsgDkH/AXFBgAFHIQULIAsgBTYCACAPIRALAkAgCkUNACAYKAIYQYAEcUUNACAYKAIIIgBFDQBBACEFA0ACQAJAIAVBreqAgABqLQAAIgcgCiAFai0AACIGRw0AIAcNASALQQI2AgAgACgCIEEYaigCACEQDAMLIAdBsLaBgABqLQAAIAZBsLaBgABqLQAARw0CCyAFQQFqIQUMAAsLAkAgEEUNAEEAIQZBACEPAkAgCEUNAEEAIQ8gCC0AACIFRQ0AQQAhDyASIQcDQCAFQf8BcUGwtoGAAGotAAAgD2ohDyAHLQAAIQUgB0EBaiEHIAUNAAsLIBAoAjwhDAJAAkACQCAQLgEiIh5BAUgNACAQKAIEIQ5BACERA0ACQCAOLQAHIA9B/wFxRw0AIA4oAgAhBSAIIQcDQAJAAkAgBS0AACIGIActAAAiAEcNACAGDQFBfyARIBEgEC4BIEYbIQYMBQsgBkGwtoGAAGotAAAgAEGwtoGAAGotAABHDQILIAdBAWohByAFQQFqIQUMAAsLIA5BDGohDiARQQFqIhEgHkcNAAsgHiEGDAELIAYgHkgNAQsgCBCBg4CAAEUNACAGQX8gEEEdai0AAEECcRshBgsCQCAGIB5IDQAgF0EBaiEXDAELAkACQCALKAIAIgVBAkcNAAJAIAQtAMgBQQJJDQAgASAQNgIsIAEgBjsBIEEBIQ9BACEVDAkLIAsgGCgCCCgCJCAQIAZBEHRBEHUQ6YaAgABqNgIAQQEhDwwBCyAUIBA2AgACQCAELQCNAUUNACABQacBOgACQQEhDyABIBgoAgggECAGQRB0QRB1EOmGgIAAaiAQLgEiQQFqIAVsakEBajYCHAwBCyABIAY7ASACQAJAIAZBf0oNACABQcQAOgABQQEhDwwBC0EBIQ9Bf0EBIAZ0IAZBH0sbIQcCQCAFDQAgBCAEKAKEASAHcjYChAEMAQsgBCAEKAKIASAHcjYCiAELQQAhFUHNACEFDAgLQQAhFUGwASEFDAcLQQAhDwsCQAJAIA8NACAXQQFHDQAgFUUNAEEBIRcgGCgCGCIPQShxDQEgCBCBg4CAAEUNASAVKAIQQR1qLQAAQQJxDQEgAUHEADoAASABQf//AzsBIEEBIQ8MBgsgDw0CIBgoAhghDwsCQCAKDQAgD0GAAXFFDQAgGCgCCCIOKAIAIgZBAUgNACAOQQhqIQVBACEHA0ACQCAFQQlqLQAAQQNxDQAgBUEEaigCACIAIAgQjYGAgAANACAFKAIAIgYoAgQhBQJAIA9BAXENACAFQRBxRQ0AIAIgADYCYCAEQe6ugIAAIAJB4ABqELOBgIAAQQIhBQwNCwJAIAVBgIACcUUNAAJAIA9BgIABcUUNACAYIANGDQELIAIgADYCUCAEQaqtgIAAIAJB0ABqELOBgIAAQQIhBQwNCwJAIAYtAAAiBUGwAUcNACAGLQACIQULAkACQAJAIAVB/wFxIgVBigFGDQAgBUGxAUcNAiAGQRRqIQUMAQsgBigCFEEcaiEFCyAFKAIAKAIAQQFGDQAgBEG35ICAAEEAELOBgIAAQQIhBQwNCyAEIA4gByABIBYQ4oeAgAAgBC0AyAFBAkkNCiAEKAKEAiIFRQ0KA0ACQCAFKAIAIAFHDQAgBUEANgIADAwLIAUoAgwiBQ0ADAsLCyAFQRBqIQUgBiAHQQFqIgdHDQALCyAWQQFqIRYgGCgCDCIYDQALQZbHgIAAIQdBACEYIAoNAQJAIAEtAARBgAFxRQ0AAkAgCUGxAWotAAANACAJKQMgIR9BHiEFAkAgA0Eaai0AAEEBcUUNAEEdIQUgH0KBgICABYNCgYCAgARRDQELIB+nIAV2QQFxRQ0BCyACIAg2AqABQRxBnqqBgAAgAkGgAWoQ3oCAgAAgAUIANwIsIAFB9QA6AAAMCAtBASEFIAEQmIWAgAANCEEAIRgMAQtBndmAgAAhB0GnASEFIA9BAUcNAUEBIQ8MAwtBACEPCwJAIAIoArABIgVFDQACQCAFKAIAIA9Bf2pHDQACQCABKAIEIgVBgICABHFFDQAgASAFQf///3txNgIEDAULAkAgASgCDCIFRQ0AIAkgBRDlgICAAAsgAUEANgIMAkAgASgCECIFRQ0AIAkgBRDlgICAAAsgAUEANgIQDAQLIAkgBRDEgoCAACACQQA2ArABCwJAAkAgDUUNACACIAg2ApwBIAIgCjYCmAEgAiANNgKUASACIAc2ApABIARB2KuAgAAgAkGQAWoQs4GAgAAMAQsCQCAKRQ0AIAIgCDYCiAEgAiAKNgKEASACIAc2AoABIARB06yAgAAgAkGAAWoQs4GAgAAMAQsgAiAINgJ0IAIgBzYCcCAEQby0gIAAIAJB8ABqELOBgIAACwJAIAFFDQAgBCgCACEGIAEhBQJAA0ACQCAFLQAEQQNxDQAgBSgCJCIHQQBKDQILIAUoAgwiBQ0ADAILCyAGIAc2AkQLIARBAToAESADIAMoAhRBAWo2AhQLQacBIQULAkAgAUEGai0AAEGBAXENAAJAIAEoAgwiB0UNACAJIAcQ5YCAgAALIAFBADYCDAJAIAEoAhAiB0UNACAJIAcQ5YCAgAALIAFBADYCECABIAEoAgRBgICABHI2AgQLAkAgAS4BIEEASA0AIBVFDQAgFSAVKQMwIAEQ44eAgACENwMwCyABIAU6AABBAiEFIA9BAUcNAwwBCyAEIAJBsAFqIBUgAS4BIBDhh4CAACABQbLegIAANgIIIAFBrAE6AAAgASACKAKwATYCFAsCQCAEKAIAIgUoAtgCRQ0AAkAgAS0AACIIQacBRg0AIAhBzQBHDQELIAxFDQAgGCgCBCEAIAUoAhBBDGohBUF/IQcDQCAHQQFqIQcgBSgCACEGIAVBEGohBSAGIAxHDQALAkAgCEHNAEYNACAAKAIAIgVBAUgNASAAQRhqIRMgCygCACEGA0AgBiATQRhqKAIARg0BIBNBwABqIRMgBUF/aiIFDQAMAgsLIBMoAgAiBUUNAAJAAkAgAS4BICIGQX9KDQACQCAFLgEgIgZBAE4NAEHZhIGAACEGDAILIAZB//8DcSEGCyAFKAIEIAZBDGxqKAIAIQYLIAQgBSgCACAGIAcQ5IeAgABBAkcNACABQfkAOgAAC0EBIQUgAyADKAIQQQFqNgIQIBggA0YNAQNAQQEhBSADKAIMIgMgAygCEEEBajYCECADIBhHDQAMAgsLQQEhBQsgAkHwAWokgICAgAAgBQuVCgERfyOAgICAAEHAAGsiAiSAgICAAEEBIQMCQCABKAIEIgRBBHENACAAKAIAIQUgACgCGCEGAkAgBEHAAHENACAFIAEgBhCbhoCAAEECQQEgBSgCJBshAwwBCyABIARBBHI2AgQgAiAFNgIAIAUoAgAhByACQQxqQgA3AgAgAkEUakIANwIAIAIgATYCHCACQgA3AgQgASgCNCEIQQIhAyACIAEoAjwQ2YaAgAANACABQQRqIQkgCEEARyEKIAJBBHIiC0EIaiEMQQAhDSABIQ4DQCAOKAIgIQQCQCAOQQZqLQAAQQFxRQ0AIARBHGooAgAgDigCMDYCMCAOQQA2AjALAkAgBCgCAEEBSA0AQQAhD0EcIQADQAJAIAQgAGoiAygCACIERQ0AIAQtAARBBHENAAJAAkAgBg0AQQAhEAwBCyAGKAIQIRALIAUoAvABIRECQCADQXRqKAIAIhJFDQAgBSASNgLwAQsgAkEANgIsIAJB1ICAgAA2AiggAkHVgICAADYCJCACIAY2AjggAiAFNgIgIAJBIGogBBCJhoCAABogBSARNgLwAQJAIAUoAiRFDQBBAiEDDAULIAZFDQAgA0ERaiIEIAQvAABB9/8DcSAGKAIQIBBKQQN0cjsAAAsgAEHAAGohACAPQQFqIg8gDigCICIEKAIASA0ACwsgAiAGNgIMIAIgBDYCBCACQYGAATYCGEECIQMgAiAOKAIcEPWGgIAADQEgAigCGCEAAkACQAJAIA4oAigiEg0AIABBEHFFDQELIAkgAEGAoIDAAHEgCSgCAHJBCHI2AgAgAEH//35xIQAMAQsgAEH+/35xIQALIAIgAEGAAXI2AhggAiAOKAIcNgIIAkAgDigCLCIARQ0AAkAgCS0AAEEIcQ0AIAVBlImAgABBABCzgYCAAAwDCyACIAAQ2YaAgAANAgsgAiAOKAIkENmGgIAADQECQCAOKAIgIgQoAgBBAUgNAEEAIQ9BLSEAA0ACQCAEIABqIhEtAABBBHFFDQAgAiARQRNqKAIAEPWGgIAADQQgDigCICEECyAAQcAAaiEAIA9BAWoiDyAEKAIASA0ACwsCQCAFLQDIAUECSQ0AIA4oAkgiAEUNAANAIAIgACgCDBD1hoCAAA0DIAIgACgCCBD1hoCAAA0DIAAoAiQiAA0ACwsgAkEANgIMIAIgAigCGEGBgAFyNgIYAkAgCUECai0AAEEBcUUNACAOIA4oAiBBHGooAgAiACgCMDYCMCAAQQA2AjALAkAgDigCMCIARQ0AIA0gCkkNACACIA4gAEG3/oCAABDlh4CAAA0CCyAHLQBXDQEgAiACKAIYQf//fnE2AhgCQCASRQ0AIAIgDiASQfyAgYAAEOWHgIAADQIgBy0AVw0CIBIoAgAiBEEBSA0AIBJBCGohAANAAkAgACgCAC0ABEEQcUUNACAFQd/UgIAAQQAQs4GAgAAMBAsgAEEQaiEAIARBf2oiBA0ACwsCQCAOKAI4IgBFDQAgDigCHCgCACAAKAIcKAIARg0AIAUgABDmh4CAAAwCCwJAIA4oAjQiDkUNACAOIA4oAgRBBHI2AgQgC0EQakIANwIAIAxCADcCACALQgA3AgAgAiAONgIcIAIgBTYCACAOQQRqIQkgDUEBaiENIAIgDigCPBDZhoCAAEUNAQwCCwsCQCAIRQ0AIAUgARDnh4CAAA0BC0EBIQMLIAJBwABqJICAgIAAIAMLyAEBAn8jgICAgABBEGsiBSSAgICAAEH9ooCAACEGAkAgASgCGCIBQSBxDQBBsZqAgAAhBiABQQRxDQBBjKSAgABBhKaAgAAgAUEIcRshBgsgBSAGNgIEIAUgAjYCACAAQf2tgIAAIAUQs4GAgAACQCADRQ0AIANB+QA6AAALAkAgBEUNACAAKAIAIQACQANAAkAgBC0ABEEDcQ0AIAQoAiQiBkEASg0CCyAEKAIMIgQNAAwCCwsgACAGNgJECyAFQRBqJICAgIAAC78BAgN/AXwjgICAgABBEGsiASSAgICAACABQoCAgICAgID4v383AwhBfyECAkAgAC0AAEGZAUcNAAJAAkAgACgCCCIADQBBACEDDAELIAAQ14qAgABB/////wNxIQMLIAAgAUEIaiADQQEQsYKAgAAaIAErAwgiBEQAAAAAAADwP2QNAAJAIAREAAAAAAAAoEGiIgSZRAAAAAAAAOBBY0UNACAEqiECDAELQYCAgIB4IQILIAFBEGokgICAgAAgAgvZBAEEfyOAgICAAEEQayIEJICAgIAAAkACQAJAIAIoAgAiBUUNACACLQAQDQAgACABIAUQnYeAgAAiBUUNAkEAIQEgAiAAKAIAIAUoAghBABCYhoCAADYCCCACIAAoAgAgBSgCDEEAEJiGgIAANgIMQQAhBgJAIAUoAhgiB0UNACAAKAIAIAdBAEEAEIGGgIAAIQYLIAIgBjYCGAJAIAUoAhwiBkUNACAAKAIAIAZBAEEAEIGGgIAAIQELIAIgATYCHCACIAUvABE7ABEgAiAFLQAQIgE6ABAgAiAFLQAUOgAUDAELIAAgAiABEOKFgIAAIAItABAhAQsCQAJAIAFB/wFxQdkARw0AAkAgAigCGA0AIAIoAhxFDQELAkAgAigCDCIBRQ0AIAEoAgBBAUYNAQsgAEG4xYCAAEEAELOBgIAADAELIANBBmotAABBAXFFDQACQCACKAIoDQAgACgCACEFIAMoAiAhAUGAfyEAA0ACQCABIABBoMeCgABqKAIARw0AAkAgAigCGCIBRQ0AIAUgARDlgICAAAsCQCACKAIcIgFFDQAgBSABEOWAgIAACyACQgA3AhggAkEAOgAUIAIgAEGsx4KAAGooAgA6ABIgAiAAQajHgoAAai0AACIBOgARIAIgAEGkx4KAAGooAgA6ABAgAUHWAEcNAyAEQQE2AgwgBEGDjYGAADYCCCACIAVBmwEgBEEIakEAEKqFgIAANgIYDAMLIABBEGoiAA0ADAILCyAAQaKigIAAQQAQs4GAgAALIAIgAzYCLAsgBEEQaiSAgICAAAupAQICfwJ+AkAgASgCICICKAIAIgNFDQAgACgCGCIBIAEpAwgiBCADrHwiBTcDCAJAIAEoAgAgASgCECAFQgKGEIaBgIAAIgANACABQgA3AwhBAg8LIAEgADYCECACKAIAQQFIDQAgAkEwaiEBIAAgBKdBAnRqIQBCACEFA0AgACABKAIANgIAIAFBwABqIQEgAEEEaiEAIAVCAXwiBSACNAIAUw0ACwtBAAu8AQIEfwF+AkACQCABLQAAQdl+ag4DAAEAAQsCQAJAAkAgACgCGCICKAIEIgNFDQAgAygCACIEQQFIDQAgA0EwaiEDIAEoAhwhBQNAIAUgAygCAEYNAiADQcAAaiEDIARBf2oiBA0ACwtBAiEFIAIpAwgiBkIBUw0BIAEoAhwhBCACKAIQIQMDQCADKAIAIARGDQMgA0EEaiEDIAZCf3wiBlANAgwACwtBASEFCyAAIAAvARQgBXI7ARQLQQALJgEBfgJAIAAoAhgiACkDCCICUA0AIAAgAiABKAIgNAIAfTcDCAsLpQMBBX9BACEEAkACQCAAQQlqLwAAQQNxQQJHDQAgACgCBCEFQQAhAAJAA0AgBSAAaiIGLQAAIgRFDQEgBEEuRg0BIABBAWohAAwACwsCQCADRQ0AQQAhBCAFIAMgABCOgYCAAA0BIAMgAGotAAANAQsgBkEBaiEDQQEhAAJAA0AgBiAAaiIFLQAAIgRFDQEgBEEuRg0BIABBAWohAAwACwsCQCACRQ0AAkAgAEEBRg0AIAAhByACIQQCQAJAA0AgAy0AACIGRQ0BIAZBsLaBgABqLQAAIgYgBC0AAEGwtoGAAGotAAAiCEcNAiAEQQFqIQQgA0EBaiEDIAdBf2oiB0EBSw0ADAMLCyAELQAAQbC2gYAAai0AACEIQQAhBgtBACEEIAYgCEH/AXFHDQILQQAhBCACIABqQX9qLQAADQELIAFFDQEgBUEBaiEAA0ACQAJAIAAtAAAiBCABLQAAIgZHDQAgBEUNBAwBCyAEQbC2gYAAai0AACAGQbC2gYAAai0AAEYNAEEAIQQMAgsgAUEBaiEBIABBAWohAAwACwsgBA8LQQELiwEBBn8CQCAAKAIAIgJBAUgNAEEAIQMDQCAAIANBA3RqQQhqKAIAIQQgASEFAkADQAJAAkAgBC0AACIGIAUtAAAiB0cNACAGDQEgAw8LIAZBsLaBgABqLQAAIAdBsLaBgABqLQAARw0CCyAFQQFqIQUgBEEBaiEEDAALCyADQQFqIgMgAkcNAAsLQX8LfAECfwJAIAAoAgBCNBCBgYCAACIERQ0AIARBAEE0ENWKgIAAIQQgAigCKCEFIAQgAigCEDYCLCAEQf//AzsBIiAEQacBOgAAIARBATYCGCAEIAM7ASAgBEGAgIABNgIEIAQgBTYCHCABIAAgASgCACAEEKeFgIAANgIACwvQAgECfyOAgICAAEHgAGsiBSSAgICAACAAKAIAIQYCQAJAAkACQCABIAJBBHRqQQhqKAIAIgFFDQAgBiABQQBBABCBhoCAACEBAkAgBi0AV0UNACABRQ0EIAYgARDlgICAAAwECyAEQQBMDQIgBUHQAGpCADcDACAFQcgAakIANwMAIAVCADcDQCAFIAQ2AlggBUHlgICAADYCRCABRQ0BIAVBwABqIAEQ/4WAgAAaDAILIAYtAFcNAiAEQQFIGgtBACEBCwJAIAMtAABB8QBHDQAgACABIAMoAggQ6YeAgAAhAQsgBUEIaiABQTQQ1IqAgAAaIAEgA0E0ENSKgIAAIQYCQCADIAVBCGpBNBDUioCAACIBQQdqLQAAQQFxRQ0AIAEoAiwiA0UNACADIAE2AkgLIABB5oCAgAAgBhCahoCAABoLIAVB4ABqJICAgIAAC2ECAX8BfiAALgEgIQECQCAAKAIsIgAtABxB4ABxRQ0AIAAoAgQgAUEMbGotAApB4ABxRQ0AQn9CfyAAMgEiIgJC/////w+DhkJ/hSACQj9VGw8LQgEgAUE/IAFBP0gbrYYLjwIBBH8jgICAgABBMGsiBCSAgICAAEEAIQUCQCAAKAIAIgZBsQFqLQAADQACQAJAIAYoAtwCQRQgASACIAYoAhAgA0EEdGooAgAiByAAKALwASAGKALYAhGMgICAAAAiBUEBRw0AIAQgAjYCJCAEIAE2AiBB16yAgAAgBEEgahCKgYCAACEFAkACQCADDQAgBigCFEEDSA0BCyAEIAU2AhQgBCAHNgIQQYOIgIAAIARBEGoQioGAgAAhBQsgBCAFNgIAIABB0eOAgAAgBBCzgYCAAEEBIQVBFyEGDAELIAVBfXFFDQEgAEHBwoCAAEEAELOBgIAAQQEhBgsgACAGNgIMCyAEQTBqJICAgIAAIAULgAQBCX8jgICAgABBMGsiBCSAgICAACAAKAIAIQUCQAJAIAIoAgBBAUgNACABKAIcKAIAIQYgAkEIaiEHQQAhCANAAkAgBygCACIJRQ0AIAkhCgJAA0AgCigCBCILQYDAIHFFDQECQAJAIAtBgIAgcUUNACAKKAIUQQhqIQoMAQsgCkEMaiEKCyAKKAIAIgoNAAwCCwsCQAJAIAMtAABBxwBGDQAgBCABKAIcIAoQ7oeAgAAiCzYCDCALQQBKDQELAkAgCiAEQQxqEO+HgIAARQ0AIAQoAgwiC0GAgHxqQYCAfEsNAUEBIQsgBSADIAhBAWogBiAKEPCHgIAADAULIAdBADsBDAJAIAAgCRDZhoCAAEUNAEEBIQsMBQsgASgCHCIMKAIAQQFIDQFBACELQQghCgNAAkBBACAJIAwgCmooAgBBfxC5h4CAAA0AAkAgASgCREUNACAEQRBqQRBqQgA3AwAgBEEQakEIakIANwMAIARCADcDECAEIAE2AiggBEHngICAADYCFCAEQRBqIAkQ/4WAgAAaCyAHIAtBAWo7AQwLIApBEGohCiALQQFqIgsgASgCHCIMKAIASA0ADAILCyAHIAs7AQwLIAdBEGohByAIQQFqIgggAigCAEgNAAsLIAUgASACIAMQ8oeAgAAhCwsgBEEwaiSAgICAACALC5MBAQJ/I4CAgIAAQRBrIgIkgICAgAACQAJAIAFBBWotAABBAnFFDQAgAEHEpICAAEEAELOBgIAADAELQcKBgYAAIQMCQCABLQAAQfkAaiIBQf8BcUECSw0AIAFBGHRBGHVBAnRB+NuCgABqKAIAIQMLIAIgAzYCACAAQY+jgIAAIAIQs4GAgAALIAJBEGokgICAgAAL2wYBDX8jgICAgABBEGsiAiSAgICAAAJAAkAgASgCMCIDRQ0AAkACQAJAAkAgAygCACIEIAAoAgAiBUGAAWooAgBKDQACQCAEQQFIDQAgA0ERaiEGIAQhBwNAIAYgBi8AAEH7/wNxOwAAIAZBEGohBiAHQX9qIgcNAAsLIAFBADYCOCABKAI0IgYNASABIQgMAgsgAEG91ICAAEEAELOBgIAADAILA0AgBiIIIAE2AjggCCEBIAgoAjQiBg0ACwsgA0EIaiEJA0AgBEEBSA0CIAgoAhwhCkEAIQcgCSEBQQAhBgNAIAYhCyACQX82AgQCQAJAIAFBCWotAABBBHENACABKAIAIgRFDQACQANAIAQoAgQiBkGAwCBxRQ0BAkACQCAGQYCAIHFFDQAgBCgCFEEIaiEEDAELIARBDGohBAsgBCgCACIERQ0CDAALCwJAAkAgBCACQQRqEO+HgIAARQ0AIAooAgAhBgJAIAIoAgQiDEEBSA0AIAwgBkwNAgsgAEG3/oCAACAHQQFqIAYgBBDwh4CAAAwGCyACIAogBBDuh4CAACIMNgIEAkAgDA0AQQAhDCAFIARBAEEAEIGGgIAAIQYCQCAFLQBXDQAgAiAAIAggBhDzh4CAACIMNgIEIAAtAMgBQQJJDQAgDEEBSA0AIAAgCCAEEPOHgIAAGgsgBkUNACAFIAYQ5YCAgAALQQEhBiAMQQFIDQILAkAgAC0AyAFBAUsNACACQgA3AwggBUGbASACQQhqQQAQqoWAgAAiDUUNBSANIAw2AgggDSANKAIEQYAQcjYCBAJAAkAgASgCACIGIARHDQAgASEGDAELA0AgBiIOKAIMIgYtAABB8QBGDQALIA5BDGohBgsgBiANNgIAIAUgBBDlgICAACABIAw7AQwLIAEgAS8ACUEEcjsACQsgCyEGCyABQRBqIQEgB0EBaiIHIAMoAgAiBEgNAAsCQCAIKAI4IghFDQAgBg0BCwsgBEEBSA0BIANBEWohAUEAIQcDQAJAIAEtAABBBHENAEEBIQYgAiAHQQFqNgIAIABB95aAgAAgAhCzgYCAAAwECyABQRBqIQFBACEGIAQgB0EBaiIHRw0ADAMLC0EBIQYMAQtBACEGCyACQRBqJICAgIAAIAYLIgACQCABLQAAQagBRw0AIAEgAS0AAiAALQAYajoAAgtBAAtgAQJ/I4CAgIAAQRBrIgMkgICAgAAgAyACNgIIQQAhBAJAIAJFDQAgAhDXioCAAEH/////A3EhBAsgAyAENgIMIAAgASADQQhqQQAQvYWAgAAhAiADQRBqJICAgIAAIAILBABBAAuRAwEFfyOAgICAAEEQayICJICAgIAAQQAhAwJAIAEoAjRFDQAgASgCMCIERQ0AIAEhBQJAA0ACQCAFLQAAQfl+ag4EAAICAAILIAUoAjQiBQ0ADAILCyAEQRRqLwEADQAgBCgCACIFQQFqIQYgBUEEdCAEakF4aiEFA0AgBkF/aiIGQQFIDQEgBSgCACEEIAVBcGohBSAEQQVqLQAAQQJxRQ0AC0ECIQMgACgCACIAKAIAIgZCzAAQsIGAgAAiBUUNACACQgA3AwAgAEEAQQBBACACIAVBABClhYCAACIERQ0AIAUgAUHMABDUioCAACEFIAEgBDYCICACQgA3AwggBkG0ASACQQhqQQAQqoWAgAAhAyAAKAIAIAMQs4WAgAAhAyABQgA3AjQgAUEANgIkIAFBigE6AAAgASADNgIcIAVBADYCMCAFQgA3AiggAUEANgJIIAFBADYCQCAFQQA2AjwgBSgCNCAFNgI4IAEgASgCBEH//XtxQYCABHI2AgRBACEDCyACQRBqJICAgIAAIAML6yoDHn8BfgR/I4CAgIAAQZACayICJICAgIAAIAEgASgCBCIDQcAAcjYCBAJAAkACQCAAKAIAIgQoAgAiBS0AVw0AQQEhBiADQcAAcQ0CAkAgAC8BFEUNACABIAQoAmRBAWoiBzYCECAEIAc2AmQLIAEoAkAhByABKAIcIQggASgCICEJAkACQAJAIAQoAoACRQ0AIANBgICAAXFFDQACQCAHDQAgASAFQiQQsIGAgAAiBzYCQCAHRQ0ECyAHQQE2AgQMAQsgB0UNAQsgBCgCJA0AIAcgBCgCgAI2AgggBCAHNgKAAgsgBCAJEKaGgIAAIAlBCGohCgJAIAkoAgBBAUgNACAFQSNqIQtBACEMIAohDQNAAkAgDSgCEA0AAkACQCANKAIIIg4NAEECIQYgACANKAIUEImGgIAADQcgDSgCFCEHIA0gBCgCAELAABCwgYCAACIONgIQIA5FDQcgDkEBNgIYIAQoAgAhDwJAAkAgDSgCDCIQRQ0AIA8gEBCngYCAACEPDAELIAIgDTYCcCAPQcj9gIAAIAJB8ABqELWCgIAAIQ8LIA4gDzYCAANAIAciDygCNCIHDQALIAQgDygCHCAOQSJqIA5BBGoQ1IeAgAAgDkHIATsBJiAOQf//AzsBICAOIA4oAhxBgIQBcjYCHCAEKAIkRQ0BDAcLAkACQAJAAkAgBCgCgAIiEUUNACAEKAIkDQAgDSgCBA0AIA1BJWovAAAiEkGABHENAANAAkAgESgCACITQQFIDQBBACEUA0AgESAUQRhsaiIVQQxqIhYoAgAhBkEAIQcCQANAAkACQCAOIAdqLQAAIg8gBiAHai0AACIQRw0AIA8NASAVQRhqIhcoAgAiB0UNCCACIAY2AoACIAQgByACQYACahCzgYCAAAwPCyAPQbC2gYAAai0AACAQQbC2gYAAai0AAEcNAgsgB0EBaiEHDAALCyAUQQFqIhQgE0cNAAsLIBEoAgQNASARKAIIIhENAAsLIA0gBEEAIA0QioaAgAAiBzYCEEECIQYgB0UNCSAHKAIYIg9B//8DSQ0BIAIgBygCADYCgAEgBEHHiYGAACACQYABahCzgYCAACANQQA2AhAMCQsCQCASQQRxRQ0AIAIgDjYC8AEgBEGDw4CAACACQfABahCzgYCAAAwHC0ECIQYgBCgCACIPQsAAELCBgIAAIhhFDQgCQCAVQRxqIg4oAgAiBw0AIA4gD0IUELCBgIAAIgc2AgACQAJAIAdFDQAgBEHDgICAACAHEJqGgIAADQELIA8gGBDkgICAAAwKCyAHIBVBIGotAAA6ABILIBhBATYCGCANIBg2AhAgDyAWKAIAEKeBgIAAIQ4gGEHIATsBJiAYQf//AzsBICAYIA42AgAgGCAYKAIcQYCEAXI2AhwgDSAPIBVBFGooAgBBABCXhoCAACIZNgIUIA8tAFcNCCAZIBkoAgRBgICAIHI2AgQCQCANLwAlIg9BAnFFDQAgAiANKAI4NgLgASAEQZytgYAAIAJB4AFqELOBgIAADAkLIA0gBzYCPCANIA9BgAJyOwAlIAcgBygCACIPQQFqNgIAAkAgD0EBSA0AIActABJBAUcNACAHQQA6ABILIBkhGgJAIBktAABB/gFxQYYBRyIbDQBBfyEcIBkhGgNAAkAgGigCICITKAIAIh1BAUgNAEEAIRQDQAJAIBMgFEEGdGoiEkEMaigCAA0AIBJBEGooAgAiB0UNACAWKAIAIQ8CQANAAkACQCAHLQAAIg4gDy0AACIQRw0AIA4NASAYIBgoAhhBAWo2AhggEkEtaiIHIAcvAABBwAByOwAAIBJBGGogGDYCACAaKAIEIgdBgMAAcQ0DIBogB0GAwAByNgIEAkAgHEF/Sg0AIAQgBCgCKCIcQQFqNgIoCyASQTBqIBw2AgAMBAsgDkGwtoGAAGotAAAgEEGwtoGAAGotAABHDQMLIA9BAWohDyAHQQFqIQcMAAsLIAIgFigCADYC0AEgBEGNt4CAACACQdABahCzgYCAAAwNCyAUQQFqIhQgHUcNAAsLIBpBBWotAABBIHFFDQEgGigCNCIaLQAAIBktAABGDQALCyAXQfq3gIAANgIAIAQoAoACIQ4gBCARNgKAAgJAAkAgGUEFai0AAEEgcUUNACAaIBkoAkA2AkAgACAaEImGgIAAIQcgGkEANgJAIAdFDQEMCQsgACAZEImGgIAADQgLIAQgETYCgAIgGSEHA0AgByIPKAI0IgcNAAsgDygCHCEPAkAgFUEQaigCACIHDQAgDyEHDAILIA9FDQEgDygCACIPIAcoAgAiEEYNASAWKAIAIQcgAiAQNgLIASACIA82AsQBIAIgBzYCwAEgBEGepICAACACQcABahCzgYCAAAwHCyAHIA9BAWo2AhgCQCAHLQArIg9BAUYNAAJAIA1BJWotAABBBHFFDQAgAiANKAIINgKwASAEQYPDgIAAIAJBsAFqELOBgIAADAkLIA9FDQILIAAtABQhDyAEIAcQk4aAgAANBwJAAkACQCAHLQArQX9qDgIBAAILAkAgCy0AAEGAAXENACAHKAI8IAUoAhBBHGooAgBGDQAgAiAHKAIANgKQASAEQezjgIAAIAJBkAFqELOBgIAACyANIAUgBygCLEEAEJeGgIAANgIUDAELIA1BJWotAABBgAFxRQ0AIAdBNGooAgAiDkUNACAFKAIgQQd2QQFxIA4tABFPDQAgAiAHKAIANgKgASAEQcmsgYAAIAJBoAFqELOBgIAACyAAQQE7ARQgBy8BIiEOIAdB//8DOwEiIAAgDSgCFBCJhoCAABogByAOOwEiIAAgDzsBFAwBCyAEIAcgGEEiaiAYQQRqENSHgIAAAkAgGw0AIBdB7rOAgABBsrKAgAAgGSgCBEGAwABxGzYCACAAIBkQiYaAgAAaCyAEIA42AoACIBdBADYCAAsgDUElai0AAEECcUUNACAEIA0Q9IeAgAANAwsgDUHAAGohDSAMQQFqIgwgCSgCAEgNAAsLQQIhBiAEKAIkDQICQCABKAIgIgcoAgBBAkgNACAHQQhqIRogB0HIAGohDkEAIQwDQAJAIBooAhBFDQAgDigCECIARQ0AAkAgDi0AJCIGQQRxRQ0AAkACQCAOQSZqLQAAQQRxDQAgDigCLA0AIAAuASJBAUgNAUEAIQ9BACENA0ACQAJAIAAoAgQgD0EMbGoiEC0ACkECcQ0AIAdBACAMIBAoAgAiEEEAQQBBARD1h4CAAEUNACAEIA1BABC7hYCAACINRQ0BIAQoAgAgEBCngYCAACEQIA0oAgBBA3QgDWogEDYCAAsgD0EBaiIPIAAuASJIDQEgDUUNAyAOIA02AiwgDiAOLwAlQYAocjsAJQwDC0EAIQ0gD0EBaiIPIAAuASJIDQAMAgsLIAJBADYCYCAEQavVgIAAIAJB4ABqELOBgIAADAULIAQoAiQNBAtBAUECIAZBIHEbIQsCQCAOQSZqIhYtAABBBHFFDQAgDigCLCIYKAIAQQFIDQEgBCgCACEUIAxBAWohHEEAIR0DQAJAAkAgACAYIB1BA3RqQQhqKAIAIg8Qm4eAgAAiEUEASA0AIAdBACAMIA8gAkGIAmogAkGEAmogDi8AJUEMdkEBcRD1h4CAAA0BCyACIA82AkAgBEHkp4CAACACQcAAahCzgYCAAAwGCyAUIAcgAigCiAIgAigChAIiDRD2h4CAACEQAkAgByACKAKIAkEGdGoiBkEuai0AAEEgcUUNACAGQRxqKAIAKAIcIA1BBHRqQRFqIg0gDS8AAEHAAHI7AAALAkAgBy0ALEHAAHFFDQAgByACKAKIAkEBaiAMIA8gAkGIAmogAkGEAmogDi8AJUEMdkEBcRD1h4CAAEUNAEEAIQYCQANAAkACQCAHIAIoAogCQQZ0aiINQS5qLQAAQQRxRQ0AIA1BNGooAgAgDxDgh4CAAEF/Sg0BCyACIA82AlAgBEHInIGAACACQdAAahCzgYCAAAwCCyAEIAYgEBCnhYCAACEGIBQgByACKAKIAiACKAKEAiISEPaHgIAAIRACQCAHIAIoAogCIg1BBnRqIhNBLmotAABBIHFFDQAgE0EcaigCACgCHCASQQR0akERaiINIA0vAABBwAByOwAAIAIoAogCIQ0LIAcgDUEBaiAMIA8gAkGIAmogAkGEAmogDi8AJUEMdkEBcRD1h4CAAA0ACwsgBkUNACAEIAQgBiAQEKeFgIAAQaDHgoAAQQAQv4WAgAAhEAsgFCAHIBwgERD2h4CAACENAkAgFi0AAEEgcUUNACAOKAIUKAIcIBFBBHRqQRFqIg8gDy8AAEHAAHI7AAALAkAgBEE1IBAgDRCWhYCAACIPRQ0AIA8gDSgCHDYCJCAPIA8oAgQgC3I2AgQLIAEgBCABKAIkIA8QwYWAgAA2AiQgHUEBaiIdIBgoAgBIDQAMAgsLIA4oAiwiD0UNACAPIA4oAiggCxDPhoCAACABIAQgASgCJCAOKAIsEMGFgIAANgIkIA5BADYCLCAOIA4vACVBgBByOwAlCyAaQcAAaiEaIA5BwABqIQ4gDEEBaiIMIAcoAgBBf2pIDQALCwJAAkACQAJAIAgoAgAiDkEBTg0AQQAhHgwBCyAIQQhqIQdBACEeA0ACQAJAIAcoAgAiDy0AACIQQY0BRg0AIBBBtAFHDQEMBAsgDygCEC0AAEG0AUYNAwsgB0EQaiEHIA8oAgQgHnIhHiAOQX9qIg4NAAsLIAEoAhwhAAwBCyAJQfQAaiEfIANBgBBxIREgBCgCACkDIELEAIMhICABQQZqIRJBACEhQQAhAANAIAggIUEEdGoiD0EIaiIOKAIAIhsoAgQhIkEAIRQCQAJAIBstAAAiB0G0AUYNAAJAAkAgB0GNAUcNACAbKAIQLQAAQbQBRg0BCwJAIAQgACAbEKeFgIAAIgBFDQAgACgCAEEEdCAAaiIHQXxqIA9BDGoiECgCADYCACAHQQFqIgcgBy8AAEH8/wNxIA9BEWovAABBA3FyOwAAIBBBADYCAAsgDkEANgIADAILIBsoAgwoAgghFAsCQCAJKAIAIgxBAUgNAEEAIQYgHyEVIAohGEEAIQMDQCAYKAIQIQ4CQCAYKAIMIhwNACAOKAIAIRwLAkAgBS0AVw0AAkACQAJAIBhBJmoiGS0AAEEgcUUNACAYKAIUKAIcIR1BACEWDAELAkAgFEUNACAcIQcgFCEPAkADQAJAAkAgDy0AACIQIActAAAiDUcNACAQDQEMBAsgEEGwtoGAAGotAAAgDUGwtoGAAGotAABHDQILIAdBAWohByAPQQFqIQ8MAAsLIAZBAWohBgwCC0EAIR0CQCAOKAI8IhANAEGSk4GAACEWDAELIAUoAhBBDGohBwNAIAcoAgAhDyAHQRBqIg0hByAPIBBHDQALIA1BZGooAgAhFgtBACEaAkAgBkEBaiIXIAxODQAgGEHmAGotAABBBHFFDQAgEUUNACAYQewAaigCACIaKAIAQQFIDQAgGkEIaiEHQQAhDwNAAkAgBCAAIAVBOyAHKAIAIhAQxIWAgAAQp4WAgAAiAEUNACAAKAIAIQ0gAiAQNgIwIA1BBHQgAGoiEEF8aiAFQd2sgIAAIAJBMGoQtYKAgAA2AgAgEEEBaiIQIBAvAABB/P4DcUGCAXI7AAALIAdBCGohByAPQQFqIg8gGigCAEgNAAsLAkAgDi4BIkEBSA0AQQAhDyAUQQBHIB1BAEdxIQxBACAGayEjIAZBf3MhJCAGQQBHIBRFcSARRXEhCwNAIA4oAgQgD0EMbCIGaiIHKAIAIQ0CQAJAIAxFDQAgHSAPQQR0akEIakEAIBRBABDfh4CAAEUNAQsgBy8BCiEHAkAgEi0AAEECcQ0AIAdBAnENAQsCQCAHQYAIcUUNACAUDQAgEUUNAQsCQCALRQ0AIBktAABBBHFFDQBBASEDIBgoAiwgDRDgh4CAAEF/Sg0BCyAFQTsgDRDEhYCAACETAkACQAJAIAkoAgAiB0ECSA0AIBgtACRBwABxRQ0BIBENASAHICRqQQFIDQEgIyAHaiEQIBUhBwNAAkAgB0F6ai0AAEEEcUUNACAHKAIAIgNFDQAgAyANEOCHgIAAQQBODQILIAdBwABqIQcgEEF/aiIQQQFLDQAMAgsLIAQtAMgBQQJJDQELIARBjQEgBUE7IBwQxIWAgAAiAyATEJaFgIAAIRMCQCAELQDIAUECSQ0AIBsoAgwiEEUNACAEKAKEAiIHRQ0AA0ACQCAHKAIAIBBHDQAgByADNgIADAILIAcoAgwiBw0ACwsgFkUNACACIBY2AogCIAIgFhDXioCAAEH/////A3E2AowCIARBjQEgBUE7IAJBiAJqQQAQqoWAgAAgExCWhYCAACETCwJAIAQgACATEKeFgIAAIgANAEEBIQNBACEADAMLIAAoAgBBf2ohBwJAAkAgEUUNACAELQDIAUEBSw0AAkACQCAdRQ0AIAUgHSAPQQR0akEMaigCABCngYCAACEQDAELIAIgDTYCKCACIBw2AiQgAiAWNgIgIAVB3KuAgAAgAkEgahC1goCAACEQCyAAIAdBBHRqIgdBDGogEDYCACAHQRFqIgcgBy8AAEF8cSIQQQJyOwAAAkACQCAZLQAAQQRxRQ0AIBgoAiwgDRDgh4CAAEF/Sg0BCwJAIBpFDQAgGiANEOCHgIAAQX9KDQELQQEhAyAOKAIEIAZqQQtqLQAAQQRxRQ0DCyAHIBBBggJyOwAADAELAkAgIEIEUg0AIAIgDTYCFCACIBw2AhAgACAHQQR0aiIHQQxqIAVB16yAgAAgAkEQahC1goCAADYCACAHQRFqIgcgBy8AAEH8/wNxOwAADAELIAAgB0EEdGoiB0EMaiAFIA0Qp4GAgAA2AgAgB0ERaiIHIAcvAABB/P8DcTsAAAtBASEDCyAPQQFqIg8gDi4BIkgNAAsLIBchBgsgFUHAAGohFSAYQcAAaiEYIAYgCSgCACIMSA0BCwsgAw0BCwJAIBRFDQAgAiAUNgIAIARB+7aAgAAgAhCzgYCAAAwBCyAEQeDpgIAAQQAQs4GAgAALICIgHnIhHiAhQQFqIiEgCCgCAEgNAAsgBSAIEMSCgIAAIAEgADYCHAtBACEGIABFDQICQCAAKAIAIAVBgAFqKAIATA0AIARB2JaAgABBABCzgYCAAAwBCyAeQYiAgAJxRQ0CIAEgASgCBEGAgBByNgIEDAILQQIhBgwBCyAEIA42AoACCyACQZACaiSAgICAACAGC54BAQV/AkAgASgCBCICQYABcQ0AIAEgAkGAAXI2AgQgASgCICIDKAIAIgJBAUgNACAAKAIAIQQgA0EIaiEAQQAhBQNAAkAgACgCECIGQR1qLQAAQcAAcUUNACAAKAIUIgFFDQADQCABIgIoAjQiAQ0ACyAEIAYgAkHAABDVh4CAACADKAIAIQILIABBwABqIQAgBUEBaiIFIAJIDQALCwt0AQN/QQAhAgJAIAEtAABBO0cNACAAKAIAIgNBAUgNACABKAIIIQQgAEERaiEBQQAhAgNAAkAgAS0AAEEDcQ0AIAFBe2ooAgAgBBCNgYCAAA0AIAJBAWoPCyABQRBqIQEgAyACQQFqIgJHDQALQQAhAgsgAgukAQEDfyOAgICAAEEQayICJICAgIAAQQAhAwJAIABFDQADQAJAIABBBWotAABBCHFFDQAgASAAKAIINgIAQQEhAwwCCwJAIAAtAAAiBEGuAUYNACAEQa0BRw0CQQAhAyACQQA2AgwgACgCDCACQQxqEO+HgIAARQ0CIAFBACACKAIMazYCAEEBIQMMAgsgACgCDCIADQALCyACQRBqJICAgIAAIAMLhQEBAX8jgICAgABBEGsiBSSAgICAACAFIAM2AgggBSABNgIEIAUgAjYCACAAQYDxgIAAIAUQs4GAgAACQCAERQ0AIAAoAgAhAgJAA0ACQCAELQAEQQNxDQAgBCgCJCIAQQBKDQILIAQoAgwiBA0ADAILCyACIAA2AkQLIAVBEGokgICAgAALTgEBfwJAIAFBB2otAABBAXFFDQAgASgCLCIBKAIgIgJFDQAgAiABKAIkNgIAAkAgASgCJCICRQ0AIAIgASgCIDYCIAsgAUEANgIgC0EAC5sCAQZ/I4CAgIAAQSBrIgQkgICAgABBACEFAkAgAkUNACAAKAIAIgYtAFcNACAALQDIAUEBSw0AAkAgAigCACIHIAZBgAFqKAIATA0AIAQgAzYCACAAQZ7UgIAAIAQQs4GAgABBASEFDAELIAdBAUgNACABKAIcIQggAkEUaiEBQQEhBgNAAkAgAS8BACIFRQ0AAkAgCCgCACIJIAVODQAgBCAJNgIYIAQgAzYCFCAEIAY2AhAgAEGA8YCAACAEQRBqELOBgIAAQQEhBQwDCyAAIAggBUF/aiABQXRqKAIAQQAQ4oeAgAAgAigCACEHCyABQRBqIQEgBiAHSCEJQQAhBSAGQQFqIQYgCQ0ACwsgBEEgaiSAgICAACAFC+IBAQR/I4CAgIAAQSBrIgMkgICAgAAgA0EUakIANwIAQQAhBCADQRxqQQA2AgAgAyAANgIAIAAoAgAiAC0AWyEFIABBAToAWyADQgA3AgwgAyABKAIcIgY2AgggAyABKAIgNgIEIANBgYEgNgIYIAMgAhDZhoCAACEBIAAgBToAWwJAIAENACAGKAIAQQFIDQAgBkEIaiEBQQEhBANAQQAgASgCACACQX8QuYeAgABBAkgNASABQRBqIQEgBCAGKAIASCEAIARBAWohBCAADQALQQAhBAsgA0EgaiSAgICAACAEC9UBAQd/I4CAgIAAQRBrIgIkgICAgAAgASgCOCEDAkACQCABKAIQKAIIIgRFDQADQCAEKAIAIQUgAyEGAkADQAJAAkAgBS0AACIHIAYtAAAiCEcNACAHDQEgASAENgI8QQAhBQwGCyAHQbC2gYAAai0AACAIQbC2gYAAai0AAEcNAgsgBkEBaiEGIAVBAWohBQwACwsgBCgCFCIEDQALCyACQQA2AgQgAiADNgIAIABBgrOAgAAgAhCzgYCAAEEBIQUgAEEBOgARCyACQRBqJICAgIAAIAULxAEBAn9BACEHAkAgASACSg0AIAJBAWohCCABQQZ0IABqQRhqIQIDQAJAIAIoAgAiByADEJuHgIAAIgBBAEgNAAJAIAZFDQAgBygCBCAAQQxsai0ACkECcQ0BC0EBIQcgBEUNAgJAIAJBFmotAABBIHFFDQAgAkEEaigCACgCHCAAQQR0akERaiICIAIvAABBwAByOwAACyAEIAE2AgAgBSAANgIAQQEPCyACQcAAaiECIAggAUEBaiIBRw0AC0EAIQcLIAcL9wECA38BfgJAIABCNBCBgYCAACIERQ0AIARBAEE0ENWKgIAAIgAgASACQQZ0aiIFQRhqKAIAIgY2AiwgAEH//wM7ASIgAEGnAToAACAAQQE2AhggACAFQTBqKAIANgIcAkAgBi4BICADRw0AIABB//8DOwEgIAAPCyAAIAM7ASACQCAGLQAcQeAAcUUNACAGKAIEIANBDGxqLQAKQeAAcUUNACABIAJBBnRqQThqQn9CfyAGMgEiIgdC/////w+DhkJ/hSAHQj9VGzcDACAADwsgASACQQZ0akE4aiIAIAApAwBCASADQT8gA0E/SButhoQ3AwALIAQL3wQBBn8jgICAgABBMGsiBSSAgICAAEEAIQYgBUEANgIsIAVBADYCKCAFQQA2AiQCQAJAIAEtAAAiB0GKAUYNACAHQacBRw0BIABFDQEgAS4BICEIQQAhCQNAAkACQAJAIAAoAgQiBygCACIGQQFIDQAgB0EwaiEHIAEoAhwhCgNAIAcoAgAgCkYNAiAHQcAAaiEHIAZBf2oiBg0ACwsgACgCDCEAQQAhBwwBCyAHQWxqKAIAIQkgB0FoaigCACEHCwJAIABFDQAgB0UNAQsLAkAgBw0AQQAhBgwCCwJAIAlFDQBBACEGIAhBAEgNAiAJKAIcIgcoAgAgCEwNAiAFIAkoAiA2AgQgBSAANgIMIAUgACgCADYCACAFIAcgCEEEdGpBCGooAgAgBUEsaiAFQShqIAVBJGoQ94eAgAAhBgwCCwJAIAhBf0oNACAHLgEgIQgLAkACQCAIQX9KDQAgBUHJ4ICAADYCJEGv/oCAACEGDAELIAUgBygCBCAIQQxsaiIGKAIANgIkIAZBABCCg4CAACEGCyAFIAcoAgA2AiggACgCACIKRQ0BIAcoAjwiAEUNASAKKAIAKAIQQQxqIQcDQCAHKAIAIQogB0EQaiIBIQcgCiAARw0ACyAFIAFBZGooAgA2AiwMAQsgBSABKAIUIgcoAiA2AgQgBSAANgIMIAUgACgCADYCACAFIAcoAhwoAgggBUEsaiAFQShqIAVBJGoQ94eAgAAhBgsCQCACRQ0AIAIgBSgCLDYCACADIAUoAig2AgAgBCAFKAIkNgIACyAFQTBqJICAgIAAIAYLuQIBC38jgICAgABBIGsiAiSAgICAAAJAIAEoAkAiA0UNACAAKAIAIQRBACEFAkAgA0EUaigCAC0ABEHAAHENACAEIAQoAgAgAxDLh4CAAEEBEN+FgIAAIQULAkAgAygCAEEBSA0AIANBFGohASACQQRyIgZBGGohByAGQRBqIQggBkEIaiEJQQAhCgNAIAEoAgAhCyAHQQA2AgAgCEIANwIAIAlCADcCACAGQgA3AgAgAiAENgIAIAQhDAJAIAVFDQAgBCALIAIQm4aAgAAgAigCACEMCyAMKAIALQBXDQIgACALEImGgIAAGiAEIAFBfGooAgAQmYaAgAAgAUEYaiEBIApBAWoiCiADKAIASA0ACwsgBUUNACAEKAKAAiAFRw0AIAQgBSgCCDYCgAILIAJBIGokgICAgAALmQMBB38jgICAgABBIGsiAySAgICAACADQQA7ARwgA0EANgIYIANCADcCDCADIAAoAgAiBDYCCCADIAQoAng2AhQCQAJAIAIoAigNACACLwEyRQ0BIAIoAgwhBUEAIQRBACEGA0AgBSgCBCACKAIEIARqLgEAQQxsaigCACEHAkAgBkUNAAJAIAMoAhgiCEECaiIJIAMoAhBJDQAgA0EIakGEs4GAAEECEPyAgIAADAELIAMgCTYCGCADKAIMIAhqQazAADsAAAsgA0EIaiAFKAIAEISBgIAAAkACQCADKAIYIghBAWoiCSADKAIQSQ0AIANBCGpB7ZKBgABBARD8gICAAAwBCyADIAk2AhggAygCDCAIakEuOgAACyADQQhqIAcQhIGAgAAgBEECaiEEIAZBAWoiBiACLwEySQ0ADAILCyADIAIoAgA2AgAgA0EIakGwo4GAACADEP2AgIAACyADQQhqEIeBgIAAIQQgAEGTDEGTECACLwA3QQNxQQJGGyABIARBekECELOHgIAAIANBIGokgICAgAALVQEBfyAAKAIAIQMCQAJAIAENAEEAIQEMAQsgAyABQQBBABCBhoCAACEBCwJAIAMtAFcNACAAIAEgAkEQEMiGgIAACwJAIAFFDQAgAyABEOWAgIAACwvgAQEIfyABKAI4IQICQCAAKAIAKAIQQRxqKAIAIgNBMGooAgAiBEUNACABKAI8IQUDQAJAAkACQCAEKAIIIgYoAhggBUcNACAGKAIEIgBFDQAgASgCACEHA0ACQAJAIAAtAAAiCCAHLQAAIglHDQAgCA0BIAUgA0cNBAwDCyAIQbC2gYAAai0AACAJQbC2gYAAai0AAEcNAgsgB0EBaiEHIABBAWohAAwACwsgBi0ACEGWAUcNASAGIAU2AhggBiABKAIANgIECyAGIAI2AiAgBiECCyAEKAIAIgQNAAsLIAIL7gEBCX8CQAJAIAEoAjAiAg0AQQAhAwwBCyACKAIAIQMLAkAgACgCACIEIANBAWpBARChh4CAACIFRQ0AIANBAUgNACAFQRRqIQYgAkEUaiECQQAhBwNAAkACQCACQXRqIggoAgAiCUEFai0AAEECcUUNACAAIAkQioWAgAAhCgwBCwJAIAAgASACLwEAQX9qEP2HgIAAIgoNACAEKAIIIQoLIAggACAJIAooAgAQ6YeAgAA2AgALIAYgCjYCACAFKAIQIAdqIAJBfGotAAA6AAAgBkEEaiEGIAJBEGohAiADIAdBAWoiB0cNAAsLIAULUQEBfwJAAkAgASgCNCIDRQ0AIAAgAyACEP2HgIAAIgMNAQtBACEDIAEoAhwiASgCACACTA0AIAAgASACQQR0akEIaigCABCKhYCAACEDCyADC4oBAAJAAkAgACABSA0AIAFBMWogAEgNAQJAIAFBH2ogAE4NACAAQQFqIQAMAgsgACABa0HQx4KAAGotAAAgAGohAAwBCwJAIABBMWogAU4NACABIQAMAQsCQCAAQR9qIAFODQAgAUEBaiEADAELIAEgAGtB0MeCgABqLQAAIAFqIQALIABBEHRBEHULxwgBB38gACAAKAI4QX9qIgg2AjggACgCCCIJKAJsIQoCQCAFRQ0AIAVBAWohCyAJQRAgBUEAQQAQt4KAgAAhDCACKAIQIQ0gAigCDCEOAkAgBkUNACAGIAYoAgBBAWo2AgALIAkgCUHaACAOIAsgDRC3goCAACINIAZBeBDmhYCAACAJQQ0gDUECaiIGIAggBhC3goCAABogCSgCbCEGQfyKg4AAIQ0CQCAJKAIALQBXDQAgCSgCaCAGQX9qIAwgDEEASBtBFGxqIQ0LIA0gBjYCCCAJQdAAIAIoAgwgCyACKAIQQX9qELeCgIAAGiAJQccAQQEgBUEAELeCgIAAGgtBACEFAkAgACgCAC0AVw0AAkAgASgCDCIFQQFIDQAgCUExIAUgCEEBELeCgIAAGgsCQAJAAkACQAJAAkAgAy0AAEF2ag4EAgEAAwQLAkACQAJAAkAgAC0AEyIGDQAgACAAKAIsQQFqIgU2AiwMAQsgACAGQX9qIgU6ABMgACAFQf8BcSILQQJ0akGQAWooAgAhBSALDQELIAAgACgCLEEBaiIGNgIsDAELIAAgBkF+aiIGOgATIAAgBkH/AXFBAnRqQZABaigCACEGCyAJQeEAIAIoAgwgAigCECAFELeCgIAAGiAJQf8AIAMoAgQgBkEAELeCgIAAGiAJQYABIAMoAgQgBSAGELeCgIAAGgJAIAkoAmwiAkEBSA0AIAJBFGwgCSgCaGpBbmpBCDsBAAsCQCAGRQ0AIAAtABMiAkEHSw0AIAAgAkEBajoAEyAAIAJBAnRqQZABaiAGNgIACyAFRQ0EIAAtABMiAkEHSw0EIAAgAkEBajoAEyAAIAJBAnRqQZABaiAFNgIADAQLAkACQCAALQATIgUNACAAIAAoAixBAWoiBTYCLAwBCyAAIAVBf2oiBToAEyAAIAVB/wFxQQJ0akGQAWooAgAhBQsgAygCFCEGIAkgCUHhACACKAIMIAIoAhAiCyAFELeCgIAAIAYgCxDmhYCAACACKAIQIQYgCUGKASADKAIEIAUgAigCDBC3goCAACECAkAgCSgCAC0AVw0AIAkoAmggAkEUbGoiAiAGNgIQIAJB/QE6AAELIAVFDQMgAC0AEyICQQdLDQMgACACQQFqOgATIAAgAkECdGpBkAFqIAU2AgAMAwsgACgCCEHPACACKAIMIAMoAgQgAigCEBC3goCAABoMAgsCQCADKAIMIgUNACADIAAgAigCEBDJhoCAACIFNgIMIAMgAigCEDYCEAsgACgCCEHPACACKAIMIAUgAigCEBC3goCAABogCUELIAMoAgRBAEEAELeCgIAAGgwBCyAJQdQAIAIoAgwgAigCEEEAELeCgIAAGgsCQCABKAIIIgBFDQAgCUE8IAAgB0EAELeCgIAAGgsgCSAIELeGgIAAIAlBwwAgBEEAQQAQt4KAgAAaIAohBQsgBQudAgEDfyOAgICAAEEgayICJICAgIAAAkAgAUUNAANAIAAoAhQgASgCBHENAQJAIAEtAAAiA0EsRg0AIANBNUcNAiABKAIMIQMCQCABKAIQIgQtAABBpwFHDQAgAkEANgIYIAJBtYCAgAA2AgggAkG2gICAADYCBCACQQE7ARQCQCADRQ0AIAIgAxD/hYCAABogAi8BFEUNAQsgACAEIAMgARCoiICAAAsgAy0AAEGnAUcNAiACQQA2AhggAkG1gICAADYCCCACQbaAgIAANgIEIAJBATsBFCACIAQQ/4WAgAAaIAIvARRFDQIgACADIAQgARCoiICAAAwCCyAAIAEoAhAQgIiAgAAgASgCDCIBDQALCyACQSBqJICAgIAAC4IBAQF/AkACQCAAKAIYIgAoAhBFDQACQCABLQAAIgJBS2pBBUkNACACQS1HDQELIAAgASgCDEEAEKmIgIAAGkEBIQIgACgCBC0AAA0BIAEoAgwQt4eAgABBwgBGDQAgACABKAIQQQAQqYiAgAAaCyAAIAEgACgCEBCpiICAACECCyACC6UBAQR/I4CAgIAAQSBrIgIkgICAgABBACEDAkAgAS0AJCIEQcAAcQ0AIAAoAgRBAXEhBQJAAkAgBEEIcUUNACAFRQ0CIAAoAiQiBCABKAIoRg0BDAILIAUNASABKAIoIQQLIAIgBDYCGCACQbWAgIAANgIIIAJBtoCAgAA2AgQgAkEDOwEUIAIgABD/hYCAABogAi8BFCEDCyACQSBqJICAgIAAIAMLlQgBBX8jgICAgABBwABrIgIkgICAgAACQAJAIAENAEEAIQMMAQsCQCABKAIEIgRBA3FFDQAgASgCJCAAKAIERw0AIAEgACgCCDYCJAsCQAJAAkACQCABLQAAIgNBswFGDQAgA0GnAUcNASABKAIcIAAoAgRHDQEgBEEgcQ0BIAAoAhAgAS4BIEEEdGpBCGooAgAiAy0AACIFIQQCQCAFQbABRw0AIAMtAAIhBAsCQAJAAkAgBEH/AXEiBEGKAUYNACAEQbEBRw0CIANBFGohBAwBCyADKAIUQRxqIQQLIAQoAgAoAgBBAkgNACAAKAIAIAMQyIeAgAAMAwsgACgCACgCACEEAkAgACgCDEUNACAFQacBRg0AIAJBCGpBAEE0ENWKgIAAGiACIAM2AhQgAkGzAToACCACQYCAEDYCDCACIAAoAgg2AiQgAkEIaiEDCyAEIANBAEEAEIGGgIAAIQMCQCAELQBXRQ0AIANFDQMgBCADEOWAgIAADAMLAkAgACgCDEUNACADIAMoAgRBgICAAXI2AgQLAkAgASgCBEEDcSIFRQ0AIAMgASgCJCAFEM+GgIAACyAEIAEQ5YCAgAACQAJAAkAgAy0AACIBQdl+ag4EAgYGAAELIAMhAQJAIAMoAgQiBEGAwABxRQ0AIAMhAQNAIAEoAgwiAUEFai0AAEEgcQ0ACwsgASgCCC0ABCEBIAMgBEGAEHI2AgQgA0GbAToAACADIAFFNgIIDAULIAFB8QBHDQQLIAMgAygCBEH/e3E2AgQMBAsgASgCHCAAKAIERw0AIAEgACgCCDYCHAsgASAAIAEoAgwQg4iAgAA2AgwgASAAIAEoAhAQg4iAgAA2AhACQAJAIAFBBWotAABBEHFFDQAgACABKAIUQQEQ0IaAgAAMAQsgASgCFCIFRQ0AIAUoAgBBAUgNACAFQQhqIQNBACEEA0AgAyAAIAMoAgAQg4iAgAA2AgAgA0EQaiEDIARBAWoiBCAFKAIASA0ACwsgAUEHai0AAEEBcUUNACABKAIsIQYgBiAAIAYoAigQg4iAgAA2AigCQCAGKAIIIgVFDQAgBSgCAEEBSA0AIAVBCGohA0EAIQQDQCADIAAgAygCABCDiICAADYCACADQRBqIQMgBEEBaiIEIAUoAgBIDQALCyAGKAIMIgVFDQAgBSgCAEEBSA0AIAVBCGohA0EAIQQDQCADIAAgAygCABCDiICAADYCACADQRBqIQMgBEEBaiIEIAUoAgBIDQALCyABIQMMAQsgACgCACADEIqFgIAAIQEgACgCACEAAkACQCABDQBBoMaBgAAhAQwBCyABKAIAIQELIAAgAyABEOmHgIAAIgMgAygCBEH/e3E2AgQLIAJBwABqJICAgIAAIAMLsQEBBX8CQAJAIAAoAhgiAigCAEEBSA0AIAJBCGohA0EAIQQDQAJAQQAgASADKAIAIgVBfxC5h4CAAEEBSg0AAkAgACgCACIGIAUQioWAgAAiBQ0AIAYoAgAoAggiBUUNBAsgBSgCDEGggICAAEYNAwsgA0EQaiEDIARBAWoiBCACKAIASA0ACwsCQCABQQVqLQAAQRBxRQ0AIABBADsBFEECDwsgACABEP6FgIAADwtBAQuXAQECfwJAIAFFDQADQCABIQMCQANAIAMoAgQiBEGAwCBxRQ0BAkACQCAEQYCAIHFFDQAgAygCFEEIaiEDDAELIANBDGohAwsgAygCACIDDQAMAwsLIAAgAjoACAJAIAMtAAAgAkYNACAAIAFBABCGiICAABoPCyAAIAMoAgwgAhCFiICAACADKAIQIgENAAsLIAAgAjoACAujAwIEfwF+AkAgACgCDCIDIAAoAhAiBEgNACAAKAIYIQUCQCAAKAIAIgMoAgAoAgAiBiAEQeAAbK0iB0IQhBCBgYCAACIEDQAgAEEANgIYAkAgAUUNACACQQFxRQ0AIAYgARDlgICAAAsgACAFNgIYQQAPCyAEIAc3AwggBCADKAJINgIAIAMgBDYCSCAAIARBEGoiBDYCGCAEIAUgACgCDEEwbBDUioCAABogACAAKAIQQQF0NgIQIAAoAgwhAwsgACADQQFqIgQ2AgwCQCACQQJxDQAgACAENgIUCyAAKAIYIQUCQAJAAkAgAQ0AIAUgA0EwbGpBATsBCAwBC0EBIQQCQCABQQZqLQAAQQhxRQ0AIAE0AhwQh4OAgABB8n1qIQQLIAUgA0EwbGogBDsBCANAIAEoAgQiBEGAwCBxRQ0CAkACQCAEQYCAIHFFDQAgASgCFEEIaiEBDAELIAFBDGohAQsgASgCACIBDQALC0EAIQELIAUgA0EwbGoiBCACOwEKIAQgATYCACAEIAA2AgQgBEEMakEAQSQQ1YqAgAAaIAML/iMHCX8DfgF/AX4BfwF+BX8jgICAgABBIGsiAySAgICAACABKAIAIQQgA0EANgIYIANBADYCFCADQQA2AhACQCAEKAIAIgUoAgAiBi0AVw0AIARBADYC+AMgBEH4A2ohBwJAAkAgASgCGCIIIAJBMGxqIgkoAgAiCigCDCILDQBCACEMDAELIAcgCxC9iICAACEMCwJAAkAgCi0AACILQTFHDQAgBSAKELuHgIAADQICQAJAIApBBWotAABBEHFFDQAgByAKKAIUEL6IgIAAIQ0MAQsgByAKKAIUEK2IgIAAIQ0LIAggAkEwbGogDTcDICANIAyEIQ4MAQsCQAJAIAooAhAiDw0AQgAhDQwBCyAHIA8QvYiAgAAhDQsgCCACQTBsaiANNwMgAkACQCAKKAIMRQ0AIAooAgRBgKAQcQ0AIAooAhRFDQELIAcgChC9iICAACEODAELIA0gDIQhDgsCQCAHKAIARQ0AIAggAkEwbGoiDyAPLwEKQYAgcjsBCgtCACEQAkAgCigCBCIRQQNxRQ0AQgEhEgJAIARBgARqKAIAIAooAiQiE0YNAEIAIRIgBEH8A2ooAgAiD0ECSA0AIA9Bf2ohDyAEQYQEaiEEQgEhDQNAAkAgBCgCACATRw0AQgEgDYYhEgwCCyAEQQRqIQQgDUIBfCENIA9Bf2oiDw0ACwsCQCARQQFxRQ0AAkAgEiAOhCIOQgGIIBJaDQAgEkJ/fCEQDAILIAVB/5WAgABBABCzgYCAAAwCCyAOQgGIIBJUDQACQCAAKAIAQQFIDQAgAEEsai0AAEHAAHFFDQAgBUH/lYCAAEEAELOBgIAADAILIAogEUF9cSIRNgIECyAIIAJBMGxqIg8gDjcDKCAPQn83AxAgD0EAOwEMAkACQAJAIAtBU2oiBEEMSw0AQQEgBHRBsT5xRQ0AQQAhEUEAIRMCQCAKKAIMIgRFDQADQAJAIARBBWotAABBIHENACAEIRMMAgsgBCgCDCIEDQALQQAhEwsCQCAKKAIQIgRFDQADQAJAIARBBWotAABBIHENACAEIREMAgsgBCgCDCIEDQALCyAIIAJBMGxqIgQpAyAgDINQIRQCQCAEQRxqKAIAIhVBAUgNACAVQQR0IBMoAhRqQXhqKAIAIRMLIA9BDGohFiAPQRRqIRVB//8AQYAQIBQbIRQCQCAAIAwgA0EIaiATIAsQv4iAgABFDQAgFSADKAIINgIAIAggAkEwbGogAygCDDYCGEEBIRcCQAJAAkACQCALQVNqDgYBAgICAwACC0GAAiEXDAILQYABIRcMAQtBAiALQUtqdCEXCyAWIBcgFHE7AQALAkAgC0EtRw0AIAggAkEwbGoiCCAILwEKQYAQcjsBCgsCQCARRQ0AIAAgBEEgaikDACADQQhqIBEgCxC/iICAAEUNACARLQAEQSBxDQBBACEPAkACQCAVKAIAQQBODQAgCiEIIAkhBAwBCwJAAkAgCkUNACAGIApBAEEAEIGGgIAAIQggBi0AV0UNASAIRQ0HIAYgCBDlgICAAAwHCyAGLQBXDQZBACEICyABIAhBAxCGiICAACIERQ0FIAEoAhgiEyAEQTBsIhFqIgQgAjYCECAEIBMgAkEwbGoiCS8BCDsBCCAJIAktAA5BAWo6AA4CQCALQS1HDQAgEyARaiILIAsvAQpBgBByOwEKCyAJIAkvAQpBCHI7AQogBSAIEMCIgIAARQ0AQYAQIQ8gEyACQTBsaiILIAsvAQxBgBByOwEMCyAFIAgQwYiAgAAgBCADKQIINwIUIAQgDjcDKCAEIBAgDIQ3AyBBASELAkACQAJAAkAgCC0AACIIQVNqDgYBAgICAwACC0GAAiELDAILQYABIQsMAQtBAiAIQUtqdCELCyAEIAsgD2ogFHE7AQwMAgsgC0EyRw0BIAooAgQiBEEBcQ0BIBMQvoeAgAANASAKQYzWgIAANgIIIApBqgE6AAAgFkEAOwEAIA9BKGpCADcDACAKIARBgICAgAJyNgIEDAELAkACQAJAAkACQAJAIAotAAAiC0FQag4EAQcHAwALIAtBK0YNASALQawBRw0GIAEtAAhBLEcNBSAFIAogA0EYaiADQRRqIANBEGoQwoiAgABFDQUgCigCFEEYaigCACEJIAMoAhgiEw0DQQAhEQwECyABLQAIQSxHDQQgCigCFCERQQEhD0EAIQQDQCAEQYbIgoAAaiELQQAhCAJAIAooAgwiE0UNACAGIBNBAEEAEIGGgIAAIQgLIAstAAAhCwJAAkAgESAEQQR0akEIaigCACIEDQBBACEEDAELIAYgBEEAQQAQgYaAgAAhBAsCQCAFIAsgCCAEEJaFgIAAIgRFDQAgCigCBEEDcSIIRQ0AIAQgBCgCBCAIcjYCBCAEIAooAiQ2AiQLIAAgASABIARBAxCGiICAACIEEIeIgIAAIAEoAhgiCyAEQTBsaiIEIAI2AhAgBCALIAJBMGxqIggvAQg7AQhBASEEIAggCC0ADkEBajoADiAPQQFxIQhBACEPIAgNAAsgCyACQTBsaiEJDAQLIAAgASACEMOIgIAAIAEoAhggAkEwbGohCQwDCyAKKAIMIgQtAABBpwFHDQIgBC4BIEEASA0CIBFBAXENAiAGIARBAEEAEIGGgIAAIQsCQCAGQjQQgYGAgAAiCEUNACAIQQBBNBDVioCAACIPQf//AzsBIiAPQfkAOgAAIA9BATYCGAsgASAFQTYgCyAIEJaFgIAAQYMBEIaIgIAAIghFDQIgBCgCHCELIAEoAhggCEEwbCIPaiIIIAQuASA2AhggCEIANwMgIAggCzYCFCAIQQQ7AQwgASgCGCIEIA9qIgsgAjYCECALIAQgAkEwbGoiCS8BCDsBCCAIIAkpAyg3AyggCSAJLQAOQQFqOgAOIAkgCS8BCkEIcjsBCgwCCyAGIBNBAEEAEIGGgIAAIRELAkAgAygCECIURQ0AIAUoAgAtAFcNACAIIAJBMGxqIgQgBC8BCkGACHI7AQogEygCCCILLQAAIghFDQBBACEEA0AgCyAIIAhB/wFxIg9BoLmBgABqLQAAQX9zQd8BcnE6AAAgESgCCCAEaiAPQbC2gYAAai0AADoAACATKAIIIgggBEEBaiIPaiELIAggBGohCCAPIQQgCEEBai0AACIIDQALCwJAIAYtAFcNAAJAAkAgESgCCCIEDQBBACEIDAELIAQQ14qAgABB/////wNxIQgLIAggBGpBf2oiCC0AACEEAkAgFEUNAAJAIARBwABHDQAgA0EANgIUCyAEQbC2gYAAai0AACEECyAIIARBAWo6AAALQemDgYAAQaDGgYAAIBQbIQgCQAJAIAkNAEEAIQQMAQsgBiAJQQBBABCBhoCAACEECwJAIAVBOSAFIAQgCBDph4CAACATEJaFgIAAIgRFDQAgCigCBEEDcSILRQ0AIAQgBCgCBCALcjYCBCAEIAooAiQ2AiQLIAAgASABIARBgwIQhoiAgAAiCxCHiICAAAJAAkAgCQ0AQQAhBAwBCyAGIAlBAEEAEIGGgIAAIQQLAkAgBUE4IAUgBCAIEOmHgIAAIBEQloWAgAAiBEUNACAKKAIEQQNxIghFDQAgBCAEKAIEIAhyNgIEIAQgCigCJDYCJAsgACABIAEgBEGDAhCGiICAACIPEIeIgIAAIAEoAhgiBCACQTBsIghqIQkgAygCFEUNACAEIAtBMGxqIgsgAjYCECALIAQgCGoiCC8BCDsBCCAEIA9BMGxqIgQgAjYCECAIIAgtAA5BAmo6AA4gBCAILwEIOwEICyAKLQAAIQsLAkACQAJAAkACQCALQf8BcSIEQU9qDgUCAwMDAQALIARBLUcNAgsCQCAKKAIMIggtAAAiBEGwAUcNACAILQACIQQLAkACQAJAIARB/wFxIgRBigFGDQAgBEGxAUcNAiAIQRRqIQQMAQsgCCgCFEEcaiEECyAEKAIAKAIAIg9BAkgNAAJAIAooAhAiEy0AACIEQbABRw0AIBMtAAIhBAsCQAJAAkAgBEH/AXEiEUGKAUYNAEEBIQQgEUGxAUcNAiATQRRqIQQMAQsgEygCFEEcaiEECyAEKAIAKAIAIQQLIAQgD0cNAAJAIAhBBWotAABBEHFFDQAgE0EFai0AAEEQcQ0BCyABLQAIQSxHDQAgD0F/aiELQQAhBANAIAUgCCAEIA8Q8YaAgAAhByAFIAooAhAgBCAPEPGGgIAAIQgCQCAFIAotAAAgByAIEJaFgIAAIgdFDQAgCigCBEEDcSIIRQ0AIAcgBygCBCAIcjYCBCAHIAooAiQ2AiQLIAAgASABIAdBgYACEIaIgIAAEIeIgIAAAkAgCyAERg0AIARBAWohBCAKKAIMIQgMAQsLIAEoAhggAkEwbGoiBEGAwAA7AQwgBCAELwEKQQZyOwEKDAMLIAtB/wFxQTFHDQELIAlBHGooAgANACAKKAIMIggtAABBsQFHDQAgCkEFai0AAEEQcUUNACAKKAIUIgQoAjQNACAEKAJEDQAgAS0ACEEsRw0AQQEhBEGxASEHA0ACQCAHQf8BcUGwAUcNACAILQACIQcLIARBf2ohCwJAAkACQCAHQf8BcSIPQYoBRg0AQQEhByAPQbEBRw0CIAhBFGohBwwBCyAIKAIUQRxqIQcLIAcoAgAoAgAhBwsgCyAHTg0CIAEgCkGCgAIQhoiAgAAhByABKAIYIAdBMGwiCGpBHGogBDYCACAAIAEgBxCHiICAACABKAIYIgcgCGoiCCACNgIQIAggByACQTBsaiIHLwEIOwEIIAcgBy0ADkEBajoADiAEQQFqIQQgCigCDCIILQAAIQcMAAsLIAEtAAhBLEcNAAJAAkAgC0H/AXEiBEFNakECSQ0AAkAgBEHVfmoOAgEAAwsgCigCFCITRQ0CIBMoAgBBAkcNAgJAIBNBGGooAgAiCC0AAEGnAUcNACAIKAIsIgRFDQAgBC0AK0EBRw0AIAooAgghCUEAIREDQCARQQN0QZDIgoAAaigCACEEIAkhAAJAA0ACQAJAIAAtAAAiCyAELQAAIg9HDQAgCw0BIBFBA3RBlMiCgABqLQAAIREgEygCCCEEQQEhAAwHCyALQbC2gYAAai0AACAPQbC2gYAAai0AAEcNAgsgBEEBaiEEIABBAWohAAwACwsgEUEBaiIRQQRHDQALCyATKAIIIggtAABBpwFHDQIgCCgCLCIERQ0CIAQtACtBAUcNAiAEQTRqIQQDQCAEKAIAIgBBGGohBCAAKAIAIAZHDQALIAAoAggiBCgCACgCSCIARQ0CIARBAiAKKAIIIANBCGogA0EcaiAAEYeAgIAAACIRQZYBSA0CIBMoAhghBEEBIQAMAQsgCigCECEPQQAhAAJAIAooAgwiBC0AAEGnAUcNAEEAIQAgBCgCLCIIRQ0AIAgtACtBAUYhAAsCQAJAIA8NACAEIQhBACEEDAELAkAgDy0AAEGnAUcNACAPKAIsIghFDQAgCC0AK0EBRw0AIABBAWohACAPIQgMAQsgBCEIIA8hBAtBxAAhEQJAAkACQCALQf8BcSILQU1qDgIAAgELQcYAIREMAQsCQCALQasBRg0AQQAhEQwBC0HFACERCyAARQ0BCyAAQQFqIQ8DQCAIIQBCACENAkAgBEUNACAHIAQQvYiAgAAhDQsCQAJAIAANAEIAIQwMAQsgByAAEL2IgIAAIQwLAkAgDCANg0IAUg0AAkACQCAEDQBBACEIDAELIAYgBEEAQQAQgYaAgAAhCAsgBUEuQQAgCBCWhYCAACEIAkAgCi0ABEEBcUUNACAIRQ0AIAggCCgCBEEBcjYCBCAIIAooAiQ2AiQLIAEgCEEDEIaIgIAAIQggACgCHCELIAEoAhggCEEwbCITaiIIIAAuASA2AhggCCANNwMgIAggCzYCFCAIIBE6AA8gCEHAADsBDCABKAIYIgsgE2oiEyACNgIQIAggCyACQTBsaiILKQMoNwMoIBMgCy8BCDsBCCALIAstAA5BAWo6AA4gCyALLwEKQQhyOwEKCyAEIQggACEEIA9Bf2oiD0EBSw0ACwsgASgCGCACQTBsaiIEIAQpAyAgEIQ3AyALIANBIGokgICAgAAL9wEBBH8jgICAgABBEGsiBSSAgICAACAAKAIAKAIAIgYoAgAhByAFQQA2AgQCQAJAAkAgAiAFQQRqEO+HgIAARQ0AIAUoAgQiCEEASA0AIAVCADcDCCAHQZsBIAVBCGpBABCqhYCAACICRQ0CIAIgCDYCCCACIAIoAgRBgBByNgIEDAELIAVCADcDCCAHQbABIAVBCGpBABCqhYCAACICRQ0BIAIgATYCHAsgBkEuQQAgAhCWhYCAACICRQ0AIAAgAkEDEIaIgIAAIQIgACgCGCACQTBsaiICIAM2AhQgAiAEOgAPIAJBwAA7AQwLIAVBEGokgICAgAALMAEBf0EAIQICQCABLQAAQawBRw0AIAFBBmotAABBEHENACAAQQA7ARRBAiECCyACC8cFAQl/QQAhBAJAAkAgASgCAEEBRw0AIAFBGGooAgAhBSABQTBqKAIAIQYCQCADKAIAIgdBAUgNAEEAIQgDQAJAIAMgCEEEdGpBCGooAgAiAUUNAAJAA0AgASgCBCIJQYDAIHFFDQECQAJAIAlBgIAgcUUNACABKAIUQQhqIQEMAQsgAUEMaiEBCyABKAIAIgENAAwCCwsCQCABLQAAQdl+ag4DAAEAAQsgASgCHCAGRw0AIAEuASBBAEgNBAsgCEEBaiIIIAdHDQALCyAFKAIIIgVFDQADQAJAIAUtADZFDQAgBSgCJA0AAkACQCAFLwEyDQBBACEKDAELQQAhCgNAAkAgAiAGIApCf0ECIAUQq4iAgAANACADKAIAIgdBAUgNAiAFKAIgIApBAnRqKAIAIQtBACEEAkACQANAAkAgAyAEQQR0akEIaigCACIIRQ0AIAghAQJAA0AgASgCBCIJQYDAIHFFDQECQAJAIAlBgIAgcUUNACABKAIUQQhqIQEMAQsgAUEMaiEBCyABKAIAIgENAAwCCwsCQCABLQAAQdl+ag4DAAEAAQsgAS8BICAFKAIEIApBAXQiDGovAQBHDQAgASgCHCAGRw0AAkAgACAIEIqFgIAAIgENACAAKAIAKAIIIQELIAEoAgAhASALIQkCQANAAkACQCABLQAAIgggCS0AACIHRw0AIAgNASAFKAIEIAxqLwEAIgFBEHRBEHUiCUEASA0GIAUoAgwoAgQgAUEMbGotAARBD3EhAQwHCyAIQbC2gYAAai0AACAHQbC2gYAAai0AAEcNAgsgCUEBaiEJIAFBAWohAQwACwsgAygCACEHCyAEQQFqIgQgB0gNAAwFCwsgCUF/RiEBCyABRQ0CCyAKQQFqIgogBS8BMkkNAAsLIAogBS8BMkYNAwsgBSgCFCIFDQALQQAhBAsgBA8LQQEL5wYBDn8gAEHIAGohASAAQRxqIQIgAC0AGSEDIAAoAgQhBCAAKAIQIQUDfyAAIANB/wFxQX9qIgNBAXRqQcgAai4BACEGIAAgA0ECdGpBHGooAgAhBwNAAkAgBSAEKAIMTg0AIAQoAhggBUEwbGohAwNAAkAgAygCFCAHRw0AIAMoAhggBkcNAAJAIAZBfkcNACADKAIAKAIMIAAoAgwgBxDGiICAAA0BCwJAIAAtABlBAkkNACADKAIALQAEQQFxDQELAkAgAy8BDCIIQYAQcUUNACAALQAaIglBCksNACADKAIAKAIQIgpFDQACQANAIAooAgQiC0GAwCBxRQ0BAkACQCALQYCAIHFFDQAgCigCFEEIaiEKDAELIApBDGohCgsgCigCACIKDQAMAgsLIAotAABBpwFHDQAgC0EgcQ0AAkACQAJAIAkNAEEAIQwMAQsgCigCHCENQQAhDCABIQ4gAiELA0ACQCALKAIAIA1HDQAgDi8BACAKLwEgRg0CCyAOQQJqIQ4gC0EEaiELIAkgDEEBaiIMRw0ADAILCyAMIAlHDQELIAAgCUEBdGpByABqIAovASA7AQAgACAJQQFqOgAaIAAgCUECdGpBHGogCigCHDYCACADLwEMIQgLIAAoAhQgCEH//wNxIgpxRQ0AAkAgACgCCEUNACAKQYACcQ0AIAQoAgAoAgAhCyADKAIAIgogACwAGBDIiICAAEUNAQJAIAsgCkEQQQwgCigCBEGACHEiCBtqKAIAIApBDEEQIAgbaigCABDagoCAACIIDQAgCygCACgCCCEICyAAKAIIIQogCCgCACELA0ACQAJAIAstAAAiCCAKLQAAIg5HDQAgCA0BIAMvAQwhCAwDCyAIQbC2gYAAai0AACAOQbC2gYAAai0AAEcNAwsgCkEBaiEKIAtBAWohCwwACwsCQCAIQYIBcUUNACADKAIAKAIQIgpFDQAgCi0AAEGnAUcNACAKKAIcIAAoAhxHDQAgCi8BICAALwFIRg0BCyAAIAQ2AgQgACAFQQFqNgIQIAMPCyADQTBqIQMgBUEBaiIFIAQoAgxIDQALC0EAIQUgBCgCBCIEDQALAkAgAC0AGSIDIAAtABpJDQBBAA8LIAAgA0EBaiIDOgAZIAAoAgAhBEEAIQUMAAsLigIBAX9BACEGIABBADoAGCAAIAE2AgQgACABNgIAIAAgBDYCFCAAQgA3AgggACACNgIcIABBADYCECAAQYECOwAZAkACQAJAIAVFDQBBfyEBIAUoAgQgA0EBdGovAQAiBiAFKAIMIgIvASBGDQECQCAGQRB0QRB1IgFBAEgNACAAIAIoAgQgAUEMbGotAAU6ABggACAFKAIgIANBAnRqKAIANgIIDAILIAFBfkcNASAAIAUoAiggA0EEdGpBCGooAgA2AgwgAEH+/wM7AUggACAFKAIgIANBAnRqKAIANgIIIAAQx4iAgAAPCyADIQEgA0F+Rg0BCyAAIAE7AUggABCLiICAACEGCyAGC7kQAhR/BX4jgICAgABBMGsiAySAgICAAEEAIQQgA0EANgIMIAAoAgAiBSgCBCIGIAAoAggiBy0AECIIQQZ0aiIJQRhqKAIAIQogBSgCCCELIAUoAgAhDEEAIQ0CQCAAKAIEIg4oAgwiD0EBSA0AIAlBLGohECAJQTBqKAIAIREgDigCGCEJQQAhDQNAIAlBCmoiEiASLwEAIhNBv/8DcTsBAAJAIAlBFGooAgAgEUcNACAJQSBqKQMAIAKDQgBSDQAgCUEMai8BAEH/7wNxRQ0AIBNBgAFxDQACQCAQLQAAQdgAcUUNACAJKAIAIhQtAARBA3FFDQEgFCgCJCARRw0BCyASIBNBwAByOwEAIA1BAWohDQsgCUEwaiEJIA9Bf2oiDw0ACwtBACEPAkAgC0UNAEEAIQRBACETAkACQCALKAIAIhFBAUgNACAGIAhBBnRqQTBqIQ9BACETA0AgCyATQQR0aiISQQhqKAIAIQkgA0EANgIoIANBtYCAgAA2AhggA0G2gICAADYCFCADQQE7ASQCQCAJRQ0AIANBEGogCRD/hYCAABogAy8BJA0AIBJBEGotAABBAnENAgJAIAktAAAiEkHxAEYNACASQacBRw0DIAkoAhwgDygCAEYNAQwDCyAJKAIMIhItAABBpwFHDQIgEigCHCAPKAIARw0CIAkgEi8BIDsBICASLgEgIhBBAEgNAEEAIRICQCAKKAIEIBBB//8DcUEMbGoiEC8BCiIUQYAEcUUNACAQKAIAQX9qIRIDQCASQQFqIhItAAANAAsCQCAUQQRxRQ0AA0AgEkEBaiISLQAADQALCyASQQFqIRILIAkoAgggEkGgxoGAACASGxCNgYCAAA0CCyATQQFqIhMgEUcNAAwCCwtBACEPIBMgEUcNAQsCQAJAIAUvASwiCUGAAXFFDQAgCUEJdkEBcUECciEEDAELIAlBBnZBAXEhBAsgESEPCwJAAkAgDCgCACANQRhsIA9BA3QiCWpB4ABqrRCwgYCAACIQDQAgDEHgiICAAEEAELOBgIAAQQchCQwBC0EAIRQgEEEANgJUIBAgBDYCUCAQIAw2AkwgECAONgJIIBAgECANQQJ0akHcAGoiCjYCBCAQIAogDUEMbGoiFTYCDCAQIBUgCWo2AhACQAJAIA4oAgwiBUEBTg0AQQAhFkEAIRMMAQsgDigCGCEJQQAhCEEAIRJBACETQQAhFgNAAkAgCUEKai8BACINQcAAcUUNACAJQRhqKAIAIQQgCiATQQxsaiIRIBI2AgggESAENgIAAkACQCAJQQxqLwEAIgZB//8AcSIEQQFHDQACQCANQRB0QRB1QQBIDQAgEEEBIBN0QQAgE0EgSBsgCHIiCDYCVAsgEUECOgAEDAELAkAgBEHAAEcNACARIAlBD2otAAA6AAQMAQsCQCAEQYADcUUNACARQQRqIRECQCAEQYACRw0AIBFBxwA6AAAMAgsgEUHIADoAAAwBCyARIAY6AAQgBEE8cUUNAAJAIAkoAgAoAhAiBi0AACINQbABRw0AIAYtAAIhDQsCQAJAIA1B/wFxIg1BigFGDQAgDUGxAUcNAiAGQRRqIQ0MAQsgBigCFEEcaiENCyANKAIAKAIAQQJIDQAgEUEEaiERQQEgE3RBACATQRBIGyAWciEWAkAgBEEERg0AIARBEEcNASARQQg6AAAMAQsgEUEgOgAACyATQQFqIRMLIAlBMGohCSAFIBJBAWoiEkcNAAsLIBAgEzYCAAJAIA9BAUgNACALQRBqIQlBACEUA0AgCUF4aigCACESIANBADYCKCADQbWAgIAANgIYIANBtoCAgAA2AhQgA0EBOwEkAkAgEkUNACADQRBqIBIQ/4WAgAAaIAMvASQNACAVIBRBA3RqIhMgEi4BIDYCACATIAktAABBAXE6AAQgFEEBaiEUCyAJQRBqIQkgD0F/aiIPDQALCyAQIBQ2AgggB0EcaiIJIAktAABB/gFxOgAAIAdBADsBLCAHQYAINgIoIAdBADsBEgJAIAwoAgAgByAQKAIAIhMQr4iAgABFDQAgDCgCACAQEMmIgIAAQQchCQwBCyAAIAFCf0EAIBAgFkH//wNxIhIgA0EQaiADQQxqEMqIgIAAIQkCQCADKAIMRQ0AIAAgAUJ/QQAgECASIANBEGpBABDKiICAACEJCwJAIAkNAEIAIRcgAygCECESAkAgBykDACABQn+FIhiDIhlCAFINAEEAIQkgEkUNAQtBACENAkAgEkUNACAAIAFCf0EBIBAgFkH//wNxIANBEGpBABDKiICAACIJDQEgBykDACAYgyIXUCENC0IAIQIgE0EBSCERIBZB//8DcSEFIA0hBAJAA0AgAiEaIBENASAQKAIEQQhqIQkgDigCGCEPQn8hAiATIRIDQCAPIAkoAgBBMGxqKQMgIBiDIhsgAiAbIAJUGyACIBsgGlYbIQIgCUEMaiEJIBJBf2oiEg0ACyACQn9RDQFBACEJAkAgAiAZUQ0AIAIgF1ENACAAIAEgAiABhEEAIBAgBSADQRBqQQAQyoiAgAAhCSAHKQMAIAFSDQBBASEEIA1BASADKAIQGyENCyAJRQ0ADAILC0EAIQkCQCAEDQAgACABIAFBACAQIBZB//8DcSADQRBqQQAQyoiAgAAhCSANQQEgAygCEBshDQsgCSANcg0AIAAgASABQQEgECAWQf//A3EgA0EQakEAEMqIgIAAIQkLAkAgECgCHEUNACAQKAIYEPSAgIAACyAMKAIAIBAQyYiAgAALIANBMGokgICAgAAgCQvFDgIVfwF+I4CAgIAAQdAAayICJICAgIAAIAJB//8DOwECIAAoAgAiAygCBCIEIAAoAggiBS0AECIGQQZ0aiIHQRhqIggoAgAhCSAAKAIEIQoCQAJAIAdBLWoiCy0AAEECcUUNACAHQcQAaigCACEMDAELAkAgCS0AHEGAAXFFDQAgCSgCCCEMDAELIAJBCGpBAEHIABDVioCAABogAkGBgAQ2ATogAiAJNgIUIAkvASghDCACQQM7AD8gAkEAOwEGIAJBBToAPiACIAw7ATggAiAJLwEmOwEEIAIgAkEEajYCECACIAJBAmo2AgwgAkEIaiEMIAstAABBAXENACACIAgoAgAoAgg2AhwLIAdBLGohDSAHQQhqIQ5BACEHAkAgACgCDA0AIAMvASxBoCBxDQAgAygCACgCAEEhai0AAEGAAXFFDQAgCy8AACIIQQNxDQAgCS0AHEGAAXENACAIQQhxDQAgCEHAAHENACANLQAAQRBxDQAgCigCDCEPIAooAhghCEEAIQdBACEQAkAgCS4BJiIRQQtIDQAgEa1C//8DgxCHg4CAAEFfaiEQCyAPQQFIDQAgCCAPQTBsaiESIBAgEWoiB0F2aiERIAdBHGohEyAJQR1qIRQDQEEAIQcCQCAFKQMIIAhBIGoiDykDAINCAFINAEEAIQcgCCAOQgAQroiAgABFDQAgBUEANgIgIAVBATYCLCAFQQE7ARggBSgCNCAINgIAAkACQCAJLQArQQJGDQAgEyEHIBQtAABBwABxRQ0BCyARIQcLIAVBKzsBFiAFIAdBACAHQRB0QRB1QQBKGzsBEiAFQYCAATYCKCAFIBBBEHRBEHVBKxD+h4CAADsBFCAFIA8pAwAgAYQ3AwAgACAFEMuIgIAAIQcLIAcNASAIQTBqIgggEkkNAAsLAkAgBw0AIAxFDQAgBCAGQQZ0aiIHQThqIRUgB0EwaiEWQQEhEANAAkACQCAMKAIkIgdFDQAgFigCACANLQAAIAogBxDMiICAAA0AQQAhBwwBC0EAIQcgDEE4ai0AAEEBcQ0AIAVBADoAESAFIAE3AwAgDCgCCC8BACERIAVBADsBHCAFQQA2AhggBUEANgIsIAVBADsBEiAFIAw2AiAgBSAROwEWQQEhBAJAIAwtADdBBHENACAAKAIAKAIIIhNFDQBBASEEIBMoAgAiCEEBSA0AIBYoAgAhFEEAIRIDQAJAIBMgEkEEdGpBCGooAgAiB0UNAAJAA0AgBygCBCIEQYDAIHFFDQECQAJAIARBgIAgcUUNACAHKAIUQQhqIQcMAQsgB0EMaiEHCyAHKAIAIgcNAAwCCwsCQCAHLQAAQacBRw0AIAcoAhwgFEcNAEEAIQQgBy4BICIPQQBIDQMgDC8BMiIGRQ0BIAwoAgQhBwNAIA9B//8DcSAHLwEARg0EIAdBAmohByAGQX9qIgZFDQIMAAsLIAwoAigiBEUNACAMLwEyIg9FDQAgBEEIaiEGQQAhBEEAIQgDQAJAIAwoAgQgBGovAQBB/v8DRw0AAkAgByAGKAIAIBQQxoiAgAANAEEAIQQMBQsgDC8BMiEPCyAEQQJqIQQgBkEQaiEGIAhBAWoiCCAPQf//A3FJDQALIBMoAgAhCAtBASEEIBJBAWoiEiAISA0ACwsCQAJAAkAgDC8ANyIHQQNxQQNHDQAgBUGAAjYCKCAFIBFBEGo7ARQgBUEAIBAgBBs6ABEgCiAFIBFBEHRBEHUQzYiAgAAMAQsCQAJAIAdBIHFFDQBCACEXQcAEIQcMAQtBwARBgAQgDCkDQCAVKQMAgyIXUBshBwsgBSAHNgIoIBAhBwJAIARFDQBBACEHIAktABxBgAFxDQAgDCgCJA0AIAstAABBAnENACAXQgBSDQIgDC0AN0EEcQ0CIAwuATAgCS4BKE4NAiADLQAsQQRxDQJBAC0A/9yCgABB/wFxRQ0CIAMoAgAoAgAtAFBBIHENAgsgBSAHOgARIAUgESAMLgEwQQ9sIAkuAShtakEBaiIHOwEUAkAgF1ANACARQRBqIQgCQCADKAJkQQFIDQAgFigCACESQQAhD0EIIQcCQANAIAMoAnAgB2oiBEF4aigCACASIAwQu4iAgABFDQECQCAELgEAIgZBAUgNAEFsQX8gBEEEai0AAEGCAXEbIQYLIAdBMGohByAGIAhqIQggD0EBaiIPIAMoAmRIDQALCyAFLwEUIQcLIAUgB0EQdEEQdSAIQRB0QRB1EP6HgIAAOwEUCyAKIAUgEUEQdEEQdRDNiICAACANLQAAQRBxRQ0AIAwoAihFDQAgBSAROwEWDAELIAAgBRDLiICAACEHIAUgETsBFiAHDQMLIABBADoAECAAIA4gDEEAEM6IgIAAIQcgAC0AEEEBRw0AIAkgCSgCHEGAAnI2AhwLIAstAABBAnENASAHDQEgEEEBaiEQIAwoAhQiDA0ACwsgAkHQAGokgICAgAAgBwuvCAIXfwF+I4CAgIAAQeAEayIDJICAgIAAIAAoAgAhBCAAKAIIIQUgACgCBCIGKAIYIQcgBigCDCEIQQAhCSADQfAAakEAQTgQ1YqAgAAaAkAgBCgCBCIEIAUtABAiCkEGdGoiC0Esai0AAEEQcQ0AIAhBAUgNACAHIAhBMGxqIQwgC0EwaigCACENIAVBGGohDiAEIApBBnRqQRhqIQ8gA0HwAGpBEGohECADQThqQRBqIREgA0EIaiESIANBOGpBCGohEyADQfAAakEIaiEUQQAhFQNAAkACQCAHQQ1qLQAAQQJxRQ0AIAUpAwggBygCGCIIKQOgA4NQDQAgCCgCDCEEIANBqAFqQQhqIABBCGopAgA3AwAgA0GoAWpBEGogAEEQaikCADcDACADIAApAgA3A6gBIAgoAhghFiADIANBOGo2ArQBAkACQCAEQQFODQBBACEJDAELIBYgBEEwbGohF0EAIQlBASEIA0ACQAJAAkAgFkENai0AAEEEcUUNACAWKAIYIQQMAQsgFigCFCANRw0BIAMgFjYC2AEgA0EBNgLUASADQQE2AswBIANBLDoAyAEgAyAGNgLEASADIAYoAgA2AsABIANBwAFqIQQLIANBADsBOCADIAQ2AqwBAkACQCAPKAIALQArQQFHDQAgA0GoAWogASACEI2IgIAAIQkMAQsgA0GoAWogARCOiICAACEJCwJAIAkNACADQagBaiABIAIQj4iAgAAhCQsCQCADLwE4IgQNAEEAIRUgA0EAOwFwDAMLAkACQCAIRQ0AIAMgBDsBcCAUIBMgBEEEdBDUioCAABoMAQsgAyADLwFwIhg7AQAgEiAUIBhBBHQQ1IqAgAAaIANBADsBcCAYRQ0AQQAhGUEBIQoDQCAKQf//A3EhCEEAIQoCQCAIRQ0AIAMgGUEEdGoiCEESai8BACELIAhBEGovAQAhFSAIQQhqKQMAIRpBACEEIBEhCANAIANB8ABqIAhBeGopAwAgGoQgFUEQdEEQdSAILgEAEP6HgIAAIAtBEHRBEHUgCEECai4BABD+h4CAABDPiICAACAIQRBqIQggBEEBaiIEIAMvATgiCkkNAAsLIBlBAWoiGSAYRw0ACwtBACEICyAWQTBqIhYgF0kNAAsgAy8BcCEVCyAFKAI0IAc2AgAgBUEBOwEsIAVBgMAANgIoIAVBADsBEiAFQQA6ABEgDkIANwMAIA5BCGpCADcDACAJDQEgFUH//wNxIgtFDQFBASEEIBAhCANAIAUgCC8BAEEBajsBFCAFIAhBAmovAQA7ARYgBSAIQXhqKQMANwMAIAAgBRDLiICAACIJDQIgCEEQaiEIIAQgC0khCiAEQQFqIQQgCg0ADAILC0EAIQkLIAdBMGoiByAMTw0BIAlFDQALCyADQeAEaiSAgICAACAJC0gBAn8CQCABKAI0IgIgAUE8aiIDRg0AIAAgAhDkgICAAAsgACABENCIgIAAIAFBAzsBMCABQQA7ASwgASADNgI0IAFBADYCKAvpEAMbfwJ+BH8jgICAgABBEGsiAiSAgICAAEEBQQVBCiAALQAwIgNBAkYbIANBAkkbIQQgACgCACIFKAIAIQZBACEHAkAgAUUNACAAKAIIIghFDQAgCCgCACEHCwJAIAYgByADQQJ0QSBqIARsakEBdKwQgYGAgAAiCUUNACAHQQF0IQogCSAEQQV0aiILQgA3AwAgC0EYakIANwMAIAtBEGpCADcDACALQQhqQgA3AwAgCUEYaiEIIANBAnQhDCAJIARBBnRqIQ0gBEEBdEEBciEOA0AgCCANNgIAIAhBIGohCCANIAxqIQ0gDkF/aiIOQQFLDQALAkACQCAHDQAgBSgCgAEiCEEwIAhBMEkbIQhBACENDAELIA1BACAKENWKgIAAGiAJIARBBXRqQX8gByADGzoAFiAFKAKAASIIQTAgCEEwSRshCAsgCSAEQQV0aiAIOwEQAkACQAJAIANFDQAgAUFOaiEPIAFBdmohECABQQpKIRFBACESQQAhE0EAIRRBACEVIAkhCEEBIRYDQCAIIRcCQAJAIBZBAU4NAEEAIRgMAQsgF0E0aiEZIBJBAnQhGkEAIRtBACEYIAshDANAAkAgACgCQCIIRQ0AA0AgDCwAFiEcIAJCADcDCAJAIAgpAwAgDCkDACIdQn+Fg0IAUg0AIAgpAwgiHiAdg0IAUg0AIAwuARAhDgJAIAhBKWotAABBwABxRQ0AIA5BA0gNAQsgCC4BEiAOIAgvARRqQRB0QRB1EP6HgIAAIAwuARQQ/oeAgAAhHyAILwEWIA5qIQ4CQAJAIBxBf0oNACAAIAAoAgggDCAALwEsIBJB//8DcSAIIAJBCGoQrIiAgAAhHAwBCyACIAwpAwg3AwgLIA5BEHQhDgJAAkAgHEEASA0AIAcgHEwNAAJAIA0gHEEBdGoiIC8BACIKDQAgByAca0HkAGwgB22sEIeDgIAAISECQAJAIAAvASwiIkGAgAFxRQ0AIAAuAS4iCiABSA0BCyAQIAEgIkGAAnFBCHYbIAEgERshCgtBACEiAkAgCkEQdEEQdUELSA0AIAqtQv//A4MQh4OAgABBX2ohIgsgICAPICFqICJqIgo7AQALIB8gCkEQdEEQdRD+h4CAAEEFaiEgDAELIB8hICAfQX5qIR8LIA5BEHUhIgJAAkACQCAYQQFIDQAgHiAdhCEdIBghCiAXIQ4DQAJAIA4pAwAgHVINACAOQRZqLQAAIBxzQRh0QRh1QX9KDQMLIA5BIGohDiAKQX9qIgoNAAsLIBghDgJAIBggBEgiCg0AICBBEHRBEHUgFEEQdEEQdUoNAyATIQ4gIEH//wNxIBRB//8DcUcNACATIQ4gH0EQdEEQdSAVQRB0QRB1Tg0DCyAXIA5BBXRqIQ4gGCAKaiEYDAELIA5BEmouAQAiCiAgQRB0QRB1SA0BIApB//8DcSAgQf//A3FHDQAgDkEQai4BACIKICJIDQEgCiAiRw0AIA5BFGouAQAgH0EQdEEQdUwNAQsgDiAIKQMIIAwpAwCENwMAIA4gHDoAFiAOIB87ARQgDiAgOwESIA4gIjsBECAOIAIpAwg3AwggDigCGCAMKAIYIBoQ1IqAgAAaIA4oAhggGmogCDYCACAYIARIDQAgFy8BECEVIBcvARIhFEEAIRMgBEECSQ0AQQAhE0EBIQogGSEOA0ACQAJAAkAgDkF+ai4BACIcIBRBEHRBEHVMDQAgDi8BACEfDAELIBxB//8DcSAUQf//A3FHDQEgDi4BACIfIBVBEHRBEHVMDQELIB8hFSAcIRQgCiETCyAOQSBqIQ4gBCAKQQFqIgpHDQALCyAIKAI4IggNAAsLIAxBIGohDCAbQQFqIhsgFkcNAAsLIAshCCAXIQsgGCEWIBJBAWoiEiADRw0ACyAYRQ0BAkAgGEECSA0AIBdBIGohCCAYQX9qIQ4DQCAIIBcgFy4BEiAIQRJqLgEAShshFyAIQSBqIQggDkF/aiIODQALCwJAIANFDQAgAEHIBmohCCAAKAIEIRwgFygCGCEOIAMhDANAIAggDigCACIKNgIAIAhBbGogCi0AECIKOgAAIAhBvH9qIBwgCkEGdGpBMGooAgA2AgAgCEHYAGohCCAOQQRqIQ4gDEF/aiIMDQALCyAXIQsLAkAgAC8BLEGAA3FBgAJHDQAgAUUNACAALQAzQf8BcQ0AIAAgACgCDCALQYABIANBf2oiCEH//wNxIAsoAhggCEECdGooAgAgAkEIahCsiICAACAAKAIMKAIARw0AIABBAjoAMwsgACAALQA0IgpB+wFxOgA0AkAgACgCCCIIRQ0AIAAgCywAFiIMOgAxAkACQCAALwEsIg5BgAFxRQ0AIAgoAgAgDEcNASAAQQI6ADMMAQsgACALKQMINwNQAkAgDEEASg0AIABBADoAMSADRQ0BIAsoAhggA0F/aiIKQQJ0aigCACIcKAIoIgxBgCBxDQEgDEGEAnFBhAJGDQEgAkIANwMIAkAgACAIIAtBgBAgCkH//wNxIBwgAkEIahCsiICAACAAKAIIIggoAgBHDQAgACACKQMINwNQIAAgAC0ANEEEcjoANAsgAC8BLCEODAELIANFDQAgDEEBRw0AIA5BA3FFDQAgACAKQQRyOgA0CyAOQYAEcUUNACAIKAIAIAAsADFHDQAgA0UNACACQgA3AwggACAIIAtBACADQX9qIg5B//8DcSALKAIYIA5BAnRqKAIAIAJBCGoQrIiAgAAgACgCCCgCAEcNACAAIAIpAwg3A1AgACAALQA0QQhyOgA0CyAAIAsvARA7ATYMAQsgBUGswYCAAEEAELOBgIAACyAGIAkQ5ICAgAALIAJBEGokgICAgAALxQMHAX8BfgF/AX4GfwF+A38gAEH4A2oiASAAKAIMEK2IgIAAIQICQCAAKAIIIgNFDQAgASADEK2IgIAAIAKEIQILQn8hBAJAIAAtADAiBUECSQ0AIABBLWohBkJ/IQQgBSEHA0ACQCAAKAIEIAAgByIIQX9qIgdB2ABsaiIJQcgGaigCACIBLQAQQQZ0aiIKQSxqLQAAQRhxQQhHDQACQCAGLQAAQQFxDQAgAUEpai0AAEEQcUUNAQsgASkDCCILIAKDQgBSDQACQCAAKAJkIgFBAUgiDA0AIAAoAnAiAyABQTBsaiENIApBMGohDiADIQEDQAJAIAFBKGopAwAgC4NQDQAgASgCACIKLQAEQQFxRQ0DIAooAiQgDigCAEcNAwsgAUEwaiIBIA1JDQALIAwNAANAAkAgA0EoaikDACALg1ANACADQQpqIgEgAS8BAEEEcjsBAAsgA0EwaiIDIA1JDQALCyALQn+FIQsCQCAIIAVB/wFxIgFGDQAgCUGABmogACAIQdgAbGpBgAZqIAEgCGtB2ABsENCKgIAAGiAALQAwIQULIAQgC4MhBCAAIAVBf2oiBToAMAsgCEECSg0ACwsgBAvDAQEHfwJAIAAtADAiAUECSQ0AIABBoAdqIQIgAUF/aiEDIABByAZqKAIALwEWIQQDQAJAIAIoAgAiASgCKCIFQYGAgARxQYGAgARHDQAgBUGABnFFDQAgACgCBCABLQAQQQZ0akEYaigCACIGIAYoAhwiB0GAAnI2AhwgBEEQdEEQdSAGLgEmTA0AIAdBEHFFDQAgASAFQb///31xQYCAgAJyNgIoCyACQdgAaiECIAEvARYgBGohBCADQX9qIgMNAAsLC4cQBwl/AX4CfwF+An8CfgJ/I4CAgIAAQRBrIgUkgICAgABBACEGIAAoAggiB0EOQQBBAEEAELeCgIAAIQggASgCGCIJIAEoAgwiCkEwbGohCyAEKAJIIQwgAigCECENAkACQAJAIApBAU4NAEIAIQ5BACEKDAELQQAhCkIAIQ5BACEPQQAhBgNAAkAgCUEKai0AAEECcQ0AIAkoAgAiECACEIKIgIAARQ0AAkACQCAQDQBBACEQDAELIAAoAgAgEEEAQQAQgYaAgAAhEAsgACAGIBAQwYWAgAAhBgsCQCAJIAIgAxCuiICAAEUNAEKAgICAgICAgIB/QgEgCUEYaigCACIQrYYgEEE/ShshEQJAIA9B/wFxDQAgDSgCACEPIAUgDSgCBCAQQQxsaigCADYCBCAFIA82AgBBnAJBi5SBgAAgBRDegICAAAtBASEPIBEgDoNCAFINACAAKAIAIAwgCkEBaiIQEK+IgIAADQMgDCgCNCAKQQJ0aiAJNgIAIBEgDoQhDiAQIQoLIAlBMGoiCSALSQ0ACwsgDCAKOwEYIAwgCjsBLCAMQcGEATYCKCANLgEiIhJBPyASQT9IGyETIAIpAzAiFCAOQn+FQoCAgICAgICAgH+EgyEOAkAgEkEBSA0AIBNBASATQQFKG60hFUIAIREDQCAKIA4gEYinQQFxaiEKIBUgEUIBfCIRUg0ACwtBACEJIAAoAgAgCiASQUJqQQEgFEIAUxtqIhZBEHRBEHVBACAFQQxqEIuGgIAAIhBFDQAgDEEgaiAQNgIAIBAgDTYCDCAQQZiLgIAANgIAAkAgASgCGCIKIAtPDQBBACEJQgAhEQNAAkAgCiACIAMQroiAgABFDQBCgICAgICAgICAf0IBIApBGGooAgAiD62GIA9BP0obIhUgEYNCAFINACAQKAIEIAlBAXRqIA87AQACQAJAIAAgCigCACIPQRBBDCAPKAIEQYAIcSIXG2ooAgAgD0EMQRAgFxtqKAIAENqCgIAAIg8NAEGgxoGAACEPDAELIA8oAgAhDwsgFSARhCERIBAoAiAgCUECdGogDzYCACAJQQFqIQkLIApBMGoiCiALSQ0ACwsCQCASQQFIDQAgE0EBIBNBAUobrSEDQQAhCkIAIREDQAJAIA4gEYhCAYNQDQAgECgCBCAJQQF0aiAKOwEAIBAoAiAgCUECdGpBoMaBgAA2AgAgCUEBaiEJCyAKQQFqIQogAyARQgF8IhFSDQALCwJAIAIpAzBCf1UNACANLgEiQcAASA0AIAlBAnQhAiAJQQF0IQtBACEKA0AgECgCBCALaiAKQT9qOwEAIBAoAiAgAmpBoMaBgAA2AgAgAkEEaiECIAtBAmohCyAKQcAAaiEPIApBAWoiFyEKIA8gDS4BIkgNAAsgCSAXaiEJCyAEIAAoAigiCjYCCCAQKAIEIAlBAXRqQf//AzsBACAQKAIgIAlBAnRqQaDGgYAANgIAIAAgCkEBajYCKCAHQfQAIAogFkEAELeCgIAAGiAAIBAQ2oaAgAACQCAAKAIAQdIAai0AAEEIcQ0AIAQgACgCLEEBaiIKNgIsIAAgCjYCLCAHQc0AQZDOACAKQQAQt4KAgAAaCwJAAkAgASgCACgCBCIBIAQtADQiEkEGdGoiCkEtaiILLQAAQSBxRQ0AIApBJGooAgAhAiAHQccAQQBBAEEAELeCgIAAIQ0gB0EKIAJBACAKQSBqKAIAELeCgIAAGiAHQQsgAkEAQQAQt4KAgAAhAgwBC0EAIQ0gB0EjIAQoAgRBAEEAELeCgIAAIQILAkACQCAGDQBBACEPDAELIAAgACgCOEF/aiIPNgI4IAAgBiAPQRAQyIaAgAAgDCAMKAIoQYCACHI2AigLAkACQCAALQATIgoNACAAIAAoAixBAWoiCjYCLAwBCyAAIApBf2oiCjoAEyAAIApB/wFxQQJ0akGQAWooAgAhCgsgACAQIAQoAgQgCkEAQQBBAEEAEIiHgIAAIRACQCAEKAIsIhdFDQAgDC8BGCEMIAdBtAEgF0EAIBAQt4KAgAAhFyAHKAIALQBXDQAgBygCaCAXQRRsaiIXIAw2AhAgF0H9AToAAQsgB0GKASAEKAIIIApBABC3goCAABoCQCAHKAJsIgxBAUgNACAMQRRsIAcoAmhqQW5qQRA7AQALAkAgBkUNACAHIA8Qt4aAgAALAkACQCALLQAAQSBxRQ0AAkAgDUF/Sg0AIAcoAmxBf2ohDQsgECAJaiEQQfyKg4AAIQkCQCAHKAIALQBXDQAgBygCaCANQRRsaiEJCyAJIBA2AgggACACIAQoAgQgASASQQZ0akEoaigCACAEKAIIEKSIgIAAIAdBCEEAIAJBABC3goCAABogCyALLwAAQd//A3E7AAAgBygCbCEJDAELIAdBJiAEKAIEIAJBAWpBABC3goCAABogBygCbCIJQQFIDQAgCUEUbCAHKAJoakFuakEDOwEAC0H8ioOAACEQAkAgBygCAC0AVyILDQAgBygCaCAJQX9qIAIgAkEASBtBFGxqIRALIBAgCTYCCAJAIApFDQAgAC0AEyICQQdLDQAgACACQQJ0akGQAWogCjYCACAAIAJBAWo6ABMgBygCbCEJC0H8ioOAACEKAkAgCw0AIAcoAmggCUF/aiAIIAhBAEgbQRRsaiEKCyAKIAk2AggLAkAgBkUNACAAKAIAIAYQ5YCAgAALIAVBEGokgICAgAALyA0DDn8BfgJ/I4CAgIAAQbABayIEJICAgIAAIABB2AZqIQUgACgCACIGQSBqIQcgAigCSCEIIAYoAggiCUEOQQBBAEEAELeCgIAAIQogBigCACELA0AgBigCCCEMIAAoAgQhDSACLQA0IQ4gBEGAAjsBrAEgBEEANgKoASAEQuSAgICAwLLNOzcDoAEgBCALNgKYASAEIA0gDkEGdGoiDkEIajYCICAEIARBMGo2ApwBIARBmAFqQceggYAAIARBIGoQ/YCAgAACQAJAIAIoAkgiDUEpai0AAEEBcUUNAAJAIA5BGGooAgAiDS4BICIOQQBIDQAgBCANKAIEIA5B//8DcUEMbGooAgA2AhAgBEGYAWpBoYWBgAAgBEEQahD9gICAAAwCCyAEQZgBakGmhYGAAEEAEP2AgIAADAELIA0vAS4iDiANLwEYTw0AIA5BAXQhDwNAQa6FgYAAIRACQAJAAkAgDSgCICILKAIEIA9qLwEAIhFBgoB8ag4CAgABC0HJ4ICAACEQDAELIAsoAgwoAgQgEUEQdEEQdUEMbGooAgAhEAsCQCAOIA0vAS5NDQACQCAEKAKoASILQQVqIhEgBCgCoAFJDQAgBEGYAWpBlrKBgABBBRD8gICAAAwBCyAEIBE2AqgBIAQoApwBIAtqIgtBACgAlrKBgAA2AAAgC0EEakEALQCasoGAADoAAAsgBCAQNgIAIARBmAFqQaGFgYAAIAQQ/YCAgAAgD0ECaiEPIA5BAWoiDiANLwEYSQ0ACwsCQAJAIAQoAqgBIg1BAWoiDiAEKAKgAUkNACAEQZgBakHFoIGAAEEBEPyAgIAADAELIAQgDjYCqAEgBCgCnAEgDWpBKToAAAsgBEGYAWoQh4GAgAAhDSAMIAxBuQEgDCgCbCAGKALUAUEAELeCgIAAIA1BehDmhYCAACAGIAYoAjhBf2oiETYCOCAGIAYoAixBAWoiDTYCLCACIA02AiwgAigCBCEQIAlBzQAgACgCBCACLQA0QQZ0aiIOQRhqKAIALgEmEIiDgIAAIhJCgK3iBCASQoCt4gRUGyISQpDOACASQpDOAFYbpyANQQAQt4KAgAAaIAlBIyAQQQBBABC3goCAACEMAkAgACgCZCILQQFIDQAgDkEIaiEPIAAoAnAiDSALQTBsaiEOA0ACQCANQQpqLQAAQQJxDQAgDSgCACAPEIKIgIAARQ0AIAYgDSgCACARQRAQyIaAgAALIA1BMGoiDSAOSQ0ACwsCQAJAIAhBKWotAABBAXFFDQACQAJAIAYtABMiDQ0AIAYgBigCLEEBaiINNgIsDAELIAYgDUF/aiINOgATIAYgDUH/AXFBAnRqQZABaigCACENCyAJQYcBIBAgDUEAELeCgIAAGiAJQbQBIAIoAixBACANELeCgIAAIQ4CQCAJKAIALQBXDQAgCSgCaCAOQRRsaiIOQQE2AhAgDkH9AToAAQsgDUUNASAGLQATIg5BB0sNASAGIA5BAWo6ABMgBiAOQQJ0akGQAWogDTYCAAwBCyAIQSBqKAIAIQ8gBiAILwEYIhMQyYaAgAAhFAJAIBNFDQAgE0EBdCELQQAhDSAUIQ4DQCAJIA8oAgwgECAPKAIEIA1qLgEAIA4Qy4aAgAAgDkEBaiEOIAsgDUECaiINRw0ACwsgCUG0ASACKAIsQQAgFBC3goCAACENAkAgCSgCAC0AVw0AIAkoAmggDUEUbGoiDSATNgIQIA1B/QE6AAELAkACQCATQQFHDQAgFEUNAiAGLQATIg1BB0sNAiAGIA1BAWo6ABMgBiANQQJ0akGQAWohDQwBCyAGKAIcIBNODQEgBiATNgIcIAchDQsgDSAUNgIACyAJIBEQt4aAgAAgCUEmIAIoAgQgDEEBakEAELeCgIAAGiAJKAJsIRBB/IqDgAAhDQJAIAkoAgAtAFciEQ0AIAkoAmggEEF/aiAMIAxBAEgbQRRsaiENCyANIBA2AgggCCAIKAIoQf///31xNgIoAkAgBigCACILQdIAai0AAEEQcQ0AAkAgAUEBaiINIAAtADAiDk4NACAFIAFB2ABsaiECIAAoAgQhDwNAAkAgDyACQTRqLQAAQQZ0akEsai0AAEHIAHENACACQcgAaigCACIIRQ0AIAgpAwAgA4NCAFINACAIKAIoQYSAgAJxQYCAgAJGDQILIAJB2ABqIQIgDiANQQFqIg1GDQIMAAsLIA0iASAOSA0BCwtB/IqDgAAhDQJAIBENACAJKAJoIBBBf2ogCiAKQQBIG0EUbGohDQsgDSAQNgIIIARBsAFqJICAgIAAC+sKAQp/I4CAgIAAQfABayIEJICAgIAAAkAgACgCbCIFIAAgBRstAMcBQQJHDQAgAigCSCIGKAIoIgVBgMAAcQ0AIANBIHENACABIAItADQiB0EGdGpBCGohCCAAKAIAIQlBASECAkAgBUEwcSIKDQACQCAFQYAIcQ0AIAYvARgNAQsgA0EDcUEARyECCyAAKAIIIQsgBEGAAjsB7AEgBEEANgLoASAEQuSAgICAwLLNOzcD4AEgBCAJNgLYASAEIAg2AmQgBEGwg4GAAEH0gYGAACACGzYCYCAEIARB8ABqNgLcASAEQdgBakGu/ICAACAEQeAAahD9gICAAAJAAkAgBUGACnENACAGQSBqKAIAIQgCQAJAAkAgASAHQQZ0akEYaigCAC0AHEGAAXFFDQAgCC8AN0EDcUECRg0BC0HA94CAACEDIAVBgIAIcQ0BQeH3gIAAIQMgBUGAgAFxDQFBwLGAgABBybGAgAAgBUHAAHEbIQMMAQtB/vaAgAAhAyACRQ0CCwJAAkAgBCgC6AEiBUEHaiICIAQoAuABSQ0AIARB2AFqQfixgYAAQQcQ/ICAgAAMAQsgBCACNgLoASAEKALcASAFaiIFQQAoAPixgYAANgAAIAVBA2pBACgA+7GBgAA2AAALIAQgCCgCADYCECAEQdgBaiADIARBEGoQ/YCAgAAgBi8BLiEMIAYoAiAhCAJAIAYvARgiCg0AIAYtAChBMHFFDQILAkACQCAEKALoASIFQQJqIgIgBCgC4AFJDQAgBEHYAWpB2aCBgABBAhD8gICAAAwBCyAEIAI2AugBIAQoAtwBIAVqQaDQADsAAAsCQCAKRQ0AQQAhAkEAIQUDQEGuhYGAACEDAkACQAJAIAgoAgQgAmovAQAiCUGCgHxqDgICAAELQcnggIAAIQMMAQsgCCgCDCgCBCAJQRB0QRB1QQxsaigCACEDCwJAIAVFDQACQCAEKALoASIJQQVqIg0gBCgC4AFJDQAgBEHYAWpBlrKBgABBBRD8gICAAAwBCyAEIA02AugBIAQoAtwBIAlqIglBACgAlrKBgAA2AAAgCUEEakEALQCasoGAADoAAAsgBCADNgIAIARB2AFqQaWUgYAAQaGFgYAAIAUgDEkbIAQQ/YCAgAAgAkECaiECIAogBUEBaiIFRw0ACwsgCiECAkAgBigCKCIFQSBxRQ0AIARB2AFqIAggBi8BGiAKIApBuoWBgAAQsIiAgAAgBigCKCEFQQEhAgsCQCAFQRBxRQ0AIARB2AFqIAggBkEcai8BACAKIAJBvIWBgAAQsIiAgAALAkAgBCgC6AEiBUEBaiICIAQoAuABSQ0AIARB2AFqQcWggYAAQQEQ/ICAgAAMAgsgBCACNgLoASAEKALcASAFakEpOgAADAELAkAgBUGAAnFFDQAgBUEPcUUNACAEQcnggIAANgJQIARB2AFqQeusgIAAIARB0ABqEP2AgIAAQT0hAgJAIAVBBXENAAJAIApBMEcNACAEQcnggIAANgJAIARB2AFqQaGygIAAIARBwABqEP2AgIAAQTwhAgwBC0E+QTwgBUEgcRshAgsgBCACNgIwIARB2AFqQeiZgYAAIARBMGoQ/YCAgAAMAQsgBUGACHFFDQAgBigCGCEFIAQgBkEgaigCADYCJCAEIAU2AiAgBEHYAWpBvauAgAAgBEEgahD9gICAAAsCQCABIAdBBnRqQSxqLQAAQQhxRQ0AIARB2AFqQciBgYAAQQAQ/YCAgAALIARB2AFqEIeBgIAAIQUgCyALQbkBIAsoAmwgACgC1AFBABC3goCAACAFQXoQ5oWAgAALIARB8AFqJICAgIAAC6BHBgF/AX4GfwF+F38BfiOAgICAAEHAAGsiBiSAgICAAEIBIQcCQCACQYAEaigCACACKAIEIgggBC0ANCIJQQZ0aiIKQTBqKAIAIgtGDQBCACEHIAJB/ANqKAIAIgxBAkgNACAMQX9qIQ0gAkGEBGohDEIBIQ4DQAJAIAwoAgAgC0cNAEIBIA6GIQcMAgsgDEEEaiEMIA5CAXwhDiANQX9qIg0NAAsLIAQoAkghDyAAKAIAIRAgBCAHQn+FIAWDNwNQIAAgACgCOCIMQX5qIhE2AjggBCAMQX9qIhI2AhAgBCASNgIMIAQgETYCGCACKQNQIQ4CQCAJRQ0AIAggCUEGdGpBLGotAABBCHFFDQAgBCAAKAIsQQFqIgw2AgAgACAMNgIsIAFBxwBBACAMQQAQt4KAgAAaCyADIQ0CQCADQQFIDQAgA0HYAGwgAmpBsAZqIQwgAyENA0AgDEFQaigCAA0BIAwoAgANASAMQah/aiEMIA1BAUohEyANQX9qIQ0gEw0AC0EAIQ0LIAJB2ABqIRQCQAJAAkAgCCAJQQZ0aiIMQS1qLwAAIhNBIHFFDQBBACEVIAFBCiAMQSRqKAIAIg1BACAMQSBqKAIAELeCgIAAGiABQQsgDSASQQAQt4KAgAAhDCAEQQg6ADUgBCAMNgI8DAELIA4gA62IpyIWQQFxIRcCQAJAIA8oAigiDEGACHFFDQAgACAPLwEsIgNBAmoQyYaAgAAhGCAEKAIMIRkCQCADRQ0AIBhBAmohCkEAIQ1BACEMA0ACQCAPKAI0IA1qKAIAIhNFDQAgCiAMaiESAkAgEy0ADEEBcUUNAAJAIA8oAiRBASAMdEEAIAxBIEkbcUUNACAAIAAoAigiFkEBajYCKCAAIAAoAixBAWoiGjYCLCAAIBMoAgAgFhDKh4CAACABQa4BIBYgEiAaELeCgIAAGgwCCyAAIBMgBCAMIBcgEhCxiICAABogBCgCECEZDAELIAAgEygCACgCECASQQEQsoiAgAAgEy0AD0HKAEcNACAPLQAcQQJxRQ0AIAFBxwBBACACKAIUKAIMQQAQt4KAgAAaCyANQQRqIQ0gAyAMQQFqIgxHDQALC0EAIRUgAUHHACAPKAIYIBhBABC3goCAABogAUHHACADIBhBAWpBABC3goCAABogD0EcaiIMLQAAIQ0gD0EgaigCACETIAEgAUEGIAsgGSAYELeCgIAAIBNBekF/IA1BAXEbEOaFgIAAIAwgDC0AAEH+AXE6AAACQCAQLQBXRQ0AIA9BADYCIAsgBCALNgI4IAQgASgCbDYCPCAEQbh/QT4gAi0AMhs6ADUgA0UNAiAYQQJqIRdBACEMA0AgDygCNCAMQQJ0aigCACENAkACQCAMQQ9LDQAgDy8BHiAMdkEBcUUNACAEIA0Qs4iAgAAMAQsgDS0ADEEBcUUNACAPKAIkQQEgDHRBACAMQSBJG3ENACAQLQBXDQACQCAEKAJAIgpBAUgNACAMIBdqIRUgBCgCREEEaiESIAEoAgAtAFchGgNAAkAgEigCACIWQX9KDQAgASgCbEF/aiEWC0H8ioOAACETAkAgGkH/AXENACABKAJoIBZBFGxqIRMLAkACQAJAIBMtAAAiFkGHAUYNACAWQd4ARw0CIBMoAgwgFUcNAiATKAIIIRJB3gAhCiAVIRYMAQsgEygCCCAVRw0BIBMoAgwhFkGHASEKIBUhEgsgASAKIBMoAgQgEiAWELeCgIAAGgwCCyASQRRqIRIgCkF/aiIKDQALCyAAQTVBAEEAEJaFgIAAIRMCQAJAIBAtAFcNACANKAIAKAIMIRICQCANQRxqKAIAIg1BAUgNACANQQR0IBIoAhRqQXhqKAIAIRILIBMgEjYCDCAGQgA3AwggEyAQQbABIAZBCGpBABCqhYCAACINNgIQAkAgDUUNACANIAwgF2o2AhwgACATIAQoAhhBEBDIhoCAAAsgE0EANgIMDAELIBNFDQELIBAgExDlgICAAAsgDEEBaiIMIANHDQAMAgsLIAIgDUHYAGxqQYwGaigCACENAkAgDEGAAnFFDQAgDEEFcUUNACAAIAAoAiwiE0EBaiIMNgIsIAAgDygCNCgCACAEQQAgFyAMELGIgIAAIQ0CQCAMIBNJDQAgDSAMRg0AIAAtABMiD0EHSw0AIAAgD0EBajoAEyAAIA9BAnRqQZABaiAMNgIACyAEKAIQIQwCQCAEKAIsIg9FDQAgAUE/IA8gDCANELeCgIAAIQ8CQCABKAIALQBXDQAgASgCaCAPQRRsaiIPQQE2AhAgD0H9AToAAQsgACACIAMgDCAFELSIgIAACyABQR0gCyAMIA0Qt4KAgAAaIARBuAE6ADUMAQsCQAJAAkACQCAMQYICcUGCAkcNAEEAIRNBACEDQQAhCgJAIAxBIHFFDQAgDygCNCgCACEDQQEhCgsCQCAMQRBxRQ0AIA8oAjQgCkECdGooAgAhEwsgAyATIBcbIQwCQAJAIBMgAyAXGyIPRQ0AAkAgDygCACIDKAIQIg0tAAAiE0GwAUcNACANLQACIRMLAkACQAJAAkAgE0H/AXEiE0GKAUYNACATQbEBRw0CIA1BFGohEwwBCyANKAIUQRxqIRMLIBMoAgAoAgBBAkgNAAJAAkAgAC0AEyIPDQAgACAAKAIsQQFqIg82AiwMAQsgACAPQX9qIg86ABMgACAPQf8BcUECdGpBkAFqKAIAIQ8LIAAgDSAPQQEQsoiAgAAgAy0AAEEBakECcUEBciENIA8hEwwBCyAAIA0gBkEIahCph4CAACETIAQgDxCziICAACADLQAAQUpqIQ0gBigCCCEPCyABIA1BsMiCgABqLQAAIAsgEiATELeCgIAAGiAPRQ0BIAAtABMiDUEHSw0BIAAgDUEBajoAEyAAIA1BAnRqQZABaiAPNgIADAELIAFBH0EjIBcbIAsgDUEAELeCgIAAGgsgDEUNASAAIAAoAixBAWoiEzYCLCAAIAwoAgAiAygCECATQQEQsoiAgAAgAygCECIPLQAAIg0hCgJAIA1BsAFHDQAgDy0AAiEKCwJAAkACQAJAAkAgCkH/AXEiCkGKAUYNACAKQbEBRw0CIA9BFGohCgwBCyAPKAIUQRxqIQoLIAooAgAoAgBBAUoNAQsCQCADLQAAQUpqDgMAAQABC0E3QTkgFxshAwwBC0E4QTYgFxshAwsCQCANQbABRw0AIA8tAAIhDQsCQAJAAkACQCANQf8BcSINQYoBRg0AIA1BsQFHDQIgD0EUaiENDAELIA8oAhRBHGohDQsgDSgCACgCAEEBSg0BCyAEIAwQs4iAgAALIAQgCzYCOCAEIAEoAmw2AjwgBEElQSYgFxs6ADUgACAAKAIsQQFqIgw2AixBACEVIAFBhwEgCyAMQQAQt4KAgAAaIAEgAyATIBIgDBC3goCAABogASgCbCIMQQFIDQUgDEEUbCABKAJoakFuakHTADsBAAwFCwJAIAxBgARxRQ0AIA9BHGohEyAPQRpqLwEAIRsgD0EgaiESQQAhGUEAIRVBACEcIA8vARgiDSEaAkAgDEEgcUUNACANQQFqIRogDygCNCANQQJ0aigCACEcIBshFQsgEy8BACEYIBIoAgAhCgJAAkAgDEEQcQ0AQQAhEgwBCyAVIBggFSAYSxshFSAPKAI0IBpBAnRqKAIAIRJBACEZIBwNAEEAIRkCQAJAIAooAgQgDUEBdGovAQAiE0EQdEEQdSIaQQBIDQAgCigCDCgCBCATQQxsai0ABEEPcUUNAQwCCyAaQX5HDQELQQEhGQsgBCgCCCEaQQAhHUEAIRMCQCAMQbCAIHFBgIAgRw0AQQEhGSAEIAAoAixBAWoiEzYCJCAAIBM2AiwCQCAEKAIARQ0AIAFBxwBBACATQQAQt4KAgAAaCyAEIAAoAjhBf2oiDDYCKCAAIAw2AjhBASEVCyANIAovATRPDQJBACEdIBZBAXEgCigCHCANai0AAEEAR0YNAiAbQf8BcSEeQQAhHyAZIR0gHCEWDAMLAkAgDEGAwABxRQ0AIAAgACgCKCIeQQFqNgIoIAAgACgCLEEBaiIbNgIsIAAgACgCOEF/aiIgNgI4IA8oAjQoAgAiFygCGCETIAQgGzYCOCAEQcMAOgA1IAggCUEGdGpBGGooAgAhEgJAAkAgAi0AMCIPQQJJDQAgECAPIANrIgxBBnRBCHKtEM2CgIAAIhhFDQggGCAMQf8BcSINNgIAIBggDTYCBCAYQQhqIApBCGpBwAAQ1IqAgAAaIAxBAkgNASACKAIEIQogBEGMAWohDCAYQcgAaiENIANBf3MgD2ohDwNAIAwtAAAhAyAMQdgAaiEMIA0gCiADQQZ0akEIakHAABDUioCAAEHAAGohDSAPQX9qIg8NAAwCCwsgAigCBCEYC0EAIRVBACEhQQAhHQJAIAItACxBEHENAAJAAkAgEi0AHEGAAXENACAAIAAoAixBAWoiITYCLCABQcsAQQAgIUEAELeCgIAAGgwBC0EAIQ0CQCASKAIIIgxFDQADQAJAIAwvADdBA3FBAkcNACAMIQ0MAgsgDCgCFCIMDQALQQAhDQsgACAAKAIoIiFBAWo2AiggAUH2ACAhIA0vATJBABC3goCAABogACANENqGgIAACyAAIAAoAixBAWoiHTYCLAsgAUHHAEEAIBtBABC3goCAACEiAkAgAkHkAGooAgAiA0ECSA0AQQAhDEEAIQ1BACEKA0ACQCACKAJwIAxqIg8gF0YNACAPQQpqLwEAQYaAAnENACAPQQxqLwEAQf//AHFFDQAgDygCACIPQQZqLQAAQcAAcQ0AIAAgCiAQIA9BAEEAEIGGgIAAEMGFgIAAIQogAigCZCEDCyAMQTBqIQwgDUEBaiINIANIDQALAkAgCg0AQQAhFQwBCyAAQayABEEAIAoQloWAgAAhFQtBACEcIABBAUGa/oCAAEEAEK+GgIAAAkACQCATKAIMQQBKDQAgABDThoCAACAEQQA2AkAMAQsgAEEgaiEjQQAhDEEAIRxBACEZA0ACQAJAIBMoAhggDEEwbGoiDSgCFCALRg0AIA1BDWotAABBBHFFDQELAkACQCANKAIAIg1FDQAgECANQQBBABCBhoCAACEDIBAtAFdFDQEgA0UNAiAQIAMQ5YCAgAAMAgsgEC0AVw0BQQAhAwsgAyENAkAgFUUNACAVIAM2AgwgFSENCyAGIAxBAWo2AgAgAEEBQeHygIAAIAYQr4aAgAACQAJAIAAgGCANQQBBAEEAQSAgHhC0hoCAACIKDQAgGSENDAELIAAgGCAKQYAGakEAEJaIgIAAAkACQCACLQAsQRBxRQ0AIAFBCSAbICBBABC3goCAABoMAQtBfyAMIAwgEygCDEF/akYbIR8CQAJAIBItABxBgAFxDQAgAUGHASALIB1BABC3goCAABogAUEuICFBACAdELeCgIAAIQ0gASgCAC0AVw0BIAEoAmggDUEUbGoiDyAfNgIQIA9B/QE6AAEMAQtBACEWAkAgEigCCCINRQ0AA0ACQCANLwA3QQNxQQJHDQAgDSEWDAILIA0oAhQiDQ0ACwsgACAWLwEyIiQQyYaAgAAhJQJAICRFDQAgJEEBdCEaQQAhDSAlIQ8DQCABIBIgCyAWKAIEIA1qLgEAIA8Qy4aAgAAgD0EBaiEPIBogDUECaiINRw0ACwsCQAJAAkAgHw0AQQAhDQwBCyABQRwgIUEAICUQt4KAgAAhDQJAIAEoAgAtAFcNACABKAJoIA1BFGxqIg8gJDYCECAPQf0BOgABCyAfQQBIDQELIAFB4QAgJSAkIB0Qt4KAgAAaIAFBigEgISAdICUQt4KAgAAhDwJAIAEoAgAtAFcNACABKAJoIA9BFGxqIg8gJDYCECAPQf0BOgABCyAfRQ0AIAEoAmwiD0EBSA0AIA9BFGwgASgCaGpBbmpBEDsBAAsCQAJAICRBAUcNACAlRQ0CIAAtABMiD0EHSw0CIAAgD0EBajoAEyAAIA9BAnRqQZABaiEPDAELIAAoAhwgJE4NASAAICQ2AhwgIyEPCyAPICU2AgALIAFBCSAbICBBABC3goCAABogDUUNACABKAJsIQ9B/IqDgAAhFgJAIAEoAgAtAFcNACABKAJoIA9Bf2ogDSANQQBIG0EUbGohFgsgFiAPNgIICyAKLQA0IQ9BACENAkAgCkHIBmooAgAiFkEpai0AAEECcUUNACAWQSBqKAIAIRYCQAJAIAwNACAWIRkMAQsgFiAZRw0BCwJAIBItABxBgAFxRQ0AIBkvADdBA3FBAkYNAQsgGSENCwJAIA9BAXFFDQAgAiACLQA0QQFyOgA0CyAPQQJxIRYgChC5hoCAAAJAAkAgACgC1AEiDw0AQQAhDwwBCyAAKAIIIQoCQCAPQX9KDQAgCigCbEF/aiEPC0H8ioOAACEaAkAgCigCAC0AVw0AIAooAmggD0EUbGohGgsgGigCCCEPC0EBIBwgFhshHCAAIA82AtQBCwJAIANFDQAgECADEOWAgIAACyANIRkLIAxBAWoiDCATKAIMSA0ACyAAENOGgIAAIAQgGTYCQCAZRQ0AIAQgHjYCCAsCQCAVRQ0AIBVBADYCDCAQIBUQ5YCAgAALIAEoAmwhDEH8ioOAACENAkAgASgCAC0AVw0AIAEoAmggDEF/aiAiICJBAEgbQRRsaiENCyANIAw2AgRBACEVIAFBCEEAIAQoAgxBABC3goCAABogASAgELeGgIAAIAQgASgCbDYCPAJAIAItADBBAkkNACAYRQ0AIBAgGBDkgICAAAsgHA0FIAQgFxCziICAAAwFCwJAIBNBwABxRQ0AIARBuAE6ADUMBAsgBCALNgI4IAQgF0HAyIKAAGotAAA6ADVBACEVIAEgF0HCyIKAAGotAAAgCyANQQAQt4KAgAAhDCAEQQE6ADcgBCAMQQFqNgI8DAQLIAQgCzYCOCAEIAEoAmw2AjwgBEElQSYgFxs6ADUMAgsgGSEfIBIhFiAcIRIgGCEeIBshGAsCQCADQQFIDQAgD0Eqai0AAEEQcUUNACABQYgBIBpBAEEAELeCgIAAGgtBACEZIAAgBCAXIBUgBkEIahC1iICAACEMAkAgBigCCCIVRQ0AIB5FDQAgECAVIA1qEKeBgIAAIRkLQShBECATGyEcQQEhJEEBISACQCASRQ0AIBItAAxBKHFBAEchIAsgBCAcaiEcAkAgFkUNACAWLQAMQShxQQBHISQLIBwoAgAhHAJAAkAgEkUNACAAIBIoAgAoAhAiGyAMIA1qIh8gGBCyiICAAAJAIBItAApBgAFxDQAgGxC+h4CAAEUNACABQTIgHyAcQQAQt4KAgAAaCwJAIBVFDQAgGyAYIBUgDWoQtoiAgAALAkAgGy0AACIfQbABRw0AIBstAAIhHwsgGCANaiEYAkACQAJAIB9B/wFxIh9BigFGDQAgH0GxAUcNAiAbQRRqISUMAQsgGygCFEEcaiElC0EBIR9BACEbICUoAgAoAgBBAUwNAEEBISAMAgsgBCASELOIgIAAQQEhH0EAIRsMAQsCQCAfRQ0AQQAhICABQcsAQQAgDCANakEAELeCgIAAGkEBIRsgDUEBaiEYQQEhHwwBCwJAIBMNACANQQBHIR9BACEbIA0hGAwBC0EAIRsgAUHLAEEAIAwgDWpBABC3goCAABpBASEfIA1BAWohGAsgACAMIBggG2sgFRC3iICAAAJAAkACQAJAAkACQAJAAkAgDy8BLiISRQ0AIBggEkYNAQsCQCATRQ0AIAFBxwBBASATQQAQt4KAgAAaCwJAIAQoAiwiEkUNACABQT8gEiAcIAwQt4KAgAAhEgJAIAEoAgAtAFcNACABKAJoIBJBFGxqIhIgDTYCECASQf0BOgABCyAAIAIgAyAcIAUQtIiAgAALQQAhEkEEQQAgHxsgF3JBAkEAICAbciIfQbTIgoAAai0AACEDAkAgD0Eqai0AAEEQcUUNACAfQQZHDQAgAUH8ACAKKAIILgEAQQlqQQptQQBBABC3goCAACESCyABIAMgGiAcIAwQt4KAgAAhAwJAIAEoAgAtAFcNACABKAJoIANBFGxqIgMgGDYCECADQf0BOgABCwJAIBNFDQAgAUEIQQAgASgCbEECakEAELeCgIAAGiABQQJBBiAYQQJJGyAXckG0yIKAAGotAAAgGiAcIAwQt4KAgAAhAyABKAIALQBXDQAgASgCaCADQRRsaiIDIBhBACAga2o2AhAgA0H9AToAAQsgFkUNASAWKAIAKAIQIQMgEkUNAyAEIAEoAmw2AjwMBAsgFg0BQQAhEgsgHQ0DIA0hGAwECyAWKAIAKAIQIQMLQQAhEgsgACADIAwgDWoiGCAeELKIgIAAAkAgFi0ACkGAAXENACADEL6HgIAARQ0AIAFBMiAYIBxBABC3goCAABoLAkAgGUUNACADIB4gGRC2iICAACAAIBggHiAZELeIgIAACwJAIAMtAAAiIEGwAUcNACADLQACISALIB4gDWohGAJAAkACQCAgQf8BcSIeQYoBRg0AIB5BsQFHDQIgA0EUaiEDDAELIAMoAhRBHGohAwsgAygCACgCAEEBTA0AQQEhJAwCCyAEIBYQs4iAgAAMAQsCQCATDQBBACEkIAFBywBBACAMIA1qQQAQt4KAgAAaCyANQQFqIRgLAkAgFUUNACAQIBUQ5ICAgAALAkAgGUUNACAQIBkQ5ICAgAALAkAgBCgCPA0AIAQgASgCbDYCPAsCQCAYRQ0AAkAgE0UNACABQRAgEyABKAJsQQNqQQAQt4KAgAAaCyABICQgF0EBdHJBvMiCgABqLQAAIBogHCAMELeCgIAAIQMCQCABKAIALQBXDQAgASgCaCADQRRsaiIDIBg2AhAgA0H9AToAAQsgEkUNACABKAJsIQNB/IqDgAAhFgJAIAEoAgAtAFcNACABKAJoIANBf2ogEiASQQBIG0EUbGohFgsgFiADNgIICwJAIBNFDQAgAUEPIBMgASgCbEECakEAELeCgIAAGiABIBsgF0EBdHJBvMiCgABqLQAAIBogHCAMELeCgIAAIQwgASgCAC0AVw0AIAEoAmggDEEUbGoiDCAYIBtqNgIQIAxB/QE6AAELAkAgDygCKCIMQYCAEHFFDQAgAUH9ACAaIA0gDRC3goCAABogDygCKCEMCwJAAkAgDEHAAHFFDQAgAi8BLEGgIHENAEEBIRMMAQsCQCAKKAIMIgwtABxBgAFxDQAgAiAKIAsgGhC4iICAAEEAIRMMAQtBACETIAsgGkYNAEEAIQ1BACEVAkAgDCgCCCIMRQ0AA0ACQCAMLwA3QQNxQQJHDQAgDCEVDAILIAwoAhQiDA0AC0EAIRULIAAgFS8BMhDJhoCAACEQAkAgFS8BMkUNAEEAIRIDQEF/IRYCQCAKLwE0IhNFDQAgFSgCBCASQQF0ai8BACEDIAooAgQhDEEAIQ0DQAJAIAwvAQAgA0H//wNxRw0AIA0hFgwCCyAMQQJqIQwgEyANQQFqIg1HDQALCyABQd4AIBogFkEQdEEQdSASIBBqELeCgIAAGiASQQFqIhIgFS8BMiINSQ0ACwsgAUEbIAsgESAQELeCgIAAIQxBACETIAEoAgAtAFcNACABKAJoIAxBFGxqIgwgDTYCECAMQf0BOgABCwJAIAQoAgANAAJAIAIvASxBoCBxDQAgCiALIBogAhC5iICAAAsgCigCJCIMRQ0AIAwgCyAUELqIgIAACwJAAkAgDygCKCIMQYAgcUUNACAEQbgBOgA1DAELAkAgF0UNACAEQSU6ADUMAQsgBEEmOgA1CyAEIBo2AjggBCAMQRB2QQFxOgA2AkAgDEEPcQ0AIARBAToANwtBACAKIBMbIRUMAQtBACEVC0EBQQIgFRshGiACQYQEaiEQIAggCUEGdGpBLGohFgJAA0AgAigCZCIPQQFIDQEgAigCcCEMQQAhCgNAIA8hDQJAIAwvAQoiD0EGcQ0AAkAgBCkDUCIOIAwpAyiDUA0AIAIgAi0ANEECcjoANAwBCyAMKAIAIQMCQCAWLQAAIhNB2ABxRQ0AIAMoAgQiEkEDcUUNAQJAIBNBCHFFDQAgEkEBcUUNAgtCASEmAkAgAigCgAQgAygCJCIJRg0AQgAhJiACKAL8AyITQQJIDQAgE0F/aiESQgEhByAQIRMDQAJAIBMoAgAgCUcNAEIBIAeGISYMAgsgE0EEaiETIAdCAXwhByASQX9qIhINAAsLICYgDoNCAFINAQsCQAJAAkAgGkEBRw0AAkAgAyAEKAIEIBUQu4iAgAANAEECIQoMBAsgDC8BCiEPDAELIBpBAksNAQsgD0GAIHFFDQAgCkEDIAobIQoMAQsgD0GABHENACAAIAMgEUEQEMiGgIAAIAwgDC8BCkEEcjsBCgsgDEEwaiEMIA1Bf2ohDyANQQFKDQALIAohGiAKQQBKDQALCwJAIAJB7ABqKAIAIgxBAUgNACAMQQFqIQ0gAigCcCEMA0ACQCAMQQpqLQAAQQZxDQAgDEEMai8BACIPQYIBcUUNACAPQYAQcUUNACAMQRRqKAIAIAtHDQAgFi0AAEHYAHENACAMKAIAIRMgFCALIAxBGGooAgAgBUGDAUEAEKuIgIAAIg9FDQAgDy0ACkEEcQ0AAkACQCAPLQAMQQFxDQAgDygCACEDDAELIA8oAgAiA0EFai0AAEEQcUUNACADKAIUKAIcKAIAQQFKDQELIAZBCGogA0E0ENSKgIAAGiAGIBMoAgw2AhQgACAGQQhqIBFBEBDIhoCAACAPIA8vAQpBBHI7AQoLIAxBMGohDCANQX9qIg1BAUoNAAsLAkAgBCgCMCIJRQ0AAkACQCACKAIEIAQtADRBBnRqQRhqKAIAIg8tABxBgAFxDQACQAJAIAAoAhwiDEECSA0AIAAoAiAhCiAAIAxBfmo2AhwgACAKQQJqNgIgDAELIAAgACgCLCIMQQJqNgIsIAxBAWohCgtBASESIAFBhwEgBCgCBCAKQQFqQQAQt4KAgAAaDAELQQAhEwJAIA8oAggiDEUNAANAAkAgDC8AN0EDcUECRw0AIAwhEwwCCyAMKAIUIgwNAAtBACETCyAAIBMvATIiEkEBahDJhoCAACEKAkAgEg0AQQAhEgwBCyAKQQFqIQwgEkEBdCEDQQAhDQNAIAEgDyALIBMoAgQgDWouAQAgDBDLhoCAACAMQQFqIQwgAyANQQJqIg1HDQALCyABQRwgCSgCAEEAIApBAWoiDBC3goCAACEPAkAgASgCAC0AVw0AIAEoAmggD0EUbGoiDSASNgIQIA1B/QE6AAELIAFB4QAgDCASIAoQt4KAgAAaIAFBigEgCSgCACAKIAwQt4KAgAAhDQJAIAEoAgAtAFcNACABKAJoIA1BFGxqIg0gEjYCECANQf0BOgABCyABQbQBIAkoAgRBACAMELeCgIAAIQwCQCABKAIALQBXDQAgASgCaCAMQRRsaiIMIBI2AhAgDEH9AToAAQsCQCABKAJsIgxBAUgNACAMQRRsIAEoAmhqQW5qQRA7AQALQfyKg4AAIQ0CQCABKAIALQBXDQAgASgCaCAMQX9qIA8gD0EASBtBFGxqIQ0LIA0gDDYCCAJAAkAgEg0AIApFDQIgAC0AEyIMQQdLDQIgACAMQQFqOgATIAAgDEECdGpBkAFqIQwMAQsgACgCHCASSg0BIAAgEkEBajYCHCAAQSBqIQwLIAwgCjYCAAsCQAJAAkACQCAEKAIAIgxFDQAgBCABKAJsNgIcIAFBxwBBASAMQQAQt4KAgAAaIAQoAjAiDA0BDAILIAQoAjAiDEUNAgsgAUHKAEEAIAwoAghBABC3goCAABogDCABKAJsNgIMIAAgAC0AGkEBajoAGgsgAigCbCITQQFIDQAgAigCcCEMQQAhDQNAAkAgDEEKaiIPLQAAQQZxDQAgBCkDUCAMQShqKQMAg0IAUg0AIBYtAABBwABxDQAgACAMKAIAIBFBEBDIhoCAACAPIA8vAQBBBHI7AQAgAigCbCETCyAMQTBqIQwgDUEBaiINIBNIDQALCyAEKQNQIQULIAZBwABqJICAgIAAIAULSgEBfwJAIAAoAkQiAUUNAANAIAAgASgCADYCRCABKAIEIAFBCGpBNBDUioCAABogACgCACgCACABEOSAgIAAIAAoAkQiAQ0ACwsLegECfyABQdgAahC8iICAAANAAkAgASgCQCICDQACQCABKAJIIgNFDQADQCADKAIAIQIgACADEOSAgIAAIAEgAjYCSCACIQMgAg0ACwsgACABEOSAgIAADwsgASACKAI4NgJAIAAgAhCQiICAACAAIAIQ5ICAgAAMAAsLhQEBAn8jgICAgABBEGsiAiSAgICAACAAKAIAIQNBACEAIAJBADYCDAJAAkAgAUUNACADIAEgAy0AVEHDACACQQxqENuCgIAAGgJAIAIoAgwiAA0AQQAhAAwBCyAAEPiAgIAAp0EASiEBDAELQQAhAQsgABDqgYCAACACQRBqJICAgIAAIAEL1QMBA38gABDlhYCAACEDAkACQCAALQATIgQNACAAIAAoAixBAWoiBDYCLAwBCyAAIARBf2oiBDoAEyAAIARB/wFxQQJ0akGQAWooAgAhBAsgA0HHAEEAIARBABC3goCAABoCQAJAIAJBA0gNAAJAAkAgAC0AEyIFDQAgACAAKAIsQQFqIgU2AiwMAQsgACAFQX9qIgU6ABMgACAFQf8BcUECdGpBkAFqKAIAIQULIAMgA0H1AEEAIAVBABC3goCAAEGts4GAAEF/EOaFgIAAIANBOSAFIAMoAmxBAmogARC3goCAABogAygCbCIFQQFIDQEgBUEUbCADKAJoakFuakHTADsBAAwBCyADQQwgASADKAJsQQJqQQAQt4KAgAAaIAMoAmwhBQsgAyACQQJ0IgJB8MiCgABqKAIAIAQgBUECaiABELeCgIAAGgJAIAMoAmwiAUEBSA0AIAFBFGwgAygC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AiAAKAIYIgMoAgBODQAgAkECdCADakEEaigCACICQQFIDQAgASACNgIcCwJAIAEtAARBAXFFDQAgASgCJCICIAAoAhgiACgCAE4NACACQQJ0IABqQQRqKAIAIgBBAUgNACABIAA2AiQLQQALQQACQCABLQAAQacBRw0AIAAoAhgiACgCKCABKAIcRw0AIAEuASBBAEgNACAAIAApAzAgARDjh4CAAIQ3AzALQQALqQIBA38CQCABLQAEQSBxDQAgAhC3h4CAAA0AAkAgACgCACADQRBBDCADKAIEQYAIcSIEG2ooAgAgA0EMQRAgBBtqKAIAENqCgIAAIgNFDQAgAygCDEGggICAAEcNAQsCQCAAKAIIIgRBAUgNACABKAIcIQUgACgCGCEDA0ACQCADKAIAIgYoAhwgBUcNACAGLwEgIAEvASBGDQMLIANBCGohAyAEQX9qIgQNAAsLAkAgARC3h4CAAEHBAEcNACAAQQE2AhALIAAgACgCCEEBaiIDNgIIIAAgACgCACgCACAAKAIYIANBA3StEPCDgIAAIgM2AhgCQCADDQAgAEEANgIIDwsgACgCCEEDdCIEIANqQXhqIAE2AgAgBCAAKAIYakF8aiACNgIACwuOAgEGf0EBIQMCQCAAKAIELQAADQBBACEDIAEtAABBpwFHDQAgACgCFEEgciABKAIEIgRxDQBBASEDIAAoAggiBUEBSA0AIAAoAhghBkEEIQcDQAJAIAYgB2pBfGooAgAiCCABRg0AIAgoAhwgASgCHEcNACAILwEgIAEvASBHDQACQCACRQ0AIAgQt4eAgABBwQBGDQMgACgCGCEGIAEoAgQhBAsgASAEQd///3txQSByNgIEIAAgACgCDEEBajYCDAJAAkAgBiAHaigCACIHDQBBACEHDAELIAAoAgAoAgAgB0EAQQAQgYaAgAAhBwsgASAHNgIMQQEPCyAHQQhqIQcgBUF/aiIFDQALCyADC2MBBH8CQCAARQ0AIAAoAgAiAkEBSA0AIABBCGohA0EAIQQDQAJAIAMoAgAiBUUNACAFKAIYIgUgASgCAEwNACABIAU2AgAgACgCACECCyADQRBqIQMgBEEBaiIEIAJIDQALCwuZAQIBfwF+I4CAgIAAQeAAayIGJICAgIAAAkACQCAGIAAgASACIAQgBRCMiICAACIADQBBACEE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PkCiIgSZRAAAAAAAAOBBY0UNACAEqiEFDAELQYCAgIB4IQULIAAgBiAFazYCECAAQZRbQZVbIAdBAkobIANqNgIICyABQQE6AAALC4QCAgN/AXwjgICAgABBwABrIgMkgICAgAACQCAAIAEgAiADQRBqENKJgIAADQAgA0EQahDYiYCAACADQTo6AAIgA0E6OgAFIANBADoACCADIAMoAiQiAUEKbSICQQpvQTBqOgAAIAMgAygCKCIEQQptIgVBCm9BMGo6AAMgAyABIAJBCmxrQTBqOgABIAMgBCAFQQpsa0EwajoABAJAAkAgAysDMCIGmUQAAAAAAADgQWNFDQAgBqohAQwBC0GAgICAeCEBCyADIAFBCm0iAkEKb0EwajoABiADIAEgAkEKbGtBMGo6AAcgACADQQhBAUF/EP+BgIAACyADQcAAaiSAgICAAAufAQIBfAN/AkAgAC0AKw0AIAAQ04mAgAAgAEEBOgArIABBADoAKQJAAkAgACkDAEKA3MwUfEKAuJkpgae3RAAAAAAAQI9AoyIBmUQAAAAAAADgQWNFDQAgAaohAgwBC0GAgICAeCECCyAAIAJBkBxtIgM2AhQgACADQfBjbCACaiIDQTxtIgQ2AhggACABIAK3oSAEQURsIANqt6A5AyALC/ADAgV/AXwjgICAgABB0ABrIgMkgICAgAACQCAAIAEgAiADQSBqENKJgIAADQAgA0EgahDWiYCAACADQSBqENiJgIAAIANBLToABSADQS06AAggA0EgOgALIANBOjoADiADIAMoAiwiAUEKbSICQQpvQTBqOgAGIAMgAygCMCIEQQptIgVBCm9BMGo6AAkgAyADKAI0IgZBCm0iB0EKb0EwajoADCADIAEgAkEKbGtBMGo6AAcgAyAEIAVBCmxrQTBqOgAKIAMgBiAHQQpsa0EwajoADSADIAMoAigiAiACQR91IgFqIAFzIgFB5ABuQQpwQTByOgACIAMgAUHoB25BCnBBMHI6AAEgAyABQQpuIgRBCnBBMHI6AAMgAyABIARBCmxrQTByOgAEIAMoAjghASADQTo6ABEgAyABIAFBCm0iBEEKbGtBMGo6ABAgAyAEQQpvQTBqOgAPIANBADoAFAJAAkAgAysDQCIImUQAAAAAAADgQWNFDQAgCKohAQwBC0GAgICAeCEBCyADIAFB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/QAQ6ImAgAACQCADLQAZDQAgAygCACADKAIEIAMpAxBBf0GZgICAACADLQAYG0EBEImCgIAACyAAKAIAIgJBygA6ABMgAiACLwEQQYAQcjsBEAsgA0GAAWokgICAgAALqwQCA34CfwJAIAFFDQACQCACrSIDIAApAxAiBHxCAnwgACkDCFQNACAAIAJBAmoQiYqAgAANASAAKQMQIQQLIAAgBEIBfDcDECAAKAIEIASnakEiOgAAAkAgAkUNACADQgd8IQUgAkEDaiEGIANCA3whBANAAkACQAJAAkAgAS0AACICQdwARg0AIAJBIkcNAQsgAiEHDAELAkAgAkEfTQ0AIAIhBwwCCyACQeDXgoAAai0AACIHDQACQCAFIAApAxAiA3wgACkDCFgNACAAIAZBBGoQiYqAgAANBSAAKQMQIQMLIAAgA0IBfDcDECAAKAIEIAOnakHcADoAACAAIAApAxAiA0IBfDcDECAAKAIEIAOnakH1ADoAACAAIAApAxAiA0IBfDcDECAAKAIEIAOnakEwOgAAIAAgACkDECIDQgF8NwMQIAAoAgQgA6dqQTA6AAAgACAAKQMQIgNCAXw3AxAgACgCBCADp2ogAkEEdkEwcjoAACACQQ9xQerQgIAAai0AACEHDAELAkAgBCAAKQMQIgN8IAApAwhYDQAgACAGEImKgIAADQQgACkDECEDCyAAIANCAXw3AxAgACgCBCADp2pB3AA6AAALIAAgACkDECIDQgF8NwMQIAAoAgQgA6dqIAc6AAAgBkF/aiEGIAFBAWohASAFQgF8IQUgBEJ/fCIEQgNSDQALCyAAIAApAxAiBEIBfDcDECAAKAIEIASnakEiOgAACwuQAgEBfyOAgICAAEHAAGsiAySAgICAAAJAIANBIGogACACKAIAQQEQ+oCAgAAQ5ImAgAANAAJAAkAgAyAAIAIoAgRBARD6gICAABDkiYCAAEUNACADKAIoEPSAgIAAIANBADYCICADQQA2AiggA0EgaiEADAELAkACQCADQSBqQQAgAygCCBD2iYCAACICRQ0AIAIgAEEAEOaJgIAADAELIAAQgIKAgAALIAMoAigQ9ICAgAAgA0IANwMgIANBADYCKCADKAIwEPSAgIAAIANBADYCMCADKAIIEPSAgIAAIANBADYCACADQQA2AgggAyEACyAAQQA2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AAECCyADIAAoAgQ2AgBBHiADQRBqQen1gIAAIAMQv4qAgAAMAQsgA0EQaiAGEMCKgIAACyADLQApDQMgAygCECADKAIUIAMpAyBBf0GZgICAACADLQAoG0EBEImCgIAADAMLIAAtABVFDQAgAyABNgIQIANBATsBKCADQgA3AyAgA0LkADcDGCADIANBKmo2AhQgACADQRBqIAAoAjAgBUECdGooAgAQvoqAgAAgAy0AKQ0CIAMoAhAgAygCFCADKQMgQX9BmYCAgAAgAy0AKBtBARCJgoCAAAwCCyABIAAoAhwiAEGnqYGAACAAG0F/QQFBABD/gYCAAAwBCyABIAAoAixBf0EBQQAQ/4GAgAALIANBkAFqJICAgIAAQQALsgEBAn8jgICAgABBEGsiAySAgICAAAJAAkAgAg0AIAFBJBDoiYCAAAwBCyAAIAEgAEEwaigCACACQQJ0aigCACIEEL6KgIAAAkAgAEEoaigCACIAIARBDGxqIgQtAABBBkcNACADIAQoAgg2AgBBHiABQen1gIAAIAMQv4qAgAAMAQsgASAAIAJBDGxqIgItAAFBBnZBAXFBDGwgAmpBdGoQwIqAgAALIANBEGokgICAgAALygECA38BfiOAgICAAEEgayIEJICAgIAAAkACQCABKQMQIACsfCABKQMIVA0AIAEgABCJioCAAA0BCyAEIAM2AgQCQCAAQQFIDQAgASgCECEFIAEoAgQhBiAEQRxqQQA7AQAgBEIANwIUIAQgADYCECAEQQA2AgggBCAGIAVqIgA2AgwgBEEIaiACIAMQ9oCAgAAgACAEKAIYakEAOgAACyABKQMQIQcgASAHIAEoAgQgB6dqENeKgIAArHw3AxALIARBIGokgICAgAAL7QEBB38jgICAgABBEGsiAiSAgICAACABKAIIIQMCQCABKAIEIgRBA0gNAEECIQEgAy0AAUGguYGAAGotAABBAnFFDQAgA0EBaiEFIARBf2ohBgJAIARBBEkNACADQQJqIQcgBEF9aiEIQQAhAQJAA0AgByABai0AAEGguYGAAGotAABBBnFFDQEgCCABQQFqIgFHDQALIAYhAQwBCyABQQJqIQELIARBfmogBCABIAZGIgEbIQQgBSADIAEbIQMLIAIgAzYCBCACIAQ2AgAgBEECaiAAQZOqgIAAIAIQv4qAgAAg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ADcDACACQRBqQgA3AwAgAkIANwMIIAJCADcDACACIARBA3ZBHHFqIgMgAygCAEEBIAR0cjYCACABQQJqIQEDQCACIAVBA3ZBHHFqIgQgBCgCAEEBIAV0cjYCACABLQAAIQUgAUEBaiEBIAUNAAsgACEBIAAtAAAiBUUNACAAIQEDQCACIAVBA3ZBHHFqKAIAIAV2QQFxDQEgAUEBaiIBLQAAIgUNAAsLIAJBIGokgICAgAAgASAAawuRCwUBfwF+AX8CfgJ/I4CAgIAAQfAAayIFJICAgIAAIARC////////////AIMhBgJAAkACQCABUCIHIAJC////////////AIMiCEKAgICAgIDAgIB/fEKAgICAgIDAgIB/VCAIUBsNACADQgBSIAZCgICAgICAwICAf3wiCUKAgICAgIDAgIB/ViAJQoCAgICAgMCAgH9RGw0BCwJAIAcgCEKAgICAgIDA//8AVCAIQoCAgICAgMD//wBRGw0AIAJCgICAgICAIIQhBCABIQMMAgsCQCADUCAGQoCAgICAgMD//wBUIAZCgICAgICAwP//AFEbDQAgBEKAgICAgIAghCEEDAILAkAgASAIQoCAgICAgMD//wCFhEIAUg0AQoCAgICAgOD//wAgAiADIAGFIAQgAoVCgICAgICAgICAf4WEUCIHGyEEQgAgASAHGyEDDAILIAMgBkKAgICAgIDA//8AhYRQDQECQCABIAiEQgBSDQAgAyAGhEIAUg0CIAMgAYMhAyAEIAKDIQQMAgsgAyAGhFBFDQAgASEDIAIhBAwBCyADIAEgAyABViAGIAhWIAYgCFEbIgobIQggBCACIAobIgZC////////P4MhCSACIAQgChsiAkIwiKdB//8BcSELAkAgBkIwiKdB//8BcSIHDQAgBUHgAGogCCAJIAggCSAJUCIHG3kgB0EGdK18pyIHQXFqEOWKgIAAQRAgB2shByAFQegAaikDACEJIAUpA2AhCAsgASADIAobIQMgAkL///////8/gyEEAkAgCw0AIAVB0ABqIAMgBCADIAQgBFAiCht5IApBBnStfKciCkFxahDlioCAAEEQIAprIQsgBUHYAGopAwAhBCAFKQNQIQMLIARCA4YgA0I9iIRCgICAgICAgASEIQQgCUIDhiAIQj2IhCEBIANCA4YhAyAGIAKFIQICQCAHIAtrIgpFDQACQCAKQf8ATQ0AQgAhBEIBIQMMAQsgBUHAAGogAyAEQYABIAprEOWKgIAAIAVBMGogAyAEIAoQ6IqAgAAgBSkDMCAFKQNAIAVBwABqQQhqKQMAhEIAUq2EIQMgBUEwakEIaikDACEECyABQoCAgICAgIAEhCEJIAhCA4YhAQJAAkAgAkJ/VQ0AAkAgASADfSIIIAkgBH0gASADVK19IgSEUEUNAEIAIQNCACEEDAMLIARC/////////wNWDQEgBUEgaiAIIAQgCCAEIARQIgobeSAKQQZ0rXynQXRqIgoQ5YqAgAAgByAKayEHIAVBKGopAwAhBCAFKQMgIQgMAQsgBCAJfCADIAF8IgggA1StfCIEQoCAgICAgIAIg1ANACAIQgGIIARCP4aEIAhCAYOEIQggB0EBaiEHIARCAYghBAsgBkKAgICAgICAgIB/gyEBAkAgB0H//wFIDQAgAUKAgICAgIDA//8AhCEEQgAhAwwBC0EAIQoCQAJAIAdBAEwNACAHIQoMAQsgBUEQaiAIIAQgB0H/AGoQ5YqAgAAgBSAIIARBASAHaxDoioCAACAFKQMAIAUpAxAgBUEQakEIaikDAIRCAFKthCEIIAVBCGopAwAhBAsgCEIDiCAEQj2GhCEDIAqtQjCGIARCA4hC////////P4OEIAGEIQQgCKdBB3EhBwJAAkACQAJAAkAQ5oqAgAAOAwABAgMLIAQgAyAHQQRLrXwiCCADVK18IQQCQCAHQQRGDQAgCCEDDAMLIAQgCEIBgyIBIAh8IgMgAVStfCEEDAMLIAQgAyABQgBSIAdBAEdxrXwiCCADVK18IQQgCCEDDAELIAQgAyABUCAHQQBHca18IgggA1StfCEEIAghAwsgB0UNAQsQ54qAgAAaCyAAIAM3AwAgACAENwMIIAVB8ABqJICAgIAAC+ABAgF/An5BASEEAkAgAEIAUiABQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACACQgBSIANC////////////AIMiBkKAgICAgIDA//8AViAGQoCAgICAgMD//wBRGw0AAkAgAiAAhCAGIAWEhFBFDQBBAA8LAkAgAyABg0IAUw0AQX8hBCAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwtBfyEEIAAgAlYgASADVSABIANRGw0AIAAgAoUgASADhYRCAFIhBAsgBAvYAQIBfwJ+QX8hBAJAIABCAFIgAUL///////////8AgyIFQoCAgICAgMD//wBWIAVCgICAgICAwP//AFEbDQAgAkIAUiADQv///////////wCDIgZCgICAgICAwP//AFYgBkKAgICAgIDA//8AURsNAAJAIAIgAIQgBiAFhIRQRQ0AQQAPCwJAIAMgAYNCAFMNACAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwsgACACViABIANVIAEgA1EbDQAgACAChSABIAOFhEIAUiEECyAEC7IRBgF/A34DfwF+AX8KfiOAgICAAEHQAmsiBSSAgICAACAEQv///////z+DIQYgAkL///////8/gyEHIAQgAoVCgICAgICAgICAf4MhCCAEQjCIp0H//wFxIQkCQAJAAkAgAkIwiKdB//8BcSIKQYGAfmpBgoB+SQ0AQQAhCyAJQYGAfmpBgYB+Sw0BCwJAIAFQIAJC////////////AIMiDEKAgICAgIDA//8AVCAMQoCAgICAgMD//wBRGw0AIAJCgICAgICAIIQhCAwCCwJAIANQIARC////////////AIMiAkKAgICAgIDA//8AVCACQoCAgICAgMD//wBRGw0AIARCgICAgICAIIQhCCADIQEMAgsCQCABIAxCgICAgICAwP//AIWEQgBSDQACQCADIAJCgICAgICAwP//AIWEUEUNAEIAIQFCgICAgICA4P//ACEIDAMLIAhCgICAgICAwP//AIQhCEIAIQEMAgsCQCADIAJCgICAgICAwP//AIWEQgBSDQBCACEBDAILAkAgASAMhEIAUg0AQoCAgICAgOD//wAgCCADIAKEUBshCEIAIQEMAgsCQCADIAKEQgBSDQAgCEKAgICAgIDA//8AhCEIQgAhAQwCC0EAIQsCQCAMQv///////z9WDQAgBUHAAmogASAHIAEgByAHUCILG3kgC0EGdK18pyILQXFqEOWKgIAAQRAgC2shCyAFQcgCaikDACEHIAUpA8ACIQELIAJC////////P1YNACAFQbACaiADIAYgAyAGIAZQIg0beSANQQZ0rXynIg1BcWoQ5YqAgAAgDSALakFwaiELIAVBuAJqKQMAIQYgBSkDsAIhAwsgBUGgAmogA0IxiCAGQoCAgICAgMAAhCIOQg+GhCICQgBCgICAgLDmvIL1ACACfSIEQgAQ6YqAgAAgBUGQAmpCACAFQaACakEIaikDAH1CACAEQgAQ6YqAgAAgBUGAAmogBSkDkAJCP4ggBUGQAmpBCGopAwBCAYaEIgRCACACQgAQ6YqAgAAgBUHwAWogBEIAQgAgBUGAAmpBCGopAwB9QgAQ6YqAgAAgBUHgAWogBSkD8AFCP4ggBUHwAWpBCGopAwBCAYaEIgRCACACQgAQ6YqAgAAgBUHQAWogBEIAQgAgBUHgAWpBCGopAwB9QgAQ6YqAgAAgBUHAAWogBSkD0AFCP4ggBUHQAWpBCGopAwBCAYaEIgRCACACQgAQ6YqAgAAgBUGwAWogBEIAQgAgBUHAAWpBCGopAwB9QgAQ6YqAgAAgBUGgAWogAkIAIAUpA7ABQj+IIAVBsAFqQQhqKQMAQgGGhEJ/fCIEQgAQ6YqAgAAgBUGQAWogA0IPhkIAIARCABDpioCAACAFQfAAaiAEQgBCACAFQaABakEIaikDACAFKQOgASIGIAVBkAFqQQhqKQMAfCICIAZUrXwgAkIBVq18fUIAEOmKgIAAIAVBgAFqQgEgAn1CACAEQgAQ6YqAgAAgCyAKIAlraiEJAkACQCAFKQNwIg9CAYYiECAFKQOAAUI/iCAFQYABakEIaikDACIRQgGGhHwiDEKZk398IhJCIIgiAiAHQoCAgICAgMAAhCITQgGGIAFCP4iEIhRCIIgiBH4iByABQgGGIhVCIIgiBiAFQfAAakEIaikDAEIBhiAPQj+IhCARQj+IfCAMIBBUrXwgEiAMVK18Qn98Ig9CIIgiDH58IhAgB1StIBAgD0L/////D4MiByAUQv////8PgyIPfnwiESAQVK18IAwgBH58IAcgBH4iFiAPIAx+fCIQIBZUrUIghiAQQiCIhHwgESAQQiCGfCIQIBFUrXwgECASQv////8PgyISIA9+IhYgAiAGfnwiESAWVK0gESAHIBVC/v///w+DIhZ+fCIXIBFUrXx8IhEgEFStfCARIBIgBH4iECAWIAx+fCIEIAIgD358IgwgByAGfnwiB0IgiCAEIBBUrSAMIARUrXwgByAMVK18QiCGhHwiBCARVK18IAQgFyACIBZ+IgIgEiAGfnwiBkIgiCAGIAJUrUIghoR8IgIgF1StIAIgB0IghnwgAlStfHwiAiAEVK18IgRC/////////wBWDQAgBUHQAGogAiAEIAMgDhDpioCAACABQjGGIAVB0ABqQQhqKQMAfSAFKQNQIgFCAFKtfSEMIAlB/v8AaiEJQgAgAX0hBgwBCyAFQeAAaiACQgGIIARCP4aEIgIgBEIBiCIEIAMgDhDpioCAACABQjCGIAVB4ABqQQhqKQMAfSAFKQNgIgZCAFKtfSEMIAlB//8AaiEJQgAgBn0hBiABIRUgEyEUCwJAIAlB//8BSA0AIAhCgICAgICAwP//AIQhCEIAIQEMAQsCQAJAIAlBAUgNACAMQgGGIAZCP4iEIQwgCa1CMIYgBEL///////8/g4QhByAGQgGGIQQMAQsCQCAJQY9/Sg0AQgAhAQwCCyAFQcAAaiACIARBASAJaxDoioCAACAFQTBqIBUgFCAJQfAAahDlioCAACAFQSBqIAMgDiAFKQNAIgIgBUHAAGpBCGopAwAiBxDpioCAACAFQTBqQQhqKQMAIAVBIGpBCGopAwBCAYYgBSkDICIBQj+IhH0gBSkDMCIEIAFCAYYiAVStfSEMIAQgAX0hBAsgBUEQaiADIA5CA0IAEOmKgIAAIAUgAyAOQgVCABDpioCAACAHIAIgAkIBgyIBIAR8IgQgA1YgDCAEIAFUrXwiASAOViABIA5RG618IgMgAlStfCICIAMgAkKAgICAgIDA//8AVCAEIAUpAxBWIAEgBUEQakEIaikDACICViABIAJRG3GtfCICIANUrXwiAyACIANCgICAgICAwP//AFQgBCAFKQMAViABIAVBCGopAwAiBFYgASAEURtxrXwiASACVK18IAiEIQgLIAAgATcDACAAIAg3AwggBUHQAmokgICAgAALnwIDAX8DfgF/I4CAgIAAQRBrIgIkgICAgAACQAJAIAG9IgNC////////////AIMiBEKAgICAgICAeHxC/////////+//AFYNACAEQjyGIQUgBEIEiEKAgICAgICAgDx8IQQMAQsCQCAEQoCAgICAgID4/wBUDQAgA0I8hiEFIANCBIhCgICAgICAwP//AIQhBAwBCwJAIARQRQ0AQgAhBUIAIQQMAQsgAiAEQgAgA6dnQSBqIARCIIinZyAEQoCAgIAQVBsiBkExahDlioCAACACQQhqKQMAQoCAgICAgMAAhUGM+AAgBmutQjCGhCEEIAIpAwAhBQsgACAFNwMAIAAgBCADQoCAgICAgICAgH+DhDcDCCACQRBqJICAgIAAC5cBAQN/I4CAgIAAQRBrIgIkgICAgABBACEDAkAgAUIwiKdB//8BcSIEQf//AEkNAAJAIARB4f9+akFfSw0AIAFCP4enQf////8HcyEDDAELIAIgACABQv///////z+DQoCAgICAgMAAhEHvgAEgBGsQ6IqAgAAgAigCACIDQQAgA2sgAUJ/VRshAwsgAkEQaiSAgICAACADC6ABAwF/AX4BfyOAgICAAEEQayICJICAgIAAAkACQCABUEUNAEIAIQFCACEDDAELIAIgASABQj+HIgN8IAOFIgNCACADeaciBEExahDlioCAACACQQhqKQMAQoCAgICAgMAAhUG+gAEgBGutQjCGfCABQoCAgICAgICAgH+DhCEDIAIpAwAhAQsgACABNwMAIAAgAzcDCCACQRBqJICAgIAAC54BAwF/An4BfyOAgICAAEEQayICJICAgIAAAkACQCABDQBCACEDQgAhBAwBCyACIAEgAUEfdSIFaiAFcyIFrUIAIAVnIgVB0QBqEOWKgIAAIAJBCGopAwBCgICAgICAwACFQZ6AASAFa61CMIZ8IAFBgICAgHhxrUIghoQhBCACKQMAIQMLIAAgAzcDACAAIAQ3AwggAkEQaiSAgICAAAvCCwYBfwR+A38BfgF/Cn4jgICAgABB4ABrIgUkgICAgAAgBEL///////8/gyEGIAQgAoVCgICAgICAgICAf4MhByACQv///////z+DIghCIIghCSAEQjCIp0H//wFxIQoCQAJAAkAgAkIwiKdB//8BcSILQYGAfmpBgoB+SQ0AQQAhDCAKQYGAfmpBgYB+Sw0BCwJAIAFQIAJC////////////AIMiDUKAgICAgIDA//8AVCANQoCAgICAgMD//wBRGw0AIAJCgICAgICAIIQhBwwCCwJAIANQIARC////////////AIMiAkKAgICAgIDA//8AVCACQoCAgICAgMD//wBRGw0AIARCgICAgICAIIQhByADIQEMAgsCQCABIA1CgICAgICAwP//AIWEQgBSDQACQCADIAKEUEUNAEKAgICAgIDg//8AIQdCACEBDAMLIAdCgICAgICAwP//AIQhB0IAIQEMAgsCQCADIAJCgICAgICAwP//AIWEQgBSDQAgASANhCECQgAhAQJAIAJQRQ0AQoCAgICAgOD//wAhBwwDCyAHQoCAgICAgMD//wCEIQcMAgsCQCABIA2EQgBSDQBCACEBDAILAkAgAyAChEIAUg0AQgAhAQwCC0EAIQwCQCANQv///////z9WDQAgBUHQAGogASAIIAEgCCAIUCIMG3kgDEEGdK18pyIMQXFqEOWKgIAAQRAgDGshDCAFQdgAaikDACIIQiCIIQkgBSkDUCEBCyACQv///////z9WDQAgBUHAAGogAyAGIAMgBiAGUCIOG3kgDkEGdK18pyIOQXFqEOWKgIAAIAwgDmtBEGohDCAFQcgAaikDACEGIAUpA0AhAwsgA0IPhiINQoCA/v8PgyICIAFCIIgiBH4iDyANQiCIIg0gAUL/////D4MiAX58IhBCIIYiESACIAF+fCISIBFUrSACIAhC/////w+DIgh+IhMgDSAEfnwiESAGQg+GIANCMYiEIhRC/////w+DIgMgAX58IgYgEEIgiCAQIA9UrUIghoR8Ig8gAiAJQoCABIQiEH4iFSANIAh+fCIJIBRCIIhCgICAgAiEIgIgAX58IhQgAyAEfnwiFkIghnwiF3whASALIApqIAxqQYGAf2ohCgJAAkAgAiAEfiIYIA0gEH58IgQgGFStIAQgAyAIfnwiDSAEVK18IAIgEH58IA0gESATVK0gBiARVK18fCIEIA1UrXwgAyAQfiIDIAIgCH58IgIgA1StQiCGIAJCIIiEfCAEIAJCIIZ8IgIgBFStfCACIBZCIIggCSAVVK0gFCAJVK18IBYgFFStfEIghoR8IgQgAlStfCAEIA8gBlStIBcgD1StfHwiAiAEVK18IgRCgICAgICAwACDUA0AIApBAWohCgwBCyASQj+IIQMgBEIBhiACQj+IhCEEIAJCAYYgAUI/iIQhAiASQgGGIRIgAyABQgGGhCEBCwJAIApB//8BSA0AIAdCgICAgICAwP//AIQhB0IAIQEMAQsCQAJAIApBAEoNAAJAQQEgCmsiC0GAAUkNAEIAIQEMAwsgBUEwaiASIAEgCkH/AGoiChDlioCAACAFQSBqIAIgBCAKEOWKgIAAIAVBEGogEiABIAsQ6IqAgAAgBSACIAQgCxDoioCAACAFKQMgIAUpAxCEIAUpAzAgBUEwakEIaikDAIRCAFKthCESIAVBIGpBCGopAwAgBUEQakEIaikDAIQhASAFQQhqKQMAIQQgBSkDACECDAELIAqtQjCGIARC////////P4OEIQQLIAQgB4QhBwJAIBJQIAFCf1UgAUKAgICAgICAgIB/URsNACAHIAJCAXwiASACVK18IQcMAQsCQCASIAFCgICAgICAgICAf4WEQgBRDQAgAiEBDAELIAcgAiACQgGDfCIBIAJUrXwhBwsgACABNwMAIAAgBzcDCCAFQeAAaiSAgICAAAtUAQF/I4CAgIAAQRBrIgUkgICAgAAgBSABIAIgAyAEQoCAgICAgICAgH+FENqKgIAAIAUpAwghASAAIAUpAwA3AwAgACABNwMIIAVBEGokgICAgAAL/gMDAX8CfgF/I4CAgIAAQSBrIgIkgICAgAACQAJAIAFC////////////AIMiA0KAgICAgIDA/0N8IANCgICAgICAwIC8f3xaDQAgAEI8iCABQgSGhCEDAkAgAEL//////////w+DIgBCgYCAgICAgIAIVA0AIANCgYCAgICAgIDAAHwhBAwCCyADQoCAgICAgICAwAB8IQQgAEKAgICAgICAgAiFQgBSDQEgBCADQgGDfCEEDAELAkAgAFAgA0KAgICAgIDA//8AVCADQoCAgICAgMD//wBRGw0AIABCPIggAUIEhoRC/////////wODQoCAgICAgID8/wCEIQQMAQtCgICAgICAgPj/ACEEIANC////////v//DAFYNAEIAIQQgA0IwiKciBUGR9wBJDQAgAkEQaiAAIAFC////////P4NCgICAgICAwACEIgMgBUH/iH9qEOWKgIAAIAIgACADQYH4ACAFaxDoioCAACACKQMAIgNCPIggAkEIaikDAEIEhoQhBAJAIANC//////////8PgyACKQMQIAJBEGpBCGopAwCEQgBSrYQiA0KBgICAgICAgAhUDQAgBEIBfCEEDAELIANCgICAgICAgIAIhUIAUg0AIARCAYMgBHwhBAsgAkEgaiSAgICAACAEIAFCgICAgICAgICAf4OEvwtTAQF+AkACQCADQcAAcUUNACABIANBQGqthiECQgAhAQwBCyADRQ0AIAFBwAAgA2utiCACIAOtIgSGhCECIAEgBIYhAQsgACABNwMAIAAgAjcDCAsEAEEACwQAQQALUwEBfgJAAkAgA0HAAHFFDQAgAiADQUBqrYghAUIAIQIMAQsgA0UNACACQcAAIANrrYYgASADrSIEiIQhASACIASIIQILIAAgATcDACAAIAI3AwgLdQEBfiAAIAQgAX4gAiADfnwgA0IgiCIEIAFCIIgiAn58IANC/////w+DIgMgAUL/////D4MiAX4iBUIgiCADIAJ+fCIDQiCIfCADQv////8PgyAEIAF+fCIDQiCIfDcDCCAAIANCIIYgBUL/////D4OENwMACwIACw4AEOqKgIAAEOqKgIAACwkAIAAQKBDrCgsJACAAECkQ6woLCQAgABAqEOsKCwkAIAAQKxDrCgsHABAsEOsKCwsAIAAgARAtEOsKCwcAEC4Q6woLBwAQLxDrCgsHABAwEOsKCwcAEDEQ6woLBwAQMhDrCgsJACAAEDMQ6woLCQAgABA0EOsKCwkAIAAQNRDrCgsJACAAEDYQ6woLCQAgABA3EOsKCw0AIAAgASACEDgQ6woLDQAgACABIAIQORDrCgsNACAAIAEgAhA6EOsKCw8AIAAgASACIAMQOxDrCgsRACAAIAEgAiADIAQQPBDrCgsLACAAIAEQPRDrCgsLACAAIAEQPhDrCgsJACAAED8Q6woLCQAgABBAEOsKCwsAIAAgARBBEOsKCwsAIAAgARBCEOsKCwsAIAAgARBDEOsKCwsAIAAgARBEEOsKCwkAIAAQRRDrCgsLACAAIAEQRhDrCgsLACAAIAEQRxDrCgsLACAAIAEQSBDrCgsLACAAIAEQSRDrCgsLACAAIAEQShDrCgsPACAAIAEgAiADEEwQ6woLCQAgABBNEOsKCwkAIAAQThDrCgsJACAAEE8Q6woLCQAgABBQEOsKCwkAIAAQURDrCgsJACAAEFIQ6woLCQAgABBTEOsKCwkAIAAQVBDrCgsJACAAEFUQ6woLCQAgABBWEOsKCwsAIAAgARBXEOsKCw0AIAAgASACEFgQ6woLBwAQWRDrCgsLACAAIAEQWhDrCgsJACAAEFsQ6woLBwAQXBDrCgsPACAAIAEgAiADEF0Q6woLCgAgABDFChDrCgsKACAAEMcKEOsKCwuF/gICAEGACAuU1AJ7fQAlcy4legBhZmZpbml0eQBSZWFsQWZmaW5pdHkAYnVzeQB0ZW1wX3N0b3JlX2RpcmVjdG9yeQBub3QgYSB3cml0YWJsZSBkaXJlY3RvcnkAc2hyaW5rX21lbW9yeQBvdXQgb2YgbWVtb3J5AGZhaWxlZCB0byBhbGxvY2F0ZSAldSBieXRlcyBvZiBtZW1vcnkASEFWSU5HIGNsYXVzZSBvbiBhIG5vbi1hZ2dyZWdhdGUgcXVlcnkASW50Q29weQBTQ29weQBWRGVzdHJveQBNdWx0aXBseQBxdWVyeV9vbmx5AHVubGlrZWx5AHRhYmxlICIlcyIgaGFzIG1vcmUgdGhhbiBvbmUgcHJpbWFyeSBrZXkAanNvbl9ncm91cF9hcnJheQBqc29uX2FycmF5AGp1bGlhbmRheQBzcWxpdGVfcmVuYW1lX3F1b3RlZml4AExJS0Ugb3IgR0xPQiBwYXR0ZXJuIHRvbyBjb21wbGV4AGhleABPcGVuQXV0b2luZGV4AGF1dG9tYXRpY19pbmRleABhdXRvLWluZGV4AG9ycGhhbiBpbmRleABEcm9wSW5kZXgAaWR4AFJlb3BlbklkeABtYXgATWVtTWF4ACUwMngAMHgAQ1JFQVRFIFRBQkxFIHgAcncAaW1wbGllc19ub25udWxsX3JvdwBub3cAaW50ZWdlciBvdmVyZmxvdwBwYXJzZXIgc3RhY2sgb3ZlcmZsb3cAd2luZG93AHNoYWRvdwBSZXN1bHRSb3cASWZOdWxsUm93AG5ldwBubyBzdWNoIHZpZXcAY2Fubm90IG1vZGlmeSAlcyBiZWNhdXNlIGl0IGlzIGEgdmlldwBDYW5ub3QgYWRkIGEgY29sdW1uIHRvIGEgdmlldwBjYW5ub3QgVVBTRVJUIGEgdmlldwBQcmV2ACAlbGx1ACVjJXUAJS4qejoldQBGcmFnbWVudGF0aW9uIG9mICVkIGJ5dGVzIHJlcG9ydGVkIGFzICVkIG9uIHBhZ2UgJXUATXVsdGlwbGUgdXNlcyBmb3IgYnl0ZSAldSBvZiBwYWdlICV1AHVuYWJsZSB0byB1c2UgZnVuY3Rpb24gJXMgaW4gdGhlIHJlcXVlc3RlZCBjb250ZXh0AFNvcnRlck5leHQAVk5leHQAaW5jb21wbGV0ZSBpbnB1dABidXN5X3RpbWVvdXQAbG9jYWxob3N0AGNhbm5vdCBkcm9wIGNvbHVtbiAiJXMiOiBubyBvdGhlciBjb2x1bW5zIGV4aXN0AHBlcnNpc3QAZm9yZWlnbl9rZXlfbGlzdABpbmRleF9saXN0AGZ1bmN0aW9uX2xpc3QAY29sbGF0aW9uX2xpc3QAZGF0YWJhc2VfbGlzdABtb2R1bGVfbGlzdAB0YWJsZV9saXN0AHByYWdtYV9saXN0AHNldCBsaXN0AFZhbHVlTGlzdABzcWxpdGVfcmVuYW1lX3Rlc3QAUm93U2V0VGVzdABTZXF1ZW5jZVRlc3QAZmFzdABMYXN0AENhc3QAU29ydGVyU29ydABqc29uX2luc2VydABJZHhJbnNlcnQAU29ydGVySW5zZXJ0AEJpdE5vdABJZk5vdABQYWdlY291bnQAZnJlZWxpc3RfY291bnQAbWF4X3BhZ2VfY291bnQAUFJBR01BICIldyIucGFnZV9jb3VudABSZXNldENvdW50AENoZWNrcG9pbnQAU2F2ZXBvaW50AGEgQ0hFQ0sgY29uc3RyYWludAAlc09OIENPTkZMSUNUIGNsYXVzZSBkb2VzIG5vdCBtYXRjaCBhbnkgUFJJTUFSWSBLRVkgb3IgVU5JUVVFIGNvbnN0cmFpbnQAQ3Vyc29ySGludABwYXJlbnQARElTVElOQ1QgYWdncmVnYXRlcyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgYXJndW1lbnQAY29tbWVudABBUEkgY2FsbGVkIHdpdGggZmluYWxpemVkIHByZXBhcmVkIHN0YXRlbWVudABBUEkgY2FsbGVkIHdpdGggTlVMTCBwcmVwYXJlZCBzdGF0ZW1lbnQATWF4UGdjbnQAZGVmYXVsdCB2YWx1ZSBvZiBjb2x1bW4gWyVzXSBpcyBub3QgY29uc3RhbnQATXVzdEJlSW50AENhbm5vdCBhZGQgYSBjb2x1bW4gd2l0aCBub24tY29uc3RhbnQgZGVmYXVsdABIYWx0AHN0YXRfaW5pdABJbml0AEF1dG9Db21taXQAYW5hbHlzaXNfbGltaXQAc29mdF9oZWFwX2xpbWl0AGhhcmRfaGVhcF9saW1pdABqb3VybmFsX3NpemVfbGltaXQAT2Zmc2V0TGltaXQAU2Vla0hpdABPTiBjbGF1c2UgcmVmZXJlbmNlcyB0YWJsZXMgdG8gaXRzIHJpZ2h0AFNoaWZ0UmlnaHQAaGdodABTaGlmdExlZnQAT2Zmc2V0AHJlc2V0AGpzb25fc2V0AHRvbyBtYW55IGNvbHVtbnMgaW4gcmVzdWx0IHNldAAlciBPUkRFUiBCWSB0ZXJtIGRvZXMgbm90IG1hdGNoIGFueSBjb2x1bW4gaW4gdGhlIHJlc3VsdCBzZXQAc3RhdF9nZXQAc3FsaXRlX2NvbXBpbGVvcHRpb25fZ2V0AHN0cmljdABOb0NvbmZsaWN0AGpzb25fZ3JvdXBfb2JqZWN0AGpzb25fb2JqZWN0AGpzb25fZXh0cmFjdABTdWJ0cmFjdAB0YmwsaWR4LHN0YXQAdW5zdXBwb3J0ZWQgZmlsZSBmb3JtYXQAZ3JvdXBfY29uY2F0AENvbmNhdABMdABHdABkZWZlcl9mb3JlaWduX2tleXMAYWx3YXlzAHBhcmFtZXRlcnMgYXJlIG5vdCBhbGxvd2VkIGluIHZpZXdzAHN0YXR1cwBzeW5jaHJvbm91cwBpbmRleCAlcyBhbHJlYWR5IGV4aXN0cwBvdXRwdXQgZmlsZSBhbHJlYWR5IGV4aXN0cwAlcyAlVCBhbHJlYWR5IGV4aXN0cwB0cmlnZ2VyICVUIGFscmVhZHkgZXhpc3RzAE5vdEV4aXN0cwBpZ25vcmVfY2hlY2tfY29uc3RyYWludHMAQ0hFQ0sgY29uc3RyYWludHMAZXhwcmVzc2lvbnMgcHJvaGliaXRlZCBpbiBQUklNQVJZIEtFWSBhbmQgVU5JUVVFIGNvbnN0cmFpbnRzAGpzb25fb2JqZWN0KCkgcmVxdWlyZXMgYW4gZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzAGpzb25fJXMoKSBuZWVkcyBhbiBvZGQgbnVtYmVyIG9mIGFyZ3VtZW50cwB1bmFibGUgdG8gZGVsZXRlL21vZGlmeSB1c2VyLWZ1bmN0aW9uIGR1ZSB0byBhY3RpdmUgc3RhdGVtZW50cwB1bmFibGUgdG8gZGVsZXRlL21vZGlmeSBjb2xsYXRpb24gc2VxdWVuY2UgZHVlIHRvIGFjdGl2ZSBzdGF0ZW1lbnRzAHJldmVyc2VfdW5vcmRlcmVkX3NlbGVjdHMAaWlzc3Nzc3MAaXNzAGNhbm5vdCBvcGVuIHNhdmVwb2ludCAtIFNRTCBzdGF0ZW1lbnRzIGluIHByb2dyZXNzAGNhbm5vdCByZWxlYXNlIHNhdmVwb2ludCAtIFNRTCBzdGF0ZW1lbnRzIGluIHByb2dyZXNzAGNhbm5vdCBjb21taXQgdHJhbnNhY3Rpb24gLSBTUUwgc3RhdGVtZW50cyBpbiBwcm9ncmVzcwBjYW5ub3QgVkFDVVVNIC0gU1FMIHN0YXRlbWVudHMgaW4gcHJvZ3Jlc3MAYWNjZXNzAHBhcmFtZXRlcnMAcmVjdXJzaXZlX3RyaWdnZXJzAHRoZSBJTkRFWEVEIEJZIGNsYXVzZSBpcyBub3QgYWxsb3dlZCBvbiBVUERBVEUgb3IgREVMRVRFIHN0YXRlbWVudHMgd2l0aGluIHRyaWdnZXJzAHRoZSBOT1QgSU5ERVhFRCBjbGF1c2UgaXMgbm90IGFsbG93ZWQgb24gVVBEQVRFIG9yIERFTEVURSBzdGF0ZW1lbnRzIHdpdGhpbiB0cmlnZ2VycwBxdWFsaWZpZWQgdGFibGUgbmFtZXMgYXJlIG5vdCBhbGxvd2VkIG9uIElOU0VSVCwgVVBEQVRFLCBhbmQgREVMRVRFIHN0YXRlbWVudHMgd2l0aGluIHRyaWdnZXJzAENoaWxkIHBhZ2UgZGVwdGggZGlmZmVycwB1bmFibGUgdG8gY2xvc2UgZHVlIHRvIHVuZmluYWxpemVkIHN0YXRlbWVudHMgb3IgdW5maW5pc2hlZCBiYWNrdXBzAElmUG9zAGNvbXBpbGVfb3B0aW9ucwBESVNUSU5DVCBpcyBub3Qgc3VwcG9ydGVkIGZvciB3aW5kb3cgZnVuY3Rpb25zAEZJTFRFUiBjbGF1c2UgbWF5IG9ubHkgYmUgdXNlZCB3aXRoIGFnZ3JlZ2F0ZSB3aW5kb3cgZnVuY3Rpb25zAG5vbi1kZXRlcm1pbmlzdGljIGZ1bmN0aW9ucwBpbmRleCBleHByZXNzaW9ucwBTRUxFQ1RzIHRvIHRoZSBsZWZ0IGFuZCByaWdodCBvZiAlcyBkbyBub3QgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgcmVzdWx0IGNvbHVtbnMAdmlydHVhbCB0YWJsZXMgY2Fubm90IHVzZSBjb21wdXRlZCBjb2x1bW5zAGdlbmVyYXRlZCBjb2x1bW5zAHRhYmxlICVzIGhhcyAlZCB2YWx1ZXMgZm9yICVkIGNvbHVtbnMAYWxsIFZBTFVFUyBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIHRlcm1zAGVtcHR5X3Jlc3VsdF9jYWxsYmFja3MATG9hZEFuYWx5c2lzAGZsZ3MAZmxhZ3MAdmZzACVkIGNvbHVtbnMgYXNzaWduZWQgJWQgdmFsdWVzAEpTT04gY2Fubm90IGhvbGQgQkxPQiB2YWx1ZXMAZmFpbGVkIG1lbW9yeSByZXNpemUgJXUgdG8gJXUgYnl0ZXMAcGFydGlhbCBpbmRleCBXSEVSRSBjbGF1c2VzAHNob3J0X2NvbHVtbl9uYW1lcwBmdWxsX2NvbHVtbl9uYW1lcwB1bmFibGUgdG8gb3BlbiBhIHRlbXBvcmFyeSBkYXRhYmFzZSBmaWxlIGZvciBzdG9yaW5nIHRlbXBvcmFyeSB0YWJsZXMAY2Fubm90IGNyZWF0ZSB0cmlnZ2VycyBvbiB2aXJ0dWFsIHRhYmxlcwAlcyBSRVRVUk5JTkcgaXMgbm90IGF2YWlsYWJsZSBvbiB2aXJ0dWFsIHRhYmxlcwBjYW5ub3Qgam9pbiB1c2luZyBjb2x1bW4gJXMgLSBjb2x1bW4gbm90IHByZXNlbnQgaW4gYm90aCB0YWJsZXMAQVVUT0lOQ1JFTUVOVCBub3QgYWxsb3dlZCBvbiBXSVRIT1VUIFJPV0lEIHRhYmxlcwAlcyBjYW5ub3QgdXNlIHZhcmlhYmxlcwB0b28gbWFueSBTUUwgdmFyaWFibGVzAHN1YnF1ZXJpZXMAY2Fubm90IHVzZSB3aW5kb3cgZnVuY3Rpb25zIGluIHJlY3Vyc2l2ZSBxdWVyaWVzAGNvdW50X2NoYW5nZXMAdG90YWxfY2hhbmdlcwBSRVRVUk5JTkcgbWF5IG5vdCB1c2UgIlRBQkxFLioiIHdpbGRjYXJkcwB0aHJlYWRzAGFicwAuJS4qcwBDUkVBVEUgJXMgJS4qcwBDUkVBVEUlcyBJTkRFWCAlLipzAGludmFsaWQgdXJpIGF1dGhvcml0eTogJS4qcwB1bmtub3duIHRhYmxlIG9wdGlvbjogJS4qcwAlLipzJXMALCVzJXMlcwBTQ0FOICVzJXMlcwBzcWxpdGVfYWx0ZXJ0YWJfJXMAU0NBTiAlZCBDT05TVEFOVCBST1clcwAlUSVzACBWSVJUVUFMIFRBQkxFIElOREVYICVkOiVzACVzOiAlcy4lcy4lcwBtaXNzaW5nIGRhdGF0eXBlIGZvciAlcy4lcwBjYW5ub3Qgc3RvcmUgJXMgdmFsdWUgaW4gJXMgY29sdW1uICVzLiVzAG5vbi0lcyB2YWx1ZSBpbiAlcy4lcwBOVUxMIHZhbHVlIGluICVzLiVzACVzOiAlcy4lcwAuLiVzACUuMThzLSVzACBVU0lORyBJTlRFR0VSIFBSSU1BUlkgS0VZICglcwB1c2UgRFJPUCBWSUVXIHRvIGRlbGV0ZSB2aWV3ICVzAG1pc3VzZSBvZiBhbGlhc2VkIHdpbmRvdyBmdW5jdGlvbiAlcwB0b28gbWFueSBjb2x1bW5zIG9uICVzAHRvbyBtYW55IGNvbHVtbnMgaW4gJXMAJXMgcHJvaGliaXRlZCBpbiAlcwBDSEVDSyBjb25zdHJhaW50IGZhaWxlZCBpbiAlcwBub24tZGV0ZXJtaW5pc3RpYyB1c2Ugb2YgJXMoKSBpbiAlcwByZWNvdmVyZWQgJWQgcGFnZXMgZnJvbSAlcwBtaXN1c2Ugb2YgYWxpYXNlZCBhZ2dyZWdhdGUgJXMAJXMgJVQgY2Fubm90IHJlZmVyZW5jZSBvYmplY3RzIGluIGRhdGFiYXNlICVzAGNhbm5vdCBkZXRhY2ggZGF0YWJhc2UgJXMAYSBKT0lOIGNsYXVzZSBpcyByZXF1aXJlZCBiZWZvcmUgJXMAUFJJTUFSWSBLRVkgbWlzc2luZyBvbiB0YWJsZSAlcwB1c2UgRFJPUCBUQUJMRSB0byBkZWxldGUgdGFibGUgJXMAdGhlcmUgaXMgYWxyZWFkeSBhbiBpbmRleCBuYW1lZCAlcwB0YWJsZSAlUyBoYXMgbm8gY29sdW1uIG5hbWVkICVzAHRoZXJlIGlzIGFscmVhZHkgYSB0YWJsZSBuYW1lZCAlcwBzdGF0ZW1lbnQgYWJvcnRzIGF0ICVkOiBbJXNdICVzAENPVkVSSU5HIElOREVYICVzAHVuc3VwcG9ydGVkIHVzZSBvZiBOVUxMUyAlcwBVU0UgVEVNUCBCLVRSRUUgRk9SICVzAC0tIFRSSUdHRVIgJXMAUklHSFQtSk9JTiAlcwA+PyBBTkQgJXMAJXo6ICVzAHJlY3Vyc2l2ZSByZWZlcmVuY2UgaW4gYSBzdWJxdWVyeTogJXMAdnRhYmxlIGNvbnN0cnVjdG9yIGNhbGxlZCByZWN1cnNpdmVseTogJXMAbm8gc3VjaCBpbmRleDogJXMAbm8gc3VjaCB3aW5kb3c6ICVzAGNhbm5vdCBvdmVycmlkZSAlcyBvZiB3aW5kb3c6ICVzAG5vIHN1Y2ggc2F2ZXBvaW50OiAlcwBubyBzdWNoIHZmczogJXMAbXVsdGlwbGUgcmVjdXJzaXZlIHJlZmVyZW5jZXM6ICVzAGVycm9yIGluICVzICVzJXMlczogJXMAZXJyb3IgaW4gJXMgJXMgYWZ0ZXIgJXM6ICVzAG5vIHN1Y2ggY29sdW1uOiAlcwBNSiBkZWxldGU6ICVzAHRhcmdldCBvYmplY3QvYWxpYXMgbWF5IG5vdCBhcHBlYXIgaW4gRlJPTSBjbGF1c2U6ICVzAG9iamVjdCBuYW1lIHJlc2VydmVkIGZvciBpbnRlcm5hbCB1c2U6ICVzAHVuYWJsZSB0byBvcGVuIGRhdGFiYXNlOiAlcwBubyBzdWNoIGRhdGFiYXNlOiAlcwB0aGVyZSBpcyBhbHJlYWR5IGFub3RoZXIgdGFibGUgb3IgaW5kZXggd2l0aCB0aGlzIG5hbWU6ICVzAGR1cGxpY2F0ZSBjb2x1bW4gbmFtZTogJXMAZHVwbGljYXRlIFdJVEggdGFibGUgbmFtZTogJXMAbm8gc3VjaCBtb2R1bGU6ICVzAG5vIHN1Y2ggdGFibGU6ICVzAG11bHRpcGxlIHJlZmVyZW5jZXMgdG8gcmVjdXJzaXZlIHRhYmxlOiAlcwBubyBzdWNoICVzIG1vZGU6ICVzAE1KIGNvbGxpZGU6ICVzAG5vIHN1Y2ggY29sbGF0aW9uIHNlcXVlbmNlOiAlcwBjaXJjdWxhciByZWZlcmVuY2U6ICVzACVzIG1vZGUgbm90IGFsbG93ZWQ6ICVzAHZ0YWJsZSBjb25zdHJ1Y3RvciBmYWlsZWQ6ICVzAGF1dG9tYXRpYyBleHRlbnNpb24gbG9hZGluZyBmYWlsZWQ6ICVzAHZ0YWJsZSBjb25zdHJ1Y3RvciBkaWQgbm90IGRlY2xhcmUgc2NoZW1hOiAlcwBhYm9ydCBhdCAlZCBpbiBbJXNdOiAlcwAtLSAlcwAleiAtICVzAHdyAGluc3RyAHN1YnN0cgBleHByX2ltcGxpZXNfZXhwcgB0aGUgIi4iIG9wZXJhdG9yAG5lYXIgIiVUIjogc3ludGF4IGVycm9yAHVua25vd24gZXJyb3IAbm90IGFuIGVycm9yAFNRTCBsb2dpYyBlcnJvcgBkaXNrIEkvTyBlcnJvcgBsb3dlcgBzcWxpdGVfdGVtcF9tYXN0ZXIAc3FsaXRlX21hc3RlcgBSZXNldFNvcnRlcgBGa0NvdW50ZXIAQVBJIGNhbGwgd2l0aCAlcyBkYXRhYmFzZSBjb25uZWN0aW9uIHBvaW50ZXIAVkZpbHRlcgBFU0NBUEUgZXhwcmVzc2lvbiBtdXN0IGJlIGEgc2luZ2xlIGNoYXJhY3RlcgB1cHBlcgBJZlNtYWxsZXIAY2Fubm90IHVzZSBSRVRVUk5JTkcgaW4gYSB0cmlnZ2VyAERyb3BUcmlnZ2VyAHNlY29uZCBhcmd1bWVudCB0byBudGhfdmFsdWUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIAYXJndW1lbnQgb2YgbnRpbGUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIAZnJhbWUgc3RhcnRpbmcgb2Zmc2V0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcgBmcmFtZSBlbmRpbmcgb2Zmc2V0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcgBJbnRlZ2VyAFJvd2lkICVsbGQgb3V0IG9mIG9yZGVyAFJlbWFpbmRlcgBmcmFtZSBzdGFydGluZyBvZmZzZXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIAZnJhbWUgZW5kaW5nIG9mZnNldCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcgBhZGRyAGNoYXIAeWVhcgBDbGVhcgBCaXRPcgBzZXEAQ29sbFNlcQBFbHNlRXEAcmVnZXhwAE9wZW5EdXAATm9vcABKdW1wAHRlbXAAY3VycmVudF90aW1lc3RhbXAAQWdnU3RlcAB2dGFiOiVwAGF1dG8AR290bwBpbmNyZW1lbnRhbF92YWN1dW0gZW5hYmxlZCB3aXRoIGEgbWF4IHJvb3RwYWdlIG9mIHplcm8ASWZOb3RaZXJvAERlY3JKdW1wWmVybwBGa0lmWmVybwBzZXFubwBkZW5vAGluZGV4X3hpbmZvAHRhYmxlX3hpbmZvAGluZGV4X2luZm8AdGFibGVfaW5mbwBPcGVuUHNldWRvAEJlZ2luU3VicnRuAFJldHVybgBqc29uAG5vIHF1ZXJ5IHNvbHV0aW9uAGluZGV4IGNvcnJ1cHRpb24AZGF0YWJhc2UgY29ycnVwdGlvbgBmcmVlIHNwYWNlIGNvcnJ1cHRpb24AdW5rbm93biBjb2x1bW4gIiVzIiBpbiBmb3JlaWduIGtleSBkZWZpbml0aW9uACVzLnhCZXN0SW5kZXggbWFsZnVuY3Rpb24AYXV0aG9yaXplciBtYWxmdW5jdGlvbgAlI1QoKSBtYXkgbm90IGJlIHVzZWQgYXMgYSB3aW5kb3cgZnVuY3Rpb24AJyVzJyBpcyBub3QgYSBmdW5jdGlvbgBGdW5jdGlvbgBjYW5ub3Qgc3RhcnQgYSB0cmFuc2FjdGlvbiB3aXRoaW4gYSB0cmFuc2FjdGlvbgB0ZW1wb3Jhcnkgc3RvcmFnZSBjYW5ub3QgYmUgY2hhbmdlZCBmcm9tIHdpdGhpbiBhIHRyYW5zYWN0aW9uAGNhbm5vdCBWQUNVVU0gZnJvbSB3aXRoaW4gYSB0cmFuc2FjdGlvbgBTYWZldHkgbGV2ZWwgbWF5IG5vdCBiZSBjaGFuZ2VkIGluc2lkZSBhIHRyYW5zYWN0aW9uAFRyYW5zYWN0aW9uAFBlcm11dGF0aW9uAHVua25vd24gb3BlcmF0aW9uAHVuc3VwcG9ydGVkIGZyYW1lIHNwZWNpZmljYXRpb24AUkFOR0Ugd2l0aCBvZmZzZXQgUFJFQ0VESU5HL0ZPTExPV0lORyByZXF1aXJlcyBvbmUgT1JERVIgQlkgZXhwcmVzc2lvbgB0b28gbWFueSBsZXZlbHMgb2YgdHJpZ2dlciByZWN1cnNpb24AdXNlcl92ZXJzaW9uAHNxbGl0ZV92ZXJzaW9uAGRhdGFfdmVyc2lvbgBzY2hlbWFfdmVyc2lvbgBzcWxpdGVfZHJvcF9jb2x1bW4Ac3FsaXRlX3JlbmFtZV9jb2x1bW4AYWZ0ZXIgZHJvcCBjb2x1bW4Abm8gc3VjaCBjb2x1bW4AbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBub24tZ2VuZXJhdGVkIGNvbHVtbgBjYW5ub3QgdXNlIERFRkFVTFQgb24gYSBnZW5lcmF0ZWQgY29sdW1uAGFkZCBjb2x1bW4AQ2Fubm90IGFkZCBhIFBSSU1BUlkgS0VZIGNvbHVtbgBDYW5ub3QgYWRkIGEgVU5JUVVFIGNvbHVtbgBjYW5ub3QgYWRkIGEgU1RPUkVEIGNvbHVtbgBWQ29sdW1uAGJ1aWx0aW4AYXQgbW9zdCAlZCB0YWJsZXMgaW4gYSBqb2luAG1pbgBvcmlnaW4AVkJlZ2luAG1haW4ARXhwbGFpbgBzaWduAElmTm90T3BlbgBTb3J0ZXJPcGVuAFZPcGVuAGhpZGRlbgBTZWVrU2NhbgBWSW5pdEluAGF1dG9fdmFjdXVtAGluY3JlbWVudGFsX3ZhY3V1bQBJbmNyVmFjdXVtAHN1bQBkcm9wIGNvbHVtbiBmcm9tAHJhbmRvbQBBZGRJbW0AcnRyaW0AbHRyaW0AUkFJU0UoKSBtYXkgb25seSBiZSB1c2VkIHdpdGhpbiBhIHRyaWdnZXItcHJvZ3JhbQBQcm9ncmFtAFBhcmFtAGxvY2tpbmcgcHJvdG9jb2wAbmNvbABub3RudWxsAGlmbnVsbABkYXRhYmFzZSBvciBkaXNrIGlzIGZ1bGwATm90TnVsbABTb2Z0TnVsbABJc051bGwAWmVyb09yTnVsbABIYWx0SWZOdWxsAGNvbGwAY2FjaGVfc3BpbGwAUm93Q2VsbABkZXRhaWwAdGJsAHZpcnR1YWwAdG90YWwAaW5jcmVtZW50YWwAT3BlbkVwaGVtZXJhbABBZ2dGaW5hbABub3JtYWwAcGFydGlhbAByZWFsAFJlYWwAcGsAb2sARmluaXNoU2VlawBEZWZlcnJlZFNlZWsAbm9sb2NrAEN1cnNvclVubG9jawBDdXJzb3JMb2NrAFRhYmxlTG9jawBpbnRlZ3JpdHlfY2hlY2sAZm9yZWlnbl9rZXlfY2hlY2sAcXVpY2tfY2hlY2sAY2VsbF9zaXplX2NoZWNrAEZrQ2hlY2sAVHlwZUNoZWNrAEludGVncml0eUNrAGlzc2lzaQBpc2lzaQBzaXNzaWkAaXNzaXNpaQBzc3NpaWkAbW9udGgAanNvbl9hcnJheV9sZW5ndGgAb3ZlcmZsb3cgbGlzdCBsZW5ndGgAd2R0aABzdGF0X3B1c2gAanNvbl9wYXRjaABkYXRhdHlwZSBtaXNtYXRjaABhYmJyZXZpYXRlZCBxdWVyeSBhbGdvcml0aG0gc2VhcmNoAHVuaXhlcG9jaABzcWxpdGVfYXR0YWNoAHNxbGl0ZV9kZXRhY2gAanNvbl9lYWNoAGF2ZwBuYXJnAHNxbGl0ZV9sb2cAc3RhdGVtZW50IHRvbyBsb25nAHN1YnN0cmluZwBTdHJpbmcAc3FsaXRlX3JldHVybmluZwBzdHJpbmcgb3IgYmxvYiB0b28gYmlnAFJlbGVhc2VSZWcAJS4xNmcAJSEuMTVnAHByaW50ZgB0eXBlb2YAcmVuYW1lIGNvbHVtbnMgb2YAbnVsbGlmAGlpZgBvZmYAMDEyMzQ1Njc4OWFiY2RlZgBJZgAlMDYuM2YAJS4qZgBtbWFwX3NpemUAY2FjaGVfc2l6ZQBwYWdlX3NpemUAb3B0aW1pemUAanNvbl9yZW1vdmUATW92ZQBjYW5ub3QgY29tbWl0IC0gbm8gdHJhbnNhY3Rpb24gaXMgYWN0aXZlAGNhbm5vdCByb2xsYmFjayAtIG5vIHRyYW5zYWN0aW9uIGlzIGFjdGl2ZQBleGNsdXNpdmUAdHJ1ZQBJc1RydWUAdW5pcXVlAGRmbHRfdmFsdWUAQ2Fubm90IGFkZCBhIFJFRkVSRU5DRVMgY29sdW1uIHdpdGggbm9uLU5VTEwgZGVmYXVsdCB2YWx1ZQBBZ2dWYWx1ZQBqc29uX3F1b3RlAE9wZW5Xcml0ZQBvbl9kZWxldGUAc2VjdXJlX2RlbGV0ZQBJZHhEZWxldGUAcHJpdmF0ZQBhZ2dyZWdhdGUAVkNyZWF0ZQBvbl91cGRhdGUAVlVwZGF0ZQBjdXJyZW50X2RhdGUAdHJ1bmNhdGUAYmFkIHBhcmFtZXRlciBvciBvdGhlciBBUEkgbWlzdXNlAHRvbyBtYW55IHRlcm1zIGluICVzIEJZIGNsYXVzZQB0b28gbWFueSB0ZXJtcyBpbiBPUkRFUiBCWSBjbGF1c2UAYWdncmVnYXRlIGZ1bmN0aW9ucyBhcmUgbm90IGFsbG93ZWQgaW4gdGhlIEdST1VQIEJZIGNsYXVzZQBQQVJUSVRJT04gY2xhdXNlAGEgTkFUVVJBTCBqb2luIG1heSBub3QgaGF2ZSBhbiBPTiBvciBVU0lORyBjbGF1c2UAZGF0YWJhc2UgJXMgaXMgYWxyZWFkeSBpbiB1c2UAQWdnSW52ZXJzZQBDbG9zZQBmYWxzZQBhdHRlbXB0IHRvIHdyaXRlIGEgcmVhZG9ubHkgZGF0YWJhc2UAY29ycnVwdCBkYXRhYmFzZQBhdHRhY2hlZCBkYXRhYmFzZXMgbXVzdCB1c2UgdGhlIHNhbWUgdGV4dCBlbmNvZGluZyBhcyBtYWluIGRhdGFiYXNlAGZpbGUgaXMgbm90IGEgZGF0YWJhc2UAdGVtcF9zdG9yZQAlcyBjbGF1c2Ugc2hvdWxkIGNvbWUgYWZ0ZXIgJXMgbm90IGJlZm9yZQBFeHBpcmUAZXhwcl9jb21wYXJlAFNvcnRlckNvbXBhcmUAc3VidHlwZQBDbHJTdWJ0eXBlAGpzb25fdHlwZQBJc051bGxPclR5cGUASWZOb0hvcGUAbm9uZQBJbml0Q29yb3V0aW5lAEVuZENvcm91dGluZQBsb2NhbHRpbWUAc3RyZnRpbWUAZGF0ZXRpbWUAY3VycmVudF90aW1lAGFmdGVyIHJlbmFtZQBub24tdGV4dCBmaWxlbmFtZQBWUmVuYW1lAGFtYmlndW91cyBjb2x1bW4gbmFtZQB0ZW1wb3JhcnkgdHJpZ2dlciBtYXkgbm90IGhhdmUgcXVhbGlmaWVkIG5hbWUAY2Fubm90IG9wZW4gZmlsZQB1bmFibGUgdG8gb3BlbiBkYXRhYmFzZSBmaWxlAGltbXV0YWJsZQBBYm9ydGFibGUAbGVnYWN5X2FsdGVyX3RhYmxlAHNxbGl0ZV9yZW5hbWVfdGFibGUAY2Fubm90IGNyZWF0ZSB0cmlnZ2VyIG9uIHN5c3RlbSB0YWJsZQB2aXJ0dWFsIHRhYmxlAG5vIHN1Y2ggdGFibGUAbnVtYmVyIG9mIGNvbHVtbnMgaW4gZm9yZWlnbiBrZXkgZG9lcyBub3QgbWF0Y2ggdGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSByZWZlcmVuY2VkIHRhYmxlAGxvY2FsIHRpbWUgdW5hdmFpbGFibGUAYW5vdGhlciByb3cgYXZhaWxhYmxlAG5vIG1vcmUgcm93cyBhdmFpbGFibGUAVmFyaWFibGUARHJvcFRhYmxlAHV0ZjE2bGUAY2FzZV9zZW5zaXRpdmVfbGlrZQBTZXRDb29raWUAUmVhZENvb2tpZQBjYWNoZQBjb2x1bW4gaW5kZXggb3V0IG9mIHJhbmdlAG5vdGlmaWNhdGlvbiBtZXNzYWdlAHdhcm5pbmcgbWVzc2FnZQBpbnZhbGlkIHJvb3RwYWdlAEV4dGVuZHMgb2ZmIGVuZCBvZiBwYWdlAGpzb25fdHJlZQBDcmVhdGVCdHJlZQBqb3VybmFsX21vZGUAbG9ja2luZ19tb2RlAG9wY29kZQB1bmljb2RlAEpvdXJuYWxNb2RlAERpdmlkZQBjb2FsZXNjZQBzcWxpdGVfc2VxdWVuY2UAU2VxdWVuY2UAT25jZQBUcmFjZQBqc29uX3JlcGxhY2UAdXRmMTZiZQBOZQBMZQBHZQAyMGM6MjBlADIwYjoyMGUAJSEuMjBlAE1ha2VSZWNvcmQAdGhzdG5kcmQAbGlrZWxpaG9vZAByb3VuZABOb3RGb3VuZABSZXdpbmQAU2Vla0VuZABCaXRBbmQAb2xkACVsbGQAWWllbGQAbGFzdF9pbnNlcnRfcm93aWQAJXMucm93aWQAU0VMRUNUKkZST00iJXciLiVzIE9SREVSIEJZIHJvd2lkAFNFTEVDVCpGUk9NIiV3Ii4lcyBXSEVSRSAlcyBPUkRFUiBCWSByb3dpZABJZHhSb3dpZABOZXdSb3dpZABTZWVrUm93aWQAaW52YWxpZABqc29uX3ZhbGlkAGZraWQAY2lkAGFwcGxpY2F0aW9uX2lkAHNxbGl0ZV9zb3VyY2VfaWQAbm90IGF1dGhvcml6ZWQAdW5hYmxlIHRvIGlkZW50aWZ5IHRoZSBvYmplY3QgdG8gYmUgcmVpbmRleGVkAHZpZXdzIG1heSBub3QgYmUgaW5kZXhlZAB2aXJ0dWFsIHRhYmxlcyBtYXkgbm90IGJlIGluZGV4ZWQAdGFibGUgJXMgbWF5IG5vdCBiZSBpbmRleGVkAHJlYWRfdW5jb21taXR0ZWQAcmVjdXJzaXZlIGFnZ3JlZ2F0ZSBxdWVyaWVzIG5vdCBzdXBwb3J0ZWQATG9hZGFibGUgZXh0ZW5zaW9ucyBhcmUgbm90IHN1cHBvcnRlZABxdWVyeSBhYm9ydGVkAHJvd3MgaW5zZXJ0ZWQAaW50ZXJydXB0ZWQAY2hlY2twb2ludGVkAGFjY2VzcyB0byAleiBpcyBwcm9oaWJpdGVkAGFjY2VzcyB0byB2aWV3ICIlcyIgcHJvaGliaXRlZAByb3dzIGRlbGV0ZWQAZ2VuZXJhdGVkAHJvd3MgdXBkYXRlZABub3R1c2VkAHJvdyB2YWx1ZSBtaXN1c2VkAHNxbGl0ZV9jb21waWxlb3B0aW9uX3VzZWQAUGFnZSAlZCBpcyBuZXZlciB1c2VkAENvbHVtbnNVc2VkAHN0b3JlZAB2aXJ0dWFsIHRhYmxlcyBtYXkgbm90IGJlIGFsdGVyZWQAdmlldyAlcyBtYXkgbm90IGJlIGFsdGVyZWQAdGFibGUgJXMgbWF5IG5vdCBiZSBhbHRlcmVkAHNoYXJlZABpbmRleCBhc3NvY2lhdGVkIHdpdGggVU5JUVVFIG9yIFBSSU1BUlkgS0VZIGNvbnN0cmFpbnQgY2Fubm90IGJlIGRyb3BwZWQAdGFibGUgJXMgbWF5IG5vdCBiZSBkcm9wcGVkAHZpZXcgJXMgaXMgY2lyY3VsYXJseSBkZWZpbmVkAHVub3BlbmVkAGRhdGFiYXNlIGRpc2sgaW1hZ2UgaXMgbWFsZm9ybWVkACVzIGNvbnN0cmFpbnQgZmFpbGVkAEZPUkVJR04gS0VZIGNvbnN0cmFpbnQgZmFpbGVkAGRhdGFiYXNlICVzIGlzIGxvY2tlZABkYXRhYmFzZSBpcyBsb2NrZWQAZGF0YWJhc2UgdGFibGUgaXMgbG9ja2VkAGF1dGhvcml6YXRpb24gZGVuaWVkAGFjY2VzcyBwZXJtaXNzaW9uIGRlbmllZAB0YWJsZSAlUyBoYXMgJWQgY29sdW1ucyBidXQgJWQgdmFsdWVzIHdlcmUgc3VwcGxpZWQAdGVtcG9yYXJ5IHRhYmxlIG5hbWUgbXVzdCBiZSB1bnF1YWxpZmllZAB0YWJsZSAlcyBtYXkgbm90IGJlIG1vZGlmaWVkAGNvbmZsaWN0aW5nIE9OIENPTkZMSUNUIGNsYXVzZXMgc3BlY2lmaWVkAG5vIHRhYmxlcyBzcGVjaWZpZWQAZGF0YWJhc2UgaXMgYWxyZWFkeSBhdHRhY2hlZABkYXRhYmFzZSBzY2hlbWEgaGFzIGNoYW5nZWQAZXhjbHVkZWQAUG9pbnRlciBtYXAgcGFnZSAlZCBpcyByZWZlcmVuY2VkAFJvd1NldEFkZABGaWx0ZXJBZGQAUm93U2V0UmVhZABPcGVuUmVhZAAlMDRkACUwM2QAJTAyZAA0MGYtMjFhLTIxZABzcWxpdGVfc3RhdCVkAGNvbHVtbiVkAHNxbGl0ZV9hdXRvaW5kZXhfJXNfJWQAdmFyaWFibGUgbnVtYmVyIG11c3QgYmUgYmV0d2VlbiA/MSBhbmQgPyVkAEZhaWxlZCB0byByZWFkIHB0cm1hcCBrZXk9JWQAdW5hYmxlIHRvIGdldCB0aGUgcGFnZS4gZXJyb3IgY29kZT0lZABPZmZzZXQgJWQgb3V0IG9mIHJhbmdlICVkLi4lZABrKCVkAFVQREFURSAlUS5zcWxpdGVfbWFzdGVyIFNFVCByb290cGFnZT0lZCBXSEVSRSAjJWQgQU5EIHJvb3RwYWdlPSMlZABVUERBVEUgJVEuc3FsaXRlX21hc3RlciBTRVQgdHlwZT0nJXMnLCBuYW1lPSVRLCB0YmxfbmFtZT0lUSwgcm9vdHBhZ2U9IyVkLCBzcWw9JVEgV0hFUkUgcm93aWQ9IyVkAFVQREFURSAlUS5zcWxpdGVfbWFzdGVyIFNFVCB0eXBlPSd0YWJsZScsIG5hbWU9JVEsIHRibF9uYW1lPSVRLCByb290cGFnZT0wLCBzcWw9JVEgV0hFUkUgcm93aWQ9IyVkAHRvbyBtYW55IGF0dGFjaGVkIGRhdGFiYXNlcyAtIG1heCAlZAB0b28gbWFueSBhcmd1bWVudHMgb24gJXMoKSAtIG1heCAlZABleHBlY3RlZCAlZCBjb2x1bW5zIGZvciAnJXMnIGJ1dCBnb3QgJWQAaW52YWxpZCBwYWdlIG51bWJlciAlZABmYWlsZWQgdG8gZ2V0IHBhZ2UgJWQAMm5kIHJlZmVyZW5jZSB0byBwYWdlICVkAGZyZWVsaXN0IGxlYWYgY291bnQgdG9vIGJpZyBvbiBwYWdlICVkAGJ0cmVlSW5pdFBhZ2UoKSByZXR1cm5zIGVycm9yIGNvZGUgJWQAJXMgaXMgJWQgYnV0IHNob3VsZCBiZSAlZAAlciAlcyBCWSB0ZXJtIG91dCBvZiByYW5nZSAtIHNob3VsZCBiZSBiZXR3ZWVuIDEgYW5kICVkAHN1Yi1zZWxlY3QgcmV0dXJucyAlZCBjb2x1bW5zIC0gZXhwZWN0ZWQgJWQASU4oLi4uKSBlbGVtZW50IGhhcyAlZCB0ZXJtJXMgLSBleHBlY3RlZCAlZAAlc0xJU1QgU1VCUVVFUlkgJWQAUkVVU0UgTElTVCBTVUJRVUVSWSAlZAAlc1NDQUxBUiBTVUJRVUVSWSAlZABSRVVTRSBTVUJRVUVSWSAlZABJTkRFWCAlZAB0b28gbWFueSBGUk9NIGNsYXVzZSB0ZXJtcywgbWF4OiAlZAByd2MAdXRjAGRlc2MAY2hlY2twb2ludF9mdWxsZnN5bmMAUHVyZUZ1bmMAZW5jAG51bWVyaWMAU3FsRXhlYwAlLjRjJXMlLjE2YwBHb3N1YgBnbG9iAHplcm9ibG9iAHJhbmRvbWJsb2IAQmxvYgBtZW1kYgBBVFRBQ0ggJVEgQVMgdmFjdXVtX2RiAFJvd0RhdGEAU29ydGVyRGF0YQBzcWxpdGVfdGVtcF9zY2hlbWEAc3FsaXRlX3NjaGVtYQB3cml0YWJsZV9zY2hlbWEAdHJ1c3RlZF9zY2hlbWEAY29ycnVwdCBzY2hlbWEAUGFyc2VTY2hlbWEAc3FsaXRlXwBwcmFnbWFfAFNRTElURV8AX1JPV0lEXwAlcyBhdCBsaW5lICVkIG9mIFslLjEwc10AYmluZCBvbiBhIGJ1c3kgcHJlcGFyZWQgc3RhdGVtZW50OiBbJXNdAFslZF0AW10AWzBdACRbAExFRlQtTU9TVCBTVUJRVUVSWQBDT01QT1VORCBRVUVSWQBBTlkAZ2VuZXJhdGVkIGNvbHVtbnMgY2Fubm90IGJlIHBhcnQgb2YgdGhlIFBSSU1BUlkgS0VZAEFVVE9JTkNSRU1FTlQgaXMgb25seSBhbGxvd2VkIG9uIGFuIElOVEVHRVIgUFJJTUFSWSBLRVkARk9SRUlHTiBLRVkAUklHSFQgUEFSVCBPRiBPUkRFUiBCWQBHUk9VUCBCWQBpaXNYAGlzaVgAQVVUT01BVElDIFBBUlRJQUwgQ09WRVJJTkcgSU5ERVgAQVVUT01BVElDIENPVkVSSU5HIElOREVYAC1taiUwNlg5JTAyWABTQ0FOIENPTlNUQU5UIFJPVwBWSUVXAGpzb25fb2JqZWN0KCkgbGFiZWxzIG11c3QgYmUgVEVYVABGSVJTVABMQVNUAEVYQ0VQVAAgSU5UAElkeExUAFNlZWtMVABTRVQgREVGQVVMVABNVVRFWF9PTUlUAENPTU1JVABMSU1JVABSSUdIVABJZHhHVABTZWVrR1QATEVGVABESVNUSU5DVABSRVNUUklDVABJTlRFUlNFQ1QAdG9vIG1hbnkgdGVybXMgaW4gY29tcG91bmQgU0VMRUNUAHVua25vd24gam9pbiB0eXBlOiAlVCVzJVQlcyVUAC0lVAB0b28gbWFueSBhcmd1bWVudHMgb24gZnVuY3Rpb24gJVQAdW5rbm93biBkYXRhYmFzZSAlVABmb3JlaWduIGtleSBvbiAlcyBzaG91bGQgcmVmZXJlbmNlIG9ubHkgb25lIGNvbHVtbiBvZiB0YWJsZSAlVABDUkVBVEUgVklSVFVBTCBUQUJMRSAlVABoZXggbGl0ZXJhbCB0b28gYmlnOiAlcyUjVABubyBzdWNoIGZ1bmN0aW9uOiAlI1QAbm90IGF1dGhvcml6ZWQgdG8gdXNlIGZ1bmN0aW9uOiAlI1QAREVGQVVMVF9GT1JFSUdOX0tFWVMAREVGQVVMVF9SRUNVUlNJVkVfVFJJR0dFUlMASU5TAExJS0VfRE9FU05UX01BVENIX0JMT0JTACVzICVTAG5vIHN1Y2ggaW5kZXg6ICVTAGNhbm5vdCBjcmVhdGUgJXMgdHJpZ2dlciBvbiB2aWV3OiAlUwBubyBzdWNoIHRyaWdnZXI6ICVTAGNhbm5vdCBjcmVhdGUgSU5TVEVBRCBPRiB0cmlnZ2VyIG9uIHRhYmxlOiAlUwBNQVRFUklBTElaRSAlIVMAQ08tUk9VVElORSAlIVMAVVNJTkcgSU5ERVggJXMgRk9SIElOLU9QRVJBVE9SAFVTSU5HIFJPV0lEIFNFQVJDSCBPTiBUQUJMRSAlcyBGT1IgSU4tT1BFUkFUT1IATVVMVEktSU5ERVggT1IAQUZURVIASU5URUdFUgBPUkRFUgBERUxFVEUgRlJPTSAlUS4lcyBXSEVSRSAlcz0lUQBuYW1lPSVRIEFORCBzcWw9JVEAREVMRVRFIEZST00gJVEuc3FsaXRlX3NlcXVlbmNlIFdIRVJFIG5hbWU9JVEAQVRUQUNIIHggQVMgJVEAVVBEQVRFICIldyIuc3FsaXRlX3NlcXVlbmNlIHNldCBuYW1lID0gJVEgV0hFUkUgbmFtZSA9ICVRAFVQREFURSAiJXciLnNxbGl0ZV9tYXN0ZXIgU0VUIHNxbCA9IHByaW50ZignJSUuJWRzLCAnLHNxbCkgfHwgJVEgfHwgc3Vic3RyKHNxbCwxK2xlbmd0aChwcmludGYoJyUlLiVkcycsc3FsKSkpIFdIRVJFIHR5cGUgPSAndGFibGUnIEFORCBuYW1lID0gJVEAU0VUVVAAR1JPVVAAUkVDVVJTSVZFIFNURVAATmFOAG1hbGZvcm1lZCBKU09OAE5PIEFDVElPTgBPTUlUX0xPQURfRVhURU5TSU9OAFVOSU9OACBMRUZULUpPSU4AQkVHSU4ALGFyZyBISURERU4ALHNjaGVtYSBISURERU4AU0NBTgBERUZBVUxUX0FVVE9WQUNVVU0AIE5VTQBSVFJJTQBDYW5ub3QgYWRkIGEgTk9UIE5VTEwgY29sdW1uIHdpdGggZGVmYXVsdCB2YWx1ZSBOVUxMAE5PVCBOVUxMAFNFVCBOVUxMAFVOSU9OIEFMTABPTUlUX1dBTAAgUkVBTABDSEVDSwBhYm9ydCBkdWUgdG8gUk9MTEJBQ0sAT01JVF9QUk9HUkVTU19DQUxMQkFDSwBNQVRDSABTRUFSQ0gAVVNJTkcAIFVOSVFVRQBPTUlUX0NPTVBMRVRFAERFTEVURQBVUERBVEUAUkVMRUFTRQBOT0NBU0UAQkVGT1JFAENSRQBOT05FAElkeExFAFNlZWtMRQBUQUJMRQAxNkxFAE9NSVRfU0hBUkVEX0NBQ0hFAElkeEdFAFNlZWtHRQAlcyBVU0lORyBURU1QIEItVFJFRQBDQVNDQURFADE2QkUAUk9XSUQAT0lEAE9NSVRfREVQUkVDQVRFRABTWVNURU1fTUFMTE9DAEJMT0IAQkJCAEVOQUJMRV9DT0xVTU5fTUVUQURBVEEAJXM9PwByb3dpZD0/ADxleHByPgAtPj4ALT4APABJTlNFUlQgSU5UTyAlUS5zcWxpdGVfbWFzdGVyIFZBTFVFUygnaW5kZXgnLCVRLCVRLCMlZCwlUSk7AFVQREFURSAlUS5zcWxpdGVfbWFzdGVyIFNFVCB0YmxfbmFtZSA9ICVRLCBuYW1lID0gQ0FTRSBXSEVOIHR5cGU9J3RhYmxlJyBUSEVOICVRIFdIRU4gbmFtZSBMSUtFICdzcWxpdGVYX2F1dG9pbmRleCUlJyBFU0NBUEUgJ1gnICAgICAgQU5EIHR5cGU9J2luZGV4JyBUSEVOICdzcWxpdGVfYXV0b2luZGV4XycgfHwgJVEgfHwgc3Vic3RyKG5hbWUsJWQrMTgpIEVMU0UgbmFtZSBFTkQgV0hFUkUgdGJsX25hbWU9JVEgQ09MTEFURSBub2Nhc2UgQU5EICh0eXBlPSd0YWJsZScgT1IgdHlwZT0naW5kZXgnIE9SIHR5cGU9J3RyaWdnZXInKTsAOm1lbW9yeToAZmlsZToAU3RyaW5nOAB1dGY4AE1BWF9GVU5DVElPTl9BUkc9MTI3AERFRkFVTFRfU0VDVE9SX1NJWkU9NDA5NgBERUZBVUxUX1BBR0VfU0laRT00MDk2AE1BWF9WQVJJQUJMRV9OVU1CRVI9MzI3NjYATUFYX1BBR0VfU0laRT02NTUzNgBPTUlUX1VURjE2AHA1AHRvbyBtYW55IHJlZmVyZW5jZXMgdG8gIiVzIjogbWF4IDY1NTM1AHNxbGl0ZV9zdGF0NABwNABERUZBVUxUX0ZJTEVfRk9STUFUPTQASW50NjQATUFMTE9DX1NPRlRfTElNSVQ9MTAyNABDT01QSUxFUj1jbGFuZy0xNC4wLjQAc3FsaXRlX3N0YXQzAHAzAE1BWF9QQUdFX0NPVU5UPTEwNzM3NDE4MjMAMjAyMi0wNy0yMSAxNToyNDo0NyA2OThlZGI3NzUzN2I2N2M0MWFkYzY4ZjliODkyZGI1NmJjZjlhNTVlMDAzNzFhNjE0MjBmM2RkZDY2OGU2NjAzAHAyAERFRkFVTFRfU1lOQ0hST05PVVM9MgBERUZBVUxUX1dBTF9TWU5DSFJPTk9VUz0yAFRFTVBfU1RPUkU9MgBNQVhfREVGQVVMVF9QQUdFX1NJWkU9ODE5MgBTRUxFQ1QgdGJsLGlkeCxzdGF0IEZST00gJVEuc3FsaXRlX3N0YXQxAEFnZ1N0ZXAxAEFUT01JQ19JTlRSSU5TSUNTPTEAREVGQVVMVF9KT1VSTkFMX1NJWkVfTElNSVQ9LTEAU0VMRUNUJ0lOU0VSVCBJTlRPIHZhY3V1bV9kYi4nfHxxdW90ZShuYW1lKXx8JyBTRUxFQ1QqRlJPTSIldyIuJ3x8cXVvdGUobmFtZSlGUk9NIHZhY3V1bV9kYi5zcWxpdGVfc2NoZW1hIFdIRVJFIHR5cGU9J3RhYmxlJ0FORCBjb2FsZXNjZShyb290cGFnZSwxKT4wAFNFTEVDVCBzcWwgRlJPTSAiJXciLnNxbGl0ZV9zY2hlbWEgV0hFUkUgdHlwZT0ndGFibGUnQU5EIG5hbWU8PidzcWxpdGVfc2VxdWVuY2UnIEFORCBjb2FsZXNjZShyb290cGFnZSwxKT4wAE1BWF9XT1JLRVJfVEhSRUFEUz0wAERFRkFVTFRfV09SS0VSX1RIUkVBRFM9MABNQVhfTU1BUF9TSVpFPTAAREVGQVVMVF9NTUFQX1NJWkU9MABUSFJFQURTQUZFPTAAOTIyMzM3MjAzNjg1NDc3NTgwAERFRkFVTFRfUENBQ0hFX0lOSVRTWj0yMABNQVhfQVRUQUNIRUQ9MTAATUFYX0NPTVBPVU5EX1NFTEVDVD01MDAATUFYX0NPTFVNTj0yMDAwAERFRkFVTFRfQ0FDSEVfU0laRT0tMjAwMABERUZBVUxUX1dBTF9BVVRPQ0hFQ0tQT0lOVD0xMDAwAE1BWF9FWFBSX0RFUFRIPTEwMDAATUFYX1RSSUdHRVJfREVQVEg9MTAwMABNQVhfTElLRV9QQVRURVJOX0xFTkdUSD01MDAwMABNQVhfVkRCRV9PUD0yNTAwMDAwMDAATUFYX0xFTkdUSD0xMDAwMDAwMDAwAE1BWF9TUUxfTEVOR1RIPTEwMDAwMDAwMDAAc2Vjb25kIGFyZ3VtZW50IHRvICUjVCgpIG11c3QgYmUgYSBjb25zdGFudCBiZXR3ZWVuIDAuMCBhbmQgMS4wAE5vIG9wZW4gZGF0YWJhc2UuACVRLgBOLgAkLgAtACwAbm9za2lwc2NhbioAdW5vcmRlcmVkKgBzej1bMC05XSoAKHN1YnF1ZXJ5LSV1KQAoam9pbi0ldSkAQ1JFQVRFIFRBQkxFIHgodHlwZSB0ZXh0LG5hbWUgdGV4dCx0YmxfbmFtZSB0ZXh0LHJvb3RwYWdlIGludCxzcWwgdGV4dCkAQ1JFQVRFIFRBQkxFICVRLiVzKCVzKQBhdXRvbWF0aWMgaW5kZXggb24gJXMoJXMpAEFOWSglcykAbWFsZm9ybWVkIGRhdGFiYXNlIHNjaGVtYSAoJXMpAE1FUkdFICglcykAQ1JFQVRFIFRBQkxFICVRLnNxbGl0ZV9zZXF1ZW5jZShuYW1lLHNlcSkAVVBEQVRFICIldyIuc3FsaXRlX21hc3RlciBTRVQgc3FsID0gc3FsaXRlX2Ryb3BfY29sdW1uKCVkLCBzcWwsICVkKSBXSEVSRSAodHlwZT09J3RhYmxlJyBBTkQgdGJsX25hbWU9JVEgQ09MTEFURSBub2Nhc2UpAG1lbWRiKCVwLCVsbGQpAEJhZCBwdHIgbWFwIGVudHJ5IGtleT0lZCBleHBlY3RlZD0oJWQsJWQpIGdvdD0oJWQsJWQpACVzKCVkKQB6ZXJvYmxvYiglZCkAbWF4IHJvb3RwYWdlICglZCkgZGlzYWdyZWVzIHdpdGggaGVhZGVyICglZCkARXhwcmVzc2lvbiB0cmVlIGlzIHRvbyBsYXJnZSAobWF4aW11bSBkZXB0aCAlZCkAKGJsb2IpAFVTRSBURU1QIEItVFJFRSBGT1IgJXMoRElTVElOQ1QpAFVQREFURSAiJXciLnNxbGl0ZV9tYXN0ZXIgU0VUIHNxbCA9IHNxbGl0ZV9yZW5hbWVfY29sdW1uKHNxbCwgdHlwZSwgbmFtZSwgJVEsICVRLCAlZCwgJVEsICVkLCAlZCkgV0hFUkUgbmFtZSBOT1QgTElLRSAnc3FsaXRlWF8lJScgRVNDQVBFICdYJyAgQU5EICh0eXBlICE9ICdpbmRleCcgT1IgdGJsX25hbWUgPSAlUSkAQ1JFQVRFIFRBQkxFIHgoa2V5LHZhbHVlLHR5cGUsYXRvbSxpZCxwYXJlbnQsZnVsbGtleSxwYXRoLGpzb24gSElEREVOLHJvb3QgSElEREVOKQAoTlVMTCkAJWM/KQBJTlNFUlQgSU5UTyB2YWN1dW1fZGIuc3FsaXRlX3NjaGVtYSBTRUxFQ1QqRlJPTSAiJXciLnNxbGl0ZV9zY2hlbWEgV0hFUkUgdHlwZSBJTigndmlldycsJ3RyaWdnZXInKSBPUih0eXBlPSd0YWJsZSdBTkQgcm9vdHBhZ2U9MCkAbWlzdXNlIG9mIGFnZ3JlZ2F0ZTogJXMoKQBtaXN1c2Ugb2YgJXMgZnVuY3Rpb24gJSNUKCkAd3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBmdW5jdGlvbiAlI1QoKQB1bnNhZmUgdXNlIG9mICUjVCgpAEZJTFRFUiBtYXkgbm90IGJlIHVzZWQgd2l0aCBub24tYWdncmVnYXRlICUjVCgpAHVua25vd24gZnVuY3Rpb246ICUjVCgpAG1pc3VzZSBvZiBhZ2dyZWdhdGU6ICUjVCgpAGFtYmlndW91cyByZWZlcmVuY2UgdG8gJXMgaW4gVVNJTkcoKQBVUERBVEUgdGVtcC5zcWxpdGVfbWFzdGVyIFNFVCBzcWwgPSBzcWxpdGVfcmVuYW1lX2NvbHVtbihzcWwsIHR5cGUsIG5hbWUsICVRLCAlUSwgJWQsICVRLCAlZCwgMSkgV0hFUkUgdHlwZSBJTiAoJ3RyaWdnZXInLCAndmlldycpAFVQREFURSBzcWxpdGVfdGVtcF9zY2hlbWEgU0VUIHNxbCA9IHNxbGl0ZV9yZW5hbWVfdGFibGUoJVEsIHR5cGUsIG5hbWUsIHNxbCwgJVEsICVRLCAxKSwgdGJsX25hbWUgPSBDQVNFIFdIRU4gdGJsX25hbWU9JVEgQ09MTEFURSBub2Nhc2UgQU5EICAgc3FsaXRlX3JlbmFtZV90ZXN0KCVRLCBzcWwsIHR5cGUsIG5hbWUsIDEsICdhZnRlciByZW5hbWUnLCAwKSBUSEVOICVRIEVMU0UgdGJsX25hbWUgRU5EIFdIRVJFIHR5cGUgSU4gKCd2aWV3JywgJ3RyaWdnZXInKQBJTlNFUlQgSU5UTyAlUS5zcWxpdGVfbWFzdGVyIFZBTFVFUygndHJpZ2dlcicsJVEsJVEsMCwnQ1JFQVRFIFRSSUdHRVIgJXEnKQAKKQBCTE9PTSBGSUxURVIgT04gJVMgKABTRUxFQ1Qgc3FsIEZST00gIiV3Ii5zcWxpdGVfc2NoZW1hIFdIRVJFIHR5cGU9J2luZGV4JwBERUxFVEUgRlJPTSAlUS5zcWxpdGVfbWFzdGVyIFdIRVJFIG5hbWU9JVEgQU5EIHR5cGU9J2luZGV4JwBuYW1lPSclcScgQU5EIHR5cGU9J2luZGV4JwBERUxFVEUgRlJPTSAlUS5zcWxpdGVfbWFzdGVyIFdIRVJFIG5hbWU9JVEgQU5EIHR5cGU9J3RyaWdnZXInAERFTEVURSBGUk9NICVRLnNxbGl0ZV9tYXN0ZXIgV0hFUkUgdGJsX25hbWU9JVEgYW5kIHR5cGUhPSd0cmlnZ2VyJwB0YmxfbmFtZT0nJXEnIEFORCB0eXBlIT0ndHJpZ2dlcicAJyUuKnEnAHR5cGU9J3RyaWdnZXInIEFORCBuYW1lPSclcScAaW5kZXggJyVxJwBKU09OIHBhdGggZXJyb3IgbmVhciAnJXEnAFVQREFURSAiJXciLnNxbGl0ZV9tYXN0ZXIgU0VUIHNxbCA9IHNxbGl0ZV9yZW5hbWVfdGFibGUoJVEsIHR5cGUsIG5hbWUsIHNxbCwgJVEsICVRLCAlZCkgV0hFUkUgKHR5cGUhPSdpbmRleCcgT1IgdGJsX25hbWU9JVEgQ09MTEFURSBub2Nhc2UpQU5EICAgbmFtZSBOT1QgTElLRSAnc3FsaXRlWF8lJScgRVNDQVBFICdYJwBTRUxFQ1QgQ0FTRSBXSEVOIHF1aWNrX2NoZWNrIEdMT0IgJ0NIRUNLKicgVEhFTiByYWlzZShBQk9SVCwnQ0hFQ0sgY29uc3RyYWludCBmYWlsZWQnKSBFTFNFIHJhaXNlKEFCT1JULCdOT1QgTlVMTCBjb25zdHJhaW50IGZhaWxlZCcpIEVORCAgRlJPTSBwcmFnbWFfcXVpY2tfY2hlY2soJVEsJVEpIFdIRVJFIHF1aWNrX2NoZWNrIEdMT0IgJ0NIRUNLKicgT1IgcXVpY2tfY2hlY2sgR0xPQiAnTlVMTConAFVQREFURSAiJXciLnNxbGl0ZV9tYXN0ZXIgU0VUIHNxbCA9IHNxbGl0ZV9yZW5hbWVfcXVvdGVmaXgoJVEsIHNxbClXSEVSRSBuYW1lIE5PVCBMSUtFICdzcWxpdGVYXyUlJyBFU0NBUEUgJ1gnIEFORCBzcWwgTk9UIExJS0UgJ2NyZWF0ZSB2aXJ0dWFsJSUnAFVQREFURSB0ZW1wLnNxbGl0ZV9tYXN0ZXIgU0VUIHNxbCA9IHNxbGl0ZV9yZW5hbWVfcXVvdGVmaXgoJ3RlbXAnLCBzcWwpV0hFUkUgbmFtZSBOT1QgTElLRSAnc3FsaXRlWF8lJScgRVNDQVBFICdYJyBBTkQgc3FsIE5PVCBMSUtFICdjcmVhdGUgdmlydHVhbCUlJwBzcWxpdGVcXyUAJABTRUxFQ1QqRlJPTSIldyIAU0VMRUNUIHJhaXNlKEFCT1JULCVRKSBGUk9NICIldyIuIiV3IgBBTkFMWVpFICIldyIuIiV3IgBmb3JlaWduIGtleSBtaXNtYXRjaCAtICIldyIgcmVmZXJlbmNpbmcgIiV3IgBkb3VibGUtcXVvdGVkIHN0cmluZyBsaXRlcmFsOiAiJXciAHN5bnRheCBlcnJvciBhZnRlciBjb2x1bW4gbmFtZSAiJS4qcyIAJWMiJXMiACgiJXMiAGNhbm5vdCAlcyAlcyAiJXMiAGdlbmVyYXRlZCBjb2x1bW4gbG9vcCBvbiAiJXMiAGNhbm5vdCBJTlNFUlQgaW50byBnZW5lcmF0ZWQgY29sdW1uICIlcyIAZXJyb3IgaW4gZ2VuZXJhdGVkIGNvbHVtbiAiJXMiAGNhbm5vdCBVUERBVEUgZ2VuZXJhdGVkIGNvbHVtbiAiJXMiACVzIGluICIlcyIAVVBTRVJUIG5vdCBpbXBsZW1lbnRlZCBmb3IgdmlydHVhbCB0YWJsZSAiJXMiAHVuc2FmZSB1c2Ugb2YgdmlydHVhbCB0YWJsZSAiJXMiAGNhbm5vdCBjcmVhdGUgYSBURU1QIGluZGV4IG9uIG5vbi1URU1QIHRhYmxlICIlcyIAbm8gc3VjaCBpbmRleDogIiVzIgB1bmtub3duIGRhdGF0eXBlIGZvciAlcy4lczogIiVzIgBjYW5ub3QgZHJvcCAlcyBjb2x1bW46ICIlcyIAbm8gc3VjaCBjb2x1bW46ICIlVCIAdW5yZWNvZ25pemVkIHRva2VuOiAiJVQiAHdlZWtkYXkgAG5vbi11bmlxdWUgZW50cnkgaW4gaW5kZXggAHdyb25nICMgb2YgZW50cmllcyBpbiBpbmRleCAAIG1pc3NpbmcgZnJvbSBpbmRleCAAcm93IAAlciAAc3RhcnQgb2YgACBVU0lORyBDT1ZFUklORyBJTkRFWCAAU0VMRUNUIDEgRlJPTSAiJXciLnNxbGl0ZV9tYXN0ZXIgV0hFUkUgbmFtZSBOT1QgTElLRSAnc3FsaXRlWF8lJScgRVNDQVBFICdYJyBBTkQgc3FsIE5PVCBMSUtFICdjcmVhdGUgdmlydHVhbCUlJyBBTkQgc3FsaXRlX3JlbmFtZV90ZXN0KCVRLCBzcWwsIHR5cGUsIG5hbWUsICVkLCAlUSwgJWQpPU5VTEwgAFNFTEVDVCAxIEZST00gdGVtcC5zcWxpdGVfbWFzdGVyIFdIRVJFIG5hbWUgTk9UIExJS0UgJ3NxbGl0ZVhfJSUnIEVTQ0FQRSAnWCcgQU5EIHNxbCBOT1QgTElLRSAnY3JlYXRlIHZpcnR1YWwlJScgQU5EIHNxbGl0ZV9yZW5hbWVfdGVzdCglUSwgc3FsLCB0eXBlLCBuYW1lLCAxLCAlUSwgJWQpPU5VTEwgACBVU0lORyAAQ1JFQVRFIABDUkVBVEUgVEFCTEUgACBBTkQgAENPUlJFTEFURUQgAFBSQUdNQSAAUGFnZSAldTogAE1haW4gZnJlZWxpc3Q6IABPbiBwYWdlICV1IGF0IHJpZ2h0IGNoaWxkOiAAT24gdHJlZSBwYWdlICV1IGNlbGwgJWQ6IAAtLSAALCAAIiV3IiAAQCAgACwKICAAKioqIGluIGRhdGFiYXNlICVzICoqKgoAAAABAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAADMuMzkuMgAAAAAAAAAAAAAAAAAAZAoBEAAAcwAEBQAAZwABAx4AegAEBgAAcQAECQAAUQAECgAAdwAEDgAAYwAACAAAbwgAAAACdQoAEAAAeBAAABABWBAAAAAEZgABAQAAZQABAh4ARQABAg4ARwABAw4AaQoBEAAAbgAABAAAJQAABwAAcBAADQABVAAACwAAUwAADAAAcgoBDwAAAAAAAAAAMDEyMzQ1Njc4OUFCQ0RFRjAxMjM0NTY3ODlhYmNkZWYALXgwAFgwAAAAAAAAAAAAAAAAAAAA4D+amZmZmZmpP3sUrkfhenQ//Knx0k1iQD8tQxzr4jYKP/Fo44i1+NQ+je21oPfGoD5Ir7ya8tdqPjqMMOKOeTU+ldYm6AsuAT4AAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6W1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f7/AQAAAQEAAAEAAQABAQABAAABAAAAAAAAAAAAAAAAAAAEBQMFAQUBBQIFAgUBBQEFBAUDBQEFAQUCBQIFAQUBBQIFAwUCBQIFAgUCBQIFAgUEBQMFAgUCBQIFAgUCBQIFKj9bACVfAAEAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAQCAAEAAAIAAAAAAAAAAAAwMDAwMDAwMDAwAAAAAAAAACgoKCgoKAgICAgICAgICAgICAgICAgICAgKAAAAAQIAqKioqKioiIiIiIiIiIiIiIiIiIiIiIiIiIgAAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBSRUlOREVYRURFU0NBUEVBQ0hFQ0tFWUJFRk9SRUlHTk9SRUdFWFBMQUlOU1RFQUREQVRBQkFTRUxFQ1RBQkxFRlRIRU5ERUZFUlJBQkxFTFNFWENMVURFTEVURU1QT1JBUllJU05VTExTQVZFUE9JTlRFUlNFQ1RJRVNOT1ROVUxMSUtFWENFUFRSQU5TQUNUSU9OQVRVUkFMVEVSQUlTRVhDTFVTSVZFWElTVFNDT05TVFJBSU5UT0ZGU0VUUklHR0VSQU5HRU5FUkFURURFVEFDSEFWSU5HTE9CRUdJTk5FUkVGRVJFTkNFU1VOSVFVRVJZV0lUSE9VVEVSRUxFQVNFQVRUQUNIQkVUV0VFTk9USElOR1JPVVBTQ0FTQ0FERUZBVUxUQ0FTRUNPTExBVEVDUkVBVEVDVVJSRU5UX0RBVEVJTU1FRElBVEVKT0lOU0VSVE1BVENIUExBTkFMWVpFUFJBR01BVEVSSUFMSVpFREVGRVJSRURJU1RJTkNUVVBEQVRFVkFMVUVTVklSVFVBTFdBWVNXSEVOV0hFUkVDVVJTSVZFQUJPUlRBRlRFUkVOQU1FQU5EUk9QQVJUSVRJT05BVVRPSU5DUkVNRU5UQ0FTVENPTFVNTkNPTU1JVENPTkZMSUNUQ1JPU1NDVVJSRU5U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OwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwA7ADsAOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/9//0A/////v7+/fv6/wD9/wD7/gD9/v/+APz6/gAA/v38/Pz9/fv+/Pz//v38AP8A/v79/f3+/v///v3+AP7+AP/++fv79gAA/QD+///8/gD3/P/9/P/9//7/9/b8+///AAD7/fv+AAD+/gD7+vj6+gD+//3//fv9//79/P78AAD9/gD9+/3//wD+/gAA/QD+AP78/PoA/gD+/vz3+/n9+/n4AP709/v4/v7/AP39//3///37//////36+/z6+//7/f39/f39/f3+/fv+/f38+vv+/v79//77//77/fv7/Pv7/P4A/wAA/f8A/fT/AAD9+/0A/vz+/f4A/fv6+/r+/vv1//4A///9AP79/v39/vf4+v38+v////z6/QD+//3//fr5+v/4//z4AP/9//79//79+v/9//37+/r8+//+AP36///+//7+/gD+/v7//v7///z++//+///+/QD//v8A/v/8/v/////////+AP78/v79/wD//////v//AP///////////wD9/wD/AAD///3+APz+AAAAAAAAAAAAAAAAcAbFBfgEQgFCAQEAJwXGBdMFLQctBy0H1wEAAAAA1gBFBC0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HDwEPAcMEwwTYAFgAAQABAAEAAQABACgAbwACAWkB1QEAAkcCbgK1AtwCIwNKA5EDMQRFBEUERQRFBEUERQRFBEUERQRFBEUERQRFBEUERQRFBEUERQRZBEUEwAS9A70DYwZ+BvEGLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQctBy0HLQeJALUAtQC1ALUAtQC1ALUAXgCuAUIAQQBwAG4BFQIVAuQC7QQVAhUCTwBPABUCnAGcAZwBTQCcAXsAcQBxABYAFgAyCDIISAFIAUgB7wDUAdQB1AHUAfcD9wOZAW4BaQSiBBUCFQIVAhUCFQIVAhUCFQIVAhUCFQIVAhUCFQIVAhUCFQIVAhUCFQLJA20CbQIVAoICFAMUA8wEzAQ2AzYDQwD6BDIIMggyCDIIMggyCDIIGwW6A7oDSQLYAYACgwG3AhoCHQK8AhUCFQIVAhUCFQIVAhUCFQIVAhUC3gAVAhUCFQIVAhUCFQIVAhUCFQIVAhUCFQKbBJsEmwQVAhUCFQI1AhUCFQIVApQDeAQVAhUCCAUVAhUCFQIVAhUCFQIVAhUCfwIyBdEANAQ0BDQENAREAtEA0QAhBQADlQOJAp0EJAWVASQF1gT5AJ0EnQT5AJ0ElQHWBFkF0AHrBPQD9AP0A1gFWAVYBVgFuAC4AC4FiAMHBcgFsAawBmEGYQbdBt0GYQZvBnMG9wbkBv8G/wb/Bv8GYQYOB40GcwZzBo0G9wbkBo0G5AaNBmEGDgeKBvMGYQYOBx8HYQYOB2EGDgcfB8QGxAbEBgIHMAcwBx8HxAbKBsQGAgfEBsQGpQY0B94G3gYfB2EG/Qb9Bg8HDwfOBtgGVQdhBs8GzgbfBuUGjQZXB2kHaQd6B3oHegcyCDIIMggyCDIIMggyCDIIMggyCDIIMggyCDIIMgjPAEcESwFsAocDJgMyBMsFmAXJBSoFWgVyBesFCwUKBgsGFQY7Bj4GPwaaBa0FUga2BR8G0QVsBnYGUAZ8BgwGDQaSBpUGPQbmApUHmQeHB/sGkQeUB44HkAcdBxIHKAeSB5IHlgceB5sHIAedB7AHJAcxB5IHMgd4B5MHkgciB4EHggeFB4YHOgdJB5wHMwe+B7wHrAdQByMHiAeyB4kHgwemBzgHXQe5B78HwQdPB1gHwAeXB8IHwwfEB8YHmgejB8cHdwfFB8oHnwfIB8wHUQfOB9AH0QfSB9MH1AfPB40HYgfZB9oHdgfVB9wHZAfbB9YH1wfYB90HngeqB6UH3gexB6AH3wfnB+oH6wfpB+wH4gd5B3sH7wfbB/EH9Af1B/YH9wf4B/sHAwj8B/0H/gf/BwEIAggACJgHjwehB6IHpAcECAcIBQgZCBoIwQDBAMEAEgETARQBwQASARMBFAHBAN8A2wDhAM4A0gDTANQAwQATANsA6QDYANgA2QDYANkAwQAnAdgA2QAfAMEA2ADZAMEA5ADVAOYAJwDOANgA2QArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQDBABMAuQC6ALsAvAC9AL4A/QASARMBFAHDAMEAxQDBAAUBEgETARQB/QDMAO4AzABRACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ABIBEwEUAQYBZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEA7wDwAO8A8ADSANMA1AA6ATsBOgE7ADwBVgD8AFgA/AATADoBOwEAAQEBcQAZAEgAKAGKAIsACgFmAGcAaABpAGoAawBsAG0AbgBvAHAAcQArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQBRACQBOwAkASoBbABtAG4AbwBwAHEARQB0AHUAdgBIAGoAawDBAG8AcABxADYANwA4ADkAOgBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQB4ABkA2ADZAJEAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEA5wCKAIsAdAB1AHYApACZABMAmwA2ADcAOAA5AGYAZwBoAGkAagBrAGwAbQBuAG8AcABxAIAAgQAuAC8AMAAxACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ANgAwQAZADsAwQATAKUApgDBAEMAGABmAGcAaABpAGoAawBsAG0AbgBvAHAAcQBJANgA2QA7ANgA2QArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQB5AJEAOwDBAHQAdQB2AHcAEQHMAHoAewB8ABMAFACGABYAiACJABMAhAB/AIAAgQAYABYAFwB0AHUAdgAkAMEAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEA7wDwADcBOAHXAGoAawDxABMAOwDYANkA3wD8AHMAdAB1AHYAlwB4ABoARwDBADQBNQHBAJUAgAA5AdgADQFRACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5AP0A2ADZAGQAXwCZADsAmwAFAWoAawAZAMEAZQDBAMEA5wByABkAdAB1AHYAcQAwAXkAwQDMADsAdwB4AHkAegB7AHwAfQDYANkAwQDYANkAgwCKAIsA5gBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQCZAJoAmwCcAJ0A7wDwAHQAdQB2AEwAwQAXABMAGQAWAP0AFwD8AP0AbABXAMwAWQAFAcYAXAAFAXQAdQB2AMEAMgEzAdgA2QCWACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ADsAwQDYANkAEwDvAPAAGwEXAGoAawBsAG0AbgBvAHAAcQBJAPwA/QCOADQBNQGKAIsAUQA5AZEAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAMwFmAGcAaABpAGoAawBsAG0AbgBvAHAAcQAZAXQAdQB2AB0BFwDBABkAdwA7AMEAegB7AHwAOwB/AMsAOwDNABMADAGEABkAFwAWAMEAigCLAPkAzAD7AGYAZwBoAGkAagBrAGwAbQBuAG8AcABxACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ABMAFgAXADsAFwAZAO8A8AB0AHUAdgDBAAsAdAB1AHYAdAB1AHYA/AANARYAwQAPACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ABEBjwDBAHYAjwBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQBMAHYAOwDxAHQAdQB2ADAB2ADZACQBjwA8AFkA8QATAFwAwQDBABcAFgA3ATgB5wBlABYAjwBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQATAMEAwQA7ABcAdAB1AHYAOwDJABUA8QAwARYAzgB/AIAAgQDBAIAAgQDrAOwAMAErACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQAWAMEA2ADZAMEAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEA5wDBAMEAwQB0AHUAdgDYANkAdAB1AHYA4gBQAMEAEwDrAOwAMAEXANMA1ADnAMwA2ADZAM0AZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAEwDBAHsATADvAPAAwQD9AO8A8ADvAPAAwQBqAGsAwQBZAPwAwQBcADsA/ACNAPwAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAHAGhANgA2QDBAGYAZwBoAGkAagBrAGwAbQBuAG8AcABxAOcAwQAQALsAvAC9AL4ABwAIAAkANQHDABkAxQA5ARMAfwCAAIEABgHMABYAdQAYANgA2QAHAWYAZwBoAGkAagBrAGwAbQBuAG8AcABxACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5AMEA7wDwAMEAOwATALwA/QC+AE0A4gBPAMEAwwD8AMUAwQATAC0BLgHBAMEAzADYANkA4gDYANkACgHMAJ8ALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQAMAO8A8ADoACoB7gB1AP0A7wDwAO4AAwEEAcEA/AAbAB8AwQDBAI4AzAD8AMEAwQAnAAYBwQBkAAoBFgEqAMwAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAdQCfANgA2QB5ANgA2QA/AMEAwQDBAO8A8ABzAHQAwQAqAUkA7gDuAOcAEwDvAPAA/AAWABgA0wDUABgAwQDYANkA2ADZAPwAmQCaAJsA/QAQABMAkADVAAwBKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkA7gATADsAwQA7ACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ABYAFwDBABkAwQArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQAcAU0AwQBPAGYAZwBoAGkAagBrAGwAbQBuAG8AcABxAB4BwQDBAMEAdQAjAXUA6ABmAGcAaABpAGoAawBsAG0AbgBvAHAAcQDMABYAFwBCABkA2ADZACMAZgBnAGgAaQBqAGsAbABtAG4AbwBwAHEAwQAMAVUAZQDBADUBNQHwABMAOQE5AV4A0ADRAMEA7wDwAMEAQgD8ABMADAH0ANgA2QDBAEoA1QD8AKEAEwAHAf4ALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5AMEA2ADZAAUAOwDBABMA9AAKAAsADAANAA4AZQA1AREAkgD+ADkBwQDBAEwAcwDYANkANQEMAAcBHgA5ASAALgBXAC4AWQCCAMEAXAAoABYABwEbANgA2QBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQAqAJYAIwHYANkAdAB1AHYAEwAUAMEAFgBGAAQBdADBABgACAHBAAcBTgA/AD0AUQB0ACQAwQAEAcEAHQDBAAgBwQAhAJEAwQA7ADAA2ADZAGIA2ADZAMEAcwDBAHMAwQA7ANgA2QDYANkA2ADZANgA2QD/ANgA2QBHAMEAgwDBABkAQQDYANkA2ADZANgA2QDQANEAVQCFAMEAZADBAFoAigCLAIoAiwDYANkA2ADZAMEAZADBAGwAhwB0AHUAagBrAIwAeQDYANkA2ADZAHIAogB0AHUAdgArASwBeQDYANkA2ADZAMEA9ADBAIcA9ADBAAABAQGMAPQAwQD+AMEAwQD+AJkAmgCbAI0A/gCVAJYAAgHYANkA2ADZAJkAmgCbAJwAnQAAAAEAAgDYANkABQBzAJ4AwQCgAAoACwAMAA0ADgDBADsAEQB+AMEAEwAUAIEAFgDBABYAFgAYAMEAFwAeABkAIAATABQAkAAWACQA2ADZACgAwQDYANkAwQCYAIEA2ADZAMEAJADYANkAwQBjAMEAwQA1AMEAwQA7ABcAwQAZANgA2QDBANgA2QCYAEYAOwBHADsAdQDBANgA2QBOANgA2QBRANgA2QA+AUcAVQDBAIUAwQDBAFoAFwAXABkAGQB4AHkAYgBVAMEAZADBABcAWgAZAHkAagBrABMA2ADZANgA2QBkAHIAgwB0AHUAdgBqAGsAeQDYANkA2ADZAMEAcgB1AHQAdQB2AIUAwQB5AMEAwQCKAIsAwQAXAMEAGQAXABcAGQAZAAcACADYANkAwQDBAJkAmgCbAJwAnQDYANkAwQCiANgA2QDYANkAmQCaAJsAnACdAAEAAgDBAMEABQATABQAOwAWAAoACwAMAA0ADgDBAGEAEQDBABcAwQAZACABJADBAPIA2ADZAOwAFwAeABkAIAATABQAFwAWABkA2ADZACgA2ADZANgA2QDBADsA2ADZAMEAJABTAFQAmQCZAJsAmwAXAEcAGQAXAMEAGQDBAMEAwQB1AMEAwQDBAEYAwQDBADsAwQD/AP8AHwFOAP8A8wBRAL8A/wApAUcADwFkACUB9QALAdYA9gBqAGsAbAD2AA8BYgD1ACUBcgDcAHQAdQB2AAsBDwF5AA8B4QDbAOUA2wBkANsAAwEDAQMBAwFqAGsA+QDEADwAGAGNAPMAcgD5AHQAdQB2AIUA9QB5AMgAKQGKAIsAmQCaAJsAnACdACkByAAmABMAFACXABYAyACWAIwAJgEmARYAEAErAOoAEgCiAA4ByAAkAO0AmQCaAJsAnACdAO0AGwHtAO0AEgDHAJUA9gAQAQ4BEAHIAJ4A9gD2AOoAOwDqAPYAxwAiAT4AIQHIAMcAFgDdAHMARwDIAMgAxwDHAN0A2gDaABMAFABAABYA2gDjABYA4AB+AOAApQDdABgAMQHIAHEAOAEkANoA3ADaAGQAGgHaAFsA2gA9AWoAawDdAOMAGgE9AVIAlAByAAkBdAB1AHYAOwCRAHkAFgAVAZ4AyAAJARkAygCTAPoARwAXAQ0AkgDCAMIA+QD4APoAjAD3APYABgDAAMAAwAAvAS8B1QDPACwB1QCZAJoAmwCcAJ0A1QDVAGQA1QDeAM8A1gDWAGoAawAEAN4AzwADABYAowByAA8AdAB1AHYAEAAXAHkAFwCLAJcAggAZAI4AEAAYABQAkAABAI4AggCCAD0ANQA1ACUAlwA1ADUAggB0ACIAAQCNAAUAFgBzAKEAjQCZAJoAmwCcAJ0AGQBEAEQASwApAHMAGACDABQAEwB9ABYAYAAWABYAQwAXABYAQwA7ABgAFgAcAEMAFwAWABYAlQAXABcAFwB0ABcAGQAlAGEAjQAXABcAFgCPABkASwBYACIAIgAiACIAVgBLAF0AFwAiABYAIgAZABgAIgAZABcAjgAXAI4ALAAXABcAFwALABcAGQAWABYAFgAPABcAFwAWABYAGQABAAEAjQAZABcAhwA/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BjQCNAD8BjQA/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BPwE/AT8BAAAAAAAAAAAAADgC0AA4AnYAcwDlADgCdgBzAOUAOAIiBXkBDQWYATICMgIyAjgCmQF6ASIF/AQpACkAKQApANAA9gVHAEcAywOjASkAKQDrAS8BFwEvAcwDjQFHAEcAfQB+AFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwA3AGZAdkEAQABAD8CAgDdBCYCdgBzAOUAPQHgAZIA4AEMAnYAcwDlABECLwWhAQsCjgB9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfAB2AHMA5QBHAXoAegB6AHoAeQB5AHgAeAB4AHcAdAC8ARwBHAEcARwBugG6AboBHwZ4ASEGqAR3AYsENQKLBDUCmQEfBhkCAwHiALwBZQCRAMEBPAEvAvAAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBfQB+AFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwAjgAmAagEUwHAAXgAeAB4AHcAdAC8AX8AqASpBKoElAC5AbgBOAJ3AHQAvAF8AHwAfAB8AHUAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBxgFxAA0ADQAiAnoAegB6AHoAeQB5AHgAeAB4AHcAdAC8AaYBPAEvAqgEqQSqBJUAyASZAcgEfAB8AHwAfAB6AHoAegB6AHkAeQB4AHgAeAB3AHQAvAHRAVYBDQQNBBsEHgR9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfAD/BAoC3gCoBDgCmQHgAAICrwBSAFMAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwB7wMQABAAqASFAIUAfQB+AFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBEQQiAqgEdQGoBKkEqgT8AJoFjwH4AfUB9AFvADACNgIEAJ4DngOxAfMBVAHMAUgBaAGKAdUEqASpBKoEMwI4AnoAegB6AHoAeQB5AHgAeAB4AHcAdAC8ARwBHAFxASwGRwa5AbgBmgCZAb0BRwBHAAYFNQLFBKgEqQSqBFUAxwQPAS0CHwIDAhkGOAJiAMYEBgD+BNgBjgB9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfAAmAg0ADQADBPsByASoBMgEJQJtAG0A3gA4AtYErwA4AqsBbgDFAL0BOgI5Aq4BEAb5A0UBJwKoBA4BHwFwAf4BawH9AQEBRwBHAB8CRwBHAGcBPAEvAk0GegB6AHoAegB5AHkAeAB4AHgAdwB0ALwB+QP5A/sD/AMbABwBHAGoBKkEqgSGBDgCTAaZAYUDvgAmAmQBNQImAqkDFQIFAoYEBAKdAYYEKAKoBKkEqgQ4AiACEgYzADMA1gB9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfACoBNoBhwCHAJkBHAEcAdIF+QF5AHkAeAB4AHgAdwB0ALwB7wM1AgYC2QAdAhkGPAEvAo4ABgAUAn0AfgBQAMEEwQQaBB0EEAQQBHsAewB8AHwAfAB8ABMGegB6AHoAegB5AHkAeAB4AHgAdwB0ALwB5QGoBKkEqgTiARkB8wS9A/wAqAR1AfgB9QH0AagEVAE7AqgEOwKZASQB8wG9A2wDvwDgATwBLwKAASIBfAF6AHoAegB6AHkAeQB4AHgAeAB3AHQAvAF9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfACZAYoBcASoBGUDZAAcARwBqASpBKoEdQFFBKgEqQSqBKgEqQSqBDUCxwEgAHUB6QB9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfACZBb8DOALkAL4DegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBhgTkAKgEnQCoBKkEqgQRBg0ADQAtAb0D0ASGBJkAmQGGBHUBLwaYBAUAcQEsBq0B1gQDAL0DegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBfQB+AFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwAmQHQADcCqAQEBKgEqQSqBKgEhAFUA5sAEAYeAZIBSgRKBOgBOALRAVYBJwUnBRAGfQB+AFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwAgQA4Ag0ADQB2AXoAegB6AHoAeQB5AHgAeAB4AHcAdAC8AS4BOALFARACqASpBKoEDQANAKgEqQSqBBEFzwHzBJkBJQUlBRAG9APFAcQByAArAUcARwDxBHoAegB6AHoAeQB5AHgAeAB4AHcAdAC8AX0AfgBQAMEEwQQaBB0EEAQQBHsAewB8AHwAfAB8AJkB4wAxBIYEHAEcAaMBOAEWARYBHQEdAYsFlgGVAX4BhgQ1AjgChgSsBDUCQAY1An0AfgBQAMEEwQQaBB0EEAQQBHsAewB8AHwAfAB8AMUBygUNAA0AAAZ6AHoAegB6AHkAeQB4AHgAeAB3AHQAvAHJADgCYgEyBj8CAgDdBEgDSQNKAxoGPQG8BJIABgCZAf8A/gD9AM4ALwUJAKwEBgFHAEcAqAF6AHoAegB6AHkAeQB4AHgAeAB3AHQAvAF9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfAA4AhwBHAE4Ar0EmQE+AjkB3QRdARAFYAGjAT0BNQKSAOsBDQJrBosBcwHrAS8FRgBGAA8FRwBHAPAALQVoAFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBWgQcARwBrAHAAfUFvQS3ARwBHAHRBUgFNwHaATUCWwTLA+sB6wHZAO8ENQICBjgCzAPPADgCAwTwAH8BXAQHAnoAegB6AHoAeQB5AHgAeAB4AHcAdAC8AfoDawBHAEcA+QMNAA0AkAM4AtcFOAIcARwBYQAOAusBwAGRAy4FKgUhApkBHAEcATUClwDRANcF2QUGAcIBNwA3ADgAOAA1AvkD+QP7A7sBTAGZAQ8CDAAnAX0AfgBQAMEEwQQaBB0EEAQQBHsAewB8AHwAfAB8AFsBmQFgA/4FvQR9AH4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfABxBGkG2gFpBnMBfQByAFAAwQTBBBoEHQQQBBAEewB7AHwAfAB8AHwA1wVJAdoBSwF6AHoAegB6AHkAeQB4AHgAeAB3AHQAvAHLAIsFOAIOBWAD0AG9BLQBegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBKQJxBGoGGwJqBg8ADwB8A3oAegB6AHoAeQB5AHgAeAB4AHcAdAC8ATgCKgEaAm8EiwUXBhgGMwWZAQYABgCRBPQEnwFAARwBHAGLBfwBNQINAiwByQErACsAOAJ9AwwANQJKAd4BqQGXAX4AUADBBMEEGgQdBBAEEAR7AHsAfAB8AHwAfAA4AjkAOQAgAagEiwXwAcoBiAGIAYcBEQGFAW8EFgZRA5EElwEGADgCQQGGBNYBLAAsABUGWgSqAeoABgBDAQABHAIAAYYErwE4AoYEQgERAOcBWwQ6ADoAegB6AHoAegB5AHkAeAB4AHgAdwB0ALwBXATYAOEBOwA7AKgEqQSqBG8AMAJEAQQA7ADIAQ4COALtAMgBOAK1AagALAKkAY0A3wEzAjgCJQE4AkcEOAIlATgCRwQTAjgCaAMIADwAPADrAD0APQA4Ap4BOAKeATgCvQE+AD4ALQAtAC4ALgAvAC8AxwAxADEALQI4AmcBOAJkAOYBMgAyAD8APwBAAEAAMQKfARcCmgE4AgMEOAIWAjwBLwI8AS8CQQBBAA4ADgA4AgMEOAIAAqQDaAP6A20AbQCjA/kDQgBCAIMAgwBuAMMBvQE6AjkCoAGxAPkDhACEAEMAQwA4AtMBOAKkA9cBVAUbAeIAowM7AVMFlwE4AssBlwH5A/kD+wPvAJcBVgDVAEYFNAA0AEQARAD5A/kD+wP8AxsAMQacBL8BRQBFACABYQBsAAUGagCIAYgBhwERAYUBOAJvA1EDcwM4Am8AMALSAQQAOAKYAB4AJgA4AmwE6gCMAUMBbwAwAg8CBAAzAjUANQBCATgCowCjADgCUQHUAaQApABNATMCTABMADgCIQHqBTgCHwDpBTgCvQFSAeMBZAA2ADYAWAFIAEgAKAHsADgELQK9AW8DUAWGAIYAqABJAEkAjQChAKEAJgYtAhcCOAI/ATgCXAEYAvED2QEFAQUBewN6A+sAFwI4AgMEOALbARYCBQFvAW0AbQAJAogAiACCAIIAAwRuAG4BvQE6AjkCbQBtAPkDogCiAJwAnAA4Am4AOAS9AToCOQKaAV8B+QM4AmEBPAEvAjgCVwE4AmQA8QFlAQIBZACCA4MDjACMAGMBHgX5A/kD+wP8AxsAiwCLAGoBwwGJAIkAigCKAPkD+QP7A/wDGwCcBL8BOAJ0ASABbwAwAv0DBACIAYgBhwERAYUBOAJ1BFEDOAI0BDgCAgHsATMCOALTAEsASwArAsID6gAFAUMBbwAwAqEDBABxAE0ATQBCAUoASgAqACoAXQW9ATAAMACKBTMCzgPPA0QEQwREBEMEXgMtApYAogNCBXEATgUqApAF/QP7BPIE5gTsAOUE5wS9ATkGPwU0ARQBqAA1AQsAjQCJATYB6AAtAn0FAwRPASMBeAXbAFABbQBtAKgDKQGCBesAVQHdAW4A9gG9AToCOQJxBYEF+QOQAQ0FbQHfAM4FAwTNBUsFTAVKBUkFbQBtAMwAPAbQBC4CCQHaAG4AzQC9AToCOQKaAYMB+QP9BbMAPAEvAvkD+QP7A/wDGwDmAPsFzQRPADACVQAEAKIB1wAkAlEAVAC8AH4FrQC1AM0BwwEjAM4BMwK3APkD+QP7A/wDGwC4ANMFuQC6AO8B8gBiAI4BhAUkAIMF5AFbANUBkQGGBb0BwADIBfYA3gXqAVoBFQH4AMQA7QH/AS0CXgHoBPkA+gCTASEFIAVvADACsAEEAB8FGAVdAEsGcwNKBuAAlAGyAQgCBwGzASsGMwIDBQIFbAEDBDIBAQUIAUkGHQZtAG0AcgEXBTMBHAa2AYAAbgBiBb0BOgI5Ar0BIgL5AwoAugVpAH0BYQUiADwCYwA4BS0COgGiBBICEAESAXsB0gA3BSMCgQGCARMBPQLjBN4EmwGcAe4FpQCyAO8F+QP5A/sD/AMbAO0F7AUDBE4AkwCmANwA3QBtAG0ARAMwAacAvgHUAD4BbgDnAL0BOgI5ApAAQgT5A0AERgG0AKkAvAS2AE4B7gCTA/EAUAS7AKoAqwClAVcAWACnAb0AWQBaAKwAUwTzAE8E9ACeABIA9QBZAfcA+QP5A/sD/AMbAAUBSATBAMoE6QHCACUAbgFTA+4B+wDDAPoBXAATAPIBZgEUAPcBcQNpAV4AfgMxAZ8AAQInAF8AlgSgACAExgN3BGAArgB2BOEAGAEaAcYAwANxAIwEiAQEARUAFgAXAIoEkASPBHwEGAAhABkAygAeAhoAZAAvBGYAIQRnAAcAHwQjBFkEJARYBAoBCwEcACgAhgH+A18DcAAdADQCngSdBAwBsACPAJ0D2gTaBNoE2gTaBNoE2gTaBNoE2gTaBNoE2gTaBA0BQgbaBEEGAAAAAAAAAAAAAAAAbwZvBm8GwwXYBEcF2ATYBNgEwwXDBcMF2ARlBWUF+AX5BNgE2ATYBNgE2ATYBNgE2ATYBNgEwgXYBNgE2ATYBBsGGwbYBNgE2ATYBNgE2ATYBNgEbgXYBHUF2ATYBNgE2ATYBMQFxQXYBNgE2AT3BfkF1AV8BXsFegV5BeYFWQVzBWwFcAW+Bb8FvQXBBcUFxAXYBG8FngWuBZ0F2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ASmBa0FrAWrBbQFqgWnBaAFnwWhBaIF2ATYBPAE2ATYBO0EIwXYBNgE2ATYBNgECwYKBtgEowXYBPkEmAWXBbEFpAWwBa8F/wU/Bj4G1QXYBNgE2ATYBNgE2AQbBtgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ARbBRsGGwbYBPkEGwYbBlwFXAX1BPUEXwXYBAYGPgU+BT4FPgVHBT4F2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE/AX6BdgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBEMF2ATYBNgE2ATYBNgE2ATYBNgE2ATYBDgG2AThBTEFQwVDBUMFQwVFBTIFMAU9BfoE3wRnBn8FdAVEBXQFZAZyBX8FfwVyBX8FRAVkBgoFTwYFBWUFZQVlBVsFWwVbBVsFXwVfBcAFRAU9BdgEZwZnBk0FTQVmBmYGTQXVBVcGiAUmBSwFLAUsBSwFTQXqBHIFVwZXBnIFiAUmBXIFJgVyBU0F6gTlBWEGTQXqBMsFTQXqBE0F6gTLBSQFJAUkBRkF2ATYBMsFJAUKBSQFGQUkBSQFLQbYBM8FzwXLBU0FJQYlBmgFaAVtBV8FxgVNBdgEbQVrBWkFcgUcBTsGOwY3BjcGNwZsBmwGBgZIBvkE+QT5BPkESAYMBQwF+gT6BPkESAbYBNgE2ATYBNgE2ARDBtgEAQbWBVEF2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBAwG2ATYBNgE2ATYBNgE2ATYBNgE2ASNBdgE2wQDBtgE2ATYBNgE2ATYBNgE2AR2BXcFUgXYBNgE2ATYBNgE2ATYBIUF2ATYBNgEgAXYBNgE2ATYBNgE2ATYBNgEYwbYBNgE2ATYBNgE2ATkBeMF2ATYBE8F2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2AQIBdgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ARqBdgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2AQqBmAF2ATYBNgE2ARaBtgE2ATYBNgE2ATYBNgE2ATYBNgE2ATYBNgE2ARTBjQFjwXYBI4FkgXuBNgE5ATYBNgECQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9AL0AvAC+AL8AvwC/AL8AvgC+AL4AvgC+AMMAxQDHAMcAxgDGAMQAxADLAMsAzQDNAM4A0ADQANAA0QDVANYA1wDXANcA1wDXANcA1wDXANcA1wDXANcA1wDgAOAA3ADcAN4A3gDhAOEA4QDhAOIA4gDiAOIA4gDfAN8A4wDjAOMAygDlAOYA5gDmAOYA5gDpANoA2gDqAOoA6wDrAL4A7QDtAL4AvgC+AMwAzADMAO8A8gDyAPIA8ADwAPwA/ADzAPMA8wD+APQA9AD0AP8A/wD1APUAAQEBAQABAAEAAQABAAHIAMgA7gDuAAYBBgEGAQYBAgECAQIBAgEDAQMBAwEIAQQBBAH5APkA5wDnANsA2wDbAAkBCQEJAfcA9wD4APgA+gD6APoA+gC+APYA9gALAQsBCwELAb4ADAEMAQwBDAG+AL4ADwEPAQ8BDwEPAQ8BEAENAQ0BDgEOAQcBBwHZANkA2QDZANkA2ADYANgA2QDZANkA2QDZANkA2QDYANkA2QDZANkA2QDZANkA2QDZABIB2QDZANkA2QDZANkA2QDZANkA2QDZANkAEwETAdkAFAEUAdkA2QDZANkA2QDZABcBFwEYARgBFgEWAQUB/QD9ABUBFQG+ABkBGQHdAN0A6ADoABoBGgG+AL4AvgAbARsBvgC+AL4AvgC+ANMA1AC+AB0BHwEfAR8BIAEgASABIgEiAR4BHgEkASUBJQEjASMBIwEjAdkA2QDsAOwA7AC+AL4AvgAnAScBvgC+AL4AvgC+AL4AvgAoAb4AvgC+ACoBLAEtAS0BLgEKAQoBMQExATEBMAHxAPEAMgEyATMBNAE0ATQBNAE0ATQBNQE1ATUBOQE7ATsBPAE8AToBOgE9AT0BPgE+AT4B+wARAREBEQE4ATgBNwG5ALoAugC7ALsAuwDAAMAAwADCAMIAvgDLAMkAyQDBAMEAwQDQANEA0gDSAM8AzwDXANcA1wDKAOQA5ADlAOkA6wDvAPAA/gD/AAgBEAHZABIBBQEcARwBHAEcARwB0wAhASEBJAElASYBJgEpASkBKwErASwB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";
function decode(base64) {
    const bytesStr = atob(base64);
    const bytes = new Uint8Array(bytesStr.length);
    for(let i = 0, c = bytesStr.length; i < c; i++){
        bytes[i] = bytesStr.charCodeAt(i);
    }
    return bytes;
}
const moduleOrInstance = {
    module: null,
    instances: []
};
async function compile() {
    moduleOrInstance.module = await WebAssembly.compile(decode(wasm));
}
function instantiate() {
    if (moduleOrInstance.instances.length) {
        return moduleOrInstance.instances.pop();
    } else {
        const functions = [];
        const placeholder = {
            exports: null,
            functions
        };
        const instance = new WebAssembly.Instance(moduleOrInstance.module, env(placeholder));
        placeholder.exports = instance.exports;
        instance.functions = functions;
        instance.exports.seed_rng(Date.now());
        return instance;
    }
}
class PreparedQuery {
    #wasm;
    #stmt;
    #openStatements;
    #status;
    #iterKv;
    #rowKeys;
    #finalized;
    constructor(wasm, stmt, openStatements){
        this.#wasm = wasm;
        this.#stmt = stmt;
        this.#openStatements = openStatements;
        this.#status = Status.Unknown;
        this.#iterKv = false;
        this.#finalized = false;
    }
    #startQuery(params) {
        if (this.#finalized) {
            throw new SqliteError("Query is finalized.");
        }
        this.#wasm.reset(this.#stmt);
        this.#wasm.clear_bindings(this.#stmt);
        let parameters = [];
        if (Array.isArray(params)) {
            parameters = params;
        } else if (typeof params === "object") {
            for (const key of Object.keys(params)){
                let name = key;
                if (name[0] !== ":" && name[0] !== "@" && name[0] !== "$") {
                    name = `:${name}`;
                }
                const idx = setStr(this.#wasm, name, (ptr)=>this.#wasm.bind_parameter_index(this.#stmt, ptr));
                if (idx === Values.Error) {
                    throw new SqliteError(`No parameter named '${name}'.`);
                }
                parameters[idx - 1] = params[key];
            }
        }
        for(let i = 0; i < parameters.length; i++){
            let value = parameters[i];
            let status;
            switch(typeof value){
                case "boolean":
                    value = value ? 1 : 0;
                case "number":
                    if (Number.isSafeInteger(value)) {
                        status = this.#wasm.bind_int(this.#stmt, i + 1, value);
                    } else {
                        status = this.#wasm.bind_double(this.#stmt, i + 1, value);
                    }
                    break;
                case "bigint":
                    if (value > 9223372036854775807n || value < -9223372036854775808n) {
                        throw new SqliteError(`BigInt value ${value} overflows 64 bit integer.`);
                    } else {
                        const posVal = value >= 0n ? value : -value;
                        const sign = value >= 0n ? 1 : -1;
                        const upper = Number(BigInt.asUintN(32, posVal >> 32n));
                        const lower = Number(BigInt.asUintN(32, posVal));
                        status = this.#wasm.bind_big_int(this.#stmt, i + 1, sign, upper, lower);
                    }
                    break;
                case "string":
                    status = setStr(this.#wasm, value, (ptr)=>this.#wasm.bind_text(this.#stmt, i + 1, ptr));
                    break;
                default:
                    if (value instanceof Date) {
                        status = setStr(this.#wasm, value.toISOString(), (ptr)=>this.#wasm.bind_text(this.#stmt, i + 1, ptr));
                    } else if (value instanceof Uint8Array) {
                        const size = value.length;
                        status = setArr(this.#wasm, value, (ptr)=>this.#wasm.bind_blob(this.#stmt, i + 1, ptr, size));
                    } else if (value === null || value === undefined) {
                        status = this.#wasm.bind_null(this.#stmt, i + 1);
                    } else {
                        throw new SqliteError(`Can not bind ${typeof value}.`);
                    }
                    break;
            }
            if (status !== Status.SqliteOk) {
                throw new SqliteError(this.#wasm, status);
            }
        }
    }
    #getQueryRow() {
        if (this.#finalized) {
            throw new SqliteError("Query is finalized.");
        }
        const columnCount = this.#wasm.column_count(this.#stmt);
        const row = new Array(columnCount);
        for(let columnIdx = 0; columnIdx < columnCount; columnIdx++){
            switch(this.#wasm.column_type(this.#stmt, columnIdx)){
                case Types.Integer:
                    row[columnIdx] = this.#wasm.column_int(this.#stmt, columnIdx);
                    break;
                case Types.Float:
                    row[columnIdx] = this.#wasm.column_double(this.#stmt, columnIdx);
                    break;
                case Types.Text:
                    row[columnIdx] = getStr(this.#wasm, this.#wasm.column_text(this.#stmt, columnIdx));
                    break;
                case Types.Blob:
                    {
                        const ptr = this.#wasm.column_blob(this.#stmt, columnIdx);
                        if (ptr === 0) {
                            row[columnIdx] = null;
                        } else {
                            const length = this.#wasm.column_bytes(this.#stmt, columnIdx);
                            row[columnIdx] = new Uint8Array(this.#wasm.memory.buffer, ptr, length).slice();
                        }
                        break;
                    }
                case Types.BigInteger:
                    {
                        const ptr = this.#wasm.column_text(this.#stmt, columnIdx);
                        row[columnIdx] = BigInt(getStr(this.#wasm, ptr));
                        break;
                    }
                default:
                    row[columnIdx] = null;
                    break;
            }
        }
        return row;
    }
    #makeRowObject(row) {
        if (this.#rowKeys == null) {
            const rowCount = this.#wasm.column_count(this.#stmt);
            this.#rowKeys = [];
            for(let i = 0; i < rowCount; i++){
                this.#rowKeys.push(getStr(this.#wasm, this.#wasm.column_name(this.#stmt, i)));
            }
        }
        const obj = row.reduce((obj, val, idx)=>{
            obj[this.#rowKeys[idx]] = val;
            return obj;
        }, {});
        return obj;
    }
    iter(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        if (this.#status !== Status.SqliteRow && this.#status !== Status.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        this.#iterKv = false;
        return this;
    }
    iterEntries(params) {
        this.iter(params);
        this.#iterKv = true;
        return this;
    }
    [Symbol.iterator]() {
        return this;
    }
    next() {
        if (this.#status === Status.SqliteRow) {
            const value = this.#getQueryRow();
            this.#status = this.#wasm.step(this.#stmt);
            if (this.#iterKv) {
                return {
                    value: this.#makeRowObject(value),
                    done: false
                };
            } else {
                return {
                    value,
                    done: false
                };
            }
        } else if (this.#status === Status.SqliteDone) {
            return {
                value: null,
                done: true
            };
        } else {
            throw new SqliteError(this.#wasm, this.#status);
        }
    }
    all(params) {
        this.#startQuery(params);
        const rows = [];
        this.#status = this.#wasm.step(this.#stmt);
        while(this.#status === Status.SqliteRow){
            rows.push(this.#getQueryRow());
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        return rows;
    }
    allEntries(params) {
        return this.all(params).map((row)=>this.#makeRowObject(row));
    }
    first(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        let row = undefined;
        if (this.#status === Status.SqliteRow) {
            row = this.#getQueryRow();
        }
        while(this.#status === Status.SqliteRow){
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
        return row;
    }
    firstEntry(params) {
        const row = this.first(params);
        return row === undefined ? undefined : this.#makeRowObject(row);
    }
    one(params) {
        const rows = this.all(params);
        if (rows.length === 0) {
            throw new SqliteError("The query did not return any rows.");
        } else if (rows.length > 1) {
            throw new SqliteError("The query returned more than one row.");
        } else {
            return rows[0];
        }
    }
    oneEntry(params) {
        return this.#makeRowObject(this.one(params));
    }
    execute(params) {
        this.#startQuery(params);
        this.#status = this.#wasm.step(this.#stmt);
        while(this.#status === Status.SqliteRow){
            this.#status = this.#wasm.step(this.#stmt);
        }
        if (this.#status !== Status.SqliteDone) {
            throw new SqliteError(this.#wasm, this.#status);
        }
    }
    finalize() {
        if (!this.#finalized) {
            this.#wasm.finalize(this.#stmt);
            this.#openStatements.delete(this.#stmt);
            this.#finalized = true;
        }
    }
    columns() {
        if (this.#finalized) {
            throw new SqliteError("Unable to retrieve column names from finalized transaction.");
        }
        const columnCount = this.#wasm.column_count(this.#stmt);
        const columns = [];
        for(let i = 0; i < columnCount; i++){
            const name = getStr(this.#wasm, this.#wasm.column_name(this.#stmt, i));
            const originName = getStr(this.#wasm, this.#wasm.column_origin_name(this.#stmt, i));
            const tableName = getStr(this.#wasm, this.#wasm.column_table_name(this.#stmt, i));
            columns.push({
                name,
                originName,
                tableName
            });
        }
        return columns;
    }
    expandSql(params) {
        this.#startQuery(params);
        const ptr = this.#wasm.expanded_sql(this.#stmt);
        const sql = getStr(this.#wasm, ptr);
        if (ptr != Values.Null) this.#wasm.sqlite_free(ptr);
        return sql;
    }
}
function wrapSqlFunction(wasm, name, func) {
    return (argCount)=>{
        const args = new Array(argCount);
        for(let argIdx = 0; argIdx < argCount; argIdx++){
            switch(wasm.argument_type(argIdx)){
                case Types.Integer:
                    args[argIdx] = wasm.argument_int(argIdx);
                    break;
                case Types.Float:
                    args[argIdx] = wasm.argument_double(argIdx);
                    break;
                case Types.Text:
                    args[argIdx] = getStr(wasm, wasm.argument_text(argIdx));
                    break;
                case Types.Blob:
                    {
                        const ptr = wasm.argument_blob(argIdx);
                        if (ptr === 0) {
                            args[argIdx] = null;
                        } else {
                            const length = wasm.argument_bytes(argIdx);
                            args[argIdx] = new Uint8Array(wasm.memory.buffer, ptr, length).slice();
                        }
                        break;
                    }
                case Types.BigInteger:
                    {
                        const ptr = wasm.argument_text(argIdx);
                        args[argIdx] = BigInt(getStr(wasm, ptr));
                        break;
                    }
                default:
                    args[argIdx] = null;
                    break;
            }
        }
        try {
            let result = func.apply(null, args);
            switch(typeof result){
                case "boolean":
                    result = result ? 1 : 0;
                case "number":
                    if (Number.isSafeInteger(result)) {
                        wasm.result_int(result);
                    } else {
                        wasm.result_double(result);
                    }
                    break;
                case "bigint":
                    if (result > 9223372036854775807n || result < -9223372036854775808n) {
                        throw new SqliteError(`BigInt result ${result} overflows 64 bit integer.`);
                    } else {
                        const posVal = result >= 0n ? result : -result;
                        const sign = result >= 0n ? 1 : -1;
                        const upper = Number(BigInt.asUintN(32, posVal >> 32n));
                        const lower = Number(BigInt.asUintN(32, posVal));
                        wasm.result_big_int(sign, upper, lower);
                    }
                    break;
                case "string":
                    setStr(wasm, result, (ptr)=>wasm.result_text(ptr));
                    break;
                default:
                    if (result instanceof Date) {
                        setStr(wasm, result.toISOString(), (ptr)=>wasm.result_text(ptr));
                    } else if (result instanceof Uint8Array) {
                        const size = result.length;
                        setArr(wasm, result, (ptr)=>wasm.result_blob(ptr, size));
                    } else if (result === null || result === undefined) {
                        wasm.result_null();
                    } else {
                        throw new SqliteError(`Can not return ${typeof result}.`);
                    }
                    break;
            }
        } catch (error) {
            setStr(wasm, `Error in user defined function '${name}': ${error?.message}`, (ptr)=>wasm.result_error(ptr, Status.SqliteError));
        }
    };
}
class DB {
    #wasm;
    #functions;
    #open;
    #statements;
    #functionNames;
    #transactionDepth;
    constructor(path = ":memory:", options = {}){
        const instance = instantiate();
        this.#wasm = instance.exports;
        this.#functions = instance.functions;
        this.#open = false;
        this.#statements = new Set();
        this.#functionNames = new Map();
        this.#transactionDepth = 0;
        let flags = 0;
        switch(options.mode){
            case "read":
                flags = OpenFlags.ReadOnly;
                break;
            case "write":
                flags = OpenFlags.ReadWrite;
                break;
            case "create":
            default:
                flags = OpenFlags.ReadWrite | OpenFlags.Create;
                break;
        }
        if (options.memory === true) {
            flags |= OpenFlags.Memory;
        }
        if (options.uri === true) {
            flags |= OpenFlags.Uri;
        }
        const status = setStr(this.#wasm, path, (ptr)=>this.#wasm.open(ptr, flags));
        if (status !== Status.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        }
        this.#open = true;
    }
    query(sql, params) {
        const query = this.prepareQuery(sql);
        try {
            const rows = query.all(params);
            query.finalize();
            return rows;
        } catch (err) {
            query.finalize();
            throw err;
        }
    }
    queryEntries(sql, params) {
        const query = this.prepareQuery(sql);
        try {
            const rows = query.allEntries(params);
            query.finalize();
            return rows;
        } catch (err) {
            query.finalize();
            throw err;
        }
    }
    prepareQuery(sql) {
        if (!this.#open) {
            throw new SqliteError("Database was closed.");
        }
        const stmt = setStr(this.#wasm, sql, (ptr)=>this.#wasm.prepare(ptr));
        if (stmt === Values.Null) {
            throw new SqliteError(this.#wasm);
        }
        this.#statements.add(stmt);
        return new PreparedQuery(this.#wasm, stmt, this.#statements);
    }
    execute(sql) {
        const status = setStr(this.#wasm, sql, (ptr)=>this.#wasm.exec(ptr));
        if (status !== Status.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        }
    }
    transaction(closure) {
        this.#transactionDepth += 1;
        this.query(`SAVEPOINT _deno_sqlite_sp_${this.#transactionDepth}`);
        let value;
        try {
            value = closure();
        } catch (err) {
            this.query(`ROLLBACK TO _deno_sqlite_sp_${this.#transactionDepth}`);
            this.#transactionDepth -= 1;
            throw err;
        }
        this.query(`RELEASE _deno_sqlite_sp_${this.#transactionDepth}`);
        this.#transactionDepth -= 1;
        return value;
    }
    serialize(schema = "main") {
        const ptr = setStr(this.#wasm, schema, (ptr)=>this.#wasm.serialize(ptr));
        if (ptr === Values.Null) {
            throw new SqliteError(`Failed to serialize database '${schema}'`);
        }
        const length = this.#wasm.serialize_bytes();
        const data = new Uint8Array(this.#wasm.memory.buffer, ptr, length).slice();
        this.#wasm.sqlite_free(ptr);
        return data;
    }
    deserialize(data, options) {
        const dataPtr = this.#wasm.sqlite_malloc(data.length);
        if (dataPtr === Values.Null) {
            throw new SqliteError("Out of memory.", Status.SqliteNoMem);
        } else {
            const mem = new Uint8Array(this.#wasm.memory.buffer, dataPtr, data.length);
            mem.set(data);
        }
        let flags = DeserializeFlags.FreeOnClose;
        switch(options?.mode){
            case "read":
                flags |= DeserializeFlags.ReadOnly;
                break;
            case "write":
            default:
                flags |= DeserializeFlags.Resizeable;
                break;
        }
        const schema = options?.schema ?? "main";
        const status = setStr(this.#wasm, schema, (schemaPtr)=>this.#wasm.deserialize(schemaPtr, dataPtr, data.length, flags));
        if (status !== Status.SqliteOk) {
            throw new SqliteError(`Failed to deserialize into database '${schema}'`, status);
        }
    }
    createFunction(func, options) {
        const name = options?.name ?? func.name;
        if (name === "") {
            throw new SqliteError("Function name can not be empty");
        } else if (this.#functionNames.has(name)) {
            throw new SqliteError(`A function named '${name}' already exists`);
        }
        const argc = func.length === 0 ? -1 : func.length;
        let flags = 0;
        if (options?.deterministic ?? false) flags |= FunctionFlags.Deterministic;
        if (options?.directOnly ?? true) flags |= FunctionFlags.DirectOnly;
        let funcIdx = 0;
        while(this.#functions[funcIdx] != undefined)funcIdx++;
        const status = setStr(this.#wasm, name, (name)=>this.#wasm.create_function(name, argc, flags, funcIdx));
        if (status !== Status.SqliteOk) {
            throw new SqliteError(this.#wasm, status);
        } else {
            this.#functions[funcIdx] = wrapSqlFunction(this.#wasm, name, func);
            this.#functionNames.set(name, funcIdx);
        }
    }
    deleteFunction(name) {
        if (this.#functionNames.has(name)) {
            const status = setStr(this.#wasm, name, (pts)=>this.#wasm.delete_function(pts));
            if (status === Status.SqliteOk) {
                const funcIdx = this.#functionNames.get(name);
                this.#functionNames.delete(name);
                delete this.#functions[funcIdx];
            } else {
                throw new SqliteError(this.#wasm, status);
            }
        } else {
            throw new SqliteError(`User defined function '${name}' does not exist`);
        }
    }
    close(force = false) {
        if (!this.#open) {
            return;
        }
        if (force) {
            for (const stmt of this.#statements){
                if (this.#wasm.finalize(stmt) !== Status.SqliteOk) {
                    throw new SqliteError(this.#wasm);
                }
            }
        }
        if (this.#wasm.close() !== Status.SqliteOk) {
            throw new SqliteError(this.#wasm);
        }
        this.#open = false;
    }
    get lastInsertRowId() {
        return this.#wasm.last_insert_rowid();
    }
    get changes() {
        return this.#wasm.changes();
    }
    get totalChanges() {
        return this.#wasm.total_changes();
    }
}
await compile();
const osType = (()=>{
    const { Deno: Deno1  } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator: navigator1  } = globalThis;
    if (navigator1?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows1 = osType === "windows";
const CHAR_FORWARD_SLASH = 47;
function assertPath(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return isPosixPathSeparator(code) || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path.length; i <= len; ++i){
        if (i < len) code = path.charCodeAt(i);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (base === sep) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS[c] ?? c;
    });
}
function lastPathSegment(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for(let i = path.length - 1; i >= start; --i){
        if (isSep(path.charCodeAt(i))) {
            if (matchedNonSeparator) {
                start = i + 1;
                break;
            }
        } else if (!matchedNonSeparator) {
            matchedNonSeparator = true;
            end = i + 1;
        }
    }
    return path.slice(start, end);
}
function stripTrailingSeparators(segment, isSep) {
    if (segment.length <= 1) {
        return segment;
    }
    let end = segment.length;
    for(let i = segment.length - 1; i > 0; i--){
        if (isSep(segment.charCodeAt(i))) {
            end = i;
        } else {
            break;
        }
    }
    return segment.slice(0, end);
}
function stripSuffix(name, suffix) {
    if (suffix.length >= name.length) {
        return name;
    }
    const lenDiff = name.length - suffix.length;
    for(let i = suffix.length - 1; i >= 0; --i){
        if (name.charCodeAt(lenDiff + i) !== suffix.charCodeAt(i)) {
            return name;
        }
    }
    return name.slice(0, -suffix.length);
}
class DenoStdInternalError extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError(msg);
    }
}
const sep = "\\";
const delimiter = ";";
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path;
        const { Deno: Deno1  } = globalThis;
        if (i >= 0) {
            path = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart != null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function relative(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    const fromOrig = resolve(from);
    const toOrig = resolve(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function dirname(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator(path.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
}
function basename(path, suffix = "") {
    assertPath(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
    let start = 0;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    const lastSegment = lastPathSegment(path, isPathSeparator, start);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname(path) {
    assertPath(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path.length - 1; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("\\", pathObject);
}
function parse(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            ret.base = "\\";
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path;
        ret.base = "\\";
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    ret.base = ret.base || "\\";
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function toFileUrl(path) {
    if (!isAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod = {
    sep: sep,
    delimiter: delimiter,
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    toNamespacedPath: toNamespacedPath,
    dirname: dirname,
    basename: basename,
    extname: extname,
    format: format,
    parse: parse,
    fromFileUrl: fromFileUrl,
    toFileUrl: toFileUrl
};
const sep1 = "/";
const delimiter1 = ":";
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path;
        if (i >= 0) path = pathSegments[i];
        else {
            const { Deno: Deno1  } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = isPosixPathSeparator(path.charCodeAt(0));
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize1(path) {
    assertPath(path);
    if (path.length === 0) return ".";
    const isAbsolute = isPosixPathSeparator(path.charCodeAt(0));
    const trailingSeparator = isPosixPathSeparator(path.charCodeAt(path.length - 1));
    path = normalizeString(path, !isAbsolute, "/", isPosixPathSeparator);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function isAbsolute1(path) {
    assertPath(path);
    return path.length > 0 && isPosixPathSeparator(path.charCodeAt(0));
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path = paths[i];
        assertPath(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function relative1(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
    from = resolve1(from);
    to = resolve1(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (!isPosixPathSeparator(from.charCodeAt(fromStart))) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (!isPosixPathSeparator(to.charCodeAt(toStart))) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (isPosixPathSeparator(to.charCodeAt(toStart + i))) {
                    return to.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (isPosixPathSeparator(from.charCodeAt(fromStart + i))) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i);
        const toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (isPosixPathSeparator(fromCode)) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || isPosixPathSeparator(from.charCodeAt(i))) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (isPosixPathSeparator(to.charCodeAt(toStart))) ++toStart;
        return to.slice(toStart);
    }
}
function toNamespacedPath1(path) {
    return path;
}
function dirname1(path) {
    if (path.length === 0) return ".";
    let end = -1;
    let matchedNonSeparator = false;
    for(let i = path.length - 1; i >= 1; --i){
        if (isPosixPathSeparator(path.charCodeAt(i))) {
            if (matchedNonSeparator) {
                end = i;
                break;
            }
        } else {
            matchedNonSeparator = true;
        }
    }
    if (end === -1) {
        return isPosixPathSeparator(path.charCodeAt(0)) ? "/" : ".";
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
}
function basename1(path, suffix = "") {
    assertPath(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
    const lastSegment = lastPathSegment(path, isPosixPathSeparator);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPosixPathSeparator);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname1(path) {
    assertPath(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path.length - 1; i >= 0; --i){
        const code = path.charCodeAt(i);
        if (isPosixPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("/", pathObject);
}
function parse1(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = isPosixPathSeparator(path.charCodeAt(0));
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path.charCodeAt(i);
        if (isPosixPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
        ret.base = ret.base || "/";
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) {
        ret.dir = stripTrailingSeparators(path.slice(0, startPart - 1), isPosixPathSeparator);
    } else if (isAbsolute) ret.dir = "/";
    return ret;
}
function fromFileUrl1(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl1(path) {
    if (!isAbsolute1(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod1 = {
    sep: sep1,
    delimiter: delimiter1,
    resolve: resolve1,
    normalize: normalize1,
    isAbsolute: isAbsolute1,
    join: join1,
    relative: relative1,
    toNamespacedPath: toNamespacedPath1,
    dirname: dirname1,
    basename: basename1,
    extname: extname1,
    format: format1,
    parse: parse1,
    fromFileUrl: fromFileUrl1,
    toFileUrl: toFileUrl1
};
const path = isWindows1 ? mod : mod1;
const { join: join2 , normalize: normalize2  } = path;
const path1 = isWindows1 ? mod : mod1;
const { basename: basename2 , delimiter: delimiter2 , dirname: dirname2 , extname: extname2 , format: format2 , fromFileUrl: fromFileUrl2 , isAbsolute: isAbsolute2 , join: join3 , normalize: normalize3 , parse: parse2 , relative: relative2 , resolve: resolve2 , sep: sep2 , toFileUrl: toFileUrl2 , toNamespacedPath: toNamespacedPath2  } = path1;
const sqlCreateSpotprice = "CREATE TABLE IF NOT EXISTS spotprice (id INTEGER PRIMARY KEY AUTOINCREMENT, country VARCHAR(3), area VARCHAR(3), spotprice DOUBLE, date TEXT, period INT)";
const sqlCreateExchangeRate = "CREATE TABLE IF NOT EXISTS exchangerate (id INTEGER PRIMARY KEY AUTOINCREMENT, currency VARCHAR(3), value DOUBLE, date TEXT, period INT);";
const sqlCreateGeneration = "CREATE TABLE IF NOT EXISTS generation (id INTEGER PRIMARY KEY AUTOINCREMENT, area VARCHAR(16), period INT, value DOUBLE, psr TEXT, interval TEXT);";
const sqlCreateLoad = "CREATE TABLE IF NOT EXISTS load (id INTEGER PRIMARY KEY AUTOINCREMENT, area VARCHAR(16), period INT, value DOUBLE, interval TEXT);";
const sqlCreateUpdates = "CREATE TABLE IF NOT EXISTS updates (name TEXT, applied INT);";
const sqlCreatePsr = "CREATE TABLE IF NOT EXISTS psr (psr TEXT, psr_group TEXT);";
`
WITH 
distinct_generation AS (
    SELECT 
        generation.area,
        generation.period,
        generation.interval,
        generation.consumption,
        generation.value,
        generation.psr,
        ROW_NUMBER() OVER(PARTITION BY generation.area, generation.interval,generation.psr,generation.consumption ORDER BY generation.period DESC) AS row_number
    FROM
        generation
    WHERE
        period >= (?)
),
generation_per_psr_group AS (
    SELECT 
        g.area,
        MIN(g.period) as period,
        g.interval,
        psr.psr_group,
        g.consumption,
        SUM(CASE WHEN g.consumption THEN 0-g.value ELSE g.value END) as value
    FROM
        distinct_generation as g
        LEFT JOIN psr ON g.psr = psr.psr
    WHERE
        row_number = 1
    GROUP BY
        g.area,
        g.interval,
        g.consumption,
        psr.psr_group
),
generation_total AS (
    SELECT 
        gen.area,
        MIN(gen.period) as period,
        gen.interval,
        SUM(gen.value) as sum_generation_value,
        MAX(gen.value) as max_generation_value,
        FIRST_VALUE(gen.psr_group) OVER (
            PARTITION BY       
                gen.area,
                gen.interval
            ORDER BY 
                SUM(gen.value) DESC
        ) as primary_psr_group
    FROM
        generation_per_psr_group as gen
    GROUP BY
        gen.area,
        gen.interval
)
SELECT 
    generation_total.area,
    generation_total.period,
    generation_total.interval,
    generation_total.primary_psr_group,
    generation_total.max_generation_value as primary_psr_group_generation,
    generation_total.sum_generation_value as generation_total,
    [load].value as load_total,
    generation_total.sum_generation_value-[load].value as net_generation
FROM
    generation_total
    LEFT JOIN [load]
        ON 
            generation_total.area = [load].area 
            AND generation_total.period = [load].period 
            AND generation_total.interval = [load].interval`;
`
    WITH 
    distinct_generation AS (
        SELECT 
            DISTINCT
            generation.area,
            generation.period,
            generation.interval,
            generation.consumption,
            generation.value,
            generation.psr
        FROM
            generation
        WHERE
            area = (?)
            AND period >= (?)
            AND period <=(?)
    ),
    generation_per_psr_group AS (
        SELECT 
            g.area,
            g.period,
            g.interval,
            psr.psr_group,
            SUM(CASE WHEN g.consumption THEN 0-g.value ELSE g.value END) as value
        FROM
            distinct_generation as g
            LEFT JOIN psr ON g.psr = psr.psr
        GROUP BY
            g.area,
            g.period,
            g.interval,
            psr.psr_group
    ),
    generation_total AS (
        SELECT 
            gen.area,
            gen.period,
            gen.interval,
            SUM(gen.value) as sum_generation_value
        FROM
            generation_per_psr_group as gen
        GROUP BY
            gen.area,
            gen.period,
            gen.interval
    ),
    generation_and_load AS (
    SELECT 
        generation_total.period,
        generation_total.sum_generation_value-[load].value as net_generation
    FROM
        generation_total
        INNER JOIN [load]
            ON 
                generation_total.area = [load].area 
                AND generation_total.period = [load].period 
                AND generation_total.interval = [load].interval)
    SELECT
        *
    FROM
        generation_and_load`;
`
    SELECT 
        [[groupby]] as grouping,
        AVG(spotprice.spotprice) as avg,
        min(spotprice.spotprice) as min,
        max(spotprice.spotprice) as max
    FROM
        spotprice
    WHERE 
        [[areaField]]=(?) 
        AND spotprice.period >= (?) 
        AND spotprice.period <= (?)
        AND spotprice.interval = (?)
    GROUP BY
        [[groupby]];`;
`
    SELECT
        DISTINCT
        country,
        period,
        interval,
        AVG(spotprice)
    FROM
        spotprice
    WHERE
        period = (?)
    GROUP BY
        country,
        period,
        interval`;
`
    SELECT
        area,
        period,
        interval,
        spotprice
    FROM
        spotprice
    WHERE
        period = (?)
    GROUP BY
        area,
        period,
        interval,
        spotprice`;
`
WITH er AS (
    SELECT
        e.value
    FROM
        exchangerate e
    WHERE
        currency=(?)
    ORDER BY
        period DESC
    LIMIT
        1
)
SELECT 
    [[groupby]],
    MIN(spotprice)*er.value as avg,
    MAX(spotprice)*er.value as min,
    avg(spotprice)*er.value as max
FROM 
    spotprice 
    LEFT JOIN er 
WHERE
    [[areaField]]=(?)
    AND spotprice.period>=(?)
    AND spotprice.period<=(?)
    AND spotprice.interval=(?)
GROUP BY
    [[groupby]];
`;
`
    SELECT 
        DISTINCT
        period,
        value,
        interval
    FROM
        load
    WHERE 
        area=(?) 
        AND period >= (?) 
        AND period < (?)
        AND interval = (?);`;
`
WITH 
distinct_generation AS (
    SELECT 
        DISTINCT
        generation.area,
        generation.period,
        generation.interval,
        generation.consumption,
        generation.value,
        generation.psr
    FROM
        generation
)
        SELECT 
            period,
            psr_group,
            SUM(CASE WHEN consumption THEN 0-value ELSE value END) as value,
            consumption,
            COUNT(distinct_generation.psr) as count_psr
        FROM
            distinct_generation
            LEFT JOIN psr ON psr.psr = distinct_generation.psr
        WHERE 
            area=(?) 
            AND period >= (?) 
            AND period < (?)
            AND interval = (?)
        GROUP BY
            period,
            psr_group,
            interval,
            consumption;`;
`
SELECT
    DISTINCT
    e.currency,
    e.value
FROM
    exchangerate e
WHERE
    period=(SELECT MAX(period) FROM exchangerate);`;
const sqlAppliedUpdates = `SELECT
    name,
    applied
FROM
    updates;`;
`
SELECT
    outage.start_date,
    outage.end_date,
    outage.resource_name,
    outage.business_type,
    outage.location,
    outage.country,
    outage.psr_name,
    outage.psr_nominal_power,
    outage.psr_nominal_power_unit,
    outage.psr_type,
    outage.reason_code,
    outage.reason_text,
    outage_availability.*
FROM
    outage
    LEFT JOIN outage_availability ON outage.mrid = outage_availability.mrid AND outage_availability.start_date < (?) AND outage_availability.end_date > (?)
WHERE
    country=(?)
    AND outage.start_date < (?)
    AND outage.end_date > (?)
`;
`
SELECT
    outage.start_date,
    outage.end_date,
    outage.resource_name,
    outage.business_type,
    outage.location,
    outage.country,
    outage.psr_name,
    outage.psr_nominal_power,
    outage.psr_nominal_power_unit,
    outage.psr_type,
    outage.reason_code,
    outage.reason_text
FROM
    outage
WHERE
    country=(?)
    AND outage.start_date > (?)
ORDER BY
    start_date ASC
`;
let level = "normal";
const log = (type, t)=>{
    if (type == "debug" && level != "debug") return;
    let fn;
    if (type === "log") fn = console.log;
    else if (type === "info") fn = console.info;
    else if (type === "error") fn = console.error;
    else if (type === "debug") fn = console.debug;
    else throw new Error("Invalid log type, cannot log: " + t);
    if (fn) {
        if (false) {
            fn(new Date().toLocaleString("sv-SE"), "Backend:", t);
        } else {
            fn(t);
        }
    }
};
const MemCache = new Map();
const InvalidateCache = (realm)=>{
    if (MemCache.has(realm)) {
        const currentRealm = MemCache.get(realm);
        currentRealm.clear();
    }
};
const DBUpdates = [
    {
        name: "add_consumption_to_generation",
        sql: "ALTER TABLE generation ADD consumption INTEGER DEFAULT(0);"
    },
    {
        name: "add_interval_to_spotprice",
        sql: 'ALTER TABLE spotprice ADD interval TEXT DEFAULT "PT60M";'
    },
    {
        name: "create_spotprice_area_period_index",
        sql: "CREATE INDEX spotprice_area_period ON spotprice (area,period);"
    },
    {
        name: "create_load_area_period_index",
        sql: "CREATE INDEX load_area_period ON load (area,period);"
    },
    {
        name: "create_generation_area_period_index",
        sql: "CREATE INDEX generation_area_period ON generation (area, period);"
    },
    {
        name: "delete_spotprice_date_column",
        sql: "ALTER TABLE spotprice DROP COLUMN date"
    },
    {
        name: "delete_german_and_austrian_history",
        sql: "DELETE FROM spotprice WHERE country='de' OR country='at'"
    },
    {
        name: "insert_psr_groups",
        sql: `INSERT INTO psr
        (psr,psr_group)
        VALUES
        ('B01','other'),
        ('B02','coal'),
        ('B03','gas'),
        ('B04','gas'),
        ('B05','coal'),
        ('B06','oil'),
        ('B07','oil'),
        ('B08','peat'),
        ('B09','other'),
        ('B10','water'),
        ('B11','water'),
        ('B12','water'),
        ('B13','water'),
        ('B14','nuclear'),
        ('B15','other'),
        ('B16','solar'),
        ('B17','other'),
        ('B18','wind'),
        ('B19','wind'),
        ('B20','other');`
    },
    {
        name: "bugfix_biomass_psr",
        sql: `UPDATE psr SET psr_group='other' WHERE psr='B01';`
    },
    {
        name: "add_generation_period_index",
        sql: `CREATE INDEX period ON generation (
      period
    );`
    },
    {
        name: "add_spotprice_period_index",
        sql: `CREATE INDEX spotprice_period ON spotprice (
      period
    );`
    },
    {
        name: "add_outage_table",
        sql: `CREATE TABLE outage (
        mrid                   TEXT    PRIMARY KEY
                                      UNIQUE
                                      NOT NULL,
        revision               NUMERIC,
        business_type          TEXT,
        document_type          TEXT,
        start_date             NUMERIC,
        end_date               NUMERIC,
        resource_name          TEXT,
        location               TEXT,
        country                TEXT,
        psr_name               TEXT,
        psr_nominal_power_unit TEXT,
        psr_nominal_power      NUMERIC,
        psr_type               TEXT,
        reason_code            TEXT,
        reason_text            TEXT
    );`
    },
    {
        name: "add_outage_availability_table",
        sql: `CREATE TABLE outage_availability (
        mrid     TEXT NOT NULL,
        start_date    NUMERIC,
        end_date    NUMERIC,
        quantity NUMERIC
    );`
    }
];
let database;
try {
    const path = resolve2(Deno.cwd(), "./db/"), fileName = resolve2(path, "main.db");
    await Deno.mkdir(path, {
        recursive: true
    });
    database = new DB(fileName);
    database.query(sqlCreateSpotprice);
    database.query(sqlCreateExchangeRate);
    database.query(sqlCreateGeneration);
    database.query(sqlCreateLoad);
    database.query(sqlCreateUpdates);
    database.query(sqlCreatePsr);
    const appliedUpdates = database.query(sqlAppliedUpdates);
    for (const update of DBUpdates){
        if (!appliedUpdates.find((r)=>r[0] == update.name)) {
            log("log", `Applying db update '${update.name}'`);
            try {
                database.query(update.sql);
                database.query("INSERT INTO updates(name, applied) VALUES(?,?)", [
                    update.name,
                    1
                ]);
            } catch (e) {
                log("log", `Database update '${update.name}' failed. Error: ${e.code} ${e}`);
            } finally{
                log("log", `Database update '${update.name}' finalized`);
            }
        }
    }
} catch (_e) {
    console.error("Fatal: Could not open database");
    Deno.exit(1);
}
const sleep = (ms)=>new Promise((r)=>setTimeout(r, ms));
const UpdateLoadForArea = async (area)=>{
    const dateToday = new Date(), dateYesterday = new Date();
    dateYesterday.setDate(dateYesterday.getDate() - 1);
    log("info", `Getting load for ${area} ${dateToday.toLocaleString()}-${dateYesterday.toLocaleString()}`);
    try {
        const result = await EntsoeLoad(area, dateYesterday, dateToday), preparedQuery = database.prepareQuery("INSERT INTO load (area, value, period, interval) VALUES (?,?,?,?)");
        if (result.length) {
            log("info", `Got ${result.length} rows`);
            for (const row of result){
                preparedQuery.execute([
                    area,
                    row.quantity,
                    row.date.getTime(),
                    row.interval
                ]);
                await sleep(1);
            }
        } else {
            log("info", `No new data for ${area}`);
        }
    } catch (e) {
        log("error", `Entsoe request failed ${e}`);
    }
};
const HourlyConsumptionUpdate = async ()=>{
    log("info", `Scheduled data update started`);
    try {
        for (const country of countries){
            await UpdateLoadForArea(country.cty);
            await sleep(2000);
            for (const area of country.areas){
                await UpdateLoadForArea(area.id);
                await sleep(2000);
            }
        }
        log("info", `Cleaning up.`);
        database.query("DELETE FROM load WHERE id NOT IN (SELECT MAX(id) FROM load GROUP BY area,period,interval)");
        if (database.totalChanges) {
            log("info", `Deleted ${database.totalChanges} duplicate rows.`);
        }
    } catch (e) {
        log("error", `Error occured while updating data, skipping. Error: ${e}`);
    }
    log("info", `Database changed, clearing cache, realm load.`);
    InvalidateCache("generation");
    InvalidateCache("load");
    log("info", `Scheduled data update done`);
};
HourlyConsumptionUpdate();
